from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.ScriptLanguageExtension as __scriptlanguageextension__
import py4godot.classes.r as __r__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.GDScript as __gdscript__
import py4godot.classes.n as __n__
import py4godot.classes.S as __s__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Object as __object__
import py4godot.classes.m as __m__
import py4godot.classes.i as __i__
import py4godot.classes.ScriptLanguage as __scriptlanguage__
import py4godot.classes.N as __n__
import py4godot.classes.p as __p__
import py4godot.classes.Script as __script__
import py4godot.classes.o as __o__
import py4godot.classes.y as __y__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.ScriptExtension as __scriptextension__



class ScriptExtension(__script__.Script):
  """
"""

  @staticmethod
  def constructor()->ScriptExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->ScriptExtension:pass


  def _editor_can_reload_from_file(self)->bool:
    """
"""
    pass

  def _can_instantiate(self)->bool:
    """
"""
    pass

  def _get_base_script(self)->__scriptextension__.ScriptExtension|__script__.Script|__gdscript__.GDScript:
    """
"""
    pass

  def _get_global_name(self)->__core__.StringName:
    """
"""
    pass

  def _inherits_script(self, script:__script__.Script)->bool:
    """
"""
    pass

  def _get_instance_base_type(self)->__core__.StringName:
    """
"""
    pass

  def _instance_create(self, for_object:__object__.Object)->void*:
    """
"""
    pass

  def _placeholder_instance_create(self, for_object:__object__.Object)->void*:
    """
"""
    pass

  def _instance_has(self, object:__object__.Object)->bool:
    """
"""
    pass

  def _has_source_code(self)->bool:
    """
"""
    pass

  def _get_source_code(self)->str:
    """
"""
    pass

  def _set_source_code(self, code:str)->None:
    """
"""
    pass

  def _reload(self, keep_state:bool)->int:
    """
"""
    pass

  def _get_doc_class_name(self)->__core__.StringName:
    """
"""
    pass

  def _get_documentation(self)->typedarray::Dictionary:
    """
"""
    pass

  def _get_class_icon_path(self)->str:
    """
"""
    pass

  def _has_method(self, method:__core__.StringName|str)->bool:
    """
"""
    pass

  def _has_static_method(self, method:__core__.StringName|str)->bool:
    """
"""
    pass

  def _get_script_method_argument_count(self, method:__core__.StringName|str)->Any:
    """
				Return the expected argument count for the given `method`, or `null` if it can't be determined (which will then fall back to the default behavior).
			"""
    pass

  def _get_method_info(self, method:__core__.StringName|str)->__core__.Dictionary:
    """
"""
    pass

  def _is_tool(self)->bool:
    """
"""
    pass

  def _is_valid(self)->bool:
    """
"""
    pass

  def _is_abstract(self)->bool:
    """
				Returns `true` if the script is an abstract script. Abstract scripts cannot be instantiated directly, instead other scripts should inherit them. Abstract scripts will be either unselectable or hidden in the Create New Node dialog (unselectable if there are non-abstract classes inheriting it, otherwise hidden).
			"""
    pass

  def _get_language(self)->__scriptlanguageextension__.ScriptLanguageExtension|__scriptlanguage__.ScriptLanguage:
    """
"""
    pass

  def _has_script_signal(self, signal:__core__.StringName|str)->bool:
    """
"""
    pass

  def _get_script_signal_list(self)->typedarray::Dictionary:
    """
"""
    pass

  def _has_property_default_value(self, property:__core__.StringName|str)->bool:
    """
"""
    pass

  def _get_property_default_value(self, property:__core__.StringName|str)->Any:
    """
"""
    pass

  def _update_exports(self)->None:
    """
"""
    pass

  def _get_script_method_list(self)->typedarray::Dictionary:
    """
"""
    pass

  def _get_script_property_list(self)->typedarray::Dictionary:
    """
"""
    pass

  def _get_member_line(self, member:__core__.StringName|str)->int:
    """
"""
    pass

  def _get_constants(self)->__core__.Dictionary:
    """
"""
    pass

  def _get_members(self)->typedarray::StringName:
    """
"""
    pass

  def _is_placeholder_fallback_enabled(self)->bool:
    """
"""
    pass

  def _get_rpc_config(self)->Any:
    """
"""
    pass


