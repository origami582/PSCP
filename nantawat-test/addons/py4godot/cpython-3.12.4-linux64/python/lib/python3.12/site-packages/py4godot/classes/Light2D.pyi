from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.DirectionalLight2D as __directionallight2d__


class ShadowFilter:
  SHADOW_FILTER_NONE:int = 0
  SHADOW_FILTER_PCF5:int = 1
  SHADOW_FILTER_PCF13:int = 2
class BlendMode:
  BLEND_MODE_ADD:int = 0
  BLEND_MODE_SUB:int = 1
  BLEND_MODE_MIX:int = 2


class Light2D(__node2d__.Node2D):
  """
		Casts light in a 2D environment. A light is defined as a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).
	"""

  @staticmethod
  def constructor()->Light2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Light2D:pass


  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def editor_only(self)->bool:
    """"""
    pass
  @editor_only.setter
  def editor_only(self,  value:bool)->None:
    """"""
    pass
  @property
  def color(self)->__core__.Color:
    """"""
    pass
  @color.setter
  def color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def energy(self)->float:
    """"""
    pass
  @energy.setter
  def energy(self,  value:float)->None:
    """"""
    pass
  @property
  def blend_mode(self)->int:
    """"""
    pass
  @blend_mode.setter
  def blend_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def range_z_min(self)->int:
    """"""
    pass
  @range_z_min.setter
  def range_z_min(self,  value:int)->None:
    """"""
    pass
  @property
  def range_z_max(self)->int:
    """"""
    pass
  @range_z_max.setter
  def range_z_max(self,  value:int)->None:
    """"""
    pass
  @property
  def range_layer_min(self)->int:
    """"""
    pass
  @range_layer_min.setter
  def range_layer_min(self,  value:int)->None:
    """"""
    pass
  @property
  def range_layer_max(self)->int:
    """"""
    pass
  @range_layer_max.setter
  def range_layer_max(self,  value:int)->None:
    """"""
    pass
  @property
  def range_item_cull_mask(self)->int:
    """"""
    pass
  @range_item_cull_mask.setter
  def range_item_cull_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def shadow_enabled(self)->bool:
    """"""
    pass
  @shadow_enabled.setter
  def shadow_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def shadow_color(self)->__core__.Color:
    """"""
    pass
  @shadow_color.setter
  def shadow_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def shadow_filter(self)->int:
    """"""
    pass
  @shadow_filter.setter
  def shadow_filter(self,  value:int)->None:
    """"""
    pass
  @property
  def shadow_filter_smooth(self)->float:
    """"""
    pass
  @shadow_filter_smooth.setter
  def shadow_filter_smooth(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_item_cull_mask(self)->int:
    """"""
    pass
  @shadow_item_cull_mask.setter
  def shadow_item_cull_mask(self,  value:int)->None:
    """"""
    pass
  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_enabled(self)->bool:
    """"""
    pass

  def set_editor_only(self, editor_only:bool)->None:
    """"""
    pass

  def is_editor_only(self)->bool:
    """"""
    pass

  def set_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_color(self)->__core__.Color:
    """"""
    pass

  def set_energy(self, energy:float)->None:
    """"""
    pass

  def get_energy(self)->float:
    """"""
    pass

  def set_z_range_min(self, z:int)->None:
    """"""
    pass

  def get_z_range_min(self)->int:
    """"""
    pass

  def set_z_range_max(self, z:int)->None:
    """"""
    pass

  def get_z_range_max(self)->int:
    """"""
    pass

  def set_layer_range_min(self, layer:int)->None:
    """"""
    pass

  def get_layer_range_min(self)->int:
    """"""
    pass

  def set_layer_range_max(self, layer:int)->None:
    """"""
    pass

  def get_layer_range_max(self)->int:
    """"""
    pass

  def set_item_cull_mask(self, item_cull_mask:int)->None:
    """"""
    pass

  def get_item_cull_mask(self)->int:
    """"""
    pass

  def set_item_shadow_cull_mask(self, item_shadow_cull_mask:int)->None:
    """"""
    pass

  def get_item_shadow_cull_mask(self)->int:
    """"""
    pass

  def set_shadow_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_shadow_enabled(self)->bool:
    """"""
    pass

  def set_shadow_smooth(self, smooth:float)->None:
    """"""
    pass

  def get_shadow_smooth(self)->float:
    """"""
    pass

  def set_shadow_filter(self, filter:int )->None:
    """"""
    pass

  def get_shadow_filter(self)->int:
    """"""
    pass

  def set_shadow_color(self, shadow_color:__core__.Color)->None:
    """"""
    pass

  def get_shadow_color(self)->__core__.Color:
    """"""
    pass

  def set_blend_mode(self, mode:int )->None:
    """"""
    pass

  def get_blend_mode(self)->int:
    """"""
    pass

  def set_height(self, height:float)->None:
    """
				Sets the light's height, which is used in 2D normal mapping. See `PointLight2D.height` and `DirectionalLight2D.height`.
			"""
    pass

  def get_height(self)->float:
    """
				Returns the light's height, which is used in 2D normal mapping. See `PointLight2D.height` and `DirectionalLight2D.height`.
			"""
    pass


