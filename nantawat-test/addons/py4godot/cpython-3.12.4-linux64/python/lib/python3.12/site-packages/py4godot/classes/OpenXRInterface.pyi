from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRInterface as __openxrinterface__
import py4godot.classes.XRInterface as __xrinterface__


class Hand:
  HAND_LEFT:int = 0
  HAND_RIGHT:int = 1
  HAND_MAX:int = 2
class HandMotionRange:
  HAND_MOTION_RANGE_UNOBSTRUCTED:int = 0
  HAND_MOTION_RANGE_CONFORM_TO_CONTROLLER:int = 1
  HAND_MOTION_RANGE_MAX:int = 2
class HandTrackedSource:
  HAND_TRACKED_SOURCE_UNKNOWN:int = 0
  HAND_TRACKED_SOURCE_UNOBSTRUCTED:int = 1
  HAND_TRACKED_SOURCE_CONTROLLER:int = 2
  HAND_TRACKED_SOURCE_MAX:int = 3
class HandJoints:
  HAND_JOINT_PALM:int = 0
  HAND_JOINT_WRIST:int = 1
  HAND_JOINT_THUMB_METACARPAL:int = 2
  HAND_JOINT_THUMB_PROXIMAL:int = 3
  HAND_JOINT_THUMB_DISTAL:int = 4
  HAND_JOINT_THUMB_TIP:int = 5
  HAND_JOINT_INDEX_METACARPAL:int = 6
  HAND_JOINT_INDEX_PROXIMAL:int = 7
  HAND_JOINT_INDEX_INTERMEDIATE:int = 8
  HAND_JOINT_INDEX_DISTAL:int = 9
  HAND_JOINT_INDEX_TIP:int = 10
  HAND_JOINT_MIDDLE_METACARPAL:int = 11
  HAND_JOINT_MIDDLE_PROXIMAL:int = 12
  HAND_JOINT_MIDDLE_INTERMEDIATE:int = 13
  HAND_JOINT_MIDDLE_DISTAL:int = 14
  HAND_JOINT_MIDDLE_TIP:int = 15
  HAND_JOINT_RING_METACARPAL:int = 16
  HAND_JOINT_RING_PROXIMAL:int = 17
  HAND_JOINT_RING_INTERMEDIATE:int = 18
  HAND_JOINT_RING_DISTAL:int = 19
  HAND_JOINT_RING_TIP:int = 20
  HAND_JOINT_LITTLE_METACARPAL:int = 21
  HAND_JOINT_LITTLE_PROXIMAL:int = 22
  HAND_JOINT_LITTLE_INTERMEDIATE:int = 23
  HAND_JOINT_LITTLE_DISTAL:int = 24
  HAND_JOINT_LITTLE_TIP:int = 25
  HAND_JOINT_MAX:int = 26
class HandJointFlags:
  HAND_JOINT_NONE:int = 0
  HAND_JOINT_ORIENTATION_VALID:int = 1
  HAND_JOINT_ORIENTATION_TRACKED:int = 2
  HAND_JOINT_POSITION_VALID:int = 4
  HAND_JOINT_POSITION_TRACKED:int = 8
  HAND_JOINT_LINEAR_VELOCITY_VALID:int = 16
  HAND_JOINT_ANGULAR_VELOCITY_VALID:int = 32


class OpenXRInterface(__xrinterface__.XRInterface):
  """"""
  session_begun: BuiltinSignal
  session_stopping: BuiltinSignal
  session_focussed: BuiltinSignal
  session_visible: BuiltinSignal
  session_loss_pending: BuiltinSignal
  instance_exiting: BuiltinSignal
  pose_recentered: BuiltinSignal
  refresh_rate_changed: BuiltinSignal

  @staticmethod
  def constructor()->OpenXRInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRInterface:pass


  @property
  def display_refresh_rate(self)->float:
    """"""
    pass
  @display_refresh_rate.setter
  def display_refresh_rate(self,  value:float)->None:
    """"""
    pass
  @property
  def render_target_size_multiplier(self)->float:
    """"""
    pass
  @render_target_size_multiplier.setter
  def render_target_size_multiplier(self,  value:float)->None:
    """"""
    pass
  @property
  def foveation_level(self)->int:
    """"""
    pass
  @foveation_level.setter
  def foveation_level(self,  value:int)->None:
    """"""
    pass
  @property
  def foveation_dynamic(self)->bool:
    """"""
    pass
  @foveation_dynamic.setter
  def foveation_dynamic(self,  value:bool)->None:
    """"""
    pass
  @property
  def vrs_min_radius(self)->float:
    """"""
    pass
  @vrs_min_radius.setter
  def vrs_min_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def vrs_strength(self)->float:
    """"""
    pass
  @vrs_strength.setter
  def vrs_strength(self,  value:float)->None:
    """"""
    pass
  def get_display_refresh_rate(self)->float:
    """"""
    pass

  def set_display_refresh_rate(self, refresh_rate:float)->None:
    """"""
    pass

  def get_render_target_size_multiplier(self)->float:
    """"""
    pass

  def set_render_target_size_multiplier(self, multiplier:float)->None:
    """"""
    pass

  def is_foveation_supported(self)->bool:
    """"""
    pass

  def get_foveation_level(self)->int:
    """"""
    pass

  def set_foveation_level(self, foveation_level:int)->None:
    """"""
    pass

  def get_foveation_dynamic(self)->bool:
    """"""
    pass

  def set_foveation_dynamic(self, foveation_dynamic:bool)->None:
    """"""
    pass

  def is_action_set_active(self, name:str)->bool:
    """"""
    pass

  def set_action_set_active(self, name:str, active:bool)->None:
    """"""
    pass

  def get_action_sets(self)->__core__.Array:
    """"""
    pass

  def get_available_display_refresh_rates(self)->__core__.Array:
    """"""
    pass

  def set_motion_range(self, hand:int , motion_range:int )->None:
    """"""
    pass

  def get_motion_range(self, hand:int )->int:
    """"""
    pass

  def get_hand_tracking_source(self, hand:int )->int:
    """"""
    pass

  def get_hand_joint_flags(self, hand:int , joint:int )->int:
    """"""
    pass

  def get_hand_joint_rotation(self, hand:int , joint:int )->__core__.Quaternion:
    """"""
    pass

  def get_hand_joint_position(self, hand:int , joint:int )->__core__.Vector3:
    """"""
    pass

  def get_hand_joint_radius(self, hand:int , joint:int )->float:
    """"""
    pass

  def get_hand_joint_linear_velocity(self, hand:int , joint:int )->__core__.Vector3:
    """"""
    pass

  def get_hand_joint_angular_velocity(self, hand:int , joint:int )->__core__.Vector3:
    """"""
    pass

  def is_hand_tracking_supported(self)->bool:
    """"""
    pass

  def is_hand_interaction_supported(self)->bool:
    """"""
    pass

  def is_eye_gaze_interaction_supported(self)->bool:
    """"""
    pass

  def get_vrs_min_radius(self)->float:
    """"""
    pass

  def set_vrs_min_radius(self, radius:float)->None:
    """"""
    pass

  def get_vrs_strength(self)->float:
    """"""
    pass

  def set_vrs_strength(self, strength:float)->None:
    """"""
    pass


