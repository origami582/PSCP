from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Range as __range__



class EditorSpinSlider(__range__.Range):
  """
		This `Control` node is used in the editor's Inspector dock to allow editing of numeric values. Can be used with `EditorInspectorPlugin` to recreate the same behavior.
		If the `Range.step` value is `1`, the `EditorSpinSlider` will display up/down arrows, similar to `SpinBox`. If the `Range.step` value is not `1`, a slider will be displayed instead.
	"""
  grabbed: BuiltinSignal
  ungrabbed: BuiltinSignal
  updown_pressed: BuiltinSignal
  value_focus_entered: BuiltinSignal
  value_focus_exited: BuiltinSignal

  @staticmethod
  def constructor()->EditorSpinSlider:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorSpinSlider:pass


  @property
  def label(self)->str:
    """"""
    pass
  @label.setter
  def label(self,  value:str)->None:
    """"""
    pass
  @property
  def suffix(self)->str:
    """"""
    pass
  @suffix.setter
  def suffix(self,  value:str)->None:
    """"""
    pass
  @property
  def read_only(self)->bool:
    """"""
    pass
  @read_only.setter
  def read_only(self,  value:bool)->None:
    """"""
    pass
  @property
  def flat(self)->bool:
    """"""
    pass
  @flat.setter
  def flat(self,  value:bool)->None:
    """"""
    pass
  @property
  def hide_slider(self)->bool:
    """"""
    pass
  @hide_slider.setter
  def hide_slider(self,  value:bool)->None:
    """"""
    pass
  @property
  def editing_integer(self)->bool:
    """"""
    pass
  @editing_integer.setter
  def editing_integer(self,  value:bool)->None:
    """"""
    pass
  def set_label(self, label:str)->None:
    """"""
    pass

  def get_label(self)->str:
    """"""
    pass

  def set_suffix(self, suffix:str)->None:
    """"""
    pass

  def get_suffix(self)->str:
    """"""
    pass

  def set_read_only(self, read_only:bool)->None:
    """"""
    pass

  def is_read_only(self)->bool:
    """"""
    pass

  def set_flat(self, flat:bool)->None:
    """"""
    pass

  def is_flat(self)->bool:
    """"""
    pass

  def set_hide_slider(self, hide_slider:bool)->None:
    """"""
    pass

  def is_hiding_slider(self)->bool:
    """"""
    pass

  def set_editing_integer(self, editing_integer:bool)->None:
    """"""
    pass

  def is_editing_integer(self)->bool:
    """"""
    pass


