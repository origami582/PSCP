from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__



class Bone2D(__node2d__.Node2D):
  """
		A hierarchy of `Bone2D`s can be bound to a `Skeleton2D` to control and animate other `Node2D` nodes.
		You can use `Bone2D` and `Skeleton2D` nodes to animate 2D meshes created with the `Polygon2D` UV editor.
		Each bone has a `rest` transform that you can reset to with `apply_rest`. These rest poses are relative to the bone's parent.
		If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses.
	"""

  @staticmethod
  def constructor()->Bone2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Bone2D:pass


  @property
  def rest(self)->__core__.Transform2D:
    """"""
    pass
  @rest.setter
  def rest(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  def set_rest(self, rest:__core__.Transform2D)->None:
    """"""
    pass

  def get_rest(self)->__core__.Transform2D:
    """"""
    pass

  def apply_rest(self)->None:
    """
				Resets the bone to the rest pose. This is equivalent to setting `Node2D.transform` to `rest`.
			"""
    pass

  def get_skeleton_rest(self)->__core__.Transform2D:
    """
				Returns the node's `rest` `Transform2D` if it doesn't have a parent, or its rest pose relative to its parent.
			"""
    pass

  def get_index_in_skeleton(self)->int:
    """
				Returns the node's index as part of the entire skeleton. See `Skeleton2D`.
			"""
    pass

  def set_autocalculate_length_and_angle(self, auto_calculate:bool)->None:
    """
				When set to `true`, the `Bone2D` node will attempt to automatically calculate the bone angle and length using the first child `Bone2D` node, if one exists. If none exist, the `Bone2D` cannot automatically calculate these values and will print a warning.
			"""
    pass

  def get_autocalculate_length_and_angle(self)->bool:
    """
				Returns whether this `Bone2D` is going to autocalculate its length and bone angle using its first `Bone2D` child node, if one exists. If there are no `Bone2D` children, then it cannot autocalculate these values and will print a warning.
			"""
    pass

  def set_length(self, length:float)->None:
    """
				Sets the length of the bone in the `Bone2D`.
			"""
    pass

  def get_length(self)->float:
    """
				Returns the length of the bone in the `Bone2D` node.
			"""
    pass

  def set_bone_angle(self, angle:float)->None:
    """
				Sets the bone angle for the `Bone2D`. This is typically set to the rotation from the `Bone2D` to a child `Bone2D` node.
				**Note:** This is different from the `Bone2D`'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the `Bone2D`'s `Node2D.transform`.
			"""
    pass

  def get_bone_angle(self)->float:
    """
				Returns the angle of the bone in the `Bone2D`.
				**Note:** This is different from the `Bone2D`'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the `Bone2D`'s `Node2D.transform`.
			"""
    pass


