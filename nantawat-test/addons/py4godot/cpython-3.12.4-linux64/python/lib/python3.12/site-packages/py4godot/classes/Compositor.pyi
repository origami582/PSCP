from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.C as __c__
import py4godot.classes.m as __m__
import py4godot.classes.i as __i__
import py4godot.classes.r as __r__
import py4godot.classes.s as __s__
import py4godot.classes.t as __t__
import py4godot.classes.E as __e__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.f as __f__
import py4godot.classes.o as __o__
import py4godot.classes.y as __y__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.Resource as __resource__
import py4godot.classes.T as __t__



class Compositor(__resource__.Resource):
  """
		The compositor resource stores attributes used to customize how a `Viewport` is rendered.
	"""

  @staticmethod
  def constructor()->Compositor:pass



  @staticmethod
  def cast(other:__object__.Object)->Compositor:pass


  @property
  def compositor_effects(self)->typedarray::24/17:CompositorEffect:
    """"""
    pass
  @compositor_effects.setter
  def compositor_effects(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_compositor_effects(self, compositor_effects:__core__.Array)->None:
    """"""
    pass

  def get_compositor_effects(self)->typedarray::CompositorEffect:
    """"""
    pass


