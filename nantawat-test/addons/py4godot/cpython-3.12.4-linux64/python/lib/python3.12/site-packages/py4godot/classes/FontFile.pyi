from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.i as __i__
import py4godot.classes.Font as __font__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.Image as __image__
import py4godot.classes.2 as __2__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.y as __y__



class FontFile(__font__.Font):
  """
		`FontFile` contains a set of glyphs to represent Unicode characters imported from a font file, as well as a cache of rasterized glyphs, and a set of fallback `Font`s to use.
		Use `FontVariation` to access specific OpenType variation of the font, create simulated bold / slanted version, and draw lines of text.
		For more complex text processing, use `FontVariation` in conjunction with `TextLine` or `TextParagraph`.
		Supported font formats:
		- Dynamic font importer: TrueType (.ttf), TrueType collection (.ttc), OpenType (.otf), OpenType collection (.otc), WOFF (.woff), WOFF2 (.woff2), Type 1 (.pfb, .pfm).
		- Bitmap font importer: AngelCode BMFont (.fnt, .font), text and binary (version 3) format variants.
		- Monospace image font importer: All supported image formats.
		**Note:** A character is a symbol that represents an item (letter, digit etc.) in an abstract way.
		**Note:** A glyph is a bitmap or a shape used to draw one or more characters in a context-dependent manner. Glyph indices are bound to the specific font data source.
		**Note:** If none of the font data sources contain glyphs for a character used in a string, the character in question will be replaced with a box displaying its hexadecimal code.
		
		```gdscript
		var f = load("res://BarlowCondensed-Bold.ttf")
		$Label.add_theme_font_override("font", f)
		$Label.add_theme_font_size_override("font_size", 64)
		```
		
		
	"""

  @staticmethod
  def constructor()->FontFile:pass



  @staticmethod
  def cast(other:__object__.Object)->FontFile:pass


  @property
  def data(self)->__core__.PackedByteArray:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def generate_mipmaps(self)->bool:
    """"""
    pass
  @generate_mipmaps.setter
  def generate_mipmaps(self,  value:bool)->None:
    """"""
    pass
  @property
  def disable_embedded_bitmaps(self)->bool:
    """"""
    pass
  @disable_embedded_bitmaps.setter
  def disable_embedded_bitmaps(self,  value:bool)->None:
    """"""
    pass
  @property
  def antialiasing(self)->int:
    """"""
    pass
  @antialiasing.setter
  def antialiasing(self,  value:int)->None:
    """"""
    pass
  @property
  def font_name(self)->str:
    """"""
    pass
  @font_name.setter
  def font_name(self,  value:str)->None:
    """"""
    pass
  @property
  def style_name(self)->str:
    """"""
    pass
  @style_name.setter
  def style_name(self,  value:str)->None:
    """"""
    pass
  @property
  def font_style(self)->int:
    """"""
    pass
  @font_style.setter
  def font_style(self,  value:int)->None:
    """"""
    pass
  @property
  def font_weight(self)->int:
    """"""
    pass
  @font_weight.setter
  def font_weight(self,  value:int)->None:
    """"""
    pass
  @property
  def font_stretch(self)->int:
    """"""
    pass
  @font_stretch.setter
  def font_stretch(self,  value:int)->None:
    """"""
    pass
  @property
  def subpixel_positioning(self)->int:
    """"""
    pass
  @subpixel_positioning.setter
  def subpixel_positioning(self,  value:int)->None:
    """"""
    pass
  @property
  def keep_rounding_remainders(self)->bool:
    """"""
    pass
  @keep_rounding_remainders.setter
  def keep_rounding_remainders(self,  value:bool)->None:
    """"""
    pass
  @property
  def multichannel_signed_distance_field(self)->bool:
    """"""
    pass
  @multichannel_signed_distance_field.setter
  def multichannel_signed_distance_field(self,  value:bool)->None:
    """"""
    pass
  @property
  def msdf_pixel_range(self)->int:
    """"""
    pass
  @msdf_pixel_range.setter
  def msdf_pixel_range(self,  value:int)->None:
    """"""
    pass
  @property
  def msdf_size(self)->int:
    """"""
    pass
  @msdf_size.setter
  def msdf_size(self,  value:int)->None:
    """"""
    pass
  @property
  def allow_system_fallback(self)->bool:
    """"""
    pass
  @allow_system_fallback.setter
  def allow_system_fallback(self,  value:bool)->None:
    """"""
    pass
  @property
  def force_autohinter(self)->bool:
    """"""
    pass
  @force_autohinter.setter
  def force_autohinter(self,  value:bool)->None:
    """"""
    pass
  @property
  def hinting(self)->int:
    """"""
    pass
  @hinting.setter
  def hinting(self,  value:int)->None:
    """"""
    pass
  @property
  def oversampling(self)->float:
    """"""
    pass
  @oversampling.setter
  def oversampling(self,  value:float)->None:
    """"""
    pass
  @property
  def fixed_size(self)->int:
    """"""
    pass
  @fixed_size.setter
  def fixed_size(self,  value:int)->None:
    """"""
    pass
  @property
  def fixed_size_scale_mode(self)->int:
    """"""
    pass
  @fixed_size_scale_mode.setter
  def fixed_size_scale_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def opentype_feature_overrides(self)->__core__.Dictionary:
    """"""
    pass
  @opentype_feature_overrides.setter
  def opentype_feature_overrides(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def load_bitmap_font(self, path:str)->int:
    """
				Loads an AngelCode BMFont (.fnt, .font) bitmap font from file `path`.
				**Warning:** This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the `user://` directory.
			"""
    pass

  def load_dynamic_font(self, path:str)->int:
    """
				Loads a TrueType (.ttf), OpenType (.otf), WOFF (.woff), WOFF2 (.woff2) or Type 1 (.pfb, .pfm) dynamic font from file `path`.
				**Warning:** This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the `user://` directory.
			"""
    pass

  def set_data(self, data:__core__.PackedByteArray)->None:
    """"""
    pass

  def get_data(self)->__core__.PackedByteArray:
    """"""
    pass

  def set_font_name(self, name:str)->None:
    """"""
    pass

  def set_font_style_name(self, name:str)->None:
    """"""
    pass

  def set_font_style(self, style:int)->None:
    """"""
    pass

  def set_font_weight(self, weight:int)->None:
    """"""
    pass

  def set_font_stretch(self, stretch:int)->None:
    """"""
    pass

  def set_antialiasing(self, antialiasing:int )->None:
    """"""
    pass

  def get_antialiasing(self)->int:
    """"""
    pass

  def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps:bool)->None:
    """"""
    pass

  def get_disable_embedded_bitmaps(self)->bool:
    """"""
    pass

  def set_generate_mipmaps(self, generate_mipmaps:bool)->None:
    """"""
    pass

  def get_generate_mipmaps(self)->bool:
    """"""
    pass

  def set_multichannel_signed_distance_field(self, msdf:bool)->None:
    """"""
    pass

  def is_multichannel_signed_distance_field(self)->bool:
    """"""
    pass

  def set_msdf_pixel_range(self, msdf_pixel_range:int)->None:
    """"""
    pass

  def get_msdf_pixel_range(self)->int:
    """"""
    pass

  def set_msdf_size(self, msdf_size:int)->None:
    """"""
    pass

  def get_msdf_size(self)->int:
    """"""
    pass

  def set_fixed_size(self, fixed_size:int)->None:
    """"""
    pass

  def get_fixed_size(self)->int:
    """"""
    pass

  def set_fixed_size_scale_mode(self, fixed_size_scale_mode:int )->None:
    """"""
    pass

  def get_fixed_size_scale_mode(self)->int:
    """"""
    pass

  def set_allow_system_fallback(self, allow_system_fallback:bool)->None:
    """"""
    pass

  def is_allow_system_fallback(self)->bool:
    """"""
    pass

  def set_force_autohinter(self, force_autohinter:bool)->None:
    """"""
    pass

  def is_force_autohinter(self)->bool:
    """"""
    pass

  def set_hinting(self, hinting:int )->None:
    """"""
    pass

  def get_hinting(self)->int:
    """"""
    pass

  def set_subpixel_positioning(self, subpixel_positioning:int )->None:
    """"""
    pass

  def get_subpixel_positioning(self)->int:
    """"""
    pass

  def set_keep_rounding_remainders(self, keep_rounding_remainders:bool)->None:
    """"""
    pass

  def get_keep_rounding_remainders(self)->bool:
    """"""
    pass

  def set_oversampling(self, oversampling:float)->None:
    """"""
    pass

  def get_oversampling(self)->float:
    """"""
    pass

  def get_cache_count(self)->int:
    """
				Returns number of the font cache entries.
			"""
    pass

  def clear_cache(self)->None:
    """
				Removes all font cache entries.
			"""
    pass

  def remove_cache(self, cache_index:int)->None:
    """
				Removes specified font cache entry.
			"""
    pass

  def get_size_cache_list(self, cache_index:int)->typedarray::Vector2i:
    """
				Returns list of the font sizes in the cache. Each size is `Vector2i` with font size and outline size.
			"""
    pass

  def clear_size_cache(self, cache_index:int)->None:
    """
				Removes all font sizes from the cache entry.
			"""
    pass

  def remove_size_cache(self, cache_index:int, size:__core__.Vector2i)->None:
    """
				Removes specified font size from the cache entry.
			"""
    pass

  def set_variation_coordinates(self, cache_index:int, variation_coordinates:__core__.Dictionary)->None:
    """
				Sets variation coordinates for the specified font cache entry. See `Font.get_supported_variation_list` for more info.
			"""
    pass

  def get_variation_coordinates(self, cache_index:int)->__core__.Dictionary:
    """
				Returns variation coordinates for the specified font cache entry. See `Font.get_supported_variation_list` for more info.
			"""
    pass

  def set_embolden(self, cache_index:int, strength:float)->None:
    """
				Sets embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
			"""
    pass

  def get_embolden(self, cache_index:int)->float:
    """
				Returns embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
			"""
    pass

  def set_transform(self, cache_index:int, transform:__core__.Transform2D)->None:
    """
				Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
			"""
    pass

  def get_transform(self, cache_index:int)->__core__.Transform2D:
    """
				Returns 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs.
			"""
    pass

  def set_extra_spacing(self, cache_index:int, spacing:int , value:int)->None:
    """
				Sets the spacing for `spacing` to `value` in pixels (not relative to the font size).
			"""
    pass

  def get_extra_spacing(self, cache_index:int, spacing:int )->int:
    """
				Returns spacing for `spacing` in pixels (not relative to the font size).
			"""
    pass

  def set_extra_baseline_offset(self, cache_index:int, baseline_offset:float)->None:
    """
				Sets extra baseline offset (as a fraction of font height).
			"""
    pass

  def get_extra_baseline_offset(self, cache_index:int)->float:
    """
				Returns extra baseline offset (as a fraction of font height).
			"""
    pass

  def set_face_index(self, cache_index:int, face_index:int)->None:
    """
				Sets an active face index in the TrueType / OpenType collection.
			"""
    pass

  def get_face_index(self, cache_index:int)->int:
    """
				Returns an active face index in the TrueType / OpenType collection.
			"""
    pass

  def set_cache_ascent(self, cache_index:int, size:int, ascent:float)->None:
    """
				Sets the font ascent (number of pixels above the baseline).
			"""
    pass

  def get_cache_ascent(self, cache_index:int, size:int)->float:
    """
				Returns the font ascent (number of pixels above the baseline).
			"""
    pass

  def set_cache_descent(self, cache_index:int, size:int, descent:float)->None:
    """
				Sets the font descent (number of pixels below the baseline).
			"""
    pass

  def get_cache_descent(self, cache_index:int, size:int)->float:
    """
				Returns the font descent (number of pixels below the baseline).
			"""
    pass

  def set_cache_underline_position(self, cache_index:int, size:int, underline_position:float)->None:
    """
				Sets pixel offset of the underline below the baseline.
			"""
    pass

  def get_cache_underline_position(self, cache_index:int, size:int)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def set_cache_underline_thickness(self, cache_index:int, size:int, underline_thickness:float)->None:
    """
				Sets thickness of the underline in pixels.
			"""
    pass

  def get_cache_underline_thickness(self, cache_index:int, size:int)->float:
    """
				Returns thickness of the underline in pixels.
			"""
    pass

  def set_cache_scale(self, cache_index:int, size:int, scale:float)->None:
    """
				Sets scaling factor of the color bitmap font.
			"""
    pass

  def get_cache_scale(self, cache_index:int, size:int)->float:
    """
				Returns scaling factor of the color bitmap font.
			"""
    pass

  def get_texture_count(self, cache_index:int, size:__core__.Vector2i)->int:
    """
				Returns number of textures used by font cache entry.
			"""
    pass

  def clear_textures(self, cache_index:int, size:__core__.Vector2i)->None:
    """
				Removes all textures from font cache entry.
				**Note:** This function will not remove glyphs associated with the texture, use `remove_glyph` to remove them manually.
			"""
    pass

  def remove_texture(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->None:
    """
				Removes specified texture from the cache entry.
				**Note:** This function will not remove glyphs associated with the texture. Remove them manually using `remove_glyph`.
			"""
    pass

  def set_texture_image(self, cache_index:int, size:__core__.Vector2i, texture_index:int, image:__image__.Image)->None:
    """
				Sets font cache texture image.
			"""
    pass

  def get_texture_image(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->__image__.Image:
    """
				Returns a copy of the font cache texture image.
			"""
    pass

  def set_texture_offsets(self, cache_index:int, size:__core__.Vector2i, texture_index:int, offset:__core__.PackedInt32Array)->None:
    """
				Sets array containing glyph packing data.
			"""
    pass

  def get_texture_offsets(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->__core__.PackedInt32Array:
    """
				Returns a copy of the array containing glyph packing data.
			"""
    pass

  def get_glyph_list(self, cache_index:int, size:__core__.Vector2i)->__core__.PackedInt32Array:
    """
				Returns list of rendered glyphs in the cache entry.
			"""
    pass

  def clear_glyphs(self, cache_index:int, size:__core__.Vector2i)->None:
    """
				Removes all rendered glyph information from the cache entry.
				**Note:** This function will not remove textures associated with the glyphs, use `remove_texture` to remove them manually.
			"""
    pass

  def remove_glyph(self, cache_index:int, size:__core__.Vector2i, glyph:int)->None:
    """
				Removes specified rendered glyph information from the cache entry.
				**Note:** This function will not remove textures associated with the glyphs, use `remove_texture` to remove them manually.
			"""
    pass

  def set_glyph_advance(self, cache_index:int, size:int, glyph:int, advance:__core__.Vector2)->None:
    """
				Sets glyph advance (offset of the next glyph).
				**Note:** Advance for glyphs outlines is the same as the base glyph advance and is not saved.
			"""
    pass

  def get_glyph_advance(self, cache_index:int, size:int, glyph:int)->__core__.Vector2:
    """
				Returns glyph advance (offset of the next glyph).
				**Note:** Advance for glyphs outlines is the same as the base glyph advance and is not saved.
			"""
    pass

  def set_glyph_offset(self, cache_index:int, size:__core__.Vector2i, glyph:int, offset:__core__.Vector2)->None:
    """
				Sets glyph offset from the baseline.
			"""
    pass

  def get_glyph_offset(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns glyph offset from the baseline.
			"""
    pass

  def set_glyph_size(self, cache_index:int, size:__core__.Vector2i, glyph:int, gl_size:__core__.Vector2)->None:
    """
				Sets glyph size.
			"""
    pass

  def get_glyph_size(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns glyph size.
			"""
    pass

  def set_glyph_uv_rect(self, cache_index:int, size:__core__.Vector2i, glyph:int, uv_rect:__core__.Rect2)->None:
    """
				Sets rectangle in the cache texture containing the glyph.
			"""
    pass

  def get_glyph_uv_rect(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Rect2:
    """
				Returns rectangle in the cache texture containing the glyph.
			"""
    pass

  def set_glyph_texture_idx(self, cache_index:int, size:__core__.Vector2i, glyph:int, texture_idx:int)->None:
    """
				Sets index of the cache texture containing the glyph.
			"""
    pass

  def get_glyph_texture_idx(self, cache_index:int, size:__core__.Vector2i, glyph:int)->int:
    """
				Returns index of the cache texture containing the glyph.
			"""
    pass

  def get_kerning_list(self, cache_index:int, size:int)->typedarray::Vector2i:
    """
				Returns list of the kerning overrides.
			"""
    pass

  def clear_kerning_map(self, cache_index:int, size:int)->None:
    """
				Removes all kerning overrides.
			"""
    pass

  def remove_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i)->None:
    """
				Removes kerning override for the pair of glyphs.
			"""
    pass

  def set_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i, kerning:__core__.Vector2)->None:
    """
				Sets kerning for the pair of glyphs.
			"""
    pass

  def get_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i)->__core__.Vector2:
    """
				Returns kerning for the pair of glyphs.
			"""
    pass

  def render_range(self, cache_index:int, size:__core__.Vector2i, start:int, end:int)->None:
    """
				Renders the range of characters to the font cache texture.
			"""
    pass

  def render_glyph(self, cache_index:int, size:__core__.Vector2i, index:int)->None:
    """
				Renders specified glyph to the font cache texture.
			"""
    pass

  def set_language_support_override(self, language:str, supported:bool)->None:
    """
				Adds override for `Font.is_language_supported`.
			"""
    pass

  def get_language_support_override(self, language:str)->bool:
    """
				Returns `true` if support override is enabled for the `language`.
			"""
    pass

  def remove_language_support_override(self, language:str)->None:
    """
				Remove language support override.
			"""
    pass

  def get_language_support_overrides(self)->__core__.PackedStringArray:
    """
				Returns list of language support overrides.
			"""
    pass

  def set_script_support_override(self, script:str, supported:bool)->None:
    """
				Adds override for `Font.is_script_supported`.
			"""
    pass

  def get_script_support_override(self, script:str)->bool:
    """
				Returns `true` if support override is enabled for the `script`.
			"""
    pass

  def remove_script_support_override(self, script:str)->None:
    """
				Removes script support override.
			"""
    pass

  def get_script_support_overrides(self)->__core__.PackedStringArray:
    """
				Returns list of script support overrides.
			"""
    pass

  def set_opentype_feature_overrides(self, overrides:__core__.Dictionary)->None:
    """"""
    pass

  def get_opentype_feature_overrides(self)->__core__.Dictionary:
    """"""
    pass

  def get_glyph_index(self, size:int, char:int, variation_selector:int)->int:
    """
				Returns the glyph index of a `char`, optionally modified by the `variation_selector`.
			"""
    pass

  def get_char_from_glyph_index(self, size:int, glyph_index:int)->int:
    """
				Returns character code associated with `glyph_index`, or `0` if `glyph_index` is invalid. See `get_glyph_index`.
			"""
    pass


