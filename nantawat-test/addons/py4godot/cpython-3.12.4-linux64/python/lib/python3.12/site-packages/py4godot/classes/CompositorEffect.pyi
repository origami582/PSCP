from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderData as __renderdata__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CompositorEffect as __compositoreffect__


class EffectCallbackType:
  EFFECT_CALLBACK_KIND_PRE_OPAQUE:int = 0
  EFFECT_CALLBACK_KIND_POST_OPAQUE:int = 1
  EFFECT_CALLBACK_KIND_POST_SKY:int = 2
  EFFECT_CALLBACK_KIND_PRE_TRANSPARENT:int = 3
  EFFECT_CALLBACK_KIND_POST_TRANSPARENT:int = 4
  EFFECT_CALLBACK_KIND_MAX:int = 5


class CompositorEffect(__resource__.Resource):
  """
		This resource defines a custom rendering effect that can be applied to `Viewport`s through the viewports' `Environment`. You can implement a callback that is called during rendering at a given stage of the rendering pipeline and allows you to insert additional passes. Note that this callback happens on the rendering thread. CompositorEffect is an abstract base class and must be extended to implement specific rendering logic.
	"""

  @staticmethod
  def constructor()->CompositorEffect:pass



  @staticmethod
  def cast(other:__object__.Object)->CompositorEffect:pass


  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def effect_callback_type(self)->int:
    """"""
    pass
  @effect_callback_type.setter
  def effect_callback_type(self,  value:int)->None:
    """"""
    pass
  @property
  def access_resolved_color(self)->bool:
    """"""
    pass
  @access_resolved_color.setter
  def access_resolved_color(self,  value:bool)->None:
    """"""
    pass
  @property
  def access_resolved_depth(self)->bool:
    """"""
    pass
  @access_resolved_depth.setter
  def access_resolved_depth(self,  value:bool)->None:
    """"""
    pass
  @property
  def needs_motion_vectors(self)->bool:
    """"""
    pass
  @needs_motion_vectors.setter
  def needs_motion_vectors(self,  value:bool)->None:
    """"""
    pass
  @property
  def needs_normal_roughness(self)->bool:
    """"""
    pass
  @needs_normal_roughness.setter
  def needs_normal_roughness(self,  value:bool)->None:
    """"""
    pass
  @property
  def needs_separate_specular(self)->bool:
    """"""
    pass
  @needs_separate_specular.setter
  def needs_separate_specular(self,  value:bool)->None:
    """"""
    pass
  def _render_callback(self, effect_callback_type:int, render_data:__renderdata__.RenderData)->None:
    """
				Implement this function with your custom rendering code. `effect_callback_type` should always match the effect callback type you've specified in `effect_callback_type`. `render_data` provides access to the rendering state, it is only valid during rendering and should not be stored.
			"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_enabled(self)->bool:
    """"""
    pass

  def set_effect_callback_type(self, effect_callback_type:int )->None:
    """"""
    pass

  def get_effect_callback_type(self)->int:
    """"""
    pass

  def set_access_resolved_color(self, enable:bool)->None:
    """"""
    pass

  def get_access_resolved_color(self)->bool:
    """"""
    pass

  def set_access_resolved_depth(self, enable:bool)->None:
    """"""
    pass

  def get_access_resolved_depth(self)->bool:
    """"""
    pass

  def set_needs_motion_vectors(self, enable:bool)->None:
    """"""
    pass

  def get_needs_motion_vectors(self)->bool:
    """"""
    pass

  def set_needs_normal_roughness(self, enable:bool)->None:
    """"""
    pass

  def get_needs_normal_roughness(self)->bool:
    """"""
    pass

  def set_needs_separate_specular(self, enable:bool)->None:
    """"""
    pass

  def get_needs_separate_specular(self)->bool:
    """"""
    pass


