from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.WebSocketPeer as __websocketpeer__



class WebSocketMultiplayerPeer(__multiplayerpeer__.MultiplayerPeer):
  """"""

  @staticmethod
  def constructor()->WebSocketMultiplayerPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->WebSocketMultiplayerPeer:pass


  @property
  def supported_protocols(self)->__core__.PackedStringArray:
    """"""
    pass
  @supported_protocols.setter
  def supported_protocols(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def handshake_headers(self)->__core__.PackedStringArray:
    """"""
    pass
  @handshake_headers.setter
  def handshake_headers(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def inbound_buffer_size(self)->int:
    """"""
    pass
  @inbound_buffer_size.setter
  def inbound_buffer_size(self,  value:int)->None:
    """"""
    pass
  @property
  def outbound_buffer_size(self)->int:
    """"""
    pass
  @outbound_buffer_size.setter
  def outbound_buffer_size(self,  value:int)->None:
    """"""
    pass
  @property
  def handshake_timeout(self)->float:
    """"""
    pass
  @handshake_timeout.setter
  def handshake_timeout(self,  value:float)->None:
    """"""
    pass
  @property
  def max_queued_packets(self)->int:
    """"""
    pass
  @max_queued_packets.setter
  def max_queued_packets(self,  value:int)->None:
    """"""
    pass
  def create_client(self, url:str, tls_client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int:
    """"""
    pass

  def create_server(self, port:int, bind_address:str= __core__.String.new0(), tls_server_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int:
    """"""
    pass

  def get_peer(self, peer_id:int)->__websocketpeer__.WebSocketPeer:
    """"""
    pass

  def get_peer_address(self, id:int)->str:
    """"""
    pass

  def get_peer_port(self, id:int)->int:
    """"""
    pass

  def get_supported_protocols(self)->__core__.PackedStringArray:
    """"""
    pass

  def set_supported_protocols(self, protocols:__core__.PackedStringArray)->None:
    """"""
    pass

  def get_handshake_headers(self)->__core__.PackedStringArray:
    """"""
    pass

  def set_handshake_headers(self, protocols:__core__.PackedStringArray)->None:
    """"""
    pass

  def get_inbound_buffer_size(self)->int:
    """"""
    pass

  def set_inbound_buffer_size(self, buffer_size:int)->None:
    """"""
    pass

  def get_outbound_buffer_size(self)->int:
    """"""
    pass

  def set_outbound_buffer_size(self, buffer_size:int)->None:
    """"""
    pass

  def get_handshake_timeout(self)->float:
    """"""
    pass

  def set_handshake_timeout(self, timeout:float)->None:
    """"""
    pass

  def set_max_queued_packets(self, max_queued_packets:int)->None:
    """"""
    pass

  def get_max_queued_packets(self)->int:
    """"""
    pass


