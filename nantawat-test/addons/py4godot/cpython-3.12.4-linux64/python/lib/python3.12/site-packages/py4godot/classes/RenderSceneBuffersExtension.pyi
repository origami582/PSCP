from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderSceneBuffers as __renderscenebuffers__
import py4godot.classes.RenderSceneBuffersConfiguration as __renderscenebuffersconfiguration__



class RenderSceneBuffersExtension(__renderscenebuffers__.RenderSceneBuffers):
  """
		This class allows for a RenderSceneBuffer implementation to be made in GDExtension.
	"""

  @staticmethod
  def constructor()->RenderSceneBuffersExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->RenderSceneBuffersExtension:pass


  def _configure(self, config:__renderscenebuffersconfiguration__.RenderSceneBuffersConfiguration)->None:
    """
				Implement this in GDExtension to handle the (re)sizing of a viewport.
			"""
    pass

  def _set_fsr_sharpness(self, fsr_sharpness:float)->None:
    """
				Implement this in GDExtension to record a new FSR sharpness value.
			"""
    pass

  def _set_texture_mipmap_bias(self, texture_mipmap_bias:float)->None:
    """
				Implement this in GDExtension to change the texture mipmap bias.
			"""
    pass

  def _set_anisotropic_filtering_level(self, anisotropic_filtering_level:int)->None:
    """
				Implement this in GDExtension to change the anisotropic filtering level.
			"""
    pass

  def _set_use_debanding(self, use_debanding:bool)->None:
    """
				Implement this in GDExtension to react to the debanding flag changing.
			"""
    pass


