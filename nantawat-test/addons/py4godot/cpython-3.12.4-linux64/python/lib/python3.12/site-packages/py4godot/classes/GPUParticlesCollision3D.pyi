from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D as __visualinstance3d__



class GPUParticlesCollision3D(__visualinstance3d__.VisualInstance3D):
  """
		Particle collision shapes can be used to make particles stop or bounce against them.
		Particle collision shapes work in real-time and can be moved, rotated and scaled during gameplay. Unlike attractors, non-uniform scaling of collision shapes is _not_ supported.
		Particle collision shapes can be temporarily disabled by hiding them.
		**Note:** `ParticleProcessMaterial.collision_mode` must be `constant ParticleProcessMaterial.COLLISION_RIGID` or `constant ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT` on the `GPUParticles3D`'s process material for collision to work.
		**Note:** Particle collision only affects `GPUParticles3D`, not `CPUParticles3D`.
		**Note:** Particles pushed by a collider that is being moved will not be interpolated, which can result in visible stuttering. This can be alleviated by setting `GPUParticles3D.fixed_fps` to `0` or a value that matches or exceeds the target framerate.
	"""

  @staticmethod
  def constructor()->GPUParticlesCollision3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesCollision3D:pass


  @property
  def cull_mask(self)->int:
    """"""
    pass
  @cull_mask.setter
  def cull_mask(self,  value:int)->None:
    """"""
    pass
  def set_cull_mask(self, mask:int)->None:
    """"""
    pass

  def get_cull_mask(self)->int:
    """"""
    pass


