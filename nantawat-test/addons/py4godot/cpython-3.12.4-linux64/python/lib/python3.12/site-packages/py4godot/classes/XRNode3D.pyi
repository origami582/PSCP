from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRPose as __xrpose__
import py4godot.classes.Node3D as __node3d__



class XRNode3D(__node3d__.Node3D):
  """
		This node can be bound to a specific pose of an `XRPositionalTracker` and will automatically have its `Node3D.transform` updated by the `XRServer`. Nodes of this type must be added as children of the `XROrigin3D` node.
	"""
  tracking_changed: BuiltinSignal

  @staticmethod
  def constructor()->XRNode3D:pass



  @staticmethod
  def cast(other:__object__.Object)->XRNode3D:pass


  @property
  def tracker(self)->str:
    """"""
    pass
  @tracker.setter
  def tracker(self,  value:str)->None:
    """"""
    pass
  @property
  def pose(self)->str:
    """"""
    pass
  @pose.setter
  def pose(self,  value:str)->None:
    """"""
    pass
  @property
  def show_when_tracked(self)->bool:
    """"""
    pass
  @show_when_tracked.setter
  def show_when_tracked(self,  value:bool)->None:
    """"""
    pass
  def set_tracker(self, tracker_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_tracker(self)->__core__.StringName:
    """"""
    pass

  def set_pose_name(self, pose:__core__.StringName|str)->None:
    """"""
    pass

  def get_pose_name(self)->__core__.StringName:
    """"""
    pass

  def set_show_when_tracked(self, show:bool)->None:
    """"""
    pass

  def get_show_when_tracked(self)->bool:
    """"""
    pass

  def get_is_active(self)->bool:
    """
				Returns `true` if the `tracker` has been registered and the `pose` is being tracked.
			"""
    pass

  def get_has_tracking_data(self)->bool:
    """
				Returns `true` if the `tracker` has current tracking data for the `pose` being tracked.
			"""
    pass

  def get_pose(self)->__xrpose__.XRPose:
    """
				Returns the `XRPose` containing the current state of the pose being tracked. This gives access to additional properties of this pose.
			"""
    pass

  def trigger_haptic_pulse(self, action_name:str, frequency:float, amplitude:float, duration_sec:float, delay_sec:float)->None:
    """
				Triggers a haptic pulse on a device associated with this interface.
				`action_name` is the name of the action for this pulse.
				`frequency` is the frequency of the pulse, set to `0.0` to have the system use a default frequency.
				`amplitude` is the amplitude of the pulse between `0.0` and `1.0`.
				`duration_sec` is the duration of the pulse in seconds.
				`delay_sec` is a delay in seconds before the pulse is given.
			"""
    pass


