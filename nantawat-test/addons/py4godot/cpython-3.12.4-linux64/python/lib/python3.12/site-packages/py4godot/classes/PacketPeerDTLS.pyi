from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PacketPeerUDP as __packetpeerudp__
import py4godot.classes.PacketPeerDTLS as __packetpeerdtls__
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.PacketPeer as __packetpeer__


class Status:
  STATUS_DISCONNECTED:int = 0
  STATUS_HANDSHAKING:int = 1
  STATUS_CONNECTED:int = 2
  STATUS_ERROR:int = 3
  STATUS_ERROR_HOSTNAME_MISMATCH:int = 4


class PacketPeerDTLS(__packetpeer__.PacketPeer):
  """
		This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by `DTLSServer.take_connection`.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
		**Warning:** TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period.
	"""

  @staticmethod
  def constructor()->PacketPeerDTLS:pass



  @staticmethod
  def cast(other:__object__.Object)->PacketPeerDTLS:pass


  def poll(self)->None:
    """
				Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working.
			"""
    pass

  def connect_to_peer(self, packet_peer:__packetpeerudp__.PacketPeerUDP, hostname:str, client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int:
    """
				Connects a `packet_peer` beginning the DTLS handshake using the underlying `PacketPeerUDP` which must be connected (see `PacketPeerUDP.connect_to_host`). You can optionally specify the `client_options` to be used while verifying the TLS connections. See `TLSOptions.client` and `TLSOptions.client_unsafe`.
			"""
    pass

  def get_status(self)->int:
    """
				Returns the status of the connection.
			"""
    pass

  def disconnect_from_peer(self)->None:
    """
				Disconnects this peer, terminating the DTLS session.
			"""
    pass


