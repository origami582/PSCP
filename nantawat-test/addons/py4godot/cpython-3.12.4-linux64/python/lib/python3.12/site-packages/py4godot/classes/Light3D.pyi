from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.VisualInstance3D as __visualinstance3d__


class Param:
  PARAM_ENERGY:int = 0
  PARAM_INDIRECT_ENERGY:int = 1
  PARAM_VOLUMETRIC_FOG_ENERGY:int = 2
  PARAM_SPECULAR:int = 3
  PARAM_RANGE:int = 4
  PARAM_SIZE:int = 5
  PARAM_ATTENUATION:int = 6
  PARAM_SPOT_ANGLE:int = 7
  PARAM_SPOT_ATTENUATION:int = 8
  PARAM_SHADOW_MAX_DISTANCE:int = 9
  PARAM_SHADOW_SPLIT_1_OFFSET:int = 10
  PARAM_SHADOW_SPLIT_2_OFFSET:int = 11
  PARAM_SHADOW_SPLIT_3_OFFSET:int = 12
  PARAM_SHADOW_FADE_START:int = 13
  PARAM_SHADOW_NORMAL_BIAS:int = 14
  PARAM_SHADOW_BIAS:int = 15
  PARAM_SHADOW_PANCAKE_SIZE:int = 16
  PARAM_SHADOW_OPACITY:int = 17
  PARAM_SHADOW_BLUR:int = 18
  PARAM_TRANSMITTANCE_BIAS:int = 19
  PARAM_INTENSITY:int = 20
  PARAM_MAX:int = 21
class BakeMode:
  BAKE_DISABLED:int = 0
  BAKE_STATIC:int = 1
  BAKE_DYNAMIC:int = 2


class Light3D(__visualinstance3d__.VisualInstance3D):
  """
		Light3D is the _abstract_ base class for light nodes. As it can't be instantiated, it shouldn't be used directly. Other types of light nodes inherit from it. Light3D contains the common variables and parameters used for lighting.
	"""

  @staticmethod
  def constructor()->Light3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Light3D:pass


  @property
  def light_intensity_lumens(self)->float:
    """"""
    pass
  @light_intensity_lumens.setter
  def light_intensity_lumens(self,  value:float)->None:
    """"""
    pass
  @property
  def light_intensity_lux(self)->float:
    """"""
    pass
  @light_intensity_lux.setter
  def light_intensity_lux(self,  value:float)->None:
    """"""
    pass
  @property
  def light_temperature(self)->float:
    """"""
    pass
  @light_temperature.setter
  def light_temperature(self,  value:float)->None:
    """"""
    pass
  @property
  def light_color(self)->__core__.Color:
    """"""
    pass
  @light_color.setter
  def light_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def light_energy(self)->float:
    """"""
    pass
  @light_energy.setter
  def light_energy(self,  value:float)->None:
    """"""
    pass
  @property
  def light_indirect_energy(self)->float:
    """"""
    pass
  @light_indirect_energy.setter
  def light_indirect_energy(self,  value:float)->None:
    """"""
    pass
  @property
  def light_volumetric_fog_energy(self)->float:
    """"""
    pass
  @light_volumetric_fog_energy.setter
  def light_volumetric_fog_energy(self,  value:float)->None:
    """"""
    pass
  @property
  def light_projector(self)->Texture2D,-AnimatedTexture,-AtlasTexture,-CameraTexture,-CanvasTexture,-MeshTexture,-Texture2DRD,-ViewportTexture:
    """"""
    pass
  @light_projector.setter
  def light_projector(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def light_size(self)->float:
    """"""
    pass
  @light_size.setter
  def light_size(self,  value:float)->None:
    """"""
    pass
  @property
  def light_angular_distance(self)->float:
    """"""
    pass
  @light_angular_distance.setter
  def light_angular_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def light_negative(self)->bool:
    """"""
    pass
  @light_negative.setter
  def light_negative(self,  value:bool)->None:
    """"""
    pass
  @property
  def light_specular(self)->float:
    """"""
    pass
  @light_specular.setter
  def light_specular(self,  value:float)->None:
    """"""
    pass
  @property
  def light_bake_mode(self)->int:
    """"""
    pass
  @light_bake_mode.setter
  def light_bake_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def light_cull_mask(self)->int:
    """"""
    pass
  @light_cull_mask.setter
  def light_cull_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def shadow_enabled(self)->bool:
    """"""
    pass
  @shadow_enabled.setter
  def shadow_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def shadow_bias(self)->float:
    """"""
    pass
  @shadow_bias.setter
  def shadow_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_normal_bias(self)->float:
    """"""
    pass
  @shadow_normal_bias.setter
  def shadow_normal_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_reverse_cull_face(self)->bool:
    """"""
    pass
  @shadow_reverse_cull_face.setter
  def shadow_reverse_cull_face(self,  value:bool)->None:
    """"""
    pass
  @property
  def shadow_transmittance_bias(self)->float:
    """"""
    pass
  @shadow_transmittance_bias.setter
  def shadow_transmittance_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_opacity(self)->float:
    """"""
    pass
  @shadow_opacity.setter
  def shadow_opacity(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_blur(self)->float:
    """"""
    pass
  @shadow_blur.setter
  def shadow_blur(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_caster_mask(self)->int:
    """"""
    pass
  @shadow_caster_mask.setter
  def shadow_caster_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def distance_fade_enabled(self)->bool:
    """"""
    pass
  @distance_fade_enabled.setter
  def distance_fade_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def distance_fade_begin(self)->float:
    """"""
    pass
  @distance_fade_begin.setter
  def distance_fade_begin(self,  value:float)->None:
    """"""
    pass
  @property
  def distance_fade_shadow(self)->float:
    """"""
    pass
  @distance_fade_shadow.setter
  def distance_fade_shadow(self,  value:float)->None:
    """"""
    pass
  @property
  def distance_fade_length(self)->float:
    """"""
    pass
  @distance_fade_length.setter
  def distance_fade_length(self,  value:float)->None:
    """"""
    pass
  @property
  def editor_only(self)->bool:
    """"""
    pass
  @editor_only.setter
  def editor_only(self,  value:bool)->None:
    """"""
    pass
  def set_editor_only(self, editor_only:bool)->None:
    """"""
    pass

  def is_editor_only(self)->bool:
    """"""
    pass

  def set_param(self, param:int , value:float)->None:
    """
				Sets the value of the specified `enum Light3D.Param` parameter.
			"""
    pass

  def get_param(self, param:int )->float:
    """
				Returns the value of the specified `enum Light3D.Param` parameter.
			"""
    pass

  def set_shadow(self, enabled:bool)->None:
    """"""
    pass

  def has_shadow(self)->bool:
    """"""
    pass

  def set_negative(self, enabled:bool)->None:
    """"""
    pass

  def is_negative(self)->bool:
    """"""
    pass

  def set_cull_mask(self, cull_mask:int)->None:
    """"""
    pass

  def get_cull_mask(self)->int:
    """"""
    pass

  def set_enable_distance_fade(self, enable:bool)->None:
    """"""
    pass

  def is_distance_fade_enabled(self)->bool:
    """"""
    pass

  def set_distance_fade_begin(self, distance:float)->None:
    """"""
    pass

  def get_distance_fade_begin(self)->float:
    """"""
    pass

  def set_distance_fade_shadow(self, distance:float)->None:
    """"""
    pass

  def get_distance_fade_shadow(self)->float:
    """"""
    pass

  def set_distance_fade_length(self, distance:float)->None:
    """"""
    pass

  def get_distance_fade_length(self)->float:
    """"""
    pass

  def set_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_color(self)->__core__.Color:
    """"""
    pass

  def set_shadow_reverse_cull_face(self, enable:bool)->None:
    """"""
    pass

  def get_shadow_reverse_cull_face(self)->bool:
    """"""
    pass

  def set_shadow_caster_mask(self, caster_mask:int)->None:
    """"""
    pass

  def get_shadow_caster_mask(self)->int:
    """"""
    pass

  def set_bake_mode(self, bake_mode:int )->None:
    """"""
    pass

  def get_bake_mode(self)->int:
    """"""
    pass

  def set_projector(self, projector:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_projector(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass

  def set_temperature(self, temperature:float)->None:
    """"""
    pass

  def get_temperature(self)->float:
    """"""
    pass

  def get_correlated_color(self)->__core__.Color:
    """
				Returns the `Color` of an idealized blackbody at the given `light_temperature`. This value is calculated internally based on the `light_temperature`. This `Color` is multiplied by `light_color` before being sent to the `RenderingServer`.
			"""
    pass


