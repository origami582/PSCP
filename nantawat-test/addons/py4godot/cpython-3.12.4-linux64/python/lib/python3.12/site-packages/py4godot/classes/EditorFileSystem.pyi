from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node as __node__
import py4godot.classes.EditorFileSystemDirectory as __editorfilesystemdirectory__



class EditorFileSystem(__node__.Node):
  """
		This object holds information of all resources in the filesystem, their types, etc.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_resource_filesystem`.
	"""
  filesystem_changed: BuiltinSignal
  script_classes_updated: BuiltinSignal
  sources_changed: BuiltinSignal
  resources_reimporting: BuiltinSignal
  resources_reimported: BuiltinSignal
  resources_reload: BuiltinSignal

  @staticmethod
  def constructor()->EditorFileSystem:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorFileSystem:pass


  def get_filesystem(self)->__editorfilesystemdirectory__.EditorFileSystemDirectory:
    """
				Gets the root directory object.
			"""
    pass

  def is_scanning(self)->bool:
    """
				Returns `true` if the filesystem is being scanned.
			"""
    pass

  def get_scanning_progress(self)->float:
    """
				Returns the scan progress for 0 to 1 if the FS is being scanned.
			"""
    pass

  def scan(self)->None:
    """
				Scan the filesystem for changes.
			"""
    pass

  def scan_sources(self)->None:
    """
				Check if the source of any imported resource changed.
			"""
    pass

  def update_file(self, path:str)->None:
    """
				Add a file in an existing directory, or schedule file information to be updated on editor restart. Can be used to update text files saved by an external program.
				This will not import the file. To reimport, call `reimport_files` or `scan` methods.
			"""
    pass

  def get_filesystem_path(self, path:str)->__editorfilesystemdirectory__.EditorFileSystemDirectory:
    """
				Returns a view into the filesystem at `path`.
			"""
    pass

  def get_file_type(self, path:str)->str:
    """
				Returns the resource type of the file, given the full path. This returns a string such as `"Resource"` or `"GDScript"`, _not_ a file extension such as `".gd"`.
			"""
    pass

  def reimport_files(self, files:__core__.PackedStringArray)->None:
    """
				Reimports a set of files. Call this if these files or their `.import` files were directly edited by script or an external program.
				If the file type changed or the file was newly created, use `update_file` or `scan`.
				**Note:** This function blocks until the import is finished. However, the main loop iteration, including timers and `Node._process`, will occur during the import process due to progress bar updates. Avoid calls to `reimport_files` or `scan` while an import is in progress.
			"""
    pass


