from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class VoxelGIData(__resource__.Resource):
  """
		`VoxelGIData` contains baked voxel global illumination for use in a `VoxelGI` node. `VoxelGIData` also offers several properties to adjust the final appearance of the global illumination. These properties can be adjusted at run-time without having to bake the `VoxelGI` node again.
		**Note:** To prevent text-based scene files (`.tscn`) from growing too much and becoming slow to load and save, always save `VoxelGIData` to an external binary resource file (`.res`) instead of embedding it within the scene. This can be done by clicking the dropdown arrow next to the `VoxelGIData` resource, choosing **Edit**, clicking the floppy disk icon at the top of the Inspector then choosing **Save As...**.
	"""

  @staticmethod
  def constructor()->VoxelGIData:pass



  @staticmethod
  def cast(other:__object__.Object)->VoxelGIData:pass


  @property
  def dynamic_range(self)->float:
    """"""
    pass
  @dynamic_range.setter
  def dynamic_range(self,  value:float)->None:
    """"""
    pass
  @property
  def energy(self)->float:
    """"""
    pass
  @energy.setter
  def energy(self,  value:float)->None:
    """"""
    pass
  @property
  def bias(self)->float:
    """"""
    pass
  @bias.setter
  def bias(self,  value:float)->None:
    """"""
    pass
  @property
  def normal_bias(self)->float:
    """"""
    pass
  @normal_bias.setter
  def normal_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def propagation(self)->float:
    """"""
    pass
  @propagation.setter
  def propagation(self,  value:float)->None:
    """"""
    pass
  @property
  def use_two_bounces(self)->bool:
    """"""
    pass
  @use_two_bounces.setter
  def use_two_bounces(self,  value:bool)->None:
    """"""
    pass
  @property
  def interior(self)->bool:
    """"""
    pass
  @interior.setter
  def interior(self,  value:bool)->None:
    """"""
    pass
  def allocate(self, to_cell_xform:__core__.Transform3D, aabb:__core__.AABB, octree_size:__core__.Vector3, octree_cells:__core__.PackedByteArray, data_cells:__core__.PackedByteArray, distance_field:__core__.PackedByteArray, level_counts:__core__.PackedInt32Array)->None:
    """
"""
    pass

  def get_bounds(self)->__core__.AABB:
    """
				Returns the bounds of the baked voxel data as an `AABB`, which should match `VoxelGI.size` after being baked (which only contains the size as a `Vector3`).
				**Note:** If the size was modified without baking the VoxelGI data, then the value of `get_bounds` and `VoxelGI.size` will not match.
			"""
    pass

  def get_octree_size(self)->__core__.Vector3:
    """
"""
    pass

  def get_to_cell_xform(self)->__core__.Transform3D:
    """
"""
    pass

  def get_octree_cells(self)->__core__.PackedByteArray:
    """
"""
    pass

  def get_data_cells(self)->__core__.PackedByteArray:
    """
"""
    pass

  def get_level_counts(self)->__core__.PackedInt32Array:
    """
"""
    pass

  def set_dynamic_range(self, dynamic_range:float)->None:
    """"""
    pass

  def get_dynamic_range(self)->float:
    """"""
    pass

  def set_energy(self, energy:float)->None:
    """"""
    pass

  def get_energy(self)->float:
    """"""
    pass

  def set_bias(self, bias:float)->None:
    """"""
    pass

  def get_bias(self)->float:
    """"""
    pass

  def set_normal_bias(self, bias:float)->None:
    """"""
    pass

  def get_normal_bias(self)->float:
    """"""
    pass

  def set_propagation(self, propagation:float)->None:
    """"""
    pass

  def get_propagation(self)->float:
    """"""
    pass

  def set_interior(self, interior:bool)->None:
    """"""
    pass

  def is_interior(self)->bool:
    """"""
    pass

  def set_use_two_bounces(self, enable:bool)->None:
    """"""
    pass

  def is_using_two_bounces(self)->bool:
    """"""
    pass


