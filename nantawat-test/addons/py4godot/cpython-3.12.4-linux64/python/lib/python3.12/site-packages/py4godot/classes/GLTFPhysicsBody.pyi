from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.GLTFPhysicsBody as __gltfphysicsbody__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__



class GLTFPhysicsBody(__resource__.Resource):
  """"""

  @staticmethod
  def constructor()->GLTFPhysicsBody:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFPhysicsBody:pass


  @property
  def body_type(self)->str:
    """"""
    pass
  @body_type.setter
  def body_type(self,  value:str)->None:
    """"""
    pass
  @property
  def mass(self)->float:
    """"""
    pass
  @mass.setter
  def mass(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_velocity(self)->__core__.Vector3:
    """"""
    pass
  @linear_velocity.setter
  def linear_velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def angular_velocity(self)->__core__.Vector3:
    """"""
    pass
  @angular_velocity.setter
  def angular_velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def center_of_mass(self)->__core__.Vector3:
    """"""
    pass
  @center_of_mass.setter
  def center_of_mass(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def inertia_diagonal(self)->__core__.Vector3:
    """"""
    pass
  @inertia_diagonal.setter
  def inertia_diagonal(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def inertia_orientation(self)->__core__.Quaternion:
    """"""
    pass
  @inertia_orientation.setter
  def inertia_orientation(self,  value:__core__.Quaternion)->None:
    """"""
    pass
  @property
  def inertia_tensor(self)->__core__.Basis:
    """"""
    pass
  @inertia_tensor.setter
  def inertia_tensor(self,  value:__core__.Basis)->None:
    """"""
    pass
  @staticmethod
  def from_node(body_node:__collisionobject3d__.CollisionObject3D)->__gltfphysicsbody__.GLTFPhysicsBody:
    """"""
    pass

  def to_node(self)->__physicalbone3d__.PhysicalBone3D|__collisionobject3d__.CollisionObject3D|__area3d__.Area3D|__animatablebody3d__.AnimatableBody3D|__staticbody3d__.StaticBody3D|__vehiclebody3d__.VehicleBody3D|__rigidbody3d__.RigidBody3D|__characterbody3d__.CharacterBody3D|__physicsbody3d__.PhysicsBody3D:
    """"""
    pass

  @staticmethod
  def from_dictionary(dictionary:__core__.Dictionary)->__gltfphysicsbody__.GLTFPhysicsBody:
    """"""
    pass

  def to_dictionary(self)->__core__.Dictionary:
    """"""
    pass

  def get_body_type(self)->str:
    """"""
    pass

  def set_body_type(self, body_type:str)->None:
    """"""
    pass

  def get_mass(self)->float:
    """"""
    pass

  def set_mass(self, mass:float)->None:
    """"""
    pass

  def get_linear_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_linear_velocity(self, linear_velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_angular_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_angular_velocity(self, angular_velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_center_of_mass(self)->__core__.Vector3:
    """"""
    pass

  def set_center_of_mass(self, center_of_mass:__core__.Vector3)->None:
    """"""
    pass

  def get_inertia_diagonal(self)->__core__.Vector3:
    """"""
    pass

  def set_inertia_diagonal(self, inertia_diagonal:__core__.Vector3)->None:
    """"""
    pass

  def get_inertia_orientation(self)->__core__.Quaternion:
    """"""
    pass

  def set_inertia_orientation(self, inertia_orientation:__core__.Quaternion)->None:
    """"""
    pass

  def get_inertia_tensor(self)->__core__.Basis:
    """"""
    pass

  def set_inertia_tensor(self, inertia_tensor:__core__.Basis)->None:
    """"""
    pass


