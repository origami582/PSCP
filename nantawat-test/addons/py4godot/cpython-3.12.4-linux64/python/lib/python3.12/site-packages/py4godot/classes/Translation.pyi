from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class Translation(__resource__.Resource):
  """
		`Translation`s are resources that can be loaded and unloaded on demand. They map a collection of strings to their individual translations, and they also provide convenience methods for pluralization.
	"""

  @staticmethod
  def constructor()->Translation:pass



  @staticmethod
  def cast(other:__object__.Object)->Translation:pass


  @property
  def messages(self)->__core__.Dictionary:
    """"""
    pass
  @messages.setter
  def messages(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def locale(self)->str:
    """"""
    pass
  @locale.setter
  def locale(self,  value:str)->None:
    """"""
    pass
  def _get_plural_message(self, src_message:__core__.StringName|str, src_plural_message:__core__.StringName|str, n:int, context:__core__.StringName|str)->__core__.StringName:
    """
				Virtual method to override `get_plural_message`.
			"""
    pass

  def _get_message(self, src_message:__core__.StringName|str, context:__core__.StringName|str)->__core__.StringName:
    """
				Virtual method to override `get_message`.
			"""
    pass

  def set_locale(self, locale:str)->None:
    """"""
    pass

  def get_locale(self)->str:
    """"""
    pass

  def add_message(self, src_message:__core__.StringName|str, xlated_message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Adds a message if nonexistent, followed by its translation.
				An additional context could be used to specify the translation context or differentiate polysemic words.
			"""
    pass

  def add_plural_message(self, src_message:__core__.StringName|str, xlated_messages:__core__.PackedStringArray, context:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Adds a message involving plural translation if nonexistent, followed by its translation.
				An additional context could be used to specify the translation context or differentiate polysemic words.
			"""
    pass

  def get_message(self, src_message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns a message's translation.
			"""
    pass

  def get_plural_message(self, src_message:__core__.StringName|str, src_plural_message:__core__.StringName|str, n:int, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns a message's translation involving plurals.
				The number `n` is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
			"""
    pass

  def erase_message(self, src_message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Erases a message.
			"""
    pass

  def get_message_list(self)->__core__.PackedStringArray:
    """
				Returns all the messages (keys).
			"""
    pass

  def get_translated_message_list(self)->__core__.PackedStringArray:
    """
				Returns all the messages (translated text).
			"""
    pass

  def get_message_count(self)->int:
    """
				Returns the number of existing messages.
			"""
    pass


