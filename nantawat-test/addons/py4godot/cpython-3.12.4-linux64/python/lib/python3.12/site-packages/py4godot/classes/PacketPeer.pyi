from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class PacketPeer(__refcounted__.RefCounted):
  """
		PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	"""

  @staticmethod
  def constructor()->PacketPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->PacketPeer:pass


  @property
  def encode_buffer_max_size(self)->int:
    """"""
    pass
  @encode_buffer_max_size.setter
  def encode_buffer_max_size(self,  value:int)->None:
    """"""
    pass
  def get_var(self, allow_objects:bool=False)->Any:
    """
				Gets a Variant. If `allow_objects` is `true`, decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			"""
    pass

  def put_var(self, var:Any, full_objects:bool=False)->int:
    """
				Sends a `Variant` as a packet. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method.
			"""
    pass

  def get_packet(self)->__core__.PackedByteArray:
    """
				Gets a raw packet.
			"""
    pass

  def put_packet(self, buffer:__core__.PackedByteArray)->int:
    """
				Sends a raw packet.
			"""
    pass

  def get_packet_error(self)->int:
    """
				Returns the error state of the last packet received (via `get_packet` and `get_var`).
			"""
    pass

  def get_available_packet_count(self)->int:
    """
				Returns the number of packets currently available in the ring-buffer.
			"""
    pass

  def get_encode_buffer_max_size(self)->int:
    """"""
    pass

  def set_encode_buffer_max_size(self, max_size:int)->None:
    """"""
    pass


