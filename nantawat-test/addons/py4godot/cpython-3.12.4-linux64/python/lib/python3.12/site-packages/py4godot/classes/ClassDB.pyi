from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.ClassDB as __classdb__
import py4godot.classes.o as __o__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Object as __object__
import py4godot.classes.T as __t__


class APIType:
  API_CORE:int = 0
  API_EDITOR:int = 1
  API_EXTENSION:int = 2
  API_EDITOR_EXTENSION:int = 3
  API_NONE:int = 4


class ClassDB(__object__.Object):
  """
		Provides access to metadata stored for every available class.
	"""



  @staticmethod
  def cast(other:__object__.Object)->ClassDB:pass

  @staticmethod
  def instance()->ClassDB:pass

  def get_class_list(self)->__core__.PackedStringArray:
    """
				Returns the names of all the classes available.
			"""
    pass

  def get_inheriters_from_class(self, class_:__core__.StringName|str)->__core__.PackedStringArray:
    """
				Returns the names of all the classes that directly or indirectly inherit from `class`.
			"""
    pass

  def get_parent_class(self, class_:__core__.StringName|str)->__core__.StringName:
    """
				Returns the parent class of `class`.
			"""
    pass

  def class_exists(self, class_:__core__.StringName|str)->bool:
    """
				Returns whether the specified `class` is available or not.
			"""
    pass

  def is_parent_class(self, class_:__core__.StringName|str, inherits:__core__.StringName|str)->bool:
    """
				Returns whether `inherits` is an ancestor of `class` or not.
			"""
    pass

  def can_instantiate(self, class_:__core__.StringName|str)->bool:
    """
				Returns `true` if objects can be instantiated from the specified `class`, otherwise returns `false`.
			"""
    pass

  def instantiate(self, class_:__core__.StringName|str)->Any:
    """
				Creates an instance of `class`.
			"""
    pass

  def class_get_api_type(self, class_:__core__.StringName|str)->int:
    """
				Returns the API type of the specified `class`.
			"""
    pass

  def class_has_signal(self, class_:__core__.StringName|str, signal:__core__.StringName|str)->bool:
    """
				Returns whether `class` or its ancestry has a signal called `signal` or not.
			"""
    pass

  def class_get_signal(self, class_:__core__.StringName|str, signal:__core__.StringName|str)->__core__.Dictionary:
    """
				Returns the `signal` data of `class` or its ancestry. The returned value is a `Dictionary` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`.
			"""
    pass

  def class_get_signal_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary:
    """
				Returns an array with all the signals of `class` or its ancestry if `no_inheritance` is `false`. Every element of the array is a `Dictionary` as described in `class_get_signal`.
			"""
    pass

  def class_get_property_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary:
    """
				Returns an array with all the properties of `class` or its ancestry if `no_inheritance` is `false`.
			"""
    pass

  def class_get_property_getter(self, class_:__core__.StringName|str, property:__core__.StringName|str)->__core__.StringName:
    """
				Returns the getter method name of `property` of `class`.
			"""
    pass

  def class_get_property_setter(self, class_:__core__.StringName|str, property:__core__.StringName|str)->__core__.StringName:
    """
				Returns the setter method name of `property` of `class`.
			"""
    pass

  def class_get_property(self, object:__object__.Object, property:__core__.StringName|str)->Any:
    """
				Returns the value of `property` of `object` or its ancestry.
			"""
    pass

  def class_set_property(self, object:__object__.Object, property:__core__.StringName|str, value:Any)->int:
    """
				Sets `property` value of `object` to `value`.
			"""
    pass

  def class_get_property_default_value(self, class_:__core__.StringName|str, property:__core__.StringName|str)->Any:
    """
				Returns the default value of `property` of `class` or its ancestor classes.
			"""
    pass

  def class_has_method(self, class_:__core__.StringName|str, method:__core__.StringName|str, no_inheritance:bool=False)->bool:
    """
				Returns whether `class` (or its ancestry if `no_inheritance` is `false`) has a method called `method` or not.
			"""
    pass

  def class_get_method_argument_count(self, class_:__core__.StringName|str, method:__core__.StringName|str, no_inheritance:bool=False)->int:
    """
				Returns the number of arguments of the method `method` of `class` or its ancestry if `no_inheritance` is `false`.
			"""
    pass

  def class_get_method_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary:
    """
				Returns an array with all the methods of `class` or its ancestry if `no_inheritance` is `false`. Every element of the array is a `Dictionary` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`.
				**Note:** In exported release builds the debug info is not available, so the returned dictionaries will contain only method names.
			"""
    pass

  def class_call_static(self, class_:__core__.StringName|str, method:__core__.StringName|str)->Any:
    """
				Calls a static method on a class.
			"""
    pass

  def class_get_integer_constant_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray:
    """
				Returns an array with the names all the integer constants of `class` or its ancestry.
			"""
    pass

  def class_has_integer_constant(self, class_:__core__.StringName|str, name:__core__.StringName|str)->bool:
    """
				Returns whether `class` or its ancestry has an integer constant called `name` or not.
			"""
    pass

  def class_get_integer_constant(self, class_:__core__.StringName|str, name:__core__.StringName|str)->int:
    """
				Returns the value of the integer constant `name` of `class` or its ancestry. Always returns 0 when the constant could not be found.
			"""
    pass

  def class_has_enum(self, class_:__core__.StringName|str, name:__core__.StringName|str, no_inheritance:bool=False)->bool:
    """
				Returns whether `class` or its ancestry has an enum called `name` or not.
			"""
    pass

  def class_get_enum_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray:
    """
				Returns an array with all the enums of `class` or its ancestry.
			"""
    pass

  def class_get_enum_constants(self, class_:__core__.StringName|str, enum:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray:
    """
				Returns an array with all the keys in `enum` of `class` or its ancestry.
			"""
    pass

  def class_get_integer_constant_enum(self, class_:__core__.StringName|str, name:__core__.StringName|str, no_inheritance:bool=False)->__core__.StringName:
    """
				Returns which enum the integer constant `name` of `class` or its ancestry belongs to.
			"""
    pass

  def is_class_enum_bitfield(self, class_:__core__.StringName|str, enum:__core__.StringName|str, no_inheritance:bool=False)->bool:
    """
				Returns whether `class` (or its ancestor classes if `no_inheritance` is `false`) has an enum called `enum` that is a bitfield.
			"""
    pass

  def is_class_enabled(self, class_:__core__.StringName|str)->bool:
    """
				Returns whether this `class` is enabled or not.
			"""
    pass


