from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.Control as __control__
import py4godot.classes.Container as __container__
import py4godot.classes.EditorInspector as __editorinspector__


class ScrollMode:
  SCROLL_MODE_DISABLED:int = 0
  SCROLL_MODE_AUTO:int = 1
  SCROLL_MODE_SHOW_ALWAYS:int = 2
  SCROLL_MODE_SHOW_NEVER:int = 3
  SCROLL_MODE_RESERVE:int = 4


class ScrollContainer(__container__.Container):
  """
		A container used to provide a child control with scrollbars when needed. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the `Control.custom_minimum_size` of the Control relative to the ScrollContainer.
	"""
  scroll_started: BuiltinSignal
  scroll_ended: BuiltinSignal

  @staticmethod
  def constructor()->ScrollContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->ScrollContainer:pass


  @property
  def follow_focus(self)->bool:
    """"""
    pass
  @follow_focus.setter
  def follow_focus(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_focus_border(self)->bool:
    """"""
    pass
  @draw_focus_border.setter
  def draw_focus_border(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_horizontal(self)->int:
    """"""
    pass
  @scroll_horizontal.setter
  def scroll_horizontal(self,  value:int)->None:
    """"""
    pass
  @property
  def scroll_vertical(self)->int:
    """"""
    pass
  @scroll_vertical.setter
  def scroll_vertical(self,  value:int)->None:
    """"""
    pass
  @property
  def scroll_horizontal_custom_step(self)->float:
    """"""
    pass
  @scroll_horizontal_custom_step.setter
  def scroll_horizontal_custom_step(self,  value:float)->None:
    """"""
    pass
  @property
  def scroll_vertical_custom_step(self)->float:
    """"""
    pass
  @scroll_vertical_custom_step.setter
  def scroll_vertical_custom_step(self,  value:float)->None:
    """"""
    pass
  @property
  def horizontal_scroll_mode(self)->int:
    """"""
    pass
  @horizontal_scroll_mode.setter
  def horizontal_scroll_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def vertical_scroll_mode(self)->int:
    """"""
    pass
  @vertical_scroll_mode.setter
  def vertical_scroll_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def scroll_deadzone(self)->int:
    """"""
    pass
  @scroll_deadzone.setter
  def scroll_deadzone(self,  value:int)->None:
    """"""
    pass
  def set_h_scroll(self, value:int)->None:
    """"""
    pass

  def get_h_scroll(self)->int:
    """"""
    pass

  def set_v_scroll(self, value:int)->None:
    """"""
    pass

  def get_v_scroll(self)->int:
    """"""
    pass

  def set_horizontal_custom_step(self, value:float)->None:
    """"""
    pass

  def get_horizontal_custom_step(self)->float:
    """"""
    pass

  def set_vertical_custom_step(self, value:float)->None:
    """"""
    pass

  def get_vertical_custom_step(self)->float:
    """"""
    pass

  def set_horizontal_scroll_mode(self, enable:int )->None:
    """"""
    pass

  def get_horizontal_scroll_mode(self)->int:
    """"""
    pass

  def set_vertical_scroll_mode(self, enable:int )->None:
    """"""
    pass

  def get_vertical_scroll_mode(self)->int:
    """"""
    pass

  def set_deadzone(self, deadzone:int)->None:
    """"""
    pass

  def get_deadzone(self)->int:
    """"""
    pass

  def set_follow_focus(self, enabled:bool)->None:
    """"""
    pass

  def is_following_focus(self)->bool:
    """"""
    pass

  def get_h_scroll_bar(self)->__hscrollbar__.HScrollBar:
    """
				Returns the horizontal scrollbar `HScrollBar` of this `ScrollContainer`.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use `horizontal_scroll_mode`.
			"""
    pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar:
    """
				Returns the vertical scrollbar `VScrollBar` of this `ScrollContainer`.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use `vertical_scroll_mode`.
			"""
    pass

  def ensure_control_visible(self, control:__control__.Control)->None:
    """
				Ensures the given `control` is visible (must be a direct or indirect child of the ScrollContainer). Used by `follow_focus`.
				**Note:** This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using `signal SceneTree.process_frame`:
				```gdscript
				add_child(child_node)
				await get_tree().process_frame
				ensure_control_visible(child_node)
				```
			"""
    pass

  def set_draw_focus_border(self, draw:bool)->None:
    """"""
    pass

  def get_draw_focus_border(self)->bool:
    """"""
    pass


