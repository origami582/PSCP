from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.e as __e__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.Image as __image__
import py4godot.classes.y as __y__
import py4godot.classes.k as __k__
import py4godot.classes.2 as __2__
import py4godot.classes.d as __d__
import py4godot.classes.P as __p__
import py4godot.classes.A as __a__
import py4godot.classes.Resource as __resource__
import py4godot.classes.T as __t__



class BitMap(__resource__.Resource):
  """
		A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.
	"""

  @staticmethod
  def constructor()->BitMap:pass



  @staticmethod
  def cast(other:__object__.Object)->BitMap:pass


  @property
  def data(self)->__core__.Dictionary:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def create(self, size:__core__.Vector2i)->None:
    """
				Creates a bitmap with the specified size, filled with `false`.
			"""
    pass

  def create_from_image_alpha(self, image:__image__.Image, threshold:float=0.1)->None:
    """
				Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to `false` if the alpha value of the image at that position is equal to `threshold` or less, and `true` in other case.
			"""
    pass

  def set_bitv(self, position:__core__.Vector2i, bit:bool)->None:
    """
				Sets the bitmap's element at the specified position, to the specified value.
			"""
    pass

  def set_bit(self, x:int, y:int, bit:bool)->None:
    """
				Sets the bitmap's element at the specified position, to the specified value.
			"""
    pass

  def get_bitv(self, position:__core__.Vector2i)->bool:
    """
				Returns bitmap's value at the specified position.
			"""
    pass

  def get_bit(self, x:int, y:int)->bool:
    """
				Returns bitmap's value at the specified position.
			"""
    pass

  def set_bit_rect(self, rect:__core__.Rect2i, bit:bool)->None:
    """
				Sets a rectangular portion of the bitmap to the specified value.
			"""
    pass

  def get_true_bit_count(self)->int:
    """
				Returns the number of bitmap elements that are set to `true`.
			"""
    pass

  def get_size(self)->__core__.Vector2i:
    """
				Returns bitmap's dimensions.
			"""
    pass

  def resize(self, new_size:__core__.Vector2i)->None:
    """
				Resizes the image to `new_size`.
			"""
    pass

  def grow_mask(self, pixels:int, rect:__core__.Rect2i)->None:
    """
				Applies morphological dilation or erosion to the bitmap. If `pixels` is positive, dilation is applied to the bitmap. If `pixels` is negative, erosion is applied to the bitmap. `rect` defines the area where the morphological operation is applied. Pixels located outside the `rect` are unaffected by `grow_mask`.
			"""
    pass

  def convert_to_image(self)->__image__.Image:
    """
				Returns an image of the same size as the bitmap and with an `enum Image.Format` of type `constant Image.FORMAT_L8`. `true` bits of the bitmap are being converted into white pixels, and `false` bits into black.
			"""
    pass

  def opaque_to_polygons(self, rect:__core__.Rect2i, epsilon:float=2.0)->typedarray::PackedVector2Array:
    """
				Creates an `Array` of polygons covering a rectangular portion of the bitmap. It uses a marching squares algorithm, followed by Ramer-Douglas-Peucker (RDP) reduction of the number of vertices. Each polygon is described as a `PackedVector2Array` of its vertices.
				To get polygons covering the whole bitmap, pass:
				```gdscript
				Rect2(Vector2(), get_size())
				```
				`epsilon` is passed to RDP to control how accurately the polygons cover the bitmap: a lower `epsilon` corresponds to more points in the polygons.
			"""
    pass


