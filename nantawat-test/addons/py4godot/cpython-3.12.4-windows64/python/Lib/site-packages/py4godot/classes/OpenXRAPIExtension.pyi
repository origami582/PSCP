from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRExtensionWrapperExtension as __openxrextensionwrapperextension__
import py4godot.classes.OpenXRAPIExtension as __openxrapiextension__
import py4godot.classes.RefCounted as __refcounted__


class OpenXRAlphaBlendModeSupport:
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_NONE:int = 0
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_REAL:int = 1
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_EMULATING:int = 2


class OpenXRAPIExtension(__refcounted__.RefCounted):
  """"""

  @staticmethod
  def constructor()->OpenXRAPIExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRAPIExtension:pass


  def get_instance(self)->int:
    """"""
    pass

  def get_system_id(self)->int:
    """"""
    pass

  def get_session(self)->int:
    """"""
    pass

  def xr_result(self, result:int, format:str, args:__core__.Array)->bool:
    """"""
    pass

  @staticmethod
  def openxr_is_enabled(check_run_in_editor:bool)->bool:
    """"""
    pass

  def get_instance_proc_addr(self, name:str)->int:
    """"""
    pass

  def get_error_string(self, result:int)->str:
    """"""
    pass

  def get_swapchain_format_name(self, swapchain_format:int)->str:
    """"""
    pass

  def set_object_name(self, object_type:int, object_handle:int, object_name:str)->None:
    """"""
    pass

  def begin_debug_label_region(self, label_name:str)->None:
    """"""
    pass

  def end_debug_label_region(self)->None:
    """"""
    pass

  def insert_debug_label(self, label_name:str)->None:
    """"""
    pass

  def is_initialized(self)->bool:
    """"""
    pass

  def is_running(self)->bool:
    """"""
    pass

  def get_play_space(self)->int:
    """"""
    pass

  def get_predicted_display_time(self)->int:
    """"""
    pass

  def get_next_frame_time(self)->int:
    """"""
    pass

  def can_render(self)->bool:
    """"""
    pass

  def find_action(self, name:str, action_set:__core__.RID)->__core__.RID:
    """"""
    pass

  def action_get_handle(self, action:__core__.RID)->int:
    """"""
    pass

  def get_hand_tracker(self, hand_index:int)->int:
    """"""
    pass

  def register_composition_layer_provider(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None:
    """"""
    pass

  def unregister_composition_layer_provider(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None:
    """"""
    pass

  def register_projection_views_extension(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None:
    """"""
    pass

  def unregister_projection_views_extension(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None:
    """"""
    pass

  def get_render_state_z_near(self)->float:
    """"""
    pass

  def get_render_state_z_far(self)->float:
    """"""
    pass

  def set_velocity_texture(self, render_target:__core__.RID)->None:
    """"""
    pass

  def set_velocity_depth_texture(self, render_target:__core__.RID)->None:
    """"""
    pass

  def set_velocity_target_size(self, target_size:__core__.Vector2i)->None:
    """"""
    pass

  def get_supported_swapchain_formats(self)->__core__.PackedInt64Array:
    """"""
    pass

  def openxr_swapchain_create(self, create_flags:int, usage_flags:int, swapchain_format:int, width:int, height:int, sample_count:int, array_size:int)->int:
    """"""
    pass

  def openxr_swapchain_free(self, swapchain:int)->None:
    """"""
    pass

  def openxr_swapchain_get_swapchain(self, swapchain:int)->int:
    """"""
    pass

  def openxr_swapchain_acquire(self, swapchain:int)->None:
    """"""
    pass

  def openxr_swapchain_get_image(self, swapchain:int)->__core__.RID:
    """"""
    pass

  def openxr_swapchain_release(self, swapchain:int)->None:
    """"""
    pass

  def get_projection_layer(self)->int:
    """"""
    pass

  def set_render_region(self, render_region:__core__.Rect2i)->None:
    """"""
    pass

  def set_emulate_environment_blend_mode_alpha_blend(self, enabled:bool)->None:
    """"""
    pass

  def is_environment_blend_mode_alpha_supported(self)->int:
    """"""
    pass


