from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__



class SkeletonModification2DTwoBoneIK(__skeletonmodification2d__.SkeletonModification2D):
  """
		This `SkeletonModification2D` uses an algorithm typically called TwoBoneIK. This algorithm works by leveraging the law of cosines and the lengths of the bones to figure out what rotation the bones currently have, and what rotation they need to make a complete triangle, where the first bone, the second bone, and the target form the three vertices of the triangle. Because the algorithm works by making a triangle, it can only operate on two bones.
		TwoBoneIK is great for arms, legs, and really any joints that can be represented by just two bones that bend to reach a target. This solver is more lightweight than `SkeletonModification2DFABRIK`, but gives similar, natural looking results.
	"""

  @staticmethod
  def constructor()->SkeletonModification2DTwoBoneIK:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DTwoBoneIK:pass


  @property
  def target_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def target_minimum_distance(self)->float:
    """"""
    pass
  @target_minimum_distance.setter
  def target_minimum_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def target_maximum_distance(self)->float:
    """"""
    pass
  @target_maximum_distance.setter
  def target_maximum_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def flip_bend_direction(self)->bool:
    """"""
    pass
  @flip_bend_direction.setter
  def flip_bend_direction(self,  value:bool)->None:
    """"""
    pass
  def set_target_node(self, target_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_target_minimum_distance(self, minimum_distance:float)->None:
    """"""
    pass

  def get_target_minimum_distance(self)->float:
    """"""
    pass

  def set_target_maximum_distance(self, maximum_distance:float)->None:
    """"""
    pass

  def get_target_maximum_distance(self)->float:
    """"""
    pass

  def set_flip_bend_direction(self, flip_direction:bool)->None:
    """"""
    pass

  def get_flip_bend_direction(self)->bool:
    """"""
    pass

  def set_joint_one_bone2d_node(self, bone2d_node:__core__.NodePath|str)->None:
    """
				Sets the `Bone2D` node that is being used as the first bone in the TwoBoneIK modification.
			"""
    pass

  def get_joint_one_bone2d_node(self)->__core__.NodePath:
    """
				Returns the `Bone2D` node that is being used as the first bone in the TwoBoneIK modification.
			"""
    pass

  def set_joint_one_bone_idx(self, bone_idx:int)->None:
    """
				Sets the index of the `Bone2D` node that is being used as the first bone in the TwoBoneIK modification.
			"""
    pass

  def get_joint_one_bone_idx(self)->int:
    """
				Returns the index of the `Bone2D` node that is being used as the first bone in the TwoBoneIK modification.
			"""
    pass

  def set_joint_two_bone2d_node(self, bone2d_node:__core__.NodePath|str)->None:
    """
				Sets the `Bone2D` node that is being used as the second bone in the TwoBoneIK modification.
			"""
    pass

  def get_joint_two_bone2d_node(self)->__core__.NodePath:
    """
				Returns the `Bone2D` node that is being used as the second bone in the TwoBoneIK modification.
			"""
    pass

  def set_joint_two_bone_idx(self, bone_idx:int)->None:
    """
				Sets the index of the `Bone2D` node that is being used as the second bone in the TwoBoneIK modification.
			"""
    pass

  def get_joint_two_bone_idx(self)->int:
    """
				Returns the index of the `Bone2D` node that is being used as the second bone in the TwoBoneIK modification.
			"""
    pass


