from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.T as __t__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.DisplayServer as __displayserver__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.D as __d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.Image as __image__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.R as __r__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.a as __a__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.2 as __2__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.t as __t__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__


class Feature:
  FEATURE_GLOBAL_MENU:int = 0
  FEATURE_SUBWINDOWS:int = 1
  FEATURE_TOUCHSCREEN:int = 2
  FEATURE_MOUSE:int = 3
  FEATURE_MOUSE_WARP:int = 4
  FEATURE_CLIPBOARD:int = 5
  FEATURE_VIRTUAL_KEYBOARD:int = 6
  FEATURE_CURSOR_SHAPE:int = 7
  FEATURE_CUSTOM_CURSOR_SHAPE:int = 8
  FEATURE_NATIVE_DIALOG:int = 9
  FEATURE_IME:int = 10
  FEATURE_WINDOW_TRANSPARENCY:int = 11
  FEATURE_HIDPI:int = 12
  FEATURE_ICON:int = 13
  FEATURE_NATIVE_ICON:int = 14
  FEATURE_ORIENTATION:int = 15
  FEATURE_SWAP_BUFFERS:int = 16
  FEATURE_CLIPBOARD_PRIMARY:int = 18
  FEATURE_TEXT_TO_SPEECH:int = 19
  FEATURE_EXTEND_TO_TITLE:int = 20
  FEATURE_SCREEN_CAPTURE:int = 21
  FEATURE_STATUS_INDICATOR:int = 22
  FEATURE_NATIVE_HELP:int = 23
  FEATURE_NATIVE_DIALOG_INPUT:int = 24
  FEATURE_NATIVE_DIALOG_FILE:int = 25
  FEATURE_NATIVE_DIALOG_FILE_EXTRA:int = 26
  FEATURE_WINDOW_DRAG:int = 27
  FEATURE_SCREEN_EXCLUDE_FROM_CAPTURE:int = 28
  FEATURE_WINDOW_EMBEDDING:int = 29
  FEATURE_NATIVE_DIALOG_FILE_MIME:int = 30
  FEATURE_EMOJI_AND_SYMBOL_PICKER:int = 31
class MouseMode:
  MOUSE_MODE_VISIBLE:int = 0
  MOUSE_MODE_HIDDEN:int = 1
  MOUSE_MODE_CAPTURED:int = 2
  MOUSE_MODE_CONFINED:int = 3
  MOUSE_MODE_CONFINED_HIDDEN:int = 4
  MOUSE_MODE_MAX:int = 5
class ScreenOrientation:
  SCREEN_LANDSCAPE:int = 0
  SCREEN_PORTRAIT:int = 1
  SCREEN_REVERSE_LANDSCAPE:int = 2
  SCREEN_REVERSE_PORTRAIT:int = 3
  SCREEN_SENSOR_LANDSCAPE:int = 4
  SCREEN_SENSOR_PORTRAIT:int = 5
  SCREEN_SENSOR:int = 6
class VirtualKeyboardType:
  KEYBOARD_KIND_DEFAULT:int = 0
  KEYBOARD_KIND_MULTILINE:int = 1
  KEYBOARD_KIND_NUMBER:int = 2
  KEYBOARD_KIND_NUMBER_DECIMAL:int = 3
  KEYBOARD_KIND_PHONE:int = 4
  KEYBOARD_KIND_EMAIL_ADDRESS:int = 5
  KEYBOARD_KIND_PASSWORD:int = 6
  KEYBOARD_KIND_URL:int = 7
class CursorShape:
  CURSOR_ARROW:int = 0
  CURSOR_IBEAM:int = 1
  CURSOR_POINTING_HAND:int = 2
  CURSOR_CROSS:int = 3
  CURSOR_WAIT:int = 4
  CURSOR_BUSY:int = 5
  CURSOR_DRAG:int = 6
  CURSOR_CAN_DROP:int = 7
  CURSOR_FORBIDDEN:int = 8
  CURSOR_VSIZE:int = 9
  CURSOR_HSIZE:int = 10
  CURSOR_BDIAGSIZE:int = 11
  CURSOR_FDIAGSIZE:int = 12
  CURSOR_MOVE:int = 13
  CURSOR_VSPLIT:int = 14
  CURSOR_HSPLIT:int = 15
  CURSOR_HELP:int = 16
  CURSOR_MAX:int = 17
class FileDialogMode:
  FILE_DIALOG_MODE_OPEN_FILE:int = 0
  FILE_DIALOG_MODE_OPEN_FILES:int = 1
  FILE_DIALOG_MODE_OPEN_DIR:int = 2
  FILE_DIALOG_MODE_OPEN_ANY:int = 3
  FILE_DIALOG_MODE_SAVE_FILE:int = 4
class WindowMode:
  WINDOW_MODE_WINDOWED:int = 0
  WINDOW_MODE_MINIMIZED:int = 1
  WINDOW_MODE_MAXIMIZED:int = 2
  WINDOW_MODE_FULLSCREEN:int = 3
  WINDOW_MODE_EXCLUSIVE_FULLSCREEN:int = 4
class WindowFlags:
  WINDOW_FLAG_RESIZE_DISABLED:int = 0
  WINDOW_FLAG_BORDERLESS:int = 1
  WINDOW_FLAG_ALWAYS_ON_TOP:int = 2
  WINDOW_FLAG_TRANSPARENT:int = 3
  WINDOW_FLAG_NO_FOCUS:int = 4
  WINDOW_FLAG_POPUP:int = 5
  WINDOW_FLAG_EXTEND_TO_TITLE:int = 6
  WINDOW_FLAG_MOUSE_PASSTHROUGH:int = 7
  WINDOW_FLAG_SHARP_CORNERS:int = 8
  WINDOW_FLAG_EXCLUDE_FROM_CAPTURE:int = 9
  WINDOW_FLAG_MAX:int = 10
class WindowEvent:
  WINDOW_EVENT_MOUSE_ENTER:int = 0
  WINDOW_EVENT_MOUSE_EXIT:int = 1
  WINDOW_EVENT_FOCUS_IN:int = 2
  WINDOW_EVENT_FOCUS_OUT:int = 3
  WINDOW_EVENT_CLOSE_REQUEST:int = 4
  WINDOW_EVENT_GO_BACK_REQUEST:int = 5
  WINDOW_EVENT_DPI_CHANGE:int = 6
  WINDOW_EVENT_TITLEBAR_CHANGE:int = 7
class WindowResizeEdge:
  WINDOW_EDGE_TOPERATOR_LEFT:int = 0
  WINDOW_EDGE_TOP:int = 1
  WINDOW_EDGE_TOPERATOR_RIGHT:int = 2
  WINDOW_EDGE_LEFT:int = 3
  WINDOW_EDGE_RIGHT:int = 4
  WINDOW_EDGE_BOTTOM_LEFT:int = 5
  WINDOW_EDGE_BOTTOM:int = 6
  WINDOW_EDGE_BOTTOM_RIGHT:int = 7
  WINDOW_EDGE_MAX:int = 8
class VSyncMode:
  VSYNC_DISABLED:int = 0
  VSYNC_ENABLED:int = 1
  VSYNC_ADAPTIVE:int = 2
  VSYNC_MAILBOX:int = 3
class HandleType:
  DISPLAY_HANDLE:int = 0
  WINDOW_HANDLE:int = 1
  WINDOW_VIEW:int = 2
  OPENGL_CONTEXT:int = 3
  EGL_DISPLAY:int = 4
  EGL_CONFIG:int = 5
class TTSUtteranceEvent:
  TTS_UTTERANCE_STARTED:int = 0
  TTS_UTTERANCE_ENDED:int = 1
  TTS_UTTERANCE_CANCELED:int = 2
  TTS_UTTERANCE_BOUNDARY:int = 3


class DisplayServer(__object__.Object):
  """
		`DisplayServer` handles everything related to window management. It is separated from `OS` as a single operating system may support multiple display servers.
		**Headless mode:** Starting the engine with the `--headless` `url=$DOCS_URL/tutorials/editor/command_line_tutorial.html`command line argument`/url` disables all rendering and window management functions. Most functions from `DisplayServer` will return dummy values in this case.
	"""



  @staticmethod
  def cast(other:__object__.Object)->DisplayServer:pass

  @staticmethod
  def instance()->DisplayServer:pass

  def has_feature(self, feature:int )->bool:
    """
				Returns `true` if the specified `feature` is supported by the current `DisplayServer`, `false` otherwise.
			"""
    pass

  def get_name(self)->str:
    """
				Returns the name of the `DisplayServer` currently in use. Most operating systems only have a single `DisplayServer`, but Linux has access to more than one `DisplayServer` (currently X11 and Wayland).
				The names of built-in display servers are `Windows`, `macOS`, `X11` (Linux), `Wayland` (Linux), `Android`, `iOS`, `web` (HTML5), and `headless` (when started with the `--headless` `url=$DOCS_URL/tutorials/editor/command_line_tutorial.html`command line argument`/url`).
			"""
    pass

  def help_set_search_callbacks(self, search_callback:__core__.Callable, action_callback:__core__.Callable)->None:
    """
				Sets native help system search callbacks.
				`search_callback` has the following arguments: `String search_string, int result_limit` and return a `Dictionary` with "key, display name" pairs for the search results. Called when the user enters search terms in the `Help` menu.
				`action_callback` has the following arguments: `String key`. Called when the user selects a search result in the `Help` menu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_popup_callbacks(self, menu_root:str, open_callback:__core__.Callable, close_callback:__core__.Callable)->None:
    """
				Registers callables to emit when the menu is respectively about to show or closed. Callback methods should have zero arguments.
			"""
    pass

  def global_menu_add_submenu_item(self, menu_root:str, label:str, submenu:str, index:int=-1)->int:
    """
				Adds an item that will act as a submenu of the global menu `menu_root`. The `submenu` argument is the ID of the global menu root that will be shown when the item is clicked.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_check_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new checkable item with text `label` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_icon_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` and icon `icon` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_icon_check_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new checkable item with text `label` and icon `icon` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_radio_check_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new radio-checkable item with text `label` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `global_menu_set_item_checked` for more info on how to control it.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_icon_radio_check_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new radio-checkable item with text `label` and icon `icon` to the global menu with ID `menu_root`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `global_menu_set_item_checked` for more info on how to control it.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_multistate_item(self, menu_root:str, label:str, max_states:int, default_state:int, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` to the global menu with ID `menu_root`.
				Contrarily to normal binary items, multistate items can have more than two states, as defined by `max_states`. Each press or activate of the item will increase the state by one. The default value is defined by `default_state`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** By default, there's no indication of the current item state, it should be changed manually.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_add_separator(self, menu_root:str, index:int=-1)->int:
    """
				Adds a separator between items to the global menu with ID `menu_root`. Separators also occupy an index.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_get_item_index_from_text(self, menu_root:str, text:str)->int:
    """
				Returns the index of the item with the specified `text`. Indices are automatically assigned to each item by the engine, and cannot be set manually.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_index_from_tag(self, menu_root:str, tag:Any)->int:
    """
				Returns the index of the item with the specified `tag`. Indices are automatically assigned to each item by the engine, and cannot be set manually.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_is_item_checked(self, menu_root:str, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is checked.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_is_item_checkable(self, menu_root:str, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is checkable in some way, i.e. if it has a checkbox or radio button.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_is_item_radio_checkable(self, menu_root:str, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` has radio button-style checkability.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_callback(self, menu_root:str, idx:int)->__core__.Callable:
    """
				Returns the callback of the item at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_key_callback(self, menu_root:str, idx:int)->__core__.Callable:
    """
				Returns the callback of the item accelerator at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_tag(self, menu_root:str, idx:int)->Any:
    """
				Returns the metadata of the specified item, which might be of any type. You can set it with `global_menu_set_item_tag`, which provides a simple way of assigning context data to items.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_text(self, menu_root:str, idx:int)->str:
    """
				Returns the text of the item at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_submenu(self, menu_root:str, idx:int)->str:
    """
				Returns the submenu ID of the item at index `idx`. See `global_menu_add_submenu_item` for more info on how to add a submenu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_accelerator(self, menu_root:str, idx:int)->int:
    """
				Returns the accelerator of the item at index `idx`. Accelerators are special combinations of keys that activate the item, no matter which control is focused.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_is_item_disabled(self, menu_root:str, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is disabled. When it is disabled it can't be selected, or its action invoked.
				See `global_menu_set_item_disabled` for more info on how to disable an item.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_is_item_hidden(self, menu_root:str, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is hidden.
				See `global_menu_set_item_hidden` for more info on how to hide an item.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_tooltip(self, menu_root:str, idx:int)->str:
    """
				Returns the tooltip associated with the specified index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_state(self, menu_root:str, idx:int)->int:
    """
				Returns the state of a multistate item. See `global_menu_add_multistate_item` for details.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_max_states(self, menu_root:str, idx:int)->int:
    """
				Returns number of states of a multistate item. See `global_menu_add_multistate_item` for details.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_icon(self, menu_root:str, idx:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns the icon of the item at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_indentation_level(self, menu_root:str, idx:int)->int:
    """
				Returns the horizontal offset of the item at the given `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_checked(self, menu_root:str, idx:int, checked:bool)->None:
    """
				Sets the checkstate status of the item at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_checkable(self, menu_root:str, idx:int, checkable:bool)->None:
    """
				Sets whether the item at index `idx` has a checkbox. If `false`, sets the type of the item to plain text.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_radio_checkable(self, menu_root:str, idx:int, checkable:bool)->None:
    """
				Sets the type of the item at the specified index `idx` to radio button. If `false`, sets the type of the item to plain text.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_callback(self, menu_root:str, idx:int, callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. Callback is emitted when an item is pressed.
				**Note:** The `callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_hover_callbacks(self, menu_root:str, idx:int, callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. The callback is emitted when an item is hovered.
				**Note:** The `callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_key_callback(self, menu_root:str, idx:int, key_callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. Callback is emitted when its accelerator is activated.
				**Note:** The `key_callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_tag(self, menu_root:str, idx:int, tag:Any)->None:
    """
				Sets the metadata of an item, which may be of any type. You can later get it with `global_menu_get_item_tag`, which provides a simple way of assigning context data to items.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_text(self, menu_root:str, idx:int, text:str)->None:
    """
				Sets the text of the item at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_submenu(self, menu_root:str, idx:int, submenu:str)->None:
    """
				Sets the submenu of the item at index `idx`. The submenu is the ID of a global menu root that would be shown when the item is clicked.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_accelerator(self, menu_root:str, idx:int, keycode:int )->None:
    """
				Sets the accelerator of the item at index `idx`. `keycode` can be a single `enum Key`, or a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_disabled(self, menu_root:str, idx:int, disabled:bool)->None:
    """
				Enables/disables the item at index `idx`. When it is disabled, it can't be selected and its action can't be invoked.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_hidden(self, menu_root:str, idx:int, hidden:bool)->None:
    """
				Hides/shows the item at index `idx`. When it is hidden, an item does not appear in a menu and its action cannot be invoked.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_tooltip(self, menu_root:str, idx:int, tooltip:str)->None:
    """
				Sets the `String` tooltip of the item at the specified index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_state(self, menu_root:str, idx:int, state:int)->None:
    """
				Sets the state of a multistate item. See `global_menu_add_multistate_item` for details.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_max_states(self, menu_root:str, idx:int, max_states:int)->None:
    """
				Sets number of state of a multistate item. See `global_menu_add_multistate_item` for details.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_set_item_icon(self, menu_root:str, idx:int, icon:__texture2d__.Texture2D)->None:
    """
				Replaces the `Texture2D` icon of the specified `idx`.
				**Note:** This method is implemented only on macOS.
				**Note:** This method is not supported by macOS "_dock" menu items.
			"""
    pass

  def global_menu_set_item_indentation_level(self, menu_root:str, idx:int, level:int)->None:
    """
				Sets the horizontal offset of the item at the given `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_get_item_count(self, menu_root:str)->int:
    """
				Returns number of items in the global menu with ID `menu_root`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_remove_item(self, menu_root:str, idx:int)->None:
    """
				Removes the item at index `idx` from the global menu `menu_root`.
				**Note:** The indices of items after the removed item will be shifted by one.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def global_menu_clear(self, menu_root:str)->None:
    """
				Removes all items from the global menu with ID `menu_root`.
				**Note:** This method is implemented only on macOS.
				**Supported system menu IDs:**
				`codeblock lang=text`
				"_main" - Main menu (macOS).
				"_dock" - Dock popup menu (macOS).
				"_apple" - Apple menu (macOS, custom items added before "Services").
				"_window" - Window menu (macOS, custom items added after "Bring All to Front").
				"_help" - Help menu (macOS).
				```
			"""
    pass

  def global_menu_get_system_menu_roots(self)->__core__.Dictionary:
    """
				Returns Dictionary of supported system menu IDs and names.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def tts_is_speaking(self)->bool:
    """
				Returns `true` if the synthesizer is generating speech, or have utterance waiting in the queue.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_is_paused(self)->bool:
    """
				Returns `true` if the synthesizer is in a paused state.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_get_voices(self)->typedarray::Dictionary:
    """
				Returns an `Array` of voice information dictionaries.
				Each `Dictionary` contains two `String` entries:
				- `name` is voice name.
				- `id` is voice identifier.
				- `language` is language code in `lang_Variant` format. The `lang` part is a 2 or 3-letter code based on the ISO-639 standard, in lowercase. The `code skip-lint`Variant` part is an engine-dependent string describing country, region or/and dialect.
				Note that Godot depends on system libraries for text-to-speech functionality. These libraries are installed by default on Windows and macOS, but not on all Linux distributions. If they are not present, this method will return an empty list. This applies to both Godot users on Linux, as well as end-users on Linux running Godot games that use text-to-speech.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_get_voices_for_language(self, language:str)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` of voice identifiers for the `language`.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_speak(self, text:str, voice:str, volume:int=50, pitch:float=1.0, rate:float=1.0, utterance_id:int=0, interrupt:bool=False)->None:
    """
				Adds an utterance to the queue. If `interrupt` is `true`, the queue is cleared first.
				- `voice` identifier is one of the `"id"` values returned by `tts_get_voices` or one of the values returned by `tts_get_voices_for_language`.
				- `volume` ranges from `0` (lowest) to `100` (highest).
				- `pitch` ranges from `0.0` (lowest) to `2.0` (highest), `1.0` is default pitch for the current voice.
				- `rate` ranges from `0.1` (lowest) to `10.0` (highest), `1.0` is a normal speaking rate. Other values act as a percentage relative.
				- `utterance_id` is passed as a parameter to the callback functions.
				**Note:** On Windows and Linux (X11/Wayland), utterance `text` can use SSML markup. SSML support is engine and voice dependent. If the engine does not support SSML, you should strip out all XML markup before calling `tts_speak`.
				**Note:** The granularity of pitch, rate, and volume is engine and voice dependent. Values may be truncated.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_pause(self)->None:
    """
				Puts the synthesizer into a paused state.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_resume(self)->None:
    """
				Resumes the synthesizer if it was paused.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_stop(self)->None:
    """
				Stops synthesis in progress and removes all utterances from the queue.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def tts_set_utterance_callback(self, event:int , callable:__core__.Callable)->None:
    """
				Adds a callback, which is called when the utterance has started, finished, canceled or reached a text boundary.
				- `constant TTS_UTTERANCE_STARTED`, `constant TTS_UTTERANCE_ENDED`, and `constant TTS_UTTERANCE_CANCELED` callable's method should take one `int` parameter, the utterance ID.
				- `constant TTS_UTTERANCE_BOUNDARY` callable's method should take two `int` parameters, the index of the character and the utterance ID.
				**Note:** The granularity of the boundary callbacks is engine dependent.
				**Note:** This method is implemented on Android, iOS, Web, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def is_dark_mode_supported(self)->bool:
    """
				Returns `true` if OS supports dark mode.
				**Note:** This method is implemented on Android, iOS, macOS, Windows, and Linux (X11/Wayland).
			"""
    pass

  def is_dark_mode(self)->bool:
    """
				Returns `true` if OS is using dark mode.
				**Note:** This method is implemented on Android, iOS, macOS, Windows, and Linux (X11/Wayland).
			"""
    pass

  def get_accent_color(self)->__core__.Color:
    """
				Returns OS theme accent color. Returns `Color(0, 0, 0, 0)`, if accent color is unknown.
				**Note:** This method is implemented on macOS, Windows, Android, and Linux (X11/Wayland).
			"""
    pass

  def get_base_color(self)->__core__.Color:
    """
				Returns the OS theme base color (default control background). Returns `Color(0, 0, 0, 0)` if the base color is unknown.
				**Note:** This method is implemented on macOS, Windows, and Android.
			"""
    pass

  def set_system_theme_change_callback(self, callable:__core__.Callable)->None:
    """
				Sets the `callable` that should be called when system theme settings are changed. Callback method should have zero arguments.
				**Note:** This method is implemented on Android, iOS, macOS, Windows, and Linux (X11/Wayland).
			"""
    pass

  def mouse_set_mode(self, mouse_mode:int )->None:
    """
				Sets the current mouse mode. See also `mouse_get_mode`.
			"""
    pass

  def mouse_get_mode(self)->int:
    """
				Returns the current mouse mode. See also `mouse_set_mode`.
			"""
    pass

  def warp_mouse(self, position:__core__.Vector2i)->None:
    """
				Sets the mouse cursor position to the given `position` relative to an origin at the upper left corner of the currently focused game Window Manager window.
				**Note:** `warp_mouse` is only supported on Windows, macOS, and Linux (X11/Wayland). It has no effect on Android, iOS, and Web.
			"""
    pass

  def mouse_get_position(self)->__core__.Vector2i:
    """
				Returns the mouse cursor's current position in screen coordinates.
			"""
    pass

  def mouse_get_button_state(self)->int:
    """
				Returns the current state of mouse buttons (whether each button is pressed) as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together. Equivalent to `Input.get_mouse_button_mask`.
			"""
    pass

  def clipboard_set(self, clipboard:str)->None:
    """
				Sets the user's clipboard content to the given string.
			"""
    pass

  def clipboard_get(self)->str:
    """
				Returns the user's clipboard as a string if possible.
			"""
    pass

  def clipboard_get_image(self)->__image__.Image:
    """
				Returns the user's clipboard as an image if possible.
				**Note:** This method uses the copied pixel data, e.g. from an image editing software or a web browser, not an image file copied from file explorer.
			"""
    pass

  def clipboard_has(self)->bool:
    """
				Returns `true` if there is a text content on the user's clipboard.
			"""
    pass

  def clipboard_has_image(self)->bool:
    """
				Returns `true` if there is an image content on the user's clipboard.
			"""
    pass

  def clipboard_set_primary(self, clipboard_primary:str)->None:
    """
				Sets the user's `url=https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer`primary`/url` clipboard content to the given string. This is the clipboard that is set when the user selects text in any application, rather than when pressing `kbd`Ctrl + C`/kbd`. The clipboard data can then be pasted by clicking the middle mouse button in any application that supports the primary clipboard mechanism.
				**Note:** This method is only implemented on Linux (X11/Wayland).
			"""
    pass

  def clipboard_get_primary(self)->str:
    """
				Returns the user's `url=https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer`primary`/url` clipboard as a string if possible. This is the clipboard that is set when the user selects text in any application, rather than when pressing `kbd`Ctrl + C`/kbd`. The clipboard data can then be pasted by clicking the middle mouse button in any application that supports the primary clipboard mechanism.
				**Note:** This method is only implemented on Linux (X11/Wayland).
			"""
    pass

  def get_display_cutouts(self)->typedarray::Rect2:
    """
				Returns an `Array` of `Rect2`, each of which is the bounding rectangle for a display cutout or notch. These are non-functional areas on edge-to-edge screens used by cameras and sensors. Returns an empty array if the device does not have cutouts. See also `get_display_safe_area`.
				**Note:** Currently only implemented on Android. Other platforms will return an empty array even if they do have display cutouts or notches.
			"""
    pass

  def get_display_safe_area(self)->__core__.Rect2i:
    """
				Returns the unobscured area of the display where interactive controls should be rendered. See also `get_display_cutouts`.
				**Note:** Currently only implemented on Android and iOS. On other platforms, `screen_get_usable_rect(SCREEN_OF_MAIN_WINDOW)` will be returned as a fallback. See also `screen_get_usable_rect`.
			"""
    pass

  def get_screen_count(self)->int:
    """
				Returns the number of displays available.
				**Note:** This method is implemented on Linux (X11 and Wayland), macOS, and Windows. On other platforms, this method always returns `1`.
			"""
    pass

  def get_primary_screen(self)->int:
    """
				Returns index of the primary screen.
				**Note:** This method is implemented on Linux/X11, macOS, and Windows. On other platforms, this method always returns `0`.
			"""
    pass

  def get_keyboard_focus_screen(self)->int:
    """
				Returns the index of the screen containing the window with the keyboard focus, or the primary screen if there's no focused window.
				**Note:** This method is implemented on Linux/X11, macOS, and Windows. On other platforms, this method always returns the primary screen.
			"""
    pass

  def get_screen_from_rect(self, rect:__core__.Rect2)->int:
    """
				Returns the index of the screen that overlaps the most with the given rectangle. Returns `constant INVALID_SCREEN` if the rectangle doesn't overlap with any screen or has no area.
			"""
    pass

  def screen_get_position(self, screen:int=-1)->__core__.Vector2i:
    """
				Returns the screen's top-left corner position in pixels. Returns `constant Vector2i.ZERO` if `screen` is invalid. On multi-monitor setups, the screen position is relative to the virtual desktop area. On multi-monitor setups with different screen resolutions or orientations, the origin might be located outside any display like this:
				`codeblock lang=text`
				* (0, 0)        +-------+
				                |       |
				+-------------+ |       |
				|             | |       |
				|             | |       |
				+-------------+ +-------+
				```
				See also `screen_get_size`.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
			"""
    pass

  def screen_get_size(self, screen:int=-1)->__core__.Vector2i:
    """
				Returns the screen's size in pixels. See also `screen_get_position` and `screen_get_usable_rect`. Returns `constant Vector2i.ZERO` if `screen` is invalid.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
			"""
    pass

  def screen_get_usable_rect(self, screen:int=-1)->__core__.Rect2i:
    """
				Returns the portion of the screen that is not obstructed by a status bar in pixels. See also `screen_get_size`.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Linux/X11, macOS, and Windows. On other platforms, this method always returns `Rect2i(screen_get_position(screen), screen_get_size(screen))`.
			"""
    pass

  def screen_get_dpi(self, screen:int=-1)->int:
    """
				Returns the dots per inch density of the specified screen. Returns platform specific default value if `screen` is invalid.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** On macOS, returned value is inaccurate if fractional display scaling mode is used.
				**Note:** On Android devices, the actual screen densities are grouped into six generalized densities:
				`codeblock lang=text`
				   ldpi - 120 dpi
				   mdpi - 160 dpi
				   hdpi - 240 dpi
				  xhdpi - 320 dpi
				 xxhdpi - 480 dpi
				xxxhdpi - 640 dpi
				```
				**Note:** This method is implemented on Android, iOS, Linux (X11/Wayland), macOS, Web, and Windows. On other platforms, this method always returns `72`.
			"""
    pass

  def screen_get_scale(self, screen:int=-1)->float:
    """
				Returns the scale factor of the specified screen by index. Returns `1.0` if `screen` is invalid.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** On macOS, the returned value is `2.0` for hiDPI (Retina) screens, and `1.0` for all other cases.
				**Note:** On Linux (Wayland), the returned value is accurate only when `screen` is `constant SCREEN_OF_MAIN_WINDOW`. Due to API limitations, passing a direct index will return a rounded-up integer, if the screen has a fractional scale (e.g. `1.25` would get rounded up to `2.0`).
				**Note:** This method is implemented on Android, iOS, Web, macOS, and Linux (Wayland). On other platforms, this method always returns `1.0`.
			"""
    pass

  def is_touchscreen_available(self)->bool:
    """
				Returns `true` if touch events are available (Android or iOS), the capability is detected on the Web platform or if `ProjectSettings.input_devices/pointing/emulate_touch_from_mouse` is `true`.
			"""
    pass

  def screen_get_max_scale(self)->float:
    """
				Returns the greatest scale factor of all screens.
				**Note:** On macOS returned value is `2.0` if there is at least one hiDPI (Retina) screen in the system, and `1.0` in all other cases.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def screen_get_refresh_rate(self, screen:int=-1)->float:
    """
				Returns the current refresh rate of the specified screen. Returns `-1.0` if `screen` is invalid or the `DisplayServer` fails to find the refresh rate for the specified screen.
				To fallback to a default refresh rate if the method fails, try:
				```gdscript
				var refresh_rate = DisplayServer.screen_get_refresh_rate()
				if refresh_rate < 0:
					refresh_rate = 60.0
				```
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Android, iOS, macOS, Linux (X11 and Wayland), and Windows. On other platforms, this method always returns `-1.0`.
			"""
    pass

  def screen_get_pixel(self, position:__core__.Vector2i)->__core__.Color:
    """
				Returns color of the display pixel at the `position`.
				**Note:** This method is implemented on Linux (X11, excluding XWayland), macOS, and Windows. On other platforms, this method always returns `Color`.
				**Note:** On macOS, this method requires the "Screen Recording" permission. If permission is not granted, this method returns a screenshot that will only contain the desktop wallpaper, the current application's window, and other related UI elements.
			"""
    pass

  def screen_get_image(self, screen:int=-1)->__image__.Image:
    """
				Returns a screenshot of the `screen`. Returns `null` if `screen` is invalid or the `DisplayServer` fails to capture screenshot.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Linux (X11, excluding XWayland), macOS, and Windows. On other platforms, this method always returns `null`.
				**Note:** On macOS, this method requires the "Screen Recording" permission. If permission is not granted, this method returns a screenshot that will not include other application windows or OS elements not related to the application.
			"""
    pass

  def screen_get_image_rect(self, rect:__core__.Rect2i)->__image__.Image:
    """
				Returns a screenshot of the screen region defined by `rect`. Returns `null` if `rect` is outside screen bounds or the `DisplayServer` fails to capture screenshot.
				**Note:** This method is implemented on macOS and Windows. On other platforms, this method always returns `null`.
				**Note:** On macOS, this method requires the "Screen Recording" permission. If permission is not granted, this method returns a screenshot that will not include other application windows or OS elements not related to the application.
			"""
    pass

  def screen_set_orientation(self, orientation:int , screen:int=-1)->None:
    """
				Sets the `screen`'s `orientation`. See also `screen_get_orientation`.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Android and iOS.
				**Note:** On iOS, this method has no effect if `ProjectSettings.display/window/handheld/orientation` is not set to `constant SCREEN_SENSOR`.
			"""
    pass

  def screen_get_orientation(self, screen:int=-1)->int:
    """
				Returns the `screen`'s current orientation. See also `screen_set_orientation`. Returns `constant SCREEN_LANDSCAPE` if `screen` is invalid.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Android and iOS. On other platforms, this method always returns `constant SCREEN_LANDSCAPE`.
			"""
    pass

  def screen_set_keep_on(self, enable:bool)->None:
    """
				Sets whether the screen should never be turned off by the operating system's power-saving measures. See also `screen_is_kept_on`.
			"""
    pass

  def screen_is_kept_on(self)->bool:
    """
				Returns `true` if the screen should never be turned off by the operating system's power-saving measures. See also `screen_set_keep_on`.
			"""
    pass

  def get_window_list(self)->__core__.PackedInt32Array:
    """
				Returns the list of Godot window IDs belonging to this process.
				**Note:** Native dialogs are not included in this list.
			"""
    pass

  def get_window_at_screen_position(self, position:__core__.Vector2i)->int:
    """
				Returns the ID of the window at the specified screen `position` (in pixels). On multi-monitor setups, the screen position is relative to the virtual desktop area. On multi-monitor setups with different screen resolutions or orientations, the origin may be located outside any display like this:
				`codeblock lang=text`
				* (0, 0)        +-------+
				                |       |
				+-------------+ |       |
				|             | |       |
				|             | |       |
				+-------------+ +-------+
				```
			"""
    pass

  def window_get_native_handle(self, handle_type:int , window_id:int=0)->int:
    """
				Returns internal structure pointers for use in plugins.
				**Note:** This method is implemented on Android, Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def window_get_active_popup(self)->int:
    """
				Returns ID of the active popup window, or `constant INVALID_WINDOW_ID` if there is none.
			"""
    pass

  def window_set_popup_safe_rect(self, window:int, rect:__core__.Rect2i)->None:
    """
				Sets the bounding box of control, or menu item that was used to open the popup window, in the screen coordinate system. Clicking this area will not auto-close this popup.
			"""
    pass

  def window_get_popup_safe_rect(self, window:int)->__core__.Rect2i:
    """
				Returns the bounding box of control, or menu item that was used to open the popup window, in the screen coordinate system.
			"""
    pass

  def window_set_title(self, title:str, window_id:int=0)->None:
    """
				Sets the title of the given window to `title`.
				**Note:** It's recommended to change this value using `Window.title` instead.
				**Note:** Avoid changing the window title every frame, as this can cause performance issues on certain window managers. Try to change the window title only a few times per second at most.
			"""
    pass

  def window_get_title_size(self, title:str, window_id:int=0)->__core__.Vector2i:
    """
				Returns the estimated window title bar size (including text and window buttons) for the window specified by `window_id` (in pixels). This method does not change the window title.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def window_set_mouse_passthrough(self, region:__core__.PackedVector2Array, window_id:int=0)->None:
    """
				Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through.
				Passing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).
				
				```gdscript
				# Set region, using Path2D node.
				DisplayServer.window_set_mouse_passthrough($Path2D.curve.get_baked_points())

				# Set region, using Polygon2D node.
				DisplayServer.window_set_mouse_passthrough($Polygon2D.polygon)

				# Reset region to default.
				DisplayServer.window_set_mouse_passthrough(``)
				```
				
				
				**Note:** On Windows, the portion of a window that lies outside the region is not drawn, while on Linux (X11) and macOS it is.
				**Note:** This method is implemented on Linux (X11), macOS and Windows.
			"""
    pass

  def window_get_current_screen(self, window_id:int=0)->int:
    """
				Returns the screen the window specified by `window_id` is currently positioned on. If the screen overlaps multiple displays, the screen where the window's center is located is returned. See also `window_set_current_screen`. Returns `constant INVALID_SCREEN` if `window_id` is invalid.
				**Note:** This method is implemented on Linux/X11, macOS, and Windows. On other platforms, this method always returns `0`.
			"""
    pass

  def window_set_current_screen(self, screen:int, window_id:int=0)->None:
    """
				Moves the window specified by `window_id` to the specified `screen`. See also `window_get_current_screen`.
				**Note:** One of the following constants can be used as `screen`: `constant SCREEN_OF_MAIN_WINDOW`, `constant SCREEN_PRIMARY`, `constant SCREEN_WITH_MOUSE_FOCUS`, or `constant SCREEN_WITH_KEYBOARD_FOCUS`.
				**Note:** This method is implemented on Linux/X11, macOS, and Windows.
			"""
    pass

  def window_get_position(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the position of the client area of the given window on the screen.
			"""
    pass

  def window_get_position_with_decorations(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the position of the given window on the screen including the borders drawn by the operating system. See also `window_get_position`.
			"""
    pass

  def window_set_position(self, position:__core__.Vector2i, window_id:int=0)->None:
    """
				Sets the position of the given window to `position`. On multi-monitor setups, the screen position is relative to the virtual desktop area. On multi-monitor setups with different screen resolutions or orientations, the origin may be located outside any display like this:
				`codeblock lang=text`
				* (0, 0)        +-------+
				                |       |
				+-------------+ |       |
				|             | |       |
				|             | |       |
				+-------------+ +-------+
				```
				See also `window_get_position` and `window_set_size`.
				**Note:** It's recommended to change this value using `Window.position` instead.
				**Note:** On Linux (Wayland): this method is a no-op.
			"""
    pass

  def window_get_size(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the size of the window specified by `window_id` (in pixels), excluding the borders drawn by the operating system. This is also called the "client area". See also `window_get_size_with_decorations`, `window_set_size` and `window_get_position`.
			"""
    pass

  def window_set_size(self, size:__core__.Vector2i, window_id:int=0)->None:
    """
				Sets the size of the given window to `size` (in pixels). See also `window_get_size` and `window_get_position`.
				**Note:** It's recommended to change this value using `Window.size` instead.
			"""
    pass

  def window_set_rect_changed_callback(self, callback:__core__.Callable, window_id:int=0)->None:
    """
				Sets the `callback` that will be called when the window specified by `window_id` is moved or resized.
				**Warning:** Advanced users only! Adding such a callback to a `Window` node will override its default implementation, which can introduce bugs.
			"""
    pass

  def window_set_window_event_callback(self, callback:__core__.Callable, window_id:int=0)->None:
    """
				Sets the `callback` that will be called when an event occurs in the window specified by `window_id`.
				**Warning:** Advanced users only! Adding such a callback to a `Window` node will override its default implementation, which can introduce bugs.
			"""
    pass

  def window_set_input_event_callback(self, callback:__core__.Callable, window_id:int=0)->None:
    """
				Sets the `callback` that should be called when any `InputEvent` is sent to the window specified by `window_id`.
				**Warning:** Advanced users only! Adding such a callback to a `Window` node will override its default implementation, which can introduce bugs.
			"""
    pass

  def window_set_input_text_callback(self, callback:__core__.Callable, window_id:int=0)->None:
    """
				Sets the `callback` that should be called when text is entered using the virtual keyboard to the window specified by `window_id`.
				**Warning:** Advanced users only! Adding such a callback to a `Window` node will override its default implementation, which can introduce bugs.
			"""
    pass

  def window_set_drop_files_callback(self, callback:__core__.Callable, window_id:int=0)->None:
    """
				Sets the `callback` that should be called when files are dropped from the operating system's file manager to the window specified by `window_id`. `callback` should take one `PackedStringArray` argument, which is the list of dropped files.
				**Warning:** Advanced users only! Adding such a callback to a `Window` node will override its default implementation, which can introduce bugs.
				**Note:** This method is implemented on Windows, macOS, Linux (X11/Wayland), and Web.
			"""
    pass

  def window_get_attached_instance_id(self, window_id:int=0)->int:
    """
				Returns the `Object.get_instance_id` of the `Window` the `window_id` is attached to.
			"""
    pass

  def window_get_max_size(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the window's maximum size (in pixels). See also `window_set_max_size`.
			"""
    pass

  def window_set_max_size(self, max_size:__core__.Vector2i, window_id:int=0)->None:
    """
				Sets the maximum size of the window specified by `window_id` in pixels. Normally, the user will not be able to drag the window to make it larger than the specified size. See also `window_get_max_size`.
				**Note:** It's recommended to change this value using `Window.max_size` instead.
				**Note:** Using third-party tools, it is possible for users to disable window geometry restrictions and therefore bypass this limit.
			"""
    pass

  def window_get_min_size(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the window's minimum size (in pixels). See also `window_set_min_size`.
			"""
    pass

  def window_set_min_size(self, min_size:__core__.Vector2i, window_id:int=0)->None:
    """
				Sets the minimum size for the given window to `min_size` in pixels. Normally, the user will not be able to drag the window to make it smaller than the specified size. See also `window_get_min_size`.
				**Note:** It's recommended to change this value using `Window.min_size` instead.
				**Note:** By default, the main window has a minimum size of `Vector2i(64, 64)`. This prevents issues that can arise when the window is resized to a near-zero size.
				**Note:** Using third-party tools, it is possible for users to disable window geometry restrictions and therefore bypass this limit.
			"""
    pass

  def window_get_size_with_decorations(self, window_id:int=0)->__core__.Vector2i:
    """
				Returns the size of the window specified by `window_id` (in pixels), including the borders drawn by the operating system. See also `window_get_size`.
			"""
    pass

  def window_get_mode(self, window_id:int=0)->int:
    """
				Returns the mode of the given window.
			"""
    pass

  def window_set_mode(self, mode:int , window_id:int=0)->None:
    """
				Sets window mode for the given window to `mode`.
				**Note:** On Android, setting it to `constant WINDOW_MODE_FULLSCREEN` or `constant WINDOW_MODE_EXCLUSIVE_FULLSCREEN` will enable immersive mode.
				**Note:** Setting the window to full screen forcibly sets the borderless flag to `true`, so make sure to set it back to `false` when not wanted.
			"""
    pass

  def window_set_flag(self, flag:int , enabled:bool, window_id:int=0)->None:
    """
				Enables or disables the given window's given `flag`.
			"""
    pass

  def window_get_flag(self, flag:int , window_id:int=0)->bool:
    """
				Returns the current value of the given window's `flag`.
			"""
    pass

  def window_set_window_buttons_offset(self, offset:__core__.Vector2i, window_id:int=0)->None:
    """
				When `constant WINDOW_FLAG_EXTEND_TO_TITLE` flag is set, set offset to the center of the first titlebar button.
				**Note:** This flag is implemented only on macOS.
			"""
    pass

  def window_get_safe_title_margins(self, window_id:int=0)->__core__.Vector3i:
    """
				Returns left margins (`x`), right margins (`y`) and height (`z`) of the title that are safe to use (contains no buttons or other elements) when `constant WINDOW_FLAG_EXTEND_TO_TITLE` flag is set.
			"""
    pass

  def window_request_attention(self, window_id:int=0)->None:
    """
				Makes the window specified by `window_id` request attention, which is materialized by the window title and taskbar entry blinking until the window is focused. This usually has no visible effect if the window is currently focused. The exact behavior varies depending on the operating system.
			"""
    pass

  def window_move_to_foreground(self, window_id:int=0)->None:
    """
				Moves the window specified by `window_id` to the foreground, so that it is visible over other windows.
			"""
    pass

  def window_is_focused(self, window_id:int=0)->bool:
    """
				Returns `true` if the window specified by `window_id` is focused.
			"""
    pass

  def window_can_draw(self, window_id:int=0)->bool:
    """
				Returns `true` if anything can be drawn in the window specified by `window_id`, `false` otherwise. Using the `--disable-render-loop` command line argument or a headless build will return `false`.
			"""
    pass

  def window_set_transient(self, window_id:int, parent_window_id:int)->None:
    """
				Sets window transient parent. Transient window will be destroyed with its transient parent and will return focus to their parent when closed. The transient window is displayed on top of a non-exclusive full-screen parent window. Transient windows can't enter full-screen mode.
				**Note:** It's recommended to change this value using `Window.transient` instead.
				**Note:** The behavior might be different depending on the platform.
			"""
    pass

  def window_set_exclusive(self, window_id:int, exclusive:bool)->None:
    """
				If set to `true`, this window will always stay on top of its parent window, parent window will ignore input while this window is opened.
				**Note:** On macOS, exclusive windows are confined to the same space (virtual desktop or screen) as the parent window.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def window_set_ime_active(self, active:bool, window_id:int=0)->None:
    """
				Sets whether `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` should be enabled for the window specified by `window_id`. See also `window_set_ime_position`.
			"""
    pass

  def window_set_ime_position(self, position:__core__.Vector2i, window_id:int=0)->None:
    """
				Sets the position of the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` popup for the specified `window_id`. Only effective if `window_set_ime_active` was set to `true` for the specified `window_id`.
			"""
    pass

  def window_set_vsync_mode(self, vsync_mode:int , window_id:int=0)->None:
    """
				Sets the V-Sync mode of the given window. See also `ProjectSettings.display/window/vsync/vsync_mode`.
				Depending on the platform and used renderer, the engine will fall back to `constant VSYNC_ENABLED` if the desired mode is not supported.
				**Note:** V-Sync modes other than `constant VSYNC_ENABLED` are only supported in the Forward+ and Mobile rendering methods, not Compatibility.
			"""
    pass

  def window_get_vsync_mode(self, window_id:int=0)->int:
    """
				Returns the V-Sync mode of the given window.
			"""
    pass

  def window_is_maximize_allowed(self, window_id:int=0)->bool:
    """
				Returns `true` if the given window can be maximized (the maximize button is enabled).
			"""
    pass

  def window_maximize_on_title_dbl_click(self)->bool:
    """
				Returns `true`, if double-click on a window title should maximize it.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def window_minimize_on_title_dbl_click(self)->bool:
    """
				Returns `true`, if double-click on a window title should minimize it.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def window_start_drag(self, window_id:int=0)->None:
    """
				Starts an interactive drag operation on the window with the given `window_id`, using the current mouse position. Call this method when handling a mouse button being pressed to simulate a pressed event on the window's title bar. Using this method allows the window to participate in space switching, tiling, and other system features.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def window_start_resize(self, edge:int , window_id:int=0)->None:
    """
				Starts an interactive resize operation on the window with the given `window_id`, using the current mouse position. Call this method when handling a mouse button being pressed to simulate a pressed event on the window's edge.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def ime_get_selection(self)->__core__.Vector2i:
    """
				Returns the text selection in the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` composition string, with the `Vector2i`'s `x` component being the caret position and `y` being the length of the selection.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def ime_get_text(self)->str:
    """
				Returns the composition string contained within the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` window.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def virtual_keyboard_show(self, existing_text:str, position:__core__.Rect2= __core__.Rect2.new0(), type:int =0, max_length:int=-1, cursor_start:int=-1, cursor_end:int=-1)->None:
    """
				Shows the virtual keyboard if the platform has one.
				`existing_text` parameter is useful for implementing your own `LineEdit` or `TextEdit`, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).
				`position` parameter is the screen space `Rect2` of the edited text.
				`type` parameter allows configuring which type of virtual keyboard to show.
				`max_length` limits the number of characters that can be entered if different from `-1`.
				`cursor_start` can optionally define the current text cursor position if `cursor_end` is not set.
				`cursor_start` and `cursor_end` can optionally define the current text selection.
				**Note:** This method is implemented on Android, iOS and Web.
			"""
    pass

  def virtual_keyboard_hide(self)->None:
    """
				Hides the virtual keyboard if it is shown, does nothing otherwise.
			"""
    pass

  def virtual_keyboard_get_height(self)->int:
    """
				Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden.
			"""
    pass

  def has_hardware_keyboard(self)->bool:
    """
				Returns `true` if a hardware keyboard is connected.
				**Note:** This method is implemented on Android and iOS. On other platforms, this method always returns `true`.
			"""
    pass

  def cursor_set_shape(self, shape:int )->None:
    """
				Sets the default mouse cursor shape. The cursor's appearance will vary depending on the user's operating system and mouse cursor theme. See also `cursor_get_shape` and `cursor_set_custom_image`.
			"""
    pass

  def cursor_get_shape(self)->int:
    """
				Returns the default mouse cursor shape set by `cursor_set_shape`.
			"""
    pass

  def cursor_set_custom_image(self, cursor:__resource__.Resource, shape:int =0, hotspot:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Sets a custom mouse cursor image for the given `shape`. This means the user's operating system and mouse cursor theme will no longer influence the mouse cursor's appearance.
				`cursor` can be either a `Texture2D` or an `Image`, and it should not be larger than 256×256 to display correctly. Optionally, `hotspot` can be set to offset the image's position relative to the click point. By default, `hotspot` is set to the top-left corner of the image. See also `cursor_set_shape`.
			"""
    pass

  def get_swap_cancel_ok(self)->bool:
    """
				Returns `true` if positions of **OK** and **Cancel** buttons are swapped in dialogs. This is enabled by default on Windows to follow interface conventions, and be toggled by changing `ProjectSettings.gui/common/swap_cancel_ok`.
				**Note:** This doesn't affect native dialogs such as the ones spawned by `DisplayServer.dialog_show`.
			"""
    pass

  def enable_for_stealing_focus(self, process_id:int)->None:
    """
				Allows the `process_id` PID to steal focus from this window. In other words, this disables the operating system's focus stealing protection for the specified PID.
				**Note:** This method is implemented only on Windows.
			"""
    pass

  def dialog_show(self, title:str, description:str, buttons:__core__.PackedStringArray, callback:__core__.Callable)->int:
    """
				Shows a text dialog which uses the operating system's native look-and-feel. `callback` should accept a single `int` parameter which corresponds to the index of the pressed button.
				**Note:** This method is implemented if the display server has the `constant FEATURE_NATIVE_DIALOG` feature. Supported platforms include macOS, Windows, and Android.
			"""
    pass

  def dialog_input_text(self, title:str, description:str, existing_text:str, callback:__core__.Callable)->int:
    """
				Shows a text input dialog which uses the operating system's native look-and-feel. `callback` should accept a single `String` parameter which contains the text field's contents.
				**Note:** This method is implemented if the display server has the `constant FEATURE_NATIVE_DIALOG_INPUT` feature. Supported platforms include macOS, Windows, and Android.
			"""
    pass

  def file_dialog_show(self, title:str, current_directory:str, filename:str, show_hidden:bool, mode:int , filters:__core__.PackedStringArray, callback:__core__.Callable)->int:
    """
				Displays OS native dialog for selecting files or directories in the file system.
				Each filter string in the `filters` array should be formatted like this: `*.png,*.jpg,*.jpeg;Image Files;image/png,image/jpeg`. The description text of the filter is optional and can be omitted. It is recommended to set both file extension and MIME type. See also `FileDialog.filters`.
				Callbacks have the following arguments: `status: bool, selected_paths: PackedStringArray, selected_filter_index: int`. **On Android,** the third callback argument (`selected_filter_index`) is always `0`.
				**Note:** This method is implemented if the display server has the `constant FEATURE_NATIVE_DIALOG_FILE` feature. Supported platforms include Linux (X11/Wayland), Windows, macOS, and Android (API level 29+).
				**Note:** `current_directory` might be ignored.
				**Note:** Embedded file dialog and Windows file dialog support only file extensions, while Android, Linux, and macOS file dialogs also support MIME types.
				**Note:** On Android and Linux, `show_hidden` is ignored.
				**Note:** On Android and macOS, native file dialogs have no title.
				**Note:** On macOS, sandboxed apps will save security-scoped bookmarks to retain access to the opened folders across multiple sessions. Use `OS.get_granted_permissions` to get a list of saved bookmarks.
			"""
    pass

  def file_dialog_with_options_show(self, title:str, current_directory:str, root:str, filename:str, show_hidden:bool, mode:int , filters:__core__.PackedStringArray, options:__core__.Array, callback:__core__.Callable)->int:
    """
				Displays OS native dialog for selecting files or directories in the file system with additional user selectable options.
				Each filter string in the `filters` array should be formatted like this: `*.png,*.jpg,*.jpeg;Image Files;image/png,image/jpeg`. The description text of the filter is optional and can be omitted. It is recommended to set both file extension and MIME type. See also `FileDialog.filters`.
				`options` is array of `Dictionary`s with the following keys:
				- `"name"` - option's name `String`.
				- `"values"` - `PackedStringArray` of values. If empty, boolean option (check box) is used.
				- `"default"` - default selected option index (`int`) or default boolean value (`bool`).
				Callbacks have the following arguments: `status: bool, selected_paths: PackedStringArray, selected_filter_index: int, selected_option: Dictionary`.
				**Note:** This method is implemented if the display server has the `constant FEATURE_NATIVE_DIALOG_FILE_EXTRA` feature. Supported platforms include Linux (X11/Wayland), Windows, and macOS.
				**Note:** `current_directory` might be ignored.
				**Note:** Embedded file dialog and Windows file dialog support only file extensions, while Android, Linux, and macOS file dialogs also support MIME types.
				**Note:** On Linux (X11), `show_hidden` is ignored.
				**Note:** On macOS, native file dialogs have no title.
				**Note:** On macOS, sandboxed apps will save security-scoped bookmarks to retain access to the opened folders across multiple sessions. Use `OS.get_granted_permissions` to get a list of saved bookmarks.
			"""
    pass

  def beep(self)->None:
    """
				Plays the beep sound from the operative system, if possible. Because it comes from the OS, the beep sound will be audible even if the application is muted. It may also be disabled for the entire OS by the user.
				**Note:** This method is implemented on macOS, Linux (X11/Wayland), and Windows.
			"""
    pass

  def keyboard_get_layout_count(self)->int:
    """
				Returns the number of keyboard layouts.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def keyboard_get_current_layout(self)->int:
    """
				Returns active keyboard layout index.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS, and Windows.
			"""
    pass

  def keyboard_set_current_layout(self, index:int)->None:
    """
				Sets the active keyboard layout.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def keyboard_get_layout_language(self, index:int)->str:
    """
				Returns the ISO-639/BCP-47 language code of the keyboard layout at position `index`.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def keyboard_get_layout_name(self, index:int)->str:
    """
				Returns the localized name of the keyboard layout at position `index`.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def keyboard_get_keycode_from_physical(self, keycode:int )->int:
    """
				Converts a physical (US QWERTY) `keycode` to one in the active keyboard layout.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def keyboard_get_label_from_physical(self, keycode:int )->int:
    """
				Converts a physical (US QWERTY) `keycode` to localized label printed on the key in the active keyboard layout.
				**Note:** This method is implemented on Linux (X11/Wayland), macOS and Windows.
			"""
    pass

  def show_emoji_and_symbol_picker(self)->None:
    """
				Opens system emoji and symbol picker.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def process_events(self)->None:
    """
				Perform window manager processing, including input flushing. See also `force_process_and_drop_events`, `Input.flush_buffered_events` and `Input.use_accumulated_input`.
			"""
    pass

  def force_process_and_drop_events(self)->None:
    """
				Forces window manager processing while ignoring all `InputEvent`s. See also `process_events`.
				**Note:** This method is implemented on Windows and macOS.
			"""
    pass

  def set_native_icon(self, filename:str)->None:
    """
				Sets the window icon (usually displayed in the top-left corner) in the operating system's _native_ format. The file at `filename` must be in `.ico` format on Windows or `.icns` on macOS. By using specially crafted `.ico` or `.icns` icons, `set_native_icon` allows specifying different icons depending on the size the icon is displayed at. This size is determined by the operating system and user preferences (including the display scale factor). To use icons in other formats, use `set_icon` instead.
				**Note:** Requires support for `constant FEATURE_NATIVE_ICON`.
			"""
    pass

  def set_icon(self, image:__image__.Image)->None:
    """
				Sets the window icon (usually displayed in the top-left corner) with an `Image`. To use icons in the operating system's native format, use `set_native_icon` instead.
				**Note:** Requires support for `constant FEATURE_ICON`.
			"""
    pass

  def create_status_indicator(self, icon:__texture2d__.Texture2D, tooltip:str, callback:__core__.Callable)->int:
    """
				Creates a new application status indicator with the specified icon, tooltip, and activation callback.
				`callback` should take two arguments: the pressed mouse button (one of the `enum MouseButton` constants) and the click position in screen coordinates (a `Vector2i`).
			"""
    pass

  def status_indicator_set_icon(self, id:int, icon:__texture2d__.Texture2D)->None:
    """
				Sets the application status indicator icon.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def status_indicator_set_tooltip(self, id:int, tooltip:str)->None:
    """
				Sets the application status indicator tooltip.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def status_indicator_set_menu(self, id:int, menu_rid:__core__.RID)->None:
    """
				Sets the application status indicator native popup menu.
				**Note:** On macOS, the menu is activated by any mouse button. Its activation callback is _not_ triggered.
				**Note:** On Windows, the menu is activated by the right mouse button, selecting the status icon and pressing `kbd`Shift + F10`/kbd`, or the applications key. The menu's activation callback for the other mouse buttons is still triggered.
				**Note:** Native popup is only supported if `NativeMenu` supports the `constant NativeMenu.FEATURE_POPUP_MENU` feature.
			"""
    pass

  def status_indicator_set_callback(self, id:int, callback:__core__.Callable)->None:
    """
				Sets the application status indicator activation callback. `callback` should take two arguments: `int` mouse button index (one of `enum MouseButton` values) and `Vector2i` click position in screen coordinates.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def status_indicator_get_rect(self, id:int)->__core__.Rect2:
    """
				Returns the rectangle for the given status indicator `id` in screen coordinates. If the status indicator is not visible, returns an empty `Rect2`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def delete_status_indicator(self, id:int)->None:
    """
				Removes the application status indicator.
			"""
    pass

  def tablet_get_driver_count(self)->int:
    """
				Returns the total number of available tablet drivers.
				**Note:** This method is implemented only on Windows.
			"""
    pass

  def tablet_get_driver_name(self, idx:int)->str:
    """
				Returns the tablet driver name for the given index.
				**Note:** This method is implemented only on Windows.
			"""
    pass

  def tablet_get_current_driver(self)->str:
    """
				Returns current active tablet driver name.
				**Note:** This method is implemented only on Windows.
			"""
    pass

  def tablet_set_current_driver(self, name:str)->None:
    """
				Set active tablet driver name.
				Supported drivers:
				- `winink`: Windows Ink API, default.
				- `wintab`: Wacom Wintab API (compatible device driver required).
				- `dummy`: Dummy driver, tablet input is disabled.
				**Note:** This method is implemented only on Windows.
			"""
    pass

  def is_window_transparency_available(self)->bool:
    """
				Returns `true` if the window background can be made transparent. This method returns `false` if `ProjectSettings.display/window/per_pixel_transparency/allowed` is set to `false`, or if transparency is not supported by the renderer or OS compositor.
			"""
    pass

  def register_additional_output(self, object:__object__.Object)->None:
    """
				Registers an `Object` which represents an additional output that will be rendered too, beyond normal windows. The `Object` is only used as an identifier, which can be later passed to `unregister_additional_output`.
				This can be used to prevent Godot from skipping rendering when no normal windows are visible.
			"""
    pass

  def unregister_additional_output(self, object:__object__.Object)->None:
    """
				Unregisters an `Object` representing an additional output, that was registered via `register_additional_output`.
			"""
    pass

  def has_additional_outputs(self)->bool:
    """
				Returns `true` if any additional outputs have been registered via `register_additional_output`.
			"""
    pass


