from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RegExMatch as __regexmatch__
import py4godot.classes.E as __e__
import py4godot.classes.T as __t__
import py4godot.classes.g as __g__
import py4godot.classes.RegEx as __regex__
import py4godot.classes.e as __e__
import py4godot.classes.M as __m__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.p as __p__
import py4godot.classes.R as __r__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.h as __h__
import py4godot.classes.y as __y__
import py4godot.classes.x as __x__
import py4godot.classes.t as __t__



class RegEx(__refcounted__.RefCounted):
  """"""

  @staticmethod
  def constructor()->RegEx:pass



  @staticmethod
  def cast(other:__object__.Object)->RegEx:pass


  @staticmethod
  def create_from_string(pattern:str, show_error:bool=True)->__regex__.RegEx:
    """"""
    pass

  def clear(self)->None:
    """"""
    pass

  def compile(self, pattern:str, show_error:bool=True)->int:
    """"""
    pass

  def search(self, subject:str, offset:int=0, end:int=-1)->__regexmatch__.RegExMatch:
    """"""
    pass

  def search_all(self, subject:str, offset:int=0, end:int=-1)->typedarray::RegExMatch:
    """"""
    pass

  def sub(self, subject:str, replacement:str, all:bool=False, offset:int=0, end:int=-1)->str:
    """"""
    pass

  def is_valid(self)->bool:
    """"""
    pass

  def get_pattern(self)->str:
    """"""
    pass

  def get_group_count(self)->int:
    """"""
    pass

  def get_names(self)->__core__.PackedStringArray:
    """"""
    pass


