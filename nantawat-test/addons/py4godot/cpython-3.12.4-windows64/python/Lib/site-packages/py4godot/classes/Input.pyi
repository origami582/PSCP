from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.i as __i__
import py4godot.classes.Resource as __resource__
import py4godot.classes.e as __e__
import py4godot.classes.Input as __input__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.t as __t__
import py4godot.classes.p as __p__
import py4godot.classes.r as __r__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__


class MouseMode:
  MOUSE_MODE_VISIBLE:int = 0
  MOUSE_MODE_HIDDEN:int = 1
  MOUSE_MODE_CAPTURED:int = 2
  MOUSE_MODE_CONFINED:int = 3
  MOUSE_MODE_CONFINED_HIDDEN:int = 4
  MOUSE_MODE_MAX:int = 5
class CursorShape:
  CURSOR_ARROW:int = 0
  CURSOR_IBEAM:int = 1
  CURSOR_POINTING_HAND:int = 2
  CURSOR_CROSS:int = 3
  CURSOR_WAIT:int = 4
  CURSOR_BUSY:int = 5
  CURSOR_DRAG:int = 6
  CURSOR_CAN_DROP:int = 7
  CURSOR_FORBIDDEN:int = 8
  CURSOR_VSIZE:int = 9
  CURSOR_HSIZE:int = 10
  CURSOR_BDIAGSIZE:int = 11
  CURSOR_FDIAGSIZE:int = 12
  CURSOR_MOVE:int = 13
  CURSOR_VSPLIT:int = 14
  CURSOR_HSPLIT:int = 15
  CURSOR_HELP:int = 16


class Input(__object__.Object):
  """
		The `Input` singleton handles key presses, mouse buttons and movement, gamepads, and input actions. Actions and their events can be set in the **Input Map** tab in **Project > Project Settings**, or with the `InputMap` class.
		**Note:** `Input`'s methods reflect the global input state and are not affected by `Control.accept_event` or `Viewport.set_input_as_handled`, as those methods only deal with the way input is propagated in the `SceneTree`.
	"""
  joy_connection_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->Input:pass

  @staticmethod
  def instance()->Input:pass

  @property
  def mouse_mode(self)->int:
    """"""
    pass
  @mouse_mode.setter
  def mouse_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def use_accumulated_input(self)->bool:
    """"""
    pass
  @use_accumulated_input.setter
  def use_accumulated_input(self,  value:bool)->None:
    """"""
    pass
  @property
  def emulate_mouse_from_touch(self)->bool:
    """"""
    pass
  @emulate_mouse_from_touch.setter
  def emulate_mouse_from_touch(self,  value:bool)->None:
    """"""
    pass
  @property
  def emulate_touch_from_mouse(self)->bool:
    """"""
    pass
  @emulate_touch_from_mouse.setter
  def emulate_touch_from_mouse(self,  value:bool)->None:
    """"""
    pass
  def is_anything_pressed(self)->bool:
    """
				Returns `true` if any action, key, joypad button, or mouse button is being pressed. This will also return `true` if any action is simulated via code by calling `action_press`.
			"""
    pass

  def is_key_pressed(self, keycode:int )->bool:
    """
				Returns `true` if you are pressing the Latin key in the current keyboard layout. You can pass a `enum Key` constant.
				`is_key_pressed` is only recommended over `is_physical_key_pressed` in non-game applications. This ensures that shortcut keys behave as expected depending on the user's keyboard layout, as keyboard shortcuts are generally dependent on the keyboard layout in non-game applications. If in doubt, use `is_physical_key_pressed`.
				**Note:** Due to keyboard ghosting, `is_key_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
			"""
    pass

  def is_physical_key_pressed(self, keycode:int )->bool:
    """
				Returns `true` if you are pressing the key in the physical location on the 101/102-key US QWERTY keyboard. You can pass a `enum Key` constant.
				`is_physical_key_pressed` is recommended over `is_key_pressed` for in-game actions, as it will make `kbd`W`/kbd`/`kbd`A`/kbd`/`kbd`S`/kbd`/`kbd`D`/kbd` layouts work regardless of the user's keyboard layout. `is_physical_key_pressed` will also ensure that the top row number keys work on any keyboard layout. If in doubt, use `is_physical_key_pressed`.
				**Note:** Due to keyboard ghosting, `is_physical_key_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
			"""
    pass

  def is_key_label_pressed(self, keycode:int )->bool:
    """
				Returns `true` if you are pressing the key with the `keycode` printed on it. You can pass a `enum Key` constant or any Unicode character code.
			"""
    pass

  def is_mouse_button_pressed(self, button:int )->bool:
    """
				Returns `true` if you are pressing the mouse button specified with `enum MouseButton`.
			"""
    pass

  def is_joy_button_pressed(self, device:int, button:int )->bool:
    """
				Returns `true` if you are pressing the joypad button at index `button`.
			"""
    pass

  def is_action_pressed(self, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` if you are pressing the action event.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
				**Note:** Due to keyboard ghosting, `is_action_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
			"""
    pass

  def is_action_just_pressed(self, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` when the user has _started_ pressing the action event in the current frame or physics tick. It will only return `true` on the frame or tick that the user pressed down the button.
				This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
				**Note:** Returning `true` does not imply that the action is _still_ pressed. An action can be pressed and released again rapidly, and `true` will still be returned so as not to miss input.
				**Note:** Due to keyboard ghosting, `is_action_just_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
				**Note:** During input handling (e.g. `Node._input`), use `InputEvent.is_action_pressed` instead to query the action state of the current event.
			"""
    pass

  def is_action_just_released(self, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` when the user _stops_ pressing the action event in the current frame or physics tick. It will only return `true` on the frame or tick that the user releases the button.
				**Note:** Returning `true` does not imply that the action is _still_ not pressed. An action can be released and pressed again rapidly, and `true` will still be returned so as not to miss input.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
				**Note:** During input handling (e.g. `Node._input`), use `InputEvent.is_action_released` instead to query the action state of the current event.
			"""
    pass

  def get_action_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float:
    """
				Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis such as the keyboard, the value returned will be 0 or 1.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def get_action_raw_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float:
    """
				Returns a value between 0 and 1 representing the raw intensity of the given action, ignoring the action's deadzone. In most cases, you should use `get_action_strength` instead.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def get_axis(self, negative_action:__core__.StringName|str, positive_action:__core__.StringName|str)->float:
    """
				Get axis input by specifying two actions, one negative and one positive.
				This is a shorthand for writing `Input.get_action_strength("positive_action") - Input.get_action_strength("negative_action")`.
			"""
    pass

  def get_vector(self, negative_x:__core__.StringName|str, positive_x:__core__.StringName|str, negative_y:__core__.StringName|str, positive_y:__core__.StringName|str, deadzone:float=-1.0)->__core__.Vector2:
    """
				Gets an input vector by specifying four actions for the positive and negative X and Y axes.
				This method is useful when getting vector input, such as from a joystick, directional pad, arrows, or WASD. The vector has its length limited to 1 and has a circular deadzone, which is useful for using vector input as movement.
				By default, the deadzone is automatically calculated from the average of the action deadzones. However, you can override the deadzone to be whatever you want (on the range of 0 to 1).
			"""
    pass

  def add_joy_mapping(self, mapping:str, update_existing:bool=False)->None:
    """
				Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.
			"""
    pass

  def remove_joy_mapping(self, guid:str)->None:
    """
				Removes all mappings from the internal database that match the given GUID. All currently connected joypads that use this GUID will become unmapped.
				On Android, Godot will map to an internal fallback mapping.
			"""
    pass

  def is_joy_known(self, device:int)->bool:
    """
				Returns `true` if the system knows the specified device. This means that it sets all button and axis indices. Unknown joypads are not expected to match these constants, but you can still retrieve events from them.
			"""
    pass

  def get_joy_axis(self, device:int, axis:int )->float:
    """
				Returns the current value of the joypad axis at index `axis`.
			"""
    pass

  def get_joy_name(self, device:int)->str:
    """
				Returns the name of the joypad at the specified device index, e.g. `PS4 Controller`. Godot uses the `url=https://github.com/gabomdq/SDL_GameControllerDB`SDL2 game controller database`/url` to determine gamepad names.
			"""
    pass

  def get_joy_guid(self, device:int)->str:
    """
				Returns an SDL2-compatible device GUID on platforms that use gamepad remapping, e.g. `030000004c050000c405000000010000`. Returns an empty string if it cannot be found. Godot uses the `url=https://github.com/gabomdq/SDL_GameControllerDB`SDL2 game controller database`/url` to determine gamepad names and mappings based on this GUID.
				On Windows, all XInput joypad GUIDs will be overridden by Godot to `__XINPUT_DEVICE__`, because their mappings are the same.
			"""
    pass

  def get_joy_info(self, device:int)->__core__.Dictionary:
    """
				Returns a dictionary with extra platform-specific information about the device, e.g. the raw gamepad name from the OS or the Steam Input index.
				On Windows, the dictionary contains the following fields:
				`xinput_index`: The index of the controller in the XInput system. Undefined for DirectInput devices.
				`vendor_id`: The USB vendor ID of the device.
				`product_id`: The USB product ID of the device.
				On Linux:
				`raw_name`: The name of the controller as it came from the OS, before getting renamed by the godot controller database.
				`vendor_id`: The USB vendor ID of the device.
				`product_id`: The USB product ID of the device.
				`steam_input_index`: The Steam Input gamepad index, if the device is not a Steam Input device this key won't be present.
				**Note:** The returned dictionary is always empty on Web, iOS, Android, and macOS.
			"""
    pass

  def should_ignore_device(self, vendor_id:int, product_id:int)->bool:
    """
				Queries whether an input device should be ignored or not. Devices can be ignored by setting the environment variable `SDL_GAMECONTROLLER_IGNORE_DEVICES`. Read the `url=https://wiki.libsdl.org/SDL2`SDL documentation`/url` for more information.
				**Note:** Some 3rd party tools can contribute to the list of ignored devices. For example, _SteamInput_ creates virtual devices from physical devices for remapping purposes. To avoid handling the same input device twice, the original device is added to the ignore list.
			"""
    pass

  def get_connected_joypads(self)->typedarray::int:
    """
				Returns an `Array` containing the device IDs of all currently connected joypads.
			"""
    pass

  def get_joy_vibration_strength(self, device:int)->__core__.Vector2:
    """
				Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.
			"""
    pass

  def get_joy_vibration_duration(self, device:int)->float:
    """
				Returns the duration of the current vibration effect in seconds.
			"""
    pass

  def start_joy_vibration(self, device:int, weak_magnitude:float, strong_magnitude:float, duration:float=0)->None:
    """
				Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. `weak_magnitude` is the strength of the weak motor (between 0 and 1) and `strong_magnitude` is the strength of the strong motor (between 0 and 1). `duration` is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely). The vibration can be stopped early by calling `stop_joy_vibration`.
				**Note:** Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds.
				**Note:** For macOS, vibration is only supported in macOS 11 and later.
			"""
    pass

  def stop_joy_vibration(self, device:int)->None:
    """
				Stops the vibration of the joypad started with `start_joy_vibration`.
			"""
    pass

  def vibrate_handheld(self, duration_ms:int=500, amplitude:float=-1.0)->None:
    """
				Vibrate the handheld device for the specified duration in milliseconds.
				`amplitude` is the strength of the vibration, as a value between `0.0` and `1.0`. If set to `-1.0`, the default vibration strength of the device is used.
				**Note:** This method is implemented on Android, iOS, and Web. It has no effect on other platforms.
				**Note:** For Android, `vibrate_handheld` requires enabling the `VIBRATE` permission in the export preset. Otherwise, `vibrate_handheld` will have no effect.
				**Note:** For iOS, specifying the duration is only supported in iOS 13 and later.
				**Note:** For Web, the amplitude cannot be changed.
				**Note:** Some web browsers such as Safari and Firefox for Android do not support `vibrate_handheld`.
			"""
    pass

  def get_gravity(self)->__core__.Vector3:
    """
				Returns the gravity in m/s² of the device's accelerometer sensor, if the device has one. Otherwise, the method returns `constant Vector3.ZERO`.
				**Note:** This method only works on Android and iOS. On other platforms, it always returns `constant Vector3.ZERO`.
				**Note:** For Android, `ProjectSettings.input_devices/sensors/enable_gravity` must be enabled.
			"""
    pass

  def get_accelerometer(self)->__core__.Vector3:
    """
				Returns the acceleration in m/s² of the device's accelerometer sensor, if the device has one. Otherwise, the method returns `constant Vector3.ZERO`.
				Note this method returns an empty `Vector3` when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.
				**Note:** This method only works on Android and iOS. On other platforms, it always returns `constant Vector3.ZERO`.
				**Note:** For Android, `ProjectSettings.input_devices/sensors/enable_accelerometer` must be enabled.
			"""
    pass

  def get_magnetometer(self)->__core__.Vector3:
    """
				Returns the magnetic field strength in micro-Tesla for all axes of the device's magnetometer sensor, if the device has one. Otherwise, the method returns `constant Vector3.ZERO`.
				**Note:** This method only works on Android and iOS. On other platforms, it always returns `constant Vector3.ZERO`.
				**Note:** For Android, `ProjectSettings.input_devices/sensors/enable_magnetometer` must be enabled.
			"""
    pass

  def get_gyroscope(self)->__core__.Vector3:
    """
				Returns the rotation rate in rad/s around a device's X, Y, and Z axes of the gyroscope sensor, if the device has one. Otherwise, the method returns `constant Vector3.ZERO`.
				**Note:** This method only works on Android and iOS. On other platforms, it always returns `constant Vector3.ZERO`.
				**Note:** For Android, `ProjectSettings.input_devices/sensors/enable_gyroscope` must be enabled.
			"""
    pass

  def set_gravity(self, value:__core__.Vector3)->None:
    """
				Sets the gravity value of the accelerometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
				**Note:** This value can be immediately overwritten by the hardware sensor value on Android and iOS.
			"""
    pass

  def set_accelerometer(self, value:__core__.Vector3)->None:
    """
				Sets the acceleration value of the accelerometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
				**Note:** This value can be immediately overwritten by the hardware sensor value on Android and iOS.
			"""
    pass

  def set_magnetometer(self, value:__core__.Vector3)->None:
    """
				Sets the value of the magnetic field of the magnetometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
				**Note:** This value can be immediately overwritten by the hardware sensor value on Android and iOS.
			"""
    pass

  def set_gyroscope(self, value:__core__.Vector3)->None:
    """
				Sets the value of the rotation rate of the gyroscope sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
				**Note:** This value can be immediately overwritten by the hardware sensor value on Android and iOS.
			"""
    pass

  def get_last_mouse_velocity(self)->__core__.Vector2:
    """
				Returns the last mouse velocity. To provide a precise and jitter-free velocity, mouse velocity is only calculated every 0.1s. Therefore, mouse velocity will lag mouse movements.
			"""
    pass

  def get_last_mouse_screen_velocity(self)->__core__.Vector2:
    """
				Returns the last mouse velocity in screen coordinates. To provide a precise and jitter-free velocity, mouse velocity is only calculated every 0.1s. Therefore, mouse velocity will lag mouse movements.
			"""
    pass

  def get_mouse_button_mask(self)->int:
    """
				Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together. Equivalent to `DisplayServer.mouse_get_button_state`.
			"""
    pass

  def set_mouse_mode(self, mode:int )->None:
    """"""
    pass

  def get_mouse_mode(self)->int:
    """"""
    pass

  def warp_mouse(self, position:__core__.Vector2)->None:
    """
				Sets the mouse position to the specified vector, provided in pixels and relative to an origin at the upper left corner of the currently focused Window Manager game window.
				Mouse position is clipped to the limits of the screen resolution, or to the limits of the game window if `enum MouseMode` is set to `constant MOUSE_MODE_CONFINED` or `constant MOUSE_MODE_CONFINED_HIDDEN`.
				**Note:** `warp_mouse` is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.
			"""
    pass

  def action_press(self, action:__core__.StringName|str, strength:float=1.0)->None:
    """
				This will simulate pressing the specified action.
				The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.
				**Note:** This method will not cause any `Node._input` calls. It is intended to be used with `is_action_pressed` and `is_action_just_pressed`. If you want to simulate `_input`, use `parse_input_event` instead.
			"""
    pass

  def action_release(self, action:__core__.StringName|str)->None:
    """
				If the specified action is already pressed, this will release it.
			"""
    pass

  def set_default_cursor_shape(self, shape:int =0)->None:
    """
				Sets the default cursor shape to be used in the viewport instead of `constant CURSOR_ARROW`.
				**Note:** If you want to change the default cursor shape for `Control`'s nodes, use `Control.mouse_default_cursor_shape` instead.
				**Note:** This method generates an `InputEventMouseMotion` to update cursor immediately.
			"""
    pass

  def get_current_cursor_shape(self)->int:
    """
				Returns the currently assigned cursor shape.
			"""
    pass

  def set_custom_mouse_cursor(self, image:__resource__.Resource, shape:int =0, hotspot:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Sets a custom mouse cursor image, which is only visible inside the game window, for the given mouse `shape`. The hotspot can also be specified. Passing `null` to the image parameter resets to the system cursor.
				`image` can be either `Texture2D` or `Image` and its size must be lower than or equal to 256×256. To avoid rendering issues, sizes lower than or equal to 128×128 are recommended.
				`hotspot` must be within `image`'s size.
				**Note:** `AnimatedTexture`s aren't supported as custom mouse cursors. If using an `AnimatedTexture`, only the first frame will be displayed.
				**Note:** The **Lossless**, **Lossy** or **Uncompressed** compression modes are recommended. The **Video RAM** compression mode can be used, but it will be decompressed on the CPU, which means loading times are slowed down and no memory is saved compared to lossless modes.
				**Note:** On the web platform, the maximum allowed cursor image size is 128×128. Cursor images larger than 32×32 will also only be displayed if the mouse cursor image is entirely located within the page for `url=https://chromestatus.com/feature/5825971391299584`security reasons`/url`.
			"""
    pass

  def parse_input_event(self, event:__inputevent__.InputEvent)->None:
    """
				Feeds an `InputEvent` to the game. Can be used to artificially trigger input events from code. Also generates `Node._input` calls.
				
				```gdscript
				var cancel_event = InputEventAction.new()
				cancel_event.action = "ui_cancel"
				cancel_event.pressed = true
				Input.parse_input_event(cancel_event)
				```
				
				
				**Note:** Calling this function has no influence on the operating system. So for example sending an `InputEventMouseMotion` will not move the OS mouse cursor to the specified position (use `warp_mouse` instead) and sending `kbd`Alt/Cmd + Tab`/kbd` as `InputEventKey` won't toggle between active windows.
			"""
    pass

  def set_use_accumulated_input(self, enable:bool)->None:
    """"""
    pass

  def is_using_accumulated_input(self)->bool:
    """"""
    pass

  def flush_buffered_events(self)->None:
    """
				Sends all input events which are in the current buffer to the game loop. These events may have been buffered as a result of accumulated input (`use_accumulated_input`) or agile input flushing (`ProjectSettings.input_devices/buffering/agile_event_flushing`).
				The engine will already do this itself at key execution points (at least once per frame). However, this can be useful in advanced cases where you want precise control over the timing of event handling.
			"""
    pass

  def set_emulate_mouse_from_touch(self, enable:bool)->None:
    """"""
    pass

  def is_emulating_mouse_from_touch(self)->bool:
    """"""
    pass

  def set_emulate_touch_from_mouse(self, enable:bool)->None:
    """"""
    pass

  def is_emulating_touch_from_mouse(self)->bool:
    """"""
    pass


