from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__


class Param:
  PARAM_LINEAR_LOWER_LIMIT:int = 0
  PARAM_LINEAR_UPPER_LIMIT:int = 1
  PARAM_LINEAR_LIMIT_SOFTNESS:int = 2
  PARAM_LINEAR_RESTITUTION:int = 3
  PARAM_LINEAR_DAMPING:int = 4
  PARAM_LINEAR_MOTOR_TARGET_VELOCITY:int = 5
  PARAM_LINEAR_MOTOR_FORCE_LIMIT:int = 6
  PARAM_LINEAR_SPRING_STIFFNESS:int = 7
  PARAM_LINEAR_SPRING_DAMPING:int = 8
  PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT:int = 9
  PARAM_ANGULAR_LOWER_LIMIT:int = 10
  PARAM_ANGULAR_UPPER_LIMIT:int = 11
  PARAM_ANGULAR_LIMIT_SOFTNESS:int = 12
  PARAM_ANGULAR_DAMPING:int = 13
  PARAM_ANGULAR_RESTITUTION:int = 14
  PARAM_ANGULAR_FORCE_LIMIT:int = 15
  PARAM_ANGULAR_ERP:int = 16
  PARAM_ANGULAR_MOTOR_TARGET_VELOCITY:int = 17
  PARAM_ANGULAR_MOTOR_FORCE_LIMIT:int = 18
  PARAM_ANGULAR_SPRING_STIFFNESS:int = 19
  PARAM_ANGULAR_SPRING_DAMPING:int = 20
  PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT:int = 21
  PARAM_MAX:int = 22
class Flag:
  FLAG_ENABLE_LINEAR_LIMIT:int = 0
  FLAG_ENABLE_ANGULAR_LIMIT:int = 1
  FLAG_ENABLE_LINEAR_SPRING:int = 3
  FLAG_ENABLE_ANGULAR_SPRING:int = 2
  FLAG_ENABLE_MOTOR:int = 4
  FLAG_ENABLE_LINEAR_MOTOR:int = 5
  FLAG_MAX:int = 6


class Generic6DOFJoint3D(__joint3d__.Joint3D):
  """
		The `Generic6DOFJoint3D` (6 Degrees Of Freedom) joint allows for implementing custom types of joints by locking the rotation and translation of certain axes.
		The first 3 DOF represent the linear motion of the physics bodies and the last 3 DOF represent the angular motion of the physics bodies. Each axis can be either locked, or limited.
	"""

  @staticmethod
  def constructor()->Generic6DOFJoint3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Generic6DOFJoint3D:pass


  def set_param_x(self, param:int , value:float)->None:
    """
"""
    pass

  def get_param_x(self, param:int )->float:
    """
"""
    pass

  def set_param_y(self, param:int , value:float)->None:
    """
"""
    pass

  def get_param_y(self, param:int )->float:
    """
"""
    pass

  def set_param_z(self, param:int , value:float)->None:
    """
"""
    pass

  def get_param_z(self, param:int )->float:
    """
"""
    pass

  def set_flag_x(self, flag:int , value:bool)->None:
    """
"""
    pass

  def get_flag_x(self, flag:int )->bool:
    """
"""
    pass

  def set_flag_y(self, flag:int , value:bool)->None:
    """
"""
    pass

  def get_flag_y(self, flag:int )->bool:
    """
"""
    pass

  def set_flag_z(self, flag:int , value:bool)->None:
    """
"""
    pass

  def get_flag_z(self, flag:int )->bool:
    """
"""
    pass


