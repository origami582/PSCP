from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GDScript as __gdscript__
import py4godot.classes.E as __e__
import py4godot.classes.T as __t__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.d as __d__
import py4godot.classes.Script as __script__
import py4godot.classes.c as __c__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.EditorSyntaxHighlighter as __editorsyntaxhighlighter__
import py4godot.classes.y as __y__
import py4godot.classes.s as __s__
import py4godot.classes.ScriptExtension as __scriptextension__
import py4godot.classes.t as __t__
import py4godot.classes.S as __s__
import py4godot.classes.B as __b__



class ScriptEditor(__panelcontainer__.PanelContainer):
  """
		Godot editor's script editor.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_script_editor`.
	"""
  editor_script_changed: BuiltinSignal
  script_close: BuiltinSignal

  @staticmethod
  def constructor()->ScriptEditor:pass



  @staticmethod
  def cast(other:__object__.Object)->ScriptEditor:pass


  def get_current_editor(self)->__scripteditorbase__.ScriptEditorBase:
    """
				Returns the `ScriptEditorBase` object that the user is currently editing.
			"""
    pass

  def get_open_script_editors(self)->typedarray::ScriptEditorBase:
    """
				Returns an array with all `ScriptEditorBase` objects which are currently open in editor.
			"""
    pass

  def get_breakpoints(self)->__core__.PackedStringArray:
    """
				Returns array of breakpoints.
			"""
    pass

  def register_syntax_highlighter(self, syntax_highlighter:__editorsyntaxhighlighter__.EditorSyntaxHighlighter)->None:
    """
				Registers the `EditorSyntaxHighlighter` to the editor, the `EditorSyntaxHighlighter` will be available on all open scripts.
				**Note:** Does not apply to scripts that are already opened.
			"""
    pass

  def unregister_syntax_highlighter(self, syntax_highlighter:__editorsyntaxhighlighter__.EditorSyntaxHighlighter)->None:
    """
				Unregisters the `EditorSyntaxHighlighter` from the editor.
				**Note:** The `EditorSyntaxHighlighter` will still be applied to scripts that are already opened.
			"""
    pass

  def goto_line(self, line_number:int)->None:
    """
				Goes to the specified line in the current script.
			"""
    pass

  def get_current_script(self)->__script__.Script|__gdscript__.GDScript|__scriptextension__.ScriptExtension:
    """
				Returns a `Script` that is currently active in editor.
			"""
    pass

  def get_open_scripts(self)->typedarray::Script:
    """
				Returns an array with all `Script` objects which are currently open in editor.
			"""
    pass

  def open_script_create_dialog(self, base_name:str, base_path:str)->None:
    """
				Opens the script create dialog. The script will extend `base_name`. The file extension can be omitted from `base_path`. It will be added based on the selected scripting language.
			"""
    pass

  def goto_help(self, topic:str)->None:
    """
				Opens help for the given topic. The `topic` is an encoded string that controls which class, method, constant, signal, annotation, property, or theme item should be focused.
				The supported `topic` formats include `class_name:class`, `class_method:class:method`, `class_constant:class:constant`, `class_signal:class:signal`, `class_annotation:class:@annotation`, `class_property:class:property`, and `class_theme_item:class:item`, where `class` is the class name, `method` is the method name, `constant` is the constant name, `signal` is the signal name, `annotation` is the annotation name, `property` is the property name, and `item` is the theme item.
				```gdscript
				# Shows help for the Node class.
				class_name:Node
				# Shows help for the global min function.
				# Global objects are accessible in the `@GlobalScope` namespace, shown here.
				class_method:@GlobalScope:min
				# Shows help for get_viewport in the Node class.
				class_method:Node:get_viewport
				# Shows help for the Input constant MOUSE_BUTTON_MIDDLE.
				class_constant:Input:MOUSE_BUTTON_MIDDLE
				# Shows help for the BaseButton signal pressed.
				class_signal:BaseButton:pressed
				# Shows help for the CanvasItem property visible.
				class_property:CanvasItem:visible
				# Shows help for the GDScript annotation export.
				# Annotations should be prefixed with the `@` symbol in the descriptor, as shown here.
				class_annotation:@GDScript:@export
				# Shows help for the GraphNode theme item named panel_selected.
				class_theme_item:GraphNode:panel_selected
				```
			"""
    pass

  def update_docs_from_script(self, script:__script__.Script)->None:
    """
				Updates the documentation for the given `script`.
				**Note:** This should be called whenever the script is changed to keep the open documentation state up to date.
			"""
    pass


