from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamWAV as __audiostreamwav__


class Format:
  FORMAT_8_BITS:int = 0
  FORMAT_16_BITS:int = 1
  FORMAT_IMA_ADPCM:int = 2
  FORMAT_QOA:int = 3
class LoopMode:
  LOOPERATOR_DISABLED:int = 0
  LOOPERATOR_FORWARD:int = 1
  LOOPERATOR_PINGPONG:int = 2
  LOOPERATOR_BACKWARD:int = 3


class AudioStreamWAV(__audiostream__.AudioStream):
  """
		AudioStreamWAV stores sound samples loaded from WAV files. To play the stored sound, use an `AudioStreamPlayer` (for non-positional audio) or `AudioStreamPlayer2D`/`AudioStreamPlayer3D` (for positional audio). The sound can be looped.
		This class can also be used to store dynamically-generated PCM audio data. See also `AudioStreamGenerator` for procedural audio generation.
	"""

  @staticmethod
  def constructor()->AudioStreamWAV:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamWAV:pass


  @property
  def data(self)->__core__.PackedByteArray:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def format(self)->int:
    """"""
    pass
  @format.setter
  def format(self,  value:int)->None:
    """"""
    pass
  @property
  def loop_mode(self)->int:
    """"""
    pass
  @loop_mode.setter
  def loop_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def loop_begin(self)->int:
    """"""
    pass
  @loop_begin.setter
  def loop_begin(self,  value:int)->None:
    """"""
    pass
  @property
  def loop_end(self)->int:
    """"""
    pass
  @loop_end.setter
  def loop_end(self,  value:int)->None:
    """"""
    pass
  @property
  def mix_rate(self)->int:
    """"""
    pass
  @mix_rate.setter
  def mix_rate(self,  value:int)->None:
    """"""
    pass
  @property
  def stereo(self)->bool:
    """"""
    pass
  @stereo.setter
  def stereo(self,  value:bool)->None:
    """"""
    pass
  @staticmethod
  def load_from_buffer(stream_data:__core__.PackedByteArray, options:__core__.Dictionary= __core__.Dictionary.new0())->__audiostreamwav__.AudioStreamWAV:
    """
				Creates a new `AudioStreamWAV` instance from the given buffer. The buffer must contain WAV data.
				The keys and values of `options` match the properties of `ResourceImporterWAV`. The usage of `options` is identical to `AudioStreamWAV.load_from_file`.
			"""
    pass

  @staticmethod
  def load_from_file(path:str, options:__core__.Dictionary= __core__.Dictionary.new0())->__audiostreamwav__.AudioStreamWAV:
    """
				Creates a new `AudioStreamWAV` instance from the given file path. The file must be in WAV format.
				The keys and values of `options` match the properties of `ResourceImporterWAV`.
				**Example:** Load the first file dropped as a WAV and play it:
				```gdscript
				@onready var audio_player = $AudioStreamPlayer

				func _ready():
					get_window().files_dropped.connect(_on_files_dropped)

				func _on_files_dropped(files):
					if files`0`.get_extension() == "wav":
						audio_player.stream = AudioStreamWAV.load_from_file(files`0`, {
								"force/max_rate": true,
								"force/max_rate_hz": 11025
							})
						audio_player.play()
				```
			"""
    pass

  def set_data(self, data:__core__.PackedByteArray)->None:
    """"""
    pass

  def get_data(self)->__core__.PackedByteArray:
    """"""
    pass

  def set_format(self, format:int )->None:
    """"""
    pass

  def get_format(self)->int:
    """"""
    pass

  def set_loop_mode(self, loop_mode:int )->None:
    """"""
    pass

  def get_loop_mode(self)->int:
    """"""
    pass

  def set_loop_begin(self, loop_begin:int)->None:
    """"""
    pass

  def get_loop_begin(self)->int:
    """"""
    pass

  def set_loop_end(self, loop_end:int)->None:
    """"""
    pass

  def get_loop_end(self)->int:
    """"""
    pass

  def set_mix_rate(self, mix_rate:int)->None:
    """"""
    pass

  def get_mix_rate(self)->int:
    """"""
    pass

  def set_stereo(self, stereo:bool)->None:
    """"""
    pass

  def is_stereo(self)->bool:
    """"""
    pass

  def save_to_wav(self, path:str)->int:
    """
				Saves the AudioStreamWAV as a WAV file to `path`. Samples with IMA ADPCM or Quite OK Audio formats can't be saved.
				**Note:** A `.wav` extension is automatically appended to `path` if it is missing.
			"""
    pass


