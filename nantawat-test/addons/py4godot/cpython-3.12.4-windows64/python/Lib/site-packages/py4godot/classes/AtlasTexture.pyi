from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__



class AtlasTexture(__texture2d__.Texture2D):
  """
		`Texture2D` resource that draws only part of its `atlas` texture, as defined by the `region`. An additional `margin` can also be set, which is useful for small adjustments.
		Multiple `AtlasTexture` resources can be cropped from the same `atlas`. Packing many smaller textures into a singular large texture helps to optimize video memory costs and render calls.
		**Note:** `AtlasTexture` cannot be used in an `AnimatedTexture`, and will not tile properly in nodes such as `TextureRect` or `Sprite2D`. To tile an `AtlasTexture`, modify its `region` instead.
	"""

  @staticmethod
  def constructor()->AtlasTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->AtlasTexture:pass


  @property
  def atlas(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @atlas.setter
  def atlas(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def region(self)->__core__.Rect2:
    """"""
    pass
  @region.setter
  def region(self,  value:__core__.Rect2)->None:
    """"""
    pass
  @property
  def margin(self)->__core__.Rect2:
    """"""
    pass
  @margin.setter
  def margin(self,  value:__core__.Rect2)->None:
    """"""
    pass
  @property
  def filter_clip(self)->bool:
    """"""
    pass
  @filter_clip.setter
  def filter_clip(self,  value:bool)->None:
    """"""
    pass
  def set_atlas(self, atlas:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_atlas(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def set_region(self, region:__core__.Rect2)->None:
    """"""
    pass

  def get_region(self)->__core__.Rect2:
    """"""
    pass

  def set_margin(self, margin:__core__.Rect2)->None:
    """"""
    pass

  def get_margin(self)->__core__.Rect2:
    """"""
    pass

  def set_filter_clip(self, enable:bool)->None:
    """"""
    pass

  def has_filter_clip(self)->bool:
    """"""
    pass


