from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__



class AudioEffectCompressor(__audioeffect__.AudioEffect):
  """
		Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).
		Compressor has many uses in the mix:
		- In the Master bus to compress the whole output (although an `AudioEffectHardLimiter` is probably better).
		- In voice channels to ensure they sound as balanced as possible.
		- Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.
		- Accentuates transients by using a wider attack, making effects sound more punchy.
	"""

  @staticmethod
  def constructor()->AudioEffectCompressor:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectCompressor:pass


  @property
  def threshold(self)->float:
    """"""
    pass
  @threshold.setter
  def threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def ratio(self)->float:
    """"""
    pass
  @ratio.setter
  def ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def gain(self)->float:
    """"""
    pass
  @gain.setter
  def gain(self,  value:float)->None:
    """"""
    pass
  @property
  def attack_us(self)->float:
    """"""
    pass
  @attack_us.setter
  def attack_us(self,  value:float)->None:
    """"""
    pass
  @property
  def release_ms(self)->float:
    """"""
    pass
  @release_ms.setter
  def release_ms(self,  value:float)->None:
    """"""
    pass
  @property
  def mix(self)->float:
    """"""
    pass
  @mix.setter
  def mix(self,  value:float)->None:
    """"""
    pass
  @property
  def sidechain(self)->__core__.StringName:
    """"""
    pass
  @sidechain.setter
  def sidechain(self,  value:__core__.StringName)->None:
    """"""
    pass
  def set_threshold(self, threshold:float)->None:
    """"""
    pass

  def get_threshold(self)->float:
    """"""
    pass

  def set_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_ratio(self)->float:
    """"""
    pass

  def set_gain(self, gain:float)->None:
    """"""
    pass

  def get_gain(self)->float:
    """"""
    pass

  def set_attack_us(self, attack_us:float)->None:
    """"""
    pass

  def get_attack_us(self)->float:
    """"""
    pass

  def set_release_ms(self, release_ms:float)->None:
    """"""
    pass

  def get_release_ms(self)->float:
    """"""
    pass

  def set_mix(self, mix:float)->None:
    """"""
    pass

  def get_mix(self)->float:
    """"""
    pass

  def set_sidechain(self, sidechain:__core__.StringName|str)->None:
    """"""
    pass

  def get_sidechain(self)->__core__.StringName:
    """"""
    pass


