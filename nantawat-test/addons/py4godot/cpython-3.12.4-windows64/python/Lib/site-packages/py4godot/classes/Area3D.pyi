from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.o as __o__
import py4godot.classes.T as __t__
import py4godot.classes.p as __p__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.Node as __node__
import py4godot.classes.a as __a__
import py4godot.classes.N as __n__
import py4godot.classes.A as __a__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.y as __y__
import py4godot.classes.3 as __3__


class SpaceOverride:
  SPACE_OVERRIDE_DISABLED:int = 0
  SPACE_OVERRIDE_COMBINE:int = 1
  SPACE_OVERRIDE_COMBINE_REPLACE:int = 2
  SPACE_OVERRIDE_REPLACE:int = 3
  SPACE_OVERRIDE_REPLACE_COMBINE:int = 4


class Area3D(__collisionobject3d__.CollisionObject3D):
  """
		`Area3D` is a region of 3D space defined by one or multiple `CollisionShape3D` or `CollisionPolygon3D` child nodes. It detects when other `CollisionObject3D`s enter or exit it, and it also keeps track of which collision objects haven't exited it yet (i.e. which one are overlapping it).
		This node can also locally alter or override physics parameters (gravity, damping) and route audio to custom audio buses.
		**Note:** Areas and bodies created with `PhysicsServer3D` might not interact as expected with `Area3D`s, and might not emit signals or track objects correctly.
		**Warning:** Using a `ConcavePolygonShape3D` inside a `CollisionShape3D` child of this node (created e.g. by using the **Create Trimesh Collision Sibling** option in the **Mesh** menu that appears when selecting a `MeshInstance3D` node) may give unexpected results, since this collision shape is hollow. If this is not desired, it has to be split into multiple `ConvexPolygonShape3D`s or primitive shapes like `BoxShape3D`, or in some cases it may be replaceable by a `CollisionPolygon3D`.
	"""
  body_shape_entered: BuiltinSignal
  body_shape_exited: BuiltinSignal
  body_entered: BuiltinSignal
  body_exited: BuiltinSignal
  area_shape_entered: BuiltinSignal
  area_shape_exited: BuiltinSignal
  area_entered: BuiltinSignal
  area_exited: BuiltinSignal

  @staticmethod
  def constructor()->Area3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Area3D:pass


  @property
  def monitoring(self)->bool:
    """"""
    pass
  @monitoring.setter
  def monitoring(self,  value:bool)->None:
    """"""
    pass
  @property
  def monitorable(self)->bool:
    """"""
    pass
  @monitorable.setter
  def monitorable(self,  value:bool)->None:
    """"""
    pass
  @property
  def priority(self)->int:
    """"""
    pass
  @priority.setter
  def priority(self,  value:int)->None:
    """"""
    pass
  @property
  def gravity_space_override(self)->int:
    """"""
    pass
  @gravity_space_override.setter
  def gravity_space_override(self,  value:int)->None:
    """"""
    pass
  @property
  def gravity_point(self)->bool:
    """"""
    pass
  @gravity_point.setter
  def gravity_point(self,  value:bool)->None:
    """"""
    pass
  @property
  def gravity_point_unit_distance(self)->float:
    """"""
    pass
  @gravity_point_unit_distance.setter
  def gravity_point_unit_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def gravity_point_center(self)->__core__.Vector3:
    """"""
    pass
  @gravity_point_center.setter
  def gravity_point_center(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def gravity_direction(self)->__core__.Vector3:
    """"""
    pass
  @gravity_direction.setter
  def gravity_direction(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def gravity(self)->float:
    """"""
    pass
  @gravity.setter
  def gravity(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_damp_space_override(self)->int:
    """"""
    pass
  @linear_damp_space_override.setter
  def linear_damp_space_override(self,  value:int)->None:
    """"""
    pass
  @property
  def linear_damp(self)->float:
    """"""
    pass
  @linear_damp.setter
  def linear_damp(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_damp_space_override(self)->int:
    """"""
    pass
  @angular_damp_space_override.setter
  def angular_damp_space_override(self,  value:int)->None:
    """"""
    pass
  @property
  def angular_damp(self)->float:
    """"""
    pass
  @angular_damp.setter
  def angular_damp(self,  value:float)->None:
    """"""
    pass
  @property
  def wind_force_magnitude(self)->float:
    """"""
    pass
  @wind_force_magnitude.setter
  def wind_force_magnitude(self,  value:float)->None:
    """"""
    pass
  @property
  def wind_attenuation_factor(self)->float:
    """"""
    pass
  @wind_attenuation_factor.setter
  def wind_attenuation_factor(self,  value:float)->None:
    """"""
    pass
  @property
  def wind_source_path(self)->__core__.NodePath:
    """"""
    pass
  @wind_source_path.setter
  def wind_source_path(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def audio_bus_override(self)->bool:
    """"""
    pass
  @audio_bus_override.setter
  def audio_bus_override(self,  value:bool)->None:
    """"""
    pass
  @property
  def audio_bus_name(self)->__core__.StringName:
    """"""
    pass
  @audio_bus_name.setter
  def audio_bus_name(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def reverb_bus_enabled(self)->bool:
    """"""
    pass
  @reverb_bus_enabled.setter
  def reverb_bus_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def reverb_bus_name(self)->__core__.StringName:
    """"""
    pass
  @reverb_bus_name.setter
  def reverb_bus_name(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def reverb_bus_amount(self)->float:
    """"""
    pass
  @reverb_bus_amount.setter
  def reverb_bus_amount(self,  value:float)->None:
    """"""
    pass
  @property
  def reverb_bus_uniformity(self)->float:
    """"""
    pass
  @reverb_bus_uniformity.setter
  def reverb_bus_uniformity(self,  value:float)->None:
    """"""
    pass
  def set_gravity_space_override_mode(self, space_override_mode:int )->None:
    """"""
    pass

  def get_gravity_space_override_mode(self)->int:
    """"""
    pass

  def set_gravity_is_point(self, enable:bool)->None:
    """"""
    pass

  def is_gravity_a_point(self)->bool:
    """"""
    pass

  def set_gravity_point_unit_distance(self, distance_scale:float)->None:
    """"""
    pass

  def get_gravity_point_unit_distance(self)->float:
    """"""
    pass

  def set_gravity_point_center(self, center:__core__.Vector3)->None:
    """"""
    pass

  def get_gravity_point_center(self)->__core__.Vector3:
    """"""
    pass

  def set_gravity_direction(self, direction:__core__.Vector3)->None:
    """"""
    pass

  def get_gravity_direction(self)->__core__.Vector3:
    """"""
    pass

  def set_gravity(self, gravity:float)->None:
    """"""
    pass

  def get_gravity(self)->float:
    """"""
    pass

  def set_linear_damp_space_override_mode(self, space_override_mode:int )->None:
    """"""
    pass

  def get_linear_damp_space_override_mode(self)->int:
    """"""
    pass

  def set_angular_damp_space_override_mode(self, space_override_mode:int )->None:
    """"""
    pass

  def get_angular_damp_space_override_mode(self)->int:
    """"""
    pass

  def set_angular_damp(self, angular_damp:float)->None:
    """"""
    pass

  def get_angular_damp(self)->float:
    """"""
    pass

  def set_linear_damp(self, linear_damp:float)->None:
    """"""
    pass

  def get_linear_damp(self)->float:
    """"""
    pass

  def set_priority(self, priority:int)->None:
    """"""
    pass

  def get_priority(self)->int:
    """"""
    pass

  def set_wind_force_magnitude(self, wind_force_magnitude:float)->None:
    """"""
    pass

  def get_wind_force_magnitude(self)->float:
    """"""
    pass

  def set_wind_attenuation_factor(self, wind_attenuation_factor:float)->None:
    """"""
    pass

  def get_wind_attenuation_factor(self)->float:
    """"""
    pass

  def set_wind_source_path(self, wind_source_path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_wind_source_path(self)->__core__.NodePath:
    """"""
    pass

  def set_monitorable(self, enable:bool)->None:
    """"""
    pass

  def is_monitorable(self)->bool:
    """"""
    pass

  def set_monitoring(self, enable:bool)->None:
    """"""
    pass

  def is_monitoring(self)->bool:
    """"""
    pass

  def get_overlapping_bodies(self)->typedarray::Node3D:
    """
				Returns a list of intersecting `PhysicsBody3D`s and `GridMap`s. The overlapping body's `CollisionObject3D.collision_layer` must be part of this area's `CollisionObject3D.collision_mask` in order to be detected.
				For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			"""
    pass

  def get_overlapping_areas(self)->typedarray::Area3D:
    """
				Returns a list of intersecting `Area3D`s. The overlapping area's `CollisionObject3D.collision_layer` must be part of this area's `CollisionObject3D.collision_mask` in order to be detected.
				For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			"""
    pass

  def has_overlapping_bodies(self)->bool:
    """
				Returns `true` if intersecting any `PhysicsBody3D`s or `GridMap`s, otherwise returns `false`. The overlapping body's `CollisionObject3D.collision_layer` must be part of this area's `CollisionObject3D.collision_mask` in order to be detected.
				For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			"""
    pass

  def has_overlapping_areas(self)->bool:
    """
				Returns `true` if intersecting any `Area3D`s, otherwise returns `false`. The overlapping area's `CollisionObject3D.collision_layer` must be part of this area's `CollisionObject3D.collision_mask` in order to be detected.
				For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
			"""
    pass

  def overlaps_body(self, body:__node__.Node)->bool:
    """
				Returns `true` if the given physics body intersects or overlaps this `Area3D`, `false` otherwise.
				**Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
				The `body` argument can either be a `PhysicsBody3D` or a `GridMap` instance. While GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body.
			"""
    pass

  def overlaps_area(self, area:__node__.Node)->bool:
    """
				Returns `true` if the given `Area3D` intersects or overlaps this `Area3D`, `false` otherwise.
				**Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
			"""
    pass

  def set_audio_bus_override(self, enable:bool)->None:
    """"""
    pass

  def is_overriding_audio_bus(self)->bool:
    """"""
    pass

  def set_audio_bus_name(self, name:__core__.StringName|str)->None:
    """"""
    pass

  def get_audio_bus_name(self)->__core__.StringName:
    """"""
    pass

  def set_use_reverb_bus(self, enable:bool)->None:
    """"""
    pass

  def is_using_reverb_bus(self)->bool:
    """"""
    pass

  def set_reverb_bus_name(self, name:__core__.StringName|str)->None:
    """"""
    pass

  def get_reverb_bus_name(self)->__core__.StringName:
    """"""
    pass

  def set_reverb_amount(self, amount:float)->None:
    """"""
    pass

  def get_reverb_amount(self)->float:
    """"""
    pass

  def set_reverb_uniformity(self, amount:float)->None:
    """"""
    pass

  def get_reverb_uniformity(self)->float:
    """"""
    pass


