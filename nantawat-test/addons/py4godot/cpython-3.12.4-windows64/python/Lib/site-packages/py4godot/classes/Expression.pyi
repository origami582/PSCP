from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__
import py4godot.classes.RefCounted as __refcounted__



class Expression(__refcounted__.RefCounted):
  """
		An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.
		An example expression text using the built-in math functions could be `sqrt(pow(3, 2) + pow(4, 2))`.
		In the following example we use a `LineEdit` node to write our expression and show the result.
		
		```gdscript
		var expression = Expression.new()

		func _ready():
			$LineEdit.text_submitted.connect(self._on_text_submitted)

		func _on_text_submitted(command):
			var error = expression.parse(command)
			if error != OK:
				print(expression.get_error_text())
				return
			var result = expression.execute()
			if not expression.has_execute_failed():
				$LineEdit.text = str(result)
		```
		
		
	"""

  @staticmethod
  def constructor()->Expression:pass



  @staticmethod
  def cast(other:__object__.Object)->Expression:pass


  def parse(self, expression:str, input_names:__core__.PackedStringArray= __core__.PackedStringArray.new0())->int:
    """
				Parses the expression and returns an `enum Error` code.
				You can optionally specify names of variables that may appear in the expression with `input_names`, so that you can bind them when it gets executed.
			"""
    pass

  def execute(self, inputs:__core__.Array= __core__.Array.new0(), base_instance:__object__.Object= __object__.Object.constructor(), show_error:bool=True, const_calls_only:bool=False)->Any:
    """
				Executes the expression that was previously parsed by `parse` and returns the result. Before you use the returned object, you should check if the method failed by calling `has_execute_failed`.
				If you defined input variables in `parse`, you can specify their values in the inputs array, in the same order.
			"""
    pass

  def has_execute_failed(self)->bool:
    """
				Returns `true` if `execute` has failed.
			"""
    pass

  def get_error_text(self)->str:
    """
				Returns the error text if `parse` or `execute` has failed.
			"""
    pass


