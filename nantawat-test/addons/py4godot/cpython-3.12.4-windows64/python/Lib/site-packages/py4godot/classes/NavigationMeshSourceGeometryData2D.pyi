from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.o as __o__
import py4godot.classes.T as __t__
import py4godot.classes.2 as __2__
import py4godot.classes.c as __c__
import py4godot.classes.V as __v__
import py4godot.classes.t as __t__
import py4godot.classes.r as __r__
import py4godot.classes.p as __p__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.k as __k__
import py4godot.classes.y as __y__
import py4godot.classes.P as __p__
import py4godot.classes.NavigationMeshSourceGeometryData2D as __navigationmeshsourcegeometrydata2d__



class NavigationMeshSourceGeometryData2D(__resource__.Resource):
  """
		Container for parsed source geometry data used in navigation mesh baking.
	"""

  @staticmethod
  def constructor()->NavigationMeshSourceGeometryData2D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationMeshSourceGeometryData2D:pass


  @property
  def traversable_outlines(self)->__core__.Array:
    """"""
    pass
  @traversable_outlines.setter
  def traversable_outlines(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def obstruction_outlines(self)->__core__.Array:
    """"""
    pass
  @obstruction_outlines.setter
  def obstruction_outlines(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def projected_obstructions(self)->__core__.Array:
    """"""
    pass
  @projected_obstructions.setter
  def projected_obstructions(self,  value:__core__.Array)->None:
    """"""
    pass
  def clear(self)->None:
    """
				Clears the internal data.
			"""
    pass

  def has_data(self)->bool:
    """
				Returns `true` when parsed source geometry data exists.
			"""
    pass

  def set_traversable_outlines(self, traversable_outlines:__core__.Array)->None:
    """
				Sets all the traversable area outlines arrays.
			"""
    pass

  def get_traversable_outlines(self)->typedarray::PackedVector2Array:
    """
				Returns all the traversable area outlines arrays.
			"""
    pass

  def set_obstruction_outlines(self, obstruction_outlines:__core__.Array)->None:
    """
				Sets all the obstructed area outlines arrays.
			"""
    pass

  def get_obstruction_outlines(self)->typedarray::PackedVector2Array:
    """
				Returns all the obstructed area outlines arrays.
			"""
    pass

  def append_traversable_outlines(self, traversable_outlines:__core__.Array)->None:
    """
				Appends another array of `traversable_outlines` at the end of the existing traversable outlines array.
			"""
    pass

  def append_obstruction_outlines(self, obstruction_outlines:__core__.Array)->None:
    """
				Appends another array of `obstruction_outlines` at the end of the existing obstruction outlines array.
			"""
    pass

  def add_traversable_outline(self, shape_outline:__core__.PackedVector2Array)->None:
    """
				Adds the outline points of a shape as traversable area.
			"""
    pass

  def add_obstruction_outline(self, shape_outline:__core__.PackedVector2Array)->None:
    """
				Adds the outline points of a shape as obstructed area.
			"""
    pass

  def merge(self, other_geometry:__navigationmeshsourcegeometrydata2d__.NavigationMeshSourceGeometryData2D)->None:
    """
				Adds the geometry data of another `NavigationMeshSourceGeometryData2D` to the navigation mesh baking data.
			"""
    pass

  def add_projected_obstruction(self, vertices:__core__.PackedVector2Array, carve:bool)->None:
    """
				Adds a projected obstruction shape to the source geometry. If `carve` is `true` the carved shape will not be affected by additional offsets (e.g. agent radius) of the navigation mesh baking process.
			"""
    pass

  def clear_projected_obstructions(self)->None:
    """
				Clears all projected obstructions.
			"""
    pass

  def set_projected_obstructions(self, projected_obstructions:__core__.Array)->None:
    """
				Sets the projected obstructions with an Array of Dictionaries with the following key value pairs:
				
				```gdscript
				"vertices" : PackedFloat32Array
				"carve" : bool
				```
				
			"""
    pass

  def get_projected_obstructions(self)->__core__.Array:
    """
				Returns the projected obstructions as an `Array` of dictionaries. Each `Dictionary` contains the following entries:
				- `vertices` - A `PackedFloat32Array` that defines the outline points of the projected shape.
				- `carve` - A `bool` that defines how the projected shape affects the navigation mesh baking. If `true` the projected shape will not be affected by addition offsets, e.g. agent radius.
			"""
    pass

  def get_bounds(self)->__core__.Rect2:
    """
				Returns an axis-aligned bounding box that covers all the stored geometry data. The bounds are calculated when calling this function with the result cached until further geometry changes are made.
			"""
    pass


