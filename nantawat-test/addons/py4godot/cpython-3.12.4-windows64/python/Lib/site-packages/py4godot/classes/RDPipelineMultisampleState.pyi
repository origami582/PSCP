from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.t as __t__
import py4godot.classes.p as __p__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.y as __y__



class RDPipelineMultisampleState(__refcounted__.RefCounted):
  """
		`RDPipelineMultisampleState` is used to control how multisample or supersample antialiasing is being performed when rendering using `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDPipelineMultisampleState:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineMultisampleState:pass


  @property
  def sample_count(self)->int:
    """"""
    pass
  @sample_count.setter
  def sample_count(self,  value:int)->None:
    """"""
    pass
  @property
  def enable_sample_shading(self)->bool:
    """"""
    pass
  @enable_sample_shading.setter
  def enable_sample_shading(self,  value:bool)->None:
    """"""
    pass
  @property
  def min_sample_shading(self)->float:
    """"""
    pass
  @min_sample_shading.setter
  def min_sample_shading(self,  value:float)->None:
    """"""
    pass
  @property
  def enable_alpha_to_coverage(self)->bool:
    """"""
    pass
  @enable_alpha_to_coverage.setter
  def enable_alpha_to_coverage(self,  value:bool)->None:
    """"""
    pass
  @property
  def enable_alpha_to_one(self)->bool:
    """"""
    pass
  @enable_alpha_to_one.setter
  def enable_alpha_to_one(self,  value:bool)->None:
    """"""
    pass
  @property
  def sample_masks(self)->typedarray::int:
    """"""
    pass
  @sample_masks.setter
  def sample_masks(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_sample_count(self, p_member:int )->None:
    """"""
    pass

  def get_sample_count(self)->int:
    """"""
    pass

  def set_enable_sample_shading(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_sample_shading(self)->bool:
    """"""
    pass

  def set_min_sample_shading(self, p_member:float)->None:
    """"""
    pass

  def get_min_sample_shading(self)->float:
    """"""
    pass

  def set_enable_alpha_to_coverage(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_alpha_to_coverage(self)->bool:
    """"""
    pass

  def set_enable_alpha_to_one(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_alpha_to_one(self)->bool:
    """"""
    pass

  def set_sample_masks(self, masks:__core__.Array)->None:
    """"""
    pass

  def get_sample_masks(self)->typedarray::int:
    """"""
    pass


