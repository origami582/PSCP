from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Range as __range__
import py4godot.classes.LineEdit as __lineedit__



class SpinBox(__range__.Range):
  """
		`SpinBox` is a numerical input text field. It allows entering integers and floating-point numbers. The `SpinBox` also has up and down buttons that can be clicked increase or decrease the value. The value can also be changed by dragging the mouse up or down over the `SpinBox`'s arrows.
		Additionally, mathematical expressions can be entered. These are evaluated when the user presses `kbd`Enter`/kbd` while editing the `SpinBox`'s text field. This uses the `Expression` class to parse and evaluate the expression. The result of the expression is then set as the value of the `SpinBox`. Some examples of valid expressions are `5 + 2 * 3`, `pow(2, 4)`, and `PI + sin(0.5)`. Expressions are case-sensitive.
		**Example:** Create a `SpinBox`, disable its context menu and set its text alignment to right.
		
		```gdscript
		var spin_box = SpinBox.new()
		add_child(spin_box)
		var line_edit = spin_box.get_line_edit()
		line_edit.context_menu_enabled = false
		spin_box.horizontal_alignment = LineEdit.HORIZONTAL_ALIGNMENT_RIGHT
		```
		
		
		See `Range` class for more options over the `SpinBox`.
		**Note:** With the `SpinBox`'s context menu disabled, you can right-click the bottom half of the spinbox to set the value to its minimum, while right-clicking the top half sets the value to its maximum.
		**Note:** `SpinBox` relies on an underlying `LineEdit` node. To theme a `SpinBox`'s background, add theme items for `LineEdit` and customize them. The `LineEdit` has the `SpinBoxInnerLineEdit` theme variation, so that you can give it a distinct appearance from regular `LineEdit`s.
		**Note:** If you want to implement drag and drop for the underlying `LineEdit`, you can use `Control.set_drag_forwarding` on the node returned by `get_line_edit`.
	"""

  @staticmethod
  def constructor()->SpinBox:pass



  @staticmethod
  def cast(other:__object__.Object)->SpinBox:pass


  @property
  def alignment(self)->int:
    """"""
    pass
  @alignment.setter
  def alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def editable(self)->bool:
    """"""
    pass
  @editable.setter
  def editable(self,  value:bool)->None:
    """"""
    pass
  @property
  def update_on_text_changed(self)->bool:
    """"""
    pass
  @update_on_text_changed.setter
  def update_on_text_changed(self,  value:bool)->None:
    """"""
    pass
  @property
  def prefix(self)->str:
    """"""
    pass
  @prefix.setter
  def prefix(self,  value:str)->None:
    """"""
    pass
  @property
  def suffix(self)->str:
    """"""
    pass
  @suffix.setter
  def suffix(self,  value:str)->None:
    """"""
    pass
  @property
  def custom_arrow_step(self)->float:
    """"""
    pass
  @custom_arrow_step.setter
  def custom_arrow_step(self,  value:float)->None:
    """"""
    pass
  @property
  def select_all_on_focus(self)->bool:
    """"""
    pass
  @select_all_on_focus.setter
  def select_all_on_focus(self,  value:bool)->None:
    """"""
    pass
  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def set_suffix(self, suffix:str)->None:
    """"""
    pass

  def get_suffix(self)->str:
    """"""
    pass

  def set_prefix(self, prefix:str)->None:
    """"""
    pass

  def get_prefix(self)->str:
    """"""
    pass

  def set_editable(self, enabled:bool)->None:
    """"""
    pass

  def set_custom_arrow_step(self, arrow_step:float)->None:
    """"""
    pass

  def get_custom_arrow_step(self)->float:
    """"""
    pass

  def is_editable(self)->bool:
    """"""
    pass

  def set_update_on_text_changed(self, enabled:bool)->None:
    """"""
    pass

  def get_update_on_text_changed(self)->bool:
    """"""
    pass

  def set_select_all_on_focus(self, enabled:bool)->None:
    """"""
    pass

  def is_select_all_on_focus(self)->bool:
    """"""
    pass

  def apply(self)->None:
    """
				Applies the current value of this `SpinBox`. This is equivalent to pressing `kbd`Enter`/kbd` while editing the `LineEdit` used by the `SpinBox`. This will cause `signal LineEdit.text_submitted` to be emitted and its currently contained expression to be evaluated.
			"""
    pass

  def get_line_edit(self)->__lineedit__.LineEdit:
    """
				Returns the `LineEdit` instance from this `SpinBox`. You can use it to access properties and methods of `LineEdit`.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass


