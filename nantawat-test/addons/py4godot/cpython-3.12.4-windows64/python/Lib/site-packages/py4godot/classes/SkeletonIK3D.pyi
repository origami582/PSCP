from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__



class SkeletonIK3D(__skeletonmodifier3d__.SkeletonModifier3D):
  """
		SkeletonIK3D is used to rotate all bones of a `Skeleton3D` bone chain a way that places the end bone at a desired 3D position. A typical scenario for IK in games is to place a character's feet on the ground or a character's hands on a currently held object. SkeletonIK uses FabrikInverseKinematic internally to solve the bone chain and applies the results to the `Skeleton3D` `bones_global_pose_override` property for all affected bones in the chain. If fully applied, this overwrites any bone transform from `Animation`s or bone custom poses set by users. The applied amount can be controlled with the `SkeletonModifier3D.influence` property.
		```gdscript
		# Apply IK effect automatically on every new frame (not the current)
		skeleton_ik_node.start()

		# Apply IK effect only on the current frame
		skeleton_ik_node.start(true)

		# Stop IK effect and reset bones_global_pose_override on Skeleton
		skeleton_ik_node.stop()

		# Apply full IK effect
		skeleton_ik_node.set_influence(1.0)

		# Apply half IK effect
		skeleton_ik_node.set_influence(0.5)

		# Apply zero IK effect (a value at or below 0.01 also removes bones_global_pose_override on Skeleton)
		skeleton_ik_node.set_influence(0.0)
		```
	"""

  @staticmethod
  def constructor()->SkeletonIK3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonIK3D:pass


  @property
  def root_bone(self)->__core__.StringName:
    """"""
    pass
  @root_bone.setter
  def root_bone(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def tip_bone(self)->__core__.StringName:
    """"""
    pass
  @tip_bone.setter
  def tip_bone(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def target(self)->__core__.Transform3D:
    """"""
    pass
  @target.setter
  def target(self,  value:__core__.Transform3D)->None:
    """"""
    pass
  @property
  def override_tip_basis(self)->bool:
    """"""
    pass
  @override_tip_basis.setter
  def override_tip_basis(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_magnet(self)->bool:
    """"""
    pass
  @use_magnet.setter
  def use_magnet(self,  value:bool)->None:
    """"""
    pass
  @property
  def magnet(self)->__core__.Vector3:
    """"""
    pass
  @magnet.setter
  def magnet(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def target_node(self)->__core__.NodePath:
    """"""
    pass
  @target_node.setter
  def target_node(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def min_distance(self)->float:
    """"""
    pass
  @min_distance.setter
  def min_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def max_iterations(self)->int:
    """"""
    pass
  @max_iterations.setter
  def max_iterations(self,  value:int)->None:
    """"""
    pass
  @property
  def interpolation(self)->float:
    """"""
    pass
  @interpolation.setter
  def interpolation(self,  value:float)->None:
    """"""
    pass
  def set_root_bone(self, root_bone:__core__.StringName|str)->None:
    """"""
    pass

  def get_root_bone(self)->__core__.StringName:
    """"""
    pass

  def set_tip_bone(self, tip_bone:__core__.StringName|str)->None:
    """"""
    pass

  def get_tip_bone(self)->__core__.StringName:
    """"""
    pass

  def set_target_transform(self, target:__core__.Transform3D)->None:
    """"""
    pass

  def get_target_transform(self)->__core__.Transform3D:
    """"""
    pass

  def set_target_node(self, node:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_override_tip_basis(self, override:bool)->None:
    """"""
    pass

  def is_override_tip_basis(self)->bool:
    """"""
    pass

  def set_use_magnet(self, use:bool)->None:
    """"""
    pass

  def is_using_magnet(self)->bool:
    """"""
    pass

  def set_magnet_position(self, local_position:__core__.Vector3)->None:
    """"""
    pass

  def get_magnet_position(self)->__core__.Vector3:
    """"""
    pass

  def get_parent_skeleton(self)->__skeleton3d__.Skeleton3D:
    """
				Returns the parent `Skeleton3D` node that was present when SkeletonIK entered the scene tree. Returns `null` if the parent node was not a `Skeleton3D` node when SkeletonIK3D entered the scene tree.
			"""
    pass

  def is_running(self)->bool:
    """
				Returns `true` if SkeletonIK is applying IK effects on continues frames to the `Skeleton3D` bones. Returns `false` if SkeletonIK is stopped or `start` was used with the `one_time` parameter set to `true`.
			"""
    pass

  def set_min_distance(self, min_distance:float)->None:
    """"""
    pass

  def get_min_distance(self)->float:
    """"""
    pass

  def set_max_iterations(self, iterations:int)->None:
    """"""
    pass

  def get_max_iterations(self)->int:
    """"""
    pass

  def start(self, one_time:bool=False)->None:
    """
				Starts applying IK effects on each frame to the `Skeleton3D` bones but will only take effect starting on the next frame. If `one_time` is `true`, this will take effect immediately but also reset on the next frame.
			"""
    pass

  def stop(self)->None:
    """
				Stops applying IK effects on each frame to the `Skeleton3D` bones and also calls `Skeleton3D.clear_bones_global_pose_override` to remove existing overrides on all bones.
			"""
    pass

  def set_interpolation(self, interpolation:float)->None:
    """"""
    pass

  def get_interpolation(self)->float:
    """"""
    pass


