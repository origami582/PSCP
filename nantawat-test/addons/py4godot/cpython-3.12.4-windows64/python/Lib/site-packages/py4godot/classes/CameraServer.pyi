from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.C as __c__
import py4godot.classes.CameraFeed as __camerafeed__
import py4godot.classes.A as __a__
import py4godot.classes.e as __e__
import py4godot.classes.m as __m__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.p as __p__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.F as __f__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__


class FeedImage:
  FEED_RGBA_IMAGE:int = 0
  FEED_YCBCR_IMAGE:int = 0
  FEED_Y_IMAGE:int = 0
  FEED_CBCR_IMAGE:int = 1


class CameraServer(__object__.Object):
  """
		The `CameraServer` keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.
		It is notably used to provide AR modules with a video feed from the camera.
		**Note:** This class is currently only implemented on Linux, Android, macOS, and iOS. On other platforms no `CameraFeed`s will be available. To get a `CameraFeed` on iOS, the camera plugin from `url=https://github.com/godotengine/godot-ios-plugins`godot-ios-plugins`/url` is required.
	"""
  camera_feed_added: BuiltinSignal
  camera_feed_removed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->CameraServer:pass

  @staticmethod
  def instance()->CameraServer:pass

  def get_feed(self, index:int)->__camerafeed__.CameraFeed:
    """
				Returns the `CameraFeed` corresponding to the camera with the given `index`.
			"""
    pass

  def get_feed_count(self)->int:
    """
				Returns the number of `CameraFeed`s registered.
			"""
    pass

  def feeds(self)->typedarray::CameraFeed:
    """
				Returns an array of `CameraFeed`s.
			"""
    pass

  def add_feed(self, feed:__camerafeed__.CameraFeed)->None:
    """
				Adds the camera `feed` to the camera server.
			"""
    pass

  def remove_feed(self, feed:__camerafeed__.CameraFeed)->None:
    """
				Removes the specified camera `feed`.
			"""
    pass


