from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.i as __i__
import py4godot.classes.ResourceImporter as __resourceimporter__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.c as __c__
import py4godot.classes.t as __t__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.p as __p__
import py4godot.classes.a as __a__
import py4godot.classes.g as __g__
import py4godot.classes.A as __a__
import py4godot.classes.S as __s__
import py4godot.classes.y as __y__



class EditorImportPlugin(__resourceimporter__.ResourceImporter):
  """
		`EditorImportPlugin`s provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers.
		EditorImportPlugins work by associating with specific file extensions and a resource type. See `_get_recognized_extensions` and `_get_resource_type`. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the `.godot/imported` directory (see `ProjectSettings.application/config/use_hidden_project_data_directory`).
		Below is an example EditorImportPlugin that imports a `Mesh` from a file with the extension ".special" or ".spec":
		
		```gdscript
		@tool
		extends EditorImportPlugin

		func _get_importer_name():
			return "my.special.plugin"

		func _get_visible_name():
			return "Special Mesh"

		func _get_recognized_extensions():
			return `"special", "spec"`

		func _get_save_extension():
			return "mesh"

		func _get_resource_type():
			return "Mesh"

		func _get_preset_count():
			return 1

		func _get_preset_name(preset_index):
			return "Default"

		func _get_import_options(path, preset_index):
			return `{"name": "my_option", "default_value": false}`

		func _import(source_file, save_path, options, platform_variants, gen_files):
			var file = FileAccess.open(source_file, FileAccess.READ)
			if file == null:
				return FAILED
			var mesh = ArrayMesh.new()
			# Fill the Mesh with data read in "file", left as an exercise to the reader.

			var filename = save_path + "." + _get_save_extension()
			return ResourceSaver.save(mesh, filename)
		```
		
		
		To use `EditorImportPlugin`, register it using the `EditorPlugin.add_import_plugin` method first.
	"""

  @staticmethod
  def constructor()->EditorImportPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorImportPlugin:pass


  def _get_importer_name(self)->str:
    """
				Gets the unique name of the importer.
			"""
    pass

  def _get_visible_name(self)->str:
    """
				Gets the name to display in the import window. You should choose this name as a continuation to "Import as", e.g. "Import as Special Mesh".
			"""
    pass

  def _get_preset_count(self)->int:
    """
				Gets the number of initial presets defined by the plugin. Use `_get_import_options` to get the default options for the preset and `_get_preset_name` to get the name of the preset.
			"""
    pass

  def _get_preset_name(self, preset_index:int)->str:
    """
				Gets the name of the options preset at this index.
			"""
    pass

  def _get_recognized_extensions(self)->__core__.PackedStringArray:
    """
				Gets the list of file extensions to associate with this loader (case-insensitive). e.g. ``"obj"``.
			"""
    pass

  def _get_import_options(self, path:str, preset_index:int)->typedarray::Dictionary:
    """
				Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: `name`, `default_value`, `property_hint` (optional), `hint_string` (optional), `usage` (optional).
			"""
    pass

  def _get_save_extension(self)->str:
    """
				Gets the extension used to save this resource in the `.godot/imported` directory (see `ProjectSettings.application/config/use_hidden_project_data_directory`).
			"""
    pass

  def _get_resource_type(self)->str:
    """
				Gets the Godot resource type associated with this loader. e.g. `"Mesh"` or `"Animation"`.
			"""
    pass

  def _get_priority(self)->float:
    """
				Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is `1.0`.
			"""
    pass

  def _get_import_order(self)->int:
    """
				Gets the order of this importer to be run when importing resources. Importers with _lower_ import orders will be called first, and higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported. The default import order is `0` unless overridden by a specific importer. See `enum ResourceImporter.ImportOrder` for some predefined values.
			"""
    pass

  def _get_format_version(self)->int:
    """
				Gets the format version of this importer. Increment this version when making incompatible changes to the format of the imported resources.
			"""
    pass

  def _get_option_visibility(self, path:str, option_name:__core__.StringName|str, options:__core__.Dictionary)->bool:
    """
				Gets whether the import option specified by `option_name` should be visible in the Import dock. The default implementation always returns `true`, making all options visible. This is mainly useful for hiding options that depend on others if one of them is disabled.
				
				```gdscript
				func _get_option_visibility(path, option_name, options):
					# Only show the lossy quality setting if the compression mode is set to "Lossy".
					if option_name == "compress/lossy_quality" and options.has("compress/mode"):
						return int(options`"compress/mode"`) == COMPRESS_LOSSY # This is a constant that you set

					return true
				```
				
				
			"""
    pass

  def _import(self, source_file:str, save_path:str, options:__core__.Dictionary, platform_variants:__core__.Array, gen_files:__core__.Array)->int:
    """
				Imports `source_file` with the import `options` specified. Should return `constant @GlobalScope.OK` if the import is successful, other values indicate failure.
				The imported resource is expected to be saved to `save_path + "." + _get_save_extension()`. If a different variant is preferred for a `url=$DOCS_URL/tutorials/export/feature_tags.html`feature tag`/url`, save the variant to `save_path + "." + tag + "." + _get_save_extension()` and add the feature tag to `platform_variants`.
				If additional resource files are generated in the resource filesystem (`res://`), add their full path to `gen_files` so that the editor knows they depend on `source_file`.
				This method must be overridden to do the actual importing work. See this class' description for an example of overriding this method.
			"""
    pass

  def _can_import_threaded(self)->bool:
    """
				Tells whether this importer can be run in parallel on threads, or, on the contrary, it's only safe for the editor to call it from the main thread, for one file at a time.
				If this method is not overridden, it will return `false` by default.
				If this importer's implementation is thread-safe and can be run in parallel, override this with `true` to optimize for concurrency.
			"""
    pass

  def append_import_external_resource(self, path:str, custom_options:__core__.Dictionary= __core__.Dictionary.new0(), custom_importer:str= __core__.String.new0(), generator_parameters:Any=None)->int:
    """
				This function can only be called during the `_import` callback and it allows manually importing resources from it. This is useful when the imported file generates external resources that require importing (as example, images). Custom parameters for the ".import" file can be passed via the `custom_options`. Additionally, in cases where multiple importers can handle a file, the `custom_importer` can be specified to force a specific one. This function performs a resource import and returns immediately with a success or error code. `generator_parameters` defines optional extra metadata which will be stored as `code skip-lint`generator_parameters` in the `remap` section of the `.import` file, for example to store a md5 hash of the source data.
			"""
    pass


