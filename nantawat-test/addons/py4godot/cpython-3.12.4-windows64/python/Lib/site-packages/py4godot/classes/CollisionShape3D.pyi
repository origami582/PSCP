from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.CylinderShape3D as __cylindershape3d__
import py4godot.classes.ConcavePolygonShape3D as __concavepolygonshape3d__
import py4godot.classes.SeparationRayShape3D as __separationrayshape3d__
import py4godot.classes.Shape3D as __shape3d__
import py4godot.classes.HeightMapShape3D as __heightmapshape3d__
import py4godot.classes.SphereShape3D as __sphereshape3d__
import py4godot.classes.WorldBoundaryShape3D as __worldboundaryshape3d__
import py4godot.classes.BoxShape3D as __boxshape3d__
import py4godot.classes.CapsuleShape3D as __capsuleshape3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.ConvexPolygonShape3D as __convexpolygonshape3d__



class CollisionShape3D(__node3d__.Node3D):
  """
		A node that provides a `Shape3D` to a `CollisionObject3D` parent and allows to edit it. This can give a detection shape to an `Area3D` or turn a `PhysicsBody3D` into a solid object.
		**Warning:** A non-uniformly scaled `CollisionShape3D` will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its `shape` resource instead.
	"""

  @staticmethod
  def constructor()->CollisionShape3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CollisionShape3D:pass


  @property
  def shape(self)->__cylindershape3d__.CylinderShape3D|__concavepolygonshape3d__.ConcavePolygonShape3D|__shape3d__.Shape3D|__heightmapshape3d__.HeightMapShape3D|__sphereshape3d__.SphereShape3D|__worldboundaryshape3d__.WorldBoundaryShape3D|__boxshape3d__.BoxShape3D|__capsuleshape3d__.CapsuleShape3D|__separationrayshape3d__.SeparationRayShape3D|__convexpolygonshape3d__.ConvexPolygonShape3D:
    """"""
    pass
  @shape.setter
  def shape(self,  value:__shape3d__.Shape3D)->None:
    """"""
    pass
  @property
  def disabled(self)->bool:
    """"""
    pass
  @disabled.setter
  def disabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def debug_color(self)->__core__.Color:
    """"""
    pass
  @debug_color.setter
  def debug_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def debug_fill(self)->bool:
    """"""
    pass
  @debug_fill.setter
  def debug_fill(self,  value:bool)->None:
    """"""
    pass
  def resource_changed(self, resource:__resource__.Resource)->None:
    """
				This method does nothing.
			"""
    pass

  def set_shape(self, shape:__shape3d__.Shape3D)->None:
    """"""
    pass

  def get_shape(self)->__cylindershape3d__.CylinderShape3D|__concavepolygonshape3d__.ConcavePolygonShape3D|__shape3d__.Shape3D|__heightmapshape3d__.HeightMapShape3D|__sphereshape3d__.SphereShape3D|__worldboundaryshape3d__.WorldBoundaryShape3D|__boxshape3d__.BoxShape3D|__capsuleshape3d__.CapsuleShape3D|__separationrayshape3d__.SeparationRayShape3D|__convexpolygonshape3d__.ConvexPolygonShape3D:
    """"""
    pass

  def set_disabled(self, enable:bool)->None:
    """"""
    pass

  def is_disabled(self)->bool:
    """"""
    pass

  def make_convex_from_siblings(self)->None:
    """
				Sets the collision shape's shape to the addition of all its convexed `MeshInstance3D` siblings geometry.
			"""
    pass

  def set_debug_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_debug_color(self)->__core__.Color:
    """"""
    pass

  def set_enable_debug_fill(self, enable:bool)->None:
    """"""
    pass

  def get_enable_debug_fill(self)->bool:
    """"""
    pass


