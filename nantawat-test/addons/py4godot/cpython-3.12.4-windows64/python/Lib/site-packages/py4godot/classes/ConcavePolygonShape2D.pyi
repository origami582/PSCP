from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D as __shape2d__



class ConcavePolygonShape2D(__shape2d__.Shape2D):
  """
		A 2D polyline shape, intended for use in physics. Used internally in `CollisionPolygon2D` when it's in `constant CollisionPolygon2D.BUILD_SEGMENTS` mode.
		Being just a collection of interconnected line segments, `ConcavePolygonShape2D` is the most freely configurable single 2D shape. It can be used to form polygons of any nature, or even shapes that don't enclose an area. However, `ConcavePolygonShape2D` is _hollow_ even if the interconnected line segments do enclose an area, which often makes it unsuitable for physics or detection.
		**Note:** When used for collision, `ConcavePolygonShape2D` is intended to work with static `CollisionShape2D` nodes like `StaticBody2D` and will likely not behave well for `CharacterBody2D`s or `RigidBody2D`s in a mode other than Static.
		**Warning:** Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. `ConcavePolygonShape2D` is hollow, so it won't detect a collision.
		**Performance:** Due to its complexity, `ConcavePolygonShape2D` is the slowest 2D collision shape to check collisions against. Its use should generally be limited to level geometry. If the polyline is closed, `CollisionPolygon2D`'s `constant CollisionPolygon2D.BUILD_SOLIDS` mode can be used, which decomposes the polygon into convex ones; see `ConvexPolygonShape2D`'s documentation for instructions.
	"""

  @staticmethod
  def constructor()->ConcavePolygonShape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->ConcavePolygonShape2D:pass


  @property
  def segments(self)->__core__.PackedVector2Array:
    """"""
    pass
  @segments.setter
  def segments(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  def set_segments(self, segments:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_segments(self)->__core__.PackedVector2Array:
    """"""
    pass


