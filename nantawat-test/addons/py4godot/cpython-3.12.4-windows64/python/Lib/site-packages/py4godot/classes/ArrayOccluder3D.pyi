from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Occluder3D as __occluder3d__



class ArrayOccluder3D(__occluder3d__.Occluder3D):
  """
		`ArrayOccluder3D` stores an arbitrary 3D polygon shape that can be used by the engine's occlusion culling system. This is analogous to `ArrayMesh`, but for occluders.
		See `OccluderInstance3D`'s documentation for instructions on setting up occlusion culling.
	"""

  @staticmethod
  def constructor()->ArrayOccluder3D:pass



  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->ArrayOccluder3D:pass

  @staticmethod
  def cast(other:__object__.Object)->ArrayOccluder3D:pass


  @property
  def vertices(self)->__core__.PackedVector3Array:
    """"""
    pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def indices(self)->__core__.PackedInt32Array:
    """"""
    pass
  @indices.setter
  def indices(self,  value:__core__.PackedInt32Array)->None:
    """"""
    pass
  def set_arrays(self, vertices:__core__.PackedVector3Array, indices:__core__.PackedInt32Array)->None:
    """
				Sets `indices` and `vertices`, while updating the final occluder only once after both values are set.
			"""
    pass

  def set_vertices(self, vertices:__core__.PackedVector3Array)->None:
    """"""
    pass

  def set_indices(self, indices:__core__.PackedInt32Array)->None:
    """"""
    pass


