from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GDExtension as __gdextension__
import py4godot.classes.GDExtensionManager as __gdextensionmanager__
import py4godot.classes.Object as __object__


class LoadStatus:
  LOAD_STATUS_OK:int = 0
  LOAD_STATUS_FAILED:int = 1
  LOAD_STATUS_ALREADY_LOADED:int = 2
  LOAD_STATUS_NOT_LOADED:int = 3
  LOAD_STATUS_NEEDS_RESTART:int = 4


class GDExtensionManager(__object__.Object):
  """
		The GDExtensionManager loads, initializes, and keeps track of all available `GDExtension` libraries in the project.
		**Note:** Do not worry about GDExtension unless you know what you are doing.
	"""
  extensions_reloaded: BuiltinSignal
  extension_loaded: BuiltinSignal
  extension_unloading: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->GDExtensionManager:pass

  @staticmethod
  def instance()->GDExtensionManager:pass

  def load_extension(self, path:str)->int:
    """
				Loads an extension by absolute file path. The `path` needs to point to a valid `GDExtension`. Returns `constant LOAD_STATUS_OK` if successful.
			"""
    pass

  def reload_extension(self, path:str)->int:
    """
				Reloads the extension at the given file path. The `path` needs to point to a valid `GDExtension`, otherwise this method may return either `constant LOAD_STATUS_NOT_LOADED` or `constant LOAD_STATUS_FAILED`.
				**Note:** You can only reload extensions in the editor. In release builds, this method always fails and returns `constant LOAD_STATUS_FAILED`.
			"""
    pass

  def unload_extension(self, path:str)->int:
    """
				Unloads an extension by file path. The `path` needs to point to an already loaded `GDExtension`, otherwise this method returns `constant LOAD_STATUS_NOT_LOADED`.
			"""
    pass

  def is_extension_loaded(self, path:str)->bool:
    """
				Returns `true` if the extension at the given file `path` has already been loaded successfully. See also `get_loaded_extensions`.
			"""
    pass

  def get_loaded_extensions(self)->__core__.PackedStringArray:
    """
				Returns the file paths of all currently loaded extensions.
			"""
    pass

  def get_extension(self, path:str)->__gdextension__.GDExtension:
    """
				Returns the `GDExtension` at the given file `path`, or `null` if it has not been loaded or does not exist.
			"""
    pass


