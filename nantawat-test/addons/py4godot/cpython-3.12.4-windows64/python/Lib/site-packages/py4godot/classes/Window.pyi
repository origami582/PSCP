from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.StyleBox as __stylebox__
import py4godot.classes.Theme as __theme__
import py4godot.classes.DisplayServer as __displayserver__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.Node as __node__
import py4godot.classes.StyleBoxTexture as __styleboxtexture__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.FontVariation as __fontvariation__
import py4godot.classes.Window as __window__
import py4godot.classes.Font as __font__
import py4godot.classes.StyleBoxEmpty as __styleboxempty__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.StyleBoxFlat as __styleboxflat__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.Popup as __popup__
import py4godot.classes.StyleBoxLine as __styleboxline__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__


class Mode:
  MODE_WINDOWED:int = 0
  MODE_MINIMIZED:int = 1
  MODE_MAXIMIZED:int = 2
  MODE_FULLSCREEN:int = 3
  MODE_EXCLUSIVE_FULLSCREEN:int = 4
class Flags:
  FLAG_RESIZE_DISABLED:int = 0
  FLAG_BORDERLESS:int = 1
  FLAG_ALWAYS_ON_TOP:int = 2
  FLAG_TRANSPARENT:int = 3
  FLAG_NO_FOCUS:int = 4
  FLAG_POPUP:int = 5
  FLAG_EXTEND_TO_TITLE:int = 6
  FLAG_MOUSE_PASSTHROUGH:int = 7
  FLAG_SHARP_CORNERS:int = 8
  FLAG_EXCLUDE_FROM_CAPTURE:int = 9
  FLAG_MAX:int = 10
class ContentScaleMode:
  CONTENT_SCALE_MODE_DISABLED:int = 0
  CONTENT_SCALE_MODE_CANVAS_ITEMS:int = 1
  CONTENT_SCALE_MODE_VIEWPORT:int = 2
class ContentScaleAspect:
  CONTENT_SCALE_ASPECT_IGNORE:int = 0
  CONTENT_SCALE_ASPECT_KEEP:int = 1
  CONTENT_SCALE_ASPECT_KEEP_WIDTH:int = 2
  CONTENT_SCALE_ASPECT_KEEP_HEIGHT:int = 3
  CONTENT_SCALE_ASPECT_EXPAND:int = 4
class ContentScaleStretch:
  CONTENT_SCALE_STRETCH_FRACTIONAL:int = 0
  CONTENT_SCALE_STRETCH_INTEGER:int = 1
class LayoutDirection:
  LAYOUT_DIRECTION_INHERITED:int = 0
  LAYOUT_DIRECTION_APPLICATION_LOCALE:int = 1
  LAYOUT_DIRECTION_LTR:int = 2
  LAYOUT_DIRECTION_RTL:int = 3
  LAYOUT_DIRECTION_SYSTEM_LOCALE:int = 4
  LAYOUT_DIRECTION_MAX:int = 5
  LAYOUT_DIRECTION_LOCALE:int = 1
class WindowInitialPosition:
  WINDOW_INITIAL_POSITION_ABSOLUTE:int = 0
  WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN:int = 1
  WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN:int = 2
  WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN:int = 3
  WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS:int = 4
  WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS:int = 5


class Window(__viewport__.Viewport):
  """
		A node that creates a window. The window can either be a native system window or embedded inside another `Window` (see `Viewport.gui_embed_subwindows`).
		At runtime, `Window`s will not close automatically when requested. You need to handle it manually using the `signal close_requested` signal (this applies both to pressing the close button and clicking outside of a popup).
	"""
  window_input: BuiltinSignal
  files_dropped: BuiltinSignal
  mouse_entered: BuiltinSignal
  mouse_exited: BuiltinSignal
  focus_entered: BuiltinSignal
  focus_exited: BuiltinSignal
  close_requested: BuiltinSignal
  go_back_requested: BuiltinSignal
  visibility_changed: BuiltinSignal
  about_to_popup: BuiltinSignal
  theme_changed: BuiltinSignal
  dpi_changed: BuiltinSignal
  titlebar_changed: BuiltinSignal
  title_changed: BuiltinSignal

  @staticmethod
  def constructor()->Window:pass



  @staticmethod
  def cast(other:__object__.Object)->Window:pass


  @property
  def mode(self)->int:
    """"""
    pass
  @mode.setter
  def mode(self,  value:int)->None:
    """"""
    pass
  @property
  def title(self)->str:
    """"""
    pass
  @title.setter
  def title(self,  value:str)->None:
    """"""
    pass
  @property
  def initial_position(self)->int:
    """"""
    pass
  @initial_position.setter
  def initial_position(self,  value:int)->None:
    """"""
    pass
  @property
  def position(self)->__core__.Vector2i:
    """"""
    pass
  @position.setter
  def position(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def size(self)->__core__.Vector2i:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def current_screen(self)->int:
    """"""
    pass
  @current_screen.setter
  def current_screen(self,  value:int)->None:
    """"""
    pass
  @property
  def mouse_passthrough_polygon(self)->__core__.PackedVector2Array:
    """"""
    pass
  @mouse_passthrough_polygon.setter
  def mouse_passthrough_polygon(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def visible(self)->bool:
    """"""
    pass
  @visible.setter
  def visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def wrap_controls(self)->bool:
    """"""
    pass
  @wrap_controls.setter
  def wrap_controls(self,  value:bool)->None:
    """"""
    pass
  @property
  def transient(self)->bool:
    """"""
    pass
  @transient.setter
  def transient(self,  value:bool)->None:
    """"""
    pass
  @property
  def transient_to_focused(self)->bool:
    """"""
    pass
  @transient_to_focused.setter
  def transient_to_focused(self,  value:bool)->None:
    """"""
    pass
  @property
  def exclusive(self)->bool:
    """"""
    pass
  @exclusive.setter
  def exclusive(self,  value:bool)->None:
    """"""
    pass
  @property
  def unresizable(self)->bool:
    """"""
    pass
  @unresizable.setter
  def unresizable(self,  value:bool)->None:
    """"""
    pass
  @property
  def borderless(self)->bool:
    """"""
    pass
  @borderless.setter
  def borderless(self,  value:bool)->None:
    """"""
    pass
  @property
  def always_on_top(self)->bool:
    """"""
    pass
  @always_on_top.setter
  def always_on_top(self,  value:bool)->None:
    """"""
    pass
  @property
  def transparent(self)->bool:
    """"""
    pass
  @transparent.setter
  def transparent(self,  value:bool)->None:
    """"""
    pass
  @property
  def unfocusable(self)->bool:
    """"""
    pass
  @unfocusable.setter
  def unfocusable(self,  value:bool)->None:
    """"""
    pass
  @property
  def popup_window(self)->bool:
    """"""
    pass
  @popup_window.setter
  def popup_window(self,  value:bool)->None:
    """"""
    pass
  @property
  def extend_to_title(self)->bool:
    """"""
    pass
  @extend_to_title.setter
  def extend_to_title(self,  value:bool)->None:
    """"""
    pass
  @property
  def mouse_passthrough(self)->bool:
    """"""
    pass
  @mouse_passthrough.setter
  def mouse_passthrough(self,  value:bool)->None:
    """"""
    pass
  @property
  def sharp_corners(self)->bool:
    """"""
    pass
  @sharp_corners.setter
  def sharp_corners(self,  value:bool)->None:
    """"""
    pass
  @property
  def exclude_from_capture(self)->bool:
    """"""
    pass
  @exclude_from_capture.setter
  def exclude_from_capture(self,  value:bool)->None:
    """"""
    pass
  @property
  def force_native(self)->bool:
    """"""
    pass
  @force_native.setter
  def force_native(self,  value:bool)->None:
    """"""
    pass
  @property
  def min_size(self)->__core__.Vector2i:
    """"""
    pass
  @min_size.setter
  def min_size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def max_size(self)->__core__.Vector2i:
    """"""
    pass
  @max_size.setter
  def max_size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def keep_title_visible(self)->bool:
    """"""
    pass
  @keep_title_visible.setter
  def keep_title_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def content_scale_size(self)->__core__.Vector2i:
    """"""
    pass
  @content_scale_size.setter
  def content_scale_size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def content_scale_mode(self)->int:
    """"""
    pass
  @content_scale_mode.setter
  def content_scale_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def content_scale_aspect(self)->int:
    """"""
    pass
  @content_scale_aspect.setter
  def content_scale_aspect(self,  value:int)->None:
    """"""
    pass
  @property
  def content_scale_stretch(self)->int:
    """"""
    pass
  @content_scale_stretch.setter
  def content_scale_stretch(self,  value:int)->None:
    """"""
    pass
  @property
  def content_scale_factor(self)->float:
    """"""
    pass
  @content_scale_factor.setter
  def content_scale_factor(self,  value:float)->None:
    """"""
    pass
  @property
  def auto_translate(self)->bool:
    """"""
    pass
  @auto_translate.setter
  def auto_translate(self,  value:bool)->None:
    """"""
    pass
  @property
  def theme(self)->__theme__.Theme:
    """"""
    pass
  @theme.setter
  def theme(self,  value:__theme__.Theme)->None:
    """"""
    pass
  @property
  def theme_type_variation(self)->str:
    """"""
    pass
  @theme_type_variation.setter
  def theme_type_variation(self,  value:str)->None:
    """"""
    pass
  def _get_contents_minimum_size(self)->__core__.Vector2:
    """
				Virtual method to be implemented by the user. Overrides the value returned by `get_contents_minimum_size`.
			"""
    pass

  def set_title(self, title:str)->None:
    """"""
    pass

  def get_title(self)->str:
    """"""
    pass

  def get_window_id(self)->int:
    """
				Returns the ID of the window.
			"""
    pass

  def set_initial_position(self, initial_position:int )->None:
    """"""
    pass

  def get_initial_position(self)->int:
    """"""
    pass

  def set_current_screen(self, index:int)->None:
    """"""
    pass

  def get_current_screen(self)->int:
    """"""
    pass

  def set_position(self, position:__core__.Vector2i)->None:
    """"""
    pass

  def get_position(self)->__core__.Vector2i:
    """"""
    pass

  def move_to_center(self)->None:
    """
				Centers a native window on the current screen and an embedded window on its embedder `Viewport`.
			"""
    pass

  def set_size(self, size:__core__.Vector2i)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector2i:
    """"""
    pass

  def reset_size(self)->None:
    """
				Resets the size to the minimum size, which is the max of `min_size` and (if `wrap_controls` is enabled) `get_contents_minimum_size`. This is equivalent to calling `set_size(Vector2i())` (or any size below the minimum).
			"""
    pass

  def get_position_with_decorations(self)->__core__.Vector2i:
    """
				Returns the window's position including its border.
				**Note:** If `visible` is `false`, this method returns the same value as `position`.
			"""
    pass

  def get_size_with_decorations(self)->__core__.Vector2i:
    """
				Returns the window's size including its border.
				**Note:** If `visible` is `false`, this method returns the same value as `size`.
			"""
    pass

  def set_max_size(self, max_size:__core__.Vector2i)->None:
    """"""
    pass

  def get_max_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_min_size(self, min_size:__core__.Vector2i)->None:
    """"""
    pass

  def get_min_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_mode(self, mode:int )->None:
    """"""
    pass

  def get_mode(self)->int:
    """"""
    pass

  def set_flag(self, flag:int , enabled:bool)->None:
    """
				Sets a specified window flag.
			"""
    pass

  def get_flag(self, flag:int )->bool:
    """
				Returns `true` if the `flag` is set.
			"""
    pass

  def is_maximize_allowed(self)->bool:
    """
				Returns `true` if the window can be maximized (the maximize button is enabled).
			"""
    pass

  def request_attention(self)->None:
    """
				Tells the OS that the `Window` needs an attention. This makes the window stand out in some way depending on the system, e.g. it might blink on the task bar.
			"""
    pass

  def move_to_foreground(self)->None:
    """
				Causes the window to grab focus, allowing it to receive user input.
			"""
    pass

  def set_visible(self, visible:bool)->None:
    """"""
    pass

  def is_visible(self)->bool:
    """"""
    pass

  def hide(self)->None:
    """
				Hides the window. This is not the same as minimized state. Hidden window can't be interacted with and needs to be made visible with `show`.
			"""
    pass

  def show(self)->None:
    """
				Makes the `Window` appear. This enables interactions with the `Window` and doesn't change any of its property other than visibility (unlike e.g. `popup`).
			"""
    pass

  def set_transient(self, transient:bool)->None:
    """"""
    pass

  def is_transient(self)->bool:
    """"""
    pass

  def set_transient_to_focused(self, enable:bool)->None:
    """"""
    pass

  def is_transient_to_focused(self)->bool:
    """"""
    pass

  def set_exclusive(self, exclusive:bool)->None:
    """"""
    pass

  def is_exclusive(self)->bool:
    """"""
    pass

  def set_unparent_when_invisible(self, unparent:bool)->None:
    """
				If `unparent` is `true`, the window is automatically unparented when going invisible.
				**Note:** Make sure to keep a reference to the node, otherwise it will be orphaned. You also need to manually call `Node.queue_free` to free the window if it's not parented.
			"""
    pass

  def can_draw(self)->bool:
    """
				Returns whether the window is being drawn to the screen.
			"""
    pass

  def has_focus(self)->bool:
    """
				Returns `true` if the window is focused.
			"""
    pass

  def grab_focus(self)->None:
    """
				Causes the window to grab focus, allowing it to receive user input.
			"""
    pass

  def start_drag(self)->None:
    """
				Starts an interactive drag operation on the window, using the current mouse position. Call this method when handling a mouse button being pressed to simulate a pressed event on the window's title bar. Using this method allows the window to participate in space switching, tiling, and other system features.
			"""
    pass

  def start_resize(self, edge:int )->None:
    """
				Starts an interactive resize operation on the window, using the current mouse position. Call this method when handling a mouse button being pressed to simulate a pressed event on the window's edge.
			"""
    pass

  def set_ime_active(self, active:bool)->None:
    """
				If `active` is `true`, enables system's native IME (Input Method Editor).
			"""
    pass

  def set_ime_position(self, position:__core__.Vector2i)->None:
    """
				Moves IME to the given position.
			"""
    pass

  def is_embedded(self)->bool:
    """
				Returns `true` if the window is currently embedded in another window.
			"""
    pass

  def get_contents_minimum_size(self)->__core__.Vector2:
    """
				Returns the combined minimum size from the child `Control` nodes of the window. Use `child_controls_changed` to update it when child nodes have changed.
				The value returned by this method can be overridden with `_get_contents_minimum_size`.
			"""
    pass

  def set_force_native(self, force_native:bool)->None:
    """"""
    pass

  def get_force_native(self)->bool:
    """"""
    pass

  def set_content_scale_size(self, size:__core__.Vector2i)->None:
    """"""
    pass

  def get_content_scale_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_content_scale_mode(self, mode:int )->None:
    """"""
    pass

  def get_content_scale_mode(self)->int:
    """"""
    pass

  def set_content_scale_aspect(self, aspect:int )->None:
    """"""
    pass

  def get_content_scale_aspect(self)->int:
    """"""
    pass

  def set_content_scale_stretch(self, stretch:int )->None:
    """"""
    pass

  def get_content_scale_stretch(self)->int:
    """"""
    pass

  def set_keep_title_visible(self, title_visible:bool)->None:
    """"""
    pass

  def get_keep_title_visible(self)->bool:
    """"""
    pass

  def set_content_scale_factor(self, factor:float)->None:
    """"""
    pass

  def get_content_scale_factor(self)->float:
    """"""
    pass

  def set_use_font_oversampling(self, enable:bool)->None:
    """
				Enables font oversampling. This makes fonts look better when they are scaled up.
			"""
    pass

  def is_using_font_oversampling(self)->bool:
    """
				Returns `true` if font oversampling is enabled. See `set_use_font_oversampling`.
			"""
    pass

  def set_mouse_passthrough_polygon(self, polygon:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_mouse_passthrough_polygon(self)->__core__.PackedVector2Array:
    """"""
    pass

  def set_wrap_controls(self, enable:bool)->None:
    """"""
    pass

  def is_wrapping_controls(self)->bool:
    """"""
    pass

  def child_controls_changed(self)->None:
    """
				Requests an update of the `Window` size to fit underlying `Control` nodes.
			"""
    pass

  def set_theme(self, theme:__theme__.Theme)->None:
    """"""
    pass

  def get_theme(self)->__theme__.Theme:
    """"""
    pass

  def set_theme_type_variation(self, theme_type:__core__.StringName|str)->None:
    """"""
    pass

  def get_theme_type_variation(self)->__core__.StringName:
    """"""
    pass

  def begin_bulk_theme_override(self)->None:
    """
				Prevents `*_theme_*_override` methods from emitting `constant NOTIFICATION_THEME_CHANGED` until `end_bulk_theme_override` is called.
			"""
    pass

  def end_bulk_theme_override(self)->None:
    """
				Ends a bulk theme override update. See `begin_bulk_theme_override`.
			"""
    pass

  def add_theme_icon_override(self, name:__core__.StringName|str, texture:__texture2d__.Texture2D)->None:
    """
				Creates a local override for a theme icon with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_icon_override`.
				See also `get_theme_icon`.
			"""
    pass

  def add_theme_stylebox_override(self, name:__core__.StringName|str, stylebox:__stylebox__.StyleBox)->None:
    """
				Creates a local override for a theme `StyleBox` with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_stylebox_override`.
				See also `get_theme_stylebox` and `Control.add_theme_stylebox_override` for more details.
			"""
    pass

  def add_theme_font_override(self, name:__core__.StringName|str, font:__font__.Font)->None:
    """
				Creates a local override for a theme `Font` with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_font_override`.
				See also `get_theme_font`.
			"""
    pass

  def add_theme_font_size_override(self, name:__core__.StringName|str, font_size:int)->None:
    """
				Creates a local override for a theme font size with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_font_size_override`.
				See also `get_theme_font_size`.
			"""
    pass

  def add_theme_color_override(self, name:__core__.StringName|str, color:__core__.Color)->None:
    """
				Creates a local override for a theme `Color` with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_color_override`.
				See also `get_theme_color` and `Control.add_theme_color_override` for more details.
			"""
    pass

  def add_theme_constant_override(self, name:__core__.StringName|str, constant:int)->None:
    """
				Creates a local override for a theme constant with the specified `name`. Local overrides always take precedence when fetching theme items for the control. An override can be removed with `remove_theme_constant_override`.
				See also `get_theme_constant`.
			"""
    pass

  def remove_theme_icon_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme icon with the specified `name` previously added by `add_theme_icon_override` or via the Inspector dock.
			"""
    pass

  def remove_theme_stylebox_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme `StyleBox` with the specified `name` previously added by `add_theme_stylebox_override` or via the Inspector dock.
			"""
    pass

  def remove_theme_font_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme `Font` with the specified `name` previously added by `add_theme_font_override` or via the Inspector dock.
			"""
    pass

  def remove_theme_font_size_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme font size with the specified `name` previously added by `add_theme_font_size_override` or via the Inspector dock.
			"""
    pass

  def remove_theme_color_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme `Color` with the specified `name` previously added by `add_theme_color_override` or via the Inspector dock.
			"""
    pass

  def remove_theme_constant_override(self, name:__core__.StringName|str)->None:
    """
				Removes a local override for a theme constant with the specified `name` previously added by `add_theme_constant_override` or via the Inspector dock.
			"""
    pass

  def get_theme_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns an icon from the first matching `Theme` in the tree if that `Theme` has an icon item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__styleboxline__.StyleBoxLine|__styleboxempty__.StyleBoxEmpty|__styleboxtexture__.StyleBoxTexture|__stylebox__.StyleBox|__styleboxflat__.StyleBoxFlat:
    """
				Returns a `StyleBox` from the first matching `Theme` in the tree if that `Theme` has a stylebox item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__fontfile__.FontFile|__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font:
    """
				Returns a `Font` from the first matching `Theme` in the tree if that `Theme` has a font item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->int:
    """
				Returns a font size from the first matching `Theme` in the tree if that `Theme` has a font size item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__core__.Color:
    """
				Returns a `Color` from the first matching `Theme` in the tree if that `Theme` has a color item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for more details.
			"""
    pass

  def get_theme_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->int:
    """
				Returns a constant from the first matching `Theme` in the tree if that `Theme` has a constant item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for more details.
			"""
    pass

  def has_theme_icon_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme icon with the specified `name` in this `Control` node.
				See `add_theme_icon_override`.
			"""
    pass

  def has_theme_stylebox_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme `StyleBox` with the specified `name` in this `Control` node.
				See `add_theme_stylebox_override`.
			"""
    pass

  def has_theme_font_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme `Font` with the specified `name` in this `Control` node.
				See `add_theme_font_override`.
			"""
    pass

  def has_theme_font_size_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme font size with the specified `name` in this `Control` node.
				See `add_theme_font_size_override`.
			"""
    pass

  def has_theme_color_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme `Color` with the specified `name` in this `Control` node.
				See `add_theme_color_override`.
			"""
    pass

  def has_theme_constant_override(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a local override for a theme constant with the specified `name` in this `Control` node.
				See `add_theme_constant_override`.
			"""
    pass

  def has_theme_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has an icon item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def has_theme_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has a stylebox item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def has_theme_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has a font item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def has_theme_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has a font size item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def has_theme_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has a color item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def has_theme_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool:
    """
				Returns `true` if there is a matching `Theme` in the tree that has a constant item with the specified `name` and `theme_type`.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_default_base_scale(self)->float:
    """
				Returns the default base scale value from the first matching `Theme` in the tree if that `Theme` has a valid `Theme.default_base_scale` value.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_default_font(self)->__fontfile__.FontFile|__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font:
    """
				Returns the default font from the first matching `Theme` in the tree if that `Theme` has a valid `Theme.default_font` value.
				See `Control.get_theme_color` for details.
			"""
    pass

  def get_theme_default_font_size(self)->int:
    """
				Returns the default font size value from the first matching `Theme` in the tree if that `Theme` has a valid `Theme.default_font_size` value.
				See `Control.get_theme_color` for details.
			"""
    pass

  def set_layout_direction(self, direction:int )->None:
    """
				Sets layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew).
			"""
    pass

  def get_layout_direction(self)->int:
    """
				Returns layout direction and text writing direction.
			"""
    pass

  def is_layout_rtl(self)->bool:
    """
				Returns `true` if the layout is right-to-left.
			"""
    pass

  def set_auto_translate(self, enable:bool)->None:
    """"""
    pass

  def is_auto_translating(self)->bool:
    """"""
    pass

  def popup(self, rect:__core__.Rect2i= __core__.Rect2i.new0())->None:
    """
				Shows the `Window` and makes it transient (see `transient`). If `rect` is provided, it will be set as the `Window`'s size. Fails if called on the main window.
				If `ProjectSettings.display/window/subwindows/embed_subwindows` is `true` (single-window mode), `rect`'s coordinates are global and relative to the main window's top-left corner (excluding window decorations). If `rect`'s position coordinates are negative, the window will be located outside the main window and may not be visible as a result.
				If `ProjectSettings.display/window/subwindows/embed_subwindows` is `false` (multi-window mode), `rect`'s coordinates are global and relative to the top-left corner of the leftmost screen. If `rect`'s position coordinates are negative, the window will be placed at the top-left corner of the screen.
				**Note:** `rect` must be in global coordinates if specified.
			"""
    pass

  def popup_on_parent(self, parent_rect:__core__.Rect2i)->None:
    """
				Popups the `Window` with a position shifted by parent `Window`'s position. If the `Window` is embedded, has the same effect as `popup`.
			"""
    pass

  def popup_centered(self, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None:
    """
				Popups the `Window` at the center of the current screen, with optionally given minimum size. If the `Window` is embedded, it will be centered in the parent `Viewport` instead.
				**Note:** Calling it with the default value of `minsize` is equivalent to calling it with `size`.
			"""
    pass

  def popup_centered_ratio(self, ratio:float=0.8)->None:
    """
				If `Window` is embedded, popups the `Window` centered inside its embedder and sets its size as a `ratio` of embedder's size.
				If `Window` is a native window, popups the `Window` centered inside the screen of its parent `Window` and sets its size as a `ratio` of the screen size.
			"""
    pass

  def popup_centered_clamped(self, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None:
    """
				Popups the `Window` centered inside its parent `Window`. `fallback_ratio` determines the maximum size of the `Window`, in relation to its parent.
				**Note:** Calling it with the default value of `minsize` is equivalent to calling it with `size`.
			"""
    pass

  def popup_exclusive(self, from_node:__node__.Node, rect:__core__.Rect2i= __core__.Rect2i.new0())->None:
    """
				Attempts to parent this dialog to the last exclusive window relative to `from_node`, and then calls `Window.popup` on it. The dialog must have no current parent, otherwise the method fails.
				See also `set_unparent_when_invisible` and `Node.get_last_exclusive_window`.
			"""
    pass

  def popup_exclusive_on_parent(self, from_node:__node__.Node, parent_rect:__core__.Rect2i)->None:
    """
				Attempts to parent this dialog to the last exclusive window relative to `from_node`, and then calls `Window.popup_on_parent` on it. The dialog must have no current parent, otherwise the method fails.
				See also `set_unparent_when_invisible` and `Node.get_last_exclusive_window`.
			"""
    pass

  def popup_exclusive_centered(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None:
    """
				Attempts to parent this dialog to the last exclusive window relative to `from_node`, and then calls `Window.popup_centered` on it. The dialog must have no current parent, otherwise the method fails.
				See also `set_unparent_when_invisible` and `Node.get_last_exclusive_window`.
			"""
    pass

  def popup_exclusive_centered_ratio(self, from_node:__node__.Node, ratio:float=0.8)->None:
    """
				Attempts to parent this dialog to the last exclusive window relative to `from_node`, and then calls `Window.popup_centered_ratio` on it. The dialog must have no current parent, otherwise the method fails.
				See also `set_unparent_when_invisible` and `Node.get_last_exclusive_window`.
			"""
    pass

  def popup_exclusive_centered_clamped(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None:
    """
				Attempts to parent this dialog to the last exclusive window relative to `from_node`, and then calls `Window.popup_centered_clamped` on it. The dialog must have no current parent, otherwise the method fails.
				See also `set_unparent_when_invisible` and `Node.get_last_exclusive_window`.
			"""
    pass


