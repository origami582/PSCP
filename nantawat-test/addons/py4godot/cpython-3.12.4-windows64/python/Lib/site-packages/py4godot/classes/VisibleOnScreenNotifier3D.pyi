from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D as __visualinstance3d__



class VisibleOnScreenNotifier3D(__visualinstance3d__.VisualInstance3D):
  """
		`VisibleOnScreenNotifier3D` represents a box-shaped region of 3D space. When any part of this region becomes visible on screen or in a `Camera3D`'s view, it will emit a `signal screen_entered` signal, and likewise it will emit a `signal screen_exited` signal when no part of it remains visible.
		If you want a node to be enabled automatically when this region is visible on screen, use `VisibleOnScreenEnabler3D`.
		**Note:** `VisibleOnScreenNotifier3D` uses an approximate heuristic that doesn't take walls and other occlusion into account, unless occlusion culling is used. It also won't function unless `Node3D.visible` is set to `true`.
	"""
  screen_entered: BuiltinSignal
  screen_exited: BuiltinSignal

  @staticmethod
  def constructor()->VisibleOnScreenNotifier3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VisibleOnScreenNotifier3D:pass


  @property
  def aabb(self)->__core__.AABB:
    """"""
    pass
  @aabb.setter
  def aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  def set_aabb(self, rect:__core__.AABB)->None:
    """"""
    pass

  def is_on_screen(self)->bool:
    """
				Returns `true` if the bounding box is on the screen.
				**Note:** It takes one frame for the `VisibleOnScreenNotifier3D`'s visibility to be assessed once added to the scene tree, so this method will always return `false` right after it is instantiated.
			"""
    pass


