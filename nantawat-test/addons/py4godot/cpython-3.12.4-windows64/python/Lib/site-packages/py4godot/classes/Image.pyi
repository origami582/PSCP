from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.Image as __image__


class Format:
  FORMAT_L8:int = 0
  FORMAT_LA8:int = 1
  FORMAT_R8:int = 2
  FORMAT_RG8:int = 3
  FORMAT_RGB8:int = 4
  FORMAT_RGBA8:int = 5
  FORMAT_RGBA4444:int = 6
  FORMAT_RGB565:int = 7
  FORMAT_RF:int = 8
  FORMAT_RGF:int = 9
  FORMAT_RGBF:int = 10
  FORMAT_RGBAF:int = 11
  FORMAT_RH:int = 12
  FORMAT_RGH:int = 13
  FORMAT_RGBH:int = 14
  FORMAT_RGBAH:int = 15
  FORMAT_RGBE9995:int = 16
  FORMAT_DXT1:int = 17
  FORMAT_DXT3:int = 18
  FORMAT_DXT5:int = 19
  FORMAT_RGTC_R:int = 20
  FORMAT_RGTC_RG:int = 21
  FORMAT_BPTC_RGBA:int = 22
  FORMAT_BPTC_RGBF:int = 23
  FORMAT_BPTC_RGBFU:int = 24
  FORMAT_ETC:int = 25
  FORMAT_ETC2_R11:int = 26
  FORMAT_ETC2_R11S:int = 27
  FORMAT_ETC2_RG11:int = 28
  FORMAT_ETC2_RG11S:int = 29
  FORMAT_ETC2_RGB8:int = 30
  FORMAT_ETC2_RGBA8:int = 31
  FORMAT_ETC2_RGB8A1:int = 32
  FORMAT_ETC2_RA_AS_RG:int = 33
  FORMAT_DXT5_RA_AS_RG:int = 34
  FORMAT_ASTC_4x4:int = 35
  FORMAT_ASTC_4x4_HDR:int = 36
  FORMAT_ASTC_8x8:int = 37
  FORMAT_ASTC_8x8_HDR:int = 38
  FORMAT_MAX:int = 39
class Interpolation:
  INTERPOLATE_NEAREST:int = 0
  INTERPOLATE_BILINEAR:int = 1
  INTERPOLATE_CUBIC:int = 2
  INTERPOLATE_TRILINEAR:int = 3
  INTERPOLATE_LANCZOS:int = 4
class AlphaMode:
  ALPHA_NONE:int = 0
  ALPHA_BIT:int = 1
  ALPHA_BLEND:int = 2
class CompressMode:
  COMPRESS_S3TC:int = 0
  COMPRESS_ETC:int = 1
  COMPRESS_ETC2:int = 2
  COMPRESS_BPTC:int = 3
  COMPRESS_ASTC:int = 4
  COMPRESS_MAX:int = 5
class UsedChannels:
  USED_CHANNELS_L:int = 0
  USED_CHANNELS_LA:int = 1
  USED_CHANNELS_R:int = 2
  USED_CHANNELS_RG:int = 3
  USED_CHANNELS_RGB:int = 4
  USED_CHANNELS_RGBA:int = 5
class CompressSource:
  COMPRESS_SOURCE_GENERIC:int = 0
  COMPRESS_SOURCE_SRGB:int = 1
  COMPRESS_SOURCE_NORMAL:int = 2
class ASTCFormat:
  ASTC_FORMAT_4x4:int = 0
  ASTC_FORMAT_8x8:int = 1


class Image(__resource__.Resource):
  """
		Native image datatype. Contains image data which can be converted to an `ImageTexture` and provides commonly used _image processing_ methods. The maximum width and height for an `Image` are `constant MAX_WIDTH` and `constant MAX_HEIGHT`.
		An `Image` cannot be assigned to a texture property of an object directly (such as `Sprite2D.texture`), and has to be converted manually to an `ImageTexture` first.
		**Note:** The maximum image size is 16384Ã—16384 pixels due to graphics hardware limitations. Larger images may fail to import.
	"""

  @staticmethod
  def constructor()->Image:pass



  @staticmethod
  def cast(other:__object__.Object)->Image:pass


  @property
  def data(self)->__core__.Dictionary:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def get_width(self)->int:
    """
				Returns the image's width.
			"""
    pass

  def get_height(self)->int:
    """
				Returns the image's height.
			"""
    pass

  def get_size(self)->__core__.Vector2i:
    """
				Returns the image's size (width and height).
			"""
    pass

  def has_mipmaps(self)->bool:
    """
				Returns `true` if the image has generated mipmaps.
			"""
    pass

  def get_format(self)->int:
    """
				Returns this image's format.
			"""
    pass

  def get_data(self)->__core__.PackedByteArray:
    """
				Returns a copy of the image's raw data.
			"""
    pass

  def get_data_size(self)->int:
    """
				Returns size (in bytes) of the image's raw data.
			"""
    pass

  def convert(self, format:int )->None:
    """
				Converts this image's format to the given `format`.
			"""
    pass

  def get_mipmap_count(self)->int:
    """
				Returns the number of mipmap levels or 0 if the image has no mipmaps. The largest main level image is not counted as a mipmap level by this method, so if you want to include it you can add 1 to this count.
			"""
    pass

  def get_mipmap_offset(self, mipmap:int)->int:
    """
				Returns the offset where the image's mipmap with index `mipmap` is stored in the `data` dictionary.
			"""
    pass

  def resize_to_po2(self, square:bool=False, interpolation:int =1)->None:
    """
				Resizes the image to the nearest power of 2 for the width and height. If `square` is `true`, sets width and height to be the same. New pixels are calculated using the `interpolation` mode defined via `enum Interpolation` constants.
			"""
    pass

  def resize(self, width:int, height:int, interpolation:int =1)->None:
    """
				Resizes the image to the given `width` and `height`. New pixels are calculated using the `interpolation` mode defined via `enum Interpolation` constants.
			"""
    pass

  def shrink_x2(self)->None:
    """
				Shrinks the image by a factor of 2 on each axis (this divides the pixel count by 4).
			"""
    pass

  def crop(self, width:int, height:int)->None:
    """
				Crops the image to the given `width` and `height`. If the specified size is larger than the current size, the extra area is filled with black pixels.
			"""
    pass

  def flip_x(self)->None:
    """
				Flips the image horizontally.
			"""
    pass

  def flip_y(self)->None:
    """
				Flips the image vertically.
			"""
    pass

  def generate_mipmaps(self, renormalize:bool=False)->int:
    """
				Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is `0`. Enabling `renormalize` when generating mipmaps for normal map textures will make sure all resulting vector values are normalized.
				It is possible to check if the image has mipmaps by calling `has_mipmaps` or `get_mipmap_count`. Calling `generate_mipmaps` on an image that already has mipmaps will replace existing mipmaps in the image.
			"""
    pass

  def clear_mipmaps(self)->None:
    """
				Removes the image's mipmaps.
			"""
    pass

  @staticmethod
  def create(width:int, height:int, use_mipmaps:bool, format:int )->__image__.Image:
    """
				Creates an empty image of the given size and format. If `use_mipmaps` is `true`, generates mipmaps for this image. See the `generate_mipmaps`.
			"""
    pass

  @staticmethod
  def create_empty(width:int, height:int, use_mipmaps:bool, format:int )->__image__.Image:
    """
				Creates an empty image of the given size and format. If `use_mipmaps` is `true`, generates mipmaps for this image. See the `generate_mipmaps`.
			"""
    pass

  @staticmethod
  def create_from_data(width:int, height:int, use_mipmaps:bool, format:int , data:__core__.PackedByteArray)->__image__.Image:
    """
				Creates a new image of the given size and format. Fills the image with the given raw data. If `use_mipmaps` is `true`, loads the mipmaps for this image from `data`. See `generate_mipmaps`.
			"""
    pass

  def set_data(self, width:int, height:int, use_mipmaps:bool, format:int , data:__core__.PackedByteArray)->None:
    """
				Overwrites data of an existing `Image`. Non-static equivalent of `create_from_data`.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the image has no data.
			"""
    pass

  def load(self, path:str)->int:
    """
				Loads an image from file `path`. See `url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#supported-image-formats`Supported image formats`/url` for a list of supported image formats and limitations.
				**Warning:** This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the `user://` directory, and may not work in exported projects.
				See also `ImageTexture` description for usage examples.
			"""
    pass

  @staticmethod
  def load_from_file(path:str)->__image__.Image:
    """
				Creates a new `Image` and loads data from the specified file.
			"""
    pass

  def save_png(self, path:str)->int:
    """
				Saves the image as a PNG file to the file at `path`.
			"""
    pass

  def save_png_to_buffer(self)->__core__.PackedByteArray:
    """
				Saves the image as a PNG file to a byte array.
			"""
    pass

  def save_jpg(self, path:str, quality:float=0.75)->int:
    """
				Saves the image as a JPEG file to `path` with the specified `quality` between `0.01` and `1.0` (inclusive). Higher `quality` values result in better-looking output at the cost of larger file sizes. Recommended `quality` values are between `0.75` and `0.90`. Even at quality `1.00`, JPEG compression remains lossy.
				**Note:** JPEG does not save an alpha channel. If the `Image` contains an alpha channel, the image will still be saved, but the resulting JPEG file won't contain the alpha channel.
			"""
    pass

  def save_jpg_to_buffer(self, quality:float=0.75)->__core__.PackedByteArray:
    """
				Saves the image as a JPEG file to a byte array with the specified `quality` between `0.01` and `1.0` (inclusive). Higher `quality` values result in better-looking output at the cost of larger byte array sizes (and therefore memory usage). Recommended `quality` values are between `0.75` and `0.90`. Even at quality `1.00`, JPEG compression remains lossy.
				**Note:** JPEG does not save an alpha channel. If the `Image` contains an alpha channel, the image will still be saved, but the resulting byte array won't contain the alpha channel.
			"""
    pass

  def save_exr(self, path:str, grayscale:bool=False)->int:
    """
				Saves the image as an EXR file to `path`. If `grayscale` is `true` and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return `constant ERR_UNAVAILABLE` if Godot was compiled without the TinyEXR module.
				**Note:** The TinyEXR module is disabled in non-editor builds, which means `save_exr` will return `constant ERR_UNAVAILABLE` when it is called from an exported project.
			"""
    pass

  def save_exr_to_buffer(self, grayscale:bool=False)->__core__.PackedByteArray:
    """
				Saves the image as an EXR file to a byte array. If `grayscale` is `true` and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return an empty byte array if Godot was compiled without the TinyEXR module.
				**Note:** The TinyEXR module is disabled in non-editor builds, which means `save_exr_to_buffer` will return an empty byte array when it is called from an exported project.
			"""
    pass

  def save_webp(self, path:str, lossy:bool=False, quality:float=0.75)->int:
    """
				Saves the image as a WebP (Web Picture) file to the file at `path`. By default it will save lossless. If `lossy` is `true`, the image will be saved lossy, using the `quality` setting between `0.0` and `1.0` (inclusive). Lossless WebP offers more efficient compression than PNG.
				**Note:** The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
			"""
    pass

  def save_webp_to_buffer(self, lossy:bool=False, quality:float=0.75)->__core__.PackedByteArray:
    """
				Saves the image as a WebP (Web Picture) file to a byte array. By default it will save lossless. If `lossy` is `true`, the image will be saved lossy, using the `quality` setting between `0.0` and `1.0` (inclusive). Lossless WebP offers more efficient compression than PNG.
				**Note:** The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images.
			"""
    pass

  def detect_alpha(self)->int:
    """
				Returns `constant ALPHA_BLEND` if the image has data for alpha values. Returns `constant ALPHA_BIT` if all the alpha values are stored in a single bit. Returns `constant ALPHA_NONE` if no data for alpha values is found.
			"""
    pass

  def is_invisible(self)->bool:
    """
				Returns `true` if all the image's pixels have an alpha value of 0. Returns `false` if any pixel has an alpha value higher than 0.
			"""
    pass

  def detect_used_channels(self, source:int =0)->int:
    """
				Returns the color channels used by this image. If the image is compressed, the original `source` must be specified.
			"""
    pass

  def compress(self, mode:int , source:int =0, astc_format:int =0)->int:
    """
				Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
				The `source` parameter helps to pick the best compression method for DXT and ETC2 formats. It is ignored for ASTC compression.
				For ASTC compression, the `astc_format` parameter must be supplied.
			"""
    pass

  def compress_from_channels(self, mode:int , channels:int , astc_format:int =0)->int:
    """
				Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available.
				This is an alternative to `compress` that lets the user supply the channels used in order for the compressor to pick the best DXT and ETC2 formats. For other formats (non DXT or ETC2), this argument is ignored.
				For ASTC compression, the `astc_format` parameter must be supplied.
			"""
    pass

  def decompress(self)->int:
    """
				Decompresses the image if it is VRAM compressed in a supported format. Returns `constant OK` if the format is supported, otherwise `constant ERR_UNAVAILABLE`.
				**Note:** The following formats can be decompressed: DXT, RGTC, BPTC. The formats ETC1 and ETC2 are not supported.
			"""
    pass

  def is_compressed(self)->bool:
    """
				Returns `true` if the image is compressed.
			"""
    pass

  def rotate_90(self, direction:int )->None:
    """
				Rotates the image in the specified `direction` by `90` degrees. The width and height of the image must be greater than `1`. If the width and height are not equal, the image will be resized.
			"""
    pass

  def rotate_180(self)->None:
    """
				Rotates the image by `180` degrees. The width and height of the image must be greater than `1`.
			"""
    pass

  def fix_alpha_edges(self)->None:
    """
				Blends low-alpha pixels with nearby pixels.
			"""
    pass

  def premultiply_alpha(self)->None:
    """
				Multiplies color values with alpha values. Resulting color values for a pixel are `(color * alpha)/256`. See also `CanvasItemMaterial.blend_mode`.
			"""
    pass

  def srgb_to_linear(self)->None:
    """
				Converts the raw data from the sRGB colorspace to a linear scale. Only works on images with `constant FORMAT_RGB8` or `constant FORMAT_RGBA8` formats.
			"""
    pass

  def linear_to_srgb(self)->None:
    """
				Converts the entire image from the linear colorspace to the sRGB colorspace. Only works on images with `constant FORMAT_RGB8` or `constant FORMAT_RGBA8` formats.
			"""
    pass

  def normal_map_to_xy(self)->None:
    """
				Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normal map. A normal map can add lots of detail to a 3D surface without increasing the polygon count.
			"""
    pass

  def rgbe_to_srgb(self)->__image__.Image:
    """
				Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image.
			"""
    pass

  def bump_map_to_normal_map(self, bump_scale:float=1.0)->None:
    """
				Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel.
			"""
    pass

  def compute_image_metrics(self, compared_image:__image__.Image, use_luma:bool)->__core__.Dictionary:
    """
				Compute image metrics on the current image and the compared image.
				The dictionary contains `max`, `mean`, `mean_squared`, `root_mean_squared` and `peak_snr`.
			"""
    pass

  def blit_rect(self, src:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None:
    """
				Copies `src_rect` from `src` image to this image at coordinates `dst`, clipped accordingly to both image bounds. This image and `src` image **must** have the same format. `src_rect` with non-positive size is treated as empty.
				**Note:** The alpha channel data in `src` will overwrite the corresponding data in this image at the target position. To blend alpha channels, use `blend_rect` instead.
			"""
    pass

  def blit_rect_mask(self, src:__image__.Image, mask:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None:
    """
				Blits `src_rect` area from `src` image to this image at the coordinates given by `dst`, clipped accordingly to both image bounds. `src` pixel is copied onto `dst` if the corresponding `mask` pixel's alpha value is not 0. This image and `src` image **must** have the same format. `src` image and `mask` image **must** have the same size (width and height) but they can have different formats. `src_rect` with non-positive size is treated as empty.
			"""
    pass

  def blend_rect(self, src:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None:
    """
				Alpha-blends `src_rect` from `src` image to this image at coordinates `dst`, clipped accordingly to both image bounds. This image and `src` image **must** have the same format. `src_rect` with non-positive size is treated as empty.
			"""
    pass

  def blend_rect_mask(self, src:__image__.Image, mask:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None:
    """
				Alpha-blends `src_rect` from `src` image to this image using `mask` image at coordinates `dst`, clipped accordingly to both image bounds. Alpha channels are required for both `src` and `mask`. `dst` pixels and `src` pixels will blend if the corresponding mask pixel's alpha value is not 0. This image and `src` image **must** have the same format. `src` image and `mask` image **must** have the same size (width and height) but they can have different formats. `src_rect` with non-positive size is treated as empty.
			"""
    pass

  def fill(self, color:__core__.Color)->None:
    """
				Fills the image with `color`.
			"""
    pass

  def fill_rect(self, rect:__core__.Rect2i, color:__core__.Color)->None:
    """
				Fills `rect` with `color`.
			"""
    pass

  def get_used_rect(self)->__core__.Rect2i:
    """
				Returns a `Rect2i` enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible.
			"""
    pass

  def get_region(self, region:__core__.Rect2i)->__image__.Image:
    """
				Returns a new `Image` that is a copy of this `Image`'s area specified with `region`.
			"""
    pass

  def copy_from(self, src:__image__.Image)->None:
    """
				Copies `src` image to this image.
			"""
    pass

  def get_pixelv(self, point:__core__.Vector2i)->__core__.Color:
    """
				Returns the color of the pixel at `point`.
				This is the same as `get_pixel`, but with a `Vector2i` argument instead of two integer arguments.
			"""
    pass

  def get_pixel(self, x:int, y:int)->__core__.Color:
    """
				Returns the color of the pixel at `(x, y)`.
				This is the same as `get_pixelv`, but with two integer arguments instead of a `Vector2i` argument.
			"""
    pass

  def set_pixelv(self, point:__core__.Vector2i, color:__core__.Color)->None:
    """
				Sets the `Color` of the pixel at `point` to `color`.
				
				```gdscript
				var img_width = 10
				var img_height = 5
				var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

				img.set_pixelv(Vector2i(1, 2), Color.RED) # Sets the color at (1, 2) to red.
				```
				
				
				This is the same as `set_pixel`, but with a `Vector2i` argument instead of two integer arguments.
			"""
    pass

  def set_pixel(self, x:int, y:int, color:__core__.Color)->None:
    """
				Sets the `Color` of the pixel at `(x, y)` to `color`.
				
				```gdscript
				var img_width = 10
				var img_height = 5
				var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

				img.set_pixel(1, 2, Color.RED) # Sets the color at (1, 2) to red.
				```
				
				
				This is the same as `set_pixelv`, but with a two integer arguments instead of a `Vector2i` argument.
			"""
    pass

  def adjust_bcs(self, brightness:float, contrast:float, saturation:float)->None:
    """
				Adjusts this image's `brightness`, `contrast`, and `saturation` by the given values. Does not work if the image is compressed (see `is_compressed`).
			"""
    pass

  def load_png_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a PNG file.
			"""
    pass

  def load_jpg_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a JPEG file.
			"""
    pass

  def load_webp_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a WebP file.
			"""
    pass

  def load_tga_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a TGA file.
				**Note:** This method is only available in engine builds with the TGA module enabled. By default, the TGA module is enabled, but it can be disabled at build-time using the `module_tga_enabled=no` SCons option.
			"""
    pass

  def load_bmp_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a BMP file.
				**Note:** Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported.
				**Note:** This method is only available in engine builds with the BMP module enabled. By default, the BMP module is enabled, but it can be disabled at build-time using the `module_bmp_enabled=no` SCons option.
			"""
    pass

  def load_ktx_from_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Loads an image from the binary contents of a `url=https://github.com/KhronosGroup/KTX-Software`KTX`/url` file. Unlike most image formats, KTX can store VRAM-compressed data and embed mipmaps.
				**Note:** Godot's libktx implementation only supports 2D images. Cubemaps, texture arrays, and de-padding are not supported.
				**Note:** This method is only available in engine builds with the KTX module enabled. By default, the KTX module is enabled, but it can be disabled at build-time using the `module_ktx_enabled=no` SCons option.
			"""
    pass

  def load_svg_from_buffer(self, buffer:__core__.PackedByteArray, scale:float=1.0)->int:
    """
				Loads an image from the UTF-8 binary contents of an **uncompressed** SVG file (**.svg**).
				**Note:** Beware when using compressed SVG files (like **.svgz**), they need to be `decompressed` before loading.
				**Note:** This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the `module_svg_enabled=no` SCons option.
			"""
    pass

  def load_svg_from_string(self, svg_str:str, scale:float=1.0)->int:
    """
				Loads an image from the string contents of an SVG file (**.svg**).
				**Note:** This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the `module_svg_enabled=no` SCons option.
			"""
    pass


