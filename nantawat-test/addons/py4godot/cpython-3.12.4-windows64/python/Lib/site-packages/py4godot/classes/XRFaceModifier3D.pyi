from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__



class XRFaceModifier3D(__node3d__.Node3D):
  """
		This node applies weights from an `XRFaceTracker` to a mesh with supporting face blend shapes.
		The `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/unified-blendshapes`Unified Expressions`/url` blend shapes are supported, as well as ARKit and SRanipal blend shapes.
		The node attempts to identify blend shapes based on name matching. Blend shapes should match the names listed in the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/compatibility/overview`Unified Expressions Compatibility`/url` chart.
	"""

  @staticmethod
  def constructor()->XRFaceModifier3D:pass



  @staticmethod
  def cast(other:__object__.Object)->XRFaceModifier3D:pass


  @property
  def face_tracker(self)->str:
    """"""
    pass
  @face_tracker.setter
  def face_tracker(self,  value:str)->None:
    """"""
    pass
  @property
  def target(self)->__core__.NodePath:
    """"""
    pass
  @target.setter
  def target(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_face_tracker(self, tracker_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_face_tracker(self)->__core__.StringName:
    """"""
    pass

  def set_target(self, target:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target(self)->__core__.NodePath:
    """"""
    pass


