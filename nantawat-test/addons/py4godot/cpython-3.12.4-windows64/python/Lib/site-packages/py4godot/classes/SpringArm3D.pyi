from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CylinderShape3D as __cylindershape3d__
import py4godot.classes.ConcavePolygonShape3D as __concavepolygonshape3d__
import py4godot.classes.SeparationRayShape3D as __separationrayshape3d__
import py4godot.classes.Shape3D as __shape3d__
import py4godot.classes.HeightMapShape3D as __heightmapshape3d__
import py4godot.classes.SphereShape3D as __sphereshape3d__
import py4godot.classes.WorldBoundaryShape3D as __worldboundaryshape3d__
import py4godot.classes.BoxShape3D as __boxshape3d__
import py4godot.classes.CapsuleShape3D as __capsuleshape3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.ConvexPolygonShape3D as __convexpolygonshape3d__



class SpringArm3D(__node3d__.Node3D):
  """
		`SpringArm3D` casts a ray or a shape along its Z axis and moves all its direct children to the collision point, with an optional margin. This is useful for 3rd person cameras that move closer to the player when inside a tight space (you may need to exclude the player's collider from the `SpringArm3D`'s collision check).
	"""

  @staticmethod
  def constructor()->SpringArm3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpringArm3D:pass


  @property
  def collision_mask(self)->int:
    """"""
    pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def shape(self)->__cylindershape3d__.CylinderShape3D|__concavepolygonshape3d__.ConcavePolygonShape3D|__shape3d__.Shape3D|__heightmapshape3d__.HeightMapShape3D|__sphereshape3d__.SphereShape3D|__worldboundaryshape3d__.WorldBoundaryShape3D|__boxshape3d__.BoxShape3D|__capsuleshape3d__.CapsuleShape3D|__separationrayshape3d__.SeparationRayShape3D|__convexpolygonshape3d__.ConvexPolygonShape3D:
    """"""
    pass
  @shape.setter
  def shape(self,  value:__shape3d__.Shape3D)->None:
    """"""
    pass
  @property
  def spring_length(self)->float:
    """"""
    pass
  @spring_length.setter
  def spring_length(self,  value:float)->None:
    """"""
    pass
  @property
  def margin(self)->float:
    """"""
    pass
  @margin.setter
  def margin(self,  value:float)->None:
    """"""
    pass
  def get_hit_length(self)->float:
    """
				Returns the spring arm's current length.
			"""
    pass

  def set_length(self, length:float)->None:
    """"""
    pass

  def get_length(self)->float:
    """"""
    pass

  def set_shape(self, shape:__shape3d__.Shape3D)->None:
    """"""
    pass

  def get_shape(self)->__cylindershape3d__.CylinderShape3D|__concavepolygonshape3d__.ConcavePolygonShape3D|__shape3d__.Shape3D|__heightmapshape3d__.HeightMapShape3D|__sphereshape3d__.SphereShape3D|__worldboundaryshape3d__.WorldBoundaryShape3D|__boxshape3d__.BoxShape3D|__capsuleshape3d__.CapsuleShape3D|__separationrayshape3d__.SeparationRayShape3D|__convexpolygonshape3d__.ConvexPolygonShape3D:
    """"""
    pass

  def add_excluded_object(self, RID:__core__.RID)->None:
    """
				Adds the `PhysicsBody3D` object with the given `RID` to the list of `PhysicsBody3D` objects excluded from the collision check.
			"""
    pass

  def remove_excluded_object(self, RID:__core__.RID)->bool:
    """
				Removes the given `RID` from the list of `PhysicsBody3D` objects excluded from the collision check.
			"""
    pass

  def clear_excluded_objects(self)->None:
    """
				Clears the list of `PhysicsBody3D` objects excluded from the collision check.
			"""
    pass

  def set_collision_mask(self, mask:int)->None:
    """"""
    pass

  def get_collision_mask(self)->int:
    """"""
    pass

  def set_margin(self, margin:float)->None:
    """"""
    pass

  def get_margin(self)->float:
    """"""
    pass


