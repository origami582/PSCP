from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsTestMotionResult3D as __physicstestmotionresult3d__
import py4godot.classes.PhysicsServer3D as __physicsserver3d__
import py4godot.classes.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__
import py4godot.classes.PhysicsServer3DExtension as __physicsserver3dextension__
import py4godot.classes.PhysicsServer3DRenderingServerHandler as __physicsserver3drenderingserverhandler__
import py4godot.classes.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__
import py4godot.classes.Object as __object__
import py4godot.classes.PhysicsDirectBodyState3DExtension as __physicsdirectbodystate3dextension__
import py4godot.classes.PhysicsTestMotionParameters3D as __physicstestmotionparameters3d__
import py4godot.classes.PhysicsDirectSpaceState3DExtension as __physicsdirectspacestate3dextension__


class JointType:
  JOINT_KIND_PIN:int = 0
  JOINT_KIND_HINGE:int = 1
  JOINT_KIND_SLIDER:int = 2
  JOINT_KIND_CONE_TWIST:int = 3
  JOINT_KIND_6DOF:int = 4
  JOINT_KIND_MAX:int = 5
class PinJointParam:
  PIN_JOINT_BIAS:int = 0
  PIN_JOINT_DAMPING:int = 1
  PIN_JOINT_IMPULSE_CLAMP:int = 2
class HingeJointParam:
  HINGE_JOINT_BIAS:int = 0
  HINGE_JOINT_LIMIT_UPPER:int = 1
  HINGE_JOINT_LIMIT_LOWER:int = 2
  HINGE_JOINT_LIMIT_BIAS:int = 3
  HINGE_JOINT_LIMIT_SOFTNESS:int = 4
  HINGE_JOINT_LIMIT_RELAXATION:int = 5
  HINGE_JOINT_MOTOR_TARGET_VELOCITY:int = 6
  HINGE_JOINT_MOTOR_MAX_IMPULSE:int = 7
class HingeJointFlag:
  HINGE_JOINT_FLAG_USE_LIMIT:int = 0
  HINGE_JOINT_FLAG_ENABLE_MOTOR:int = 1
class SliderJointParam:
  SLIDER_JOINT_LINEAR_LIMIT_UPPER:int = 0
  SLIDER_JOINT_LINEAR_LIMIT_LOWER:int = 1
  SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS:int = 2
  SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION:int = 3
  SLIDER_JOINT_LINEAR_LIMIT_DAMPING:int = 4
  SLIDER_JOINT_LINEAR_MOTION_SOFTNESS:int = 5
  SLIDER_JOINT_LINEAR_MOTION_RESTITUTION:int = 6
  SLIDER_JOINT_LINEAR_MOTION_DAMPING:int = 7
  SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS:int = 8
  SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION:int = 9
  SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING:int = 10
  SLIDER_JOINT_ANGULAR_LIMIT_UPPER:int = 11
  SLIDER_JOINT_ANGULAR_LIMIT_LOWER:int = 12
  SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS:int = 13
  SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION:int = 14
  SLIDER_JOINT_ANGULAR_LIMIT_DAMPING:int = 15
  SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS:int = 16
  SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION:int = 17
  SLIDER_JOINT_ANGULAR_MOTION_DAMPING:int = 18
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS:int = 19
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION:int = 20
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING:int = 21
  SLIDER_JOINT_MAX:int = 22
class ConeTwistJointParam:
  CONE_TWIST_JOINT_SWING_SPAN:int = 0
  CONE_TWIST_JOINT_TWIST_SPAN:int = 1
  CONE_TWIST_JOINT_BIAS:int = 2
  CONE_TWIST_JOINT_SOFTNESS:int = 3
  CONE_TWIST_JOINT_RELAXATION:int = 4
class G6DOFJointAxisParam:
  G6DOF_JOINT_LINEAR_LOWER_LIMIT:int = 0
  G6DOF_JOINT_LINEAR_UPPER_LIMIT:int = 1
  G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS:int = 2
  G6DOF_JOINT_LINEAR_RESTITUTION:int = 3
  G6DOF_JOINT_LINEAR_DAMPING:int = 4
  G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY:int = 5
  G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT:int = 6
  G6DOF_JOINT_LINEAR_SPRING_STIFFNESS:int = 7
  G6DOF_JOINT_LINEAR_SPRING_DAMPING:int = 8
  G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT:int = 9
  G6DOF_JOINT_ANGULAR_LOWER_LIMIT:int = 10
  G6DOF_JOINT_ANGULAR_UPPER_LIMIT:int = 11
  G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS:int = 12
  G6DOF_JOINT_ANGULAR_DAMPING:int = 13
  G6DOF_JOINT_ANGULAR_RESTITUTION:int = 14
  G6DOF_JOINT_ANGULAR_FORCE_LIMIT:int = 15
  G6DOF_JOINT_ANGULAR_ERP:int = 16
  G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY:int = 17
  G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT:int = 18
  G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS:int = 19
  G6DOF_JOINT_ANGULAR_SPRING_DAMPING:int = 20
  G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT:int = 21
  G6DOF_JOINT_MAX:int = 22
class G6DOFJointAxisFlag:
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT:int = 0
  G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT:int = 1
  G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING:int = 2
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING:int = 3
  G6DOF_JOINT_FLAG_ENABLE_MOTOR:int = 4
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR:int = 5
  G6DOF_JOINT_FLAG_MAX:int = 6
class ShapeType:
  SHAPE_WORLD_BOUNDARY:int = 0
  SHAPE_SEPARATION_RAY:int = 1
  SHAPE_SPHERE:int = 2
  SHAPE_BOX:int = 3
  SHAPE_CAPSULE:int = 4
  SHAPE_CYLINDER:int = 5
  SHAPE_CONVEX_POLYGON:int = 6
  SHAPE_CONCAVE_POLYGON:int = 7
  SHAPE_HEIGHTMAP:int = 8
  SHAPE_SOFT_BODY:int = 9
  SHAPE_CUSTOM:int = 10
class AreaParameter:
  AREA_PARAM_GRAVITY_OVERRIDE_MODE:int = 0
  AREA_PARAM_GRAVITY:int = 1
  AREA_PARAM_GRAVITY_VECTOR:int = 2
  AREA_PARAM_GRAVITY_IS_POINT:int = 3
  AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE:int = 4
  AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE:int = 5
  AREA_PARAM_LINEAR_DAMP:int = 6
  AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE:int = 7
  AREA_PARAM_ANGULAR_DAMP:int = 8
  AREA_PARAM_PRIORITY:int = 9
  AREA_PARAM_WIND_FORCE_MAGNITUDE:int = 10
  AREA_PARAM_WIND_SOURCE:int = 11
  AREA_PARAM_WIND_DIRECTION:int = 12
  AREA_PARAM_WIND_ATTENUATION_FACTOR:int = 13
class AreaSpaceOverrideMode:
  AREA_SPACE_OVERRIDE_DISABLED:int = 0
  AREA_SPACE_OVERRIDE_COMBINE:int = 1
  AREA_SPACE_OVERRIDE_COMBINE_REPLACE:int = 2
  AREA_SPACE_OVERRIDE_REPLACE:int = 3
  AREA_SPACE_OVERRIDE_REPLACE_COMBINE:int = 4
class BodyMode:
  BODY_MODE_STATIC:int = 0
  BODY_MODE_KINEMATIC:int = 1
  BODY_MODE_RIGID:int = 2
  BODY_MODE_RIGID_LINEAR:int = 3
class BodyParameter:
  BODY_PARAM_BOUNCE:int = 0
  BODY_PARAM_FRICTION:int = 1
  BODY_PARAM_MASS:int = 2
  BODY_PARAM_INERTIA:int = 3
  BODY_PARAM_CENTER_OF_MASS:int = 4
  BODY_PARAM_GRAVITY_SCALE:int = 5
  BODY_PARAM_LINEAR_DAMP_MODE:int = 6
  BODY_PARAM_ANGULAR_DAMP_MODE:int = 7
  BODY_PARAM_LINEAR_DAMP:int = 8
  BODY_PARAM_ANGULAR_DAMP:int = 9
  BODY_PARAM_MAX:int = 10
class BodyDampMode:
  BODY_DAMP_MODE_COMBINE:int = 0
  BODY_DAMP_MODE_REPLACE:int = 1
class BodyState:
  BODY_STATE_TRANSFORM:int = 0
  BODY_STATE_LINEAR_VELOCITY:int = 1
  BODY_STATE_ANGULAR_VELOCITY:int = 2
  BODY_STATE_SLEEPING:int = 3
  BODY_STATE_CAN_SLEEP:int = 4
class AreaBodyStatus:
  AREA_BODY_ADDED:int = 0
  AREA_BODY_REMOVED:int = 1
class ProcessInfo:
  INFO_ACTIVE_OBJECTS:int = 0
  INFO_COLLISION_PAIRS:int = 1
  INFO_ISLAND_COUNT:int = 2
class SpaceParameter:
  SPACE_PARAM_CONTACT_RECYCLE_RADIUS:int = 0
  SPACE_PARAM_CONTACT_MAX_SEPARATION:int = 1
  SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION:int = 2
  SPACE_PARAM_CONTACT_DEFAULT_BIAS:int = 3
  SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD:int = 4
  SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD:int = 5
  SPACE_PARAM_BODY_TIME_TO_SLEEP:int = 6
  SPACE_PARAM_SOLVER_ITERATIONS:int = 7
class BodyAxis:
  BODY_AXIS_LINEAR_X:int = 1
  BODY_AXIS_LINEAR_Y:int = 2
  BODY_AXIS_LINEAR_Z:int = 4
  BODY_AXIS_ANGULAR_X:int = 8
  BODY_AXIS_ANGULAR_Y:int = 16
  BODY_AXIS_ANGULAR_Z:int = 32


class PhysicsServer3D(__object__.Object):
  """
		PhysicsServer3D is the server responsible for all 3D physics. It can directly create and manipulate all physics objects:
		- A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
		- A _shape_ is a geometric shape such as a sphere, a box, a cylinder, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
		- A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
		- An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
		- A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
		Physics objects in `PhysicsServer3D` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
		**Note:** All the 3D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
	"""



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer3D:pass

  @staticmethod
  def instance()->PhysicsServer3D:pass

  def world_boundary_shape_create(self)->__core__.RID:
    """
"""
    pass

  def separation_ray_shape_create(self)->__core__.RID:
    """
"""
    pass

  def sphere_shape_create(self)->__core__.RID:
    """
"""
    pass

  def box_shape_create(self)->__core__.RID:
    """
"""
    pass

  def capsule_shape_create(self)->__core__.RID:
    """
"""
    pass

  def cylinder_shape_create(self)->__core__.RID:
    """
"""
    pass

  def convex_polygon_shape_create(self)->__core__.RID:
    """
"""
    pass

  def concave_polygon_shape_create(self)->__core__.RID:
    """
"""
    pass

  def heightmap_shape_create(self)->__core__.RID:
    """
"""
    pass

  def custom_shape_create(self)->__core__.RID:
    """
"""
    pass

  def shape_set_data(self, shape:__core__.RID, data:Any)->None:
    """
				Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created `shape_get_type`.
			"""
    pass

  def shape_set_margin(self, shape:__core__.RID, margin:float)->None:
    """
				Sets the collision margin for the shape.
				**Note:** This is not used in Godot Physics.
			"""
    pass

  def shape_get_type(self, shape:__core__.RID)->int:
    """
				Returns the type of shape.
			"""
    pass

  def shape_get_data(self, shape:__core__.RID)->Any:
    """
				Returns the shape data.
			"""
    pass

  def shape_get_margin(self, shape:__core__.RID)->float:
    """
				Returns the collision margin for the shape.
				**Note:** This is not used in Godot Physics, so will always return `0`.
			"""
    pass

  def space_create(self)->__core__.RID:
    """
				Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with `area_set_space`, or to a body with `body_set_space`.
			"""
    pass

  def space_set_active(self, space:__core__.RID, active:bool)->None:
    """
				Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
			"""
    pass

  def space_is_active(self, space:__core__.RID)->bool:
    """
				Returns whether the space is active.
			"""
    pass

  def space_set_param(self, space:__core__.RID, param:int , value:float)->None:
    """
				Sets the value for a space parameter. A list of available parameters is on the `enum SpaceParameter` constants.
			"""
    pass

  def space_get_param(self, space:__core__.RID, param:int )->float:
    """
				Returns the value of a space parameter.
			"""
    pass

  def space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate3d__.PhysicsDirectSpaceState3D|__physicsdirectspacestate3dextension__.PhysicsDirectSpaceState3DExtension:
    """
				Returns the state of a space, a `PhysicsDirectSpaceState3D`. This object can be used to make collision/intersection queries.
			"""
    pass

  def area_create(self)->__core__.RID:
    """
				Creates a 3D area object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and `monitorable` set to `false`.
				Use `area_add_shape` to add shapes to it, use `area_set_transform` to set its transform, and use `area_set_space` to add the area to a space. If you want the area to be detectable use `area_set_monitorable`.
			"""
    pass

  def area_set_space(self, area:__core__.RID, space:__core__.RID)->None:
    """
				Assigns a space to the area.
			"""
    pass

  def area_get_space(self, area:__core__.RID)->__core__.RID:
    """
				Returns the space assigned to the area.
			"""
    pass

  def area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D= __core__.Transform3D.new0(), disabled:bool=False)->None:
    """
				Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
			"""
    pass

  def area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
				Substitutes a given area shape by another. The old shape is selected by its index, the new one by its `RID`.
			"""
    pass

  def area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None:
    """
				Sets the transform matrix for an area shape.
			"""
    pass

  def area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
"""
    pass

  def area_get_shape_count(self, area:__core__.RID)->int:
    """
				Returns the number of shapes assigned to an area.
			"""
    pass

  def area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID:
    """
				Returns the `RID` of the nth shape of an area.
			"""
    pass

  def area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform3D:
    """
				Returns the transform matrix of a shape within an area.
			"""
    pass

  def area_remove_shape(self, area:__core__.RID, shape_idx:int)->None:
    """
				Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
			"""
    pass

  def area_clear_shapes(self, area:__core__.RID)->None:
    """
				Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
			"""
    pass

  def area_set_collision_layer(self, area:__core__.RID, layer:int)->None:
    """
				Assigns the area to one or many physics layers.
			"""
    pass

  def area_get_collision_layer(self, area:__core__.RID)->int:
    """
				Returns the physics layer or layers an area belongs to.
			"""
    pass

  def area_set_collision_mask(self, area:__core__.RID, mask:int)->None:
    """
				Sets which physics layers the area will monitor.
			"""
    pass

  def area_get_collision_mask(self, area:__core__.RID)->int:
    """
				Returns the physics layer or layers an area can contact with.
			"""
    pass

  def area_set_param(self, area:__core__.RID, param:int , value:Any)->None:
    """
				Sets the value for an area parameter. A list of available parameters is on the `enum AreaParameter` constants.
			"""
    pass

  def area_set_transform(self, area:__core__.RID, transform:__core__.Transform3D)->None:
    """
				Sets the transform matrix for an area.
			"""
    pass

  def area_get_param(self, area:__core__.RID, param:int )->Any:
    """
				Returns an area parameter value. A list of available parameters is on the `enum AreaParameter` constants.
			"""
    pass

  def area_get_transform(self, area:__core__.RID)->__core__.Transform3D:
    """
				Returns the transform matrix for an area.
			"""
    pass

  def area_attach_object_instance_id(self, area:__core__.RID, id:int)->None:
    """
				Assigns the area to a descendant of `Object`, so it can exist in the node tree.
			"""
    pass

  def area_get_object_instance_id(self, area:__core__.RID)->int:
    """
				Gets the instance ID of the object the area is assigned to.
			"""
    pass

  def area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other body shape entered or exited the area,
				2. an `RID` `body_rid`: the `RID` of the body that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the body,
				4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
			"""
    pass

  def area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other area's shape entered or exited the area,
				2. an `RID` `area_rid`: the `RID` of the other area that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the other area,
				4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
			"""
    pass

  def area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None:
    """
"""
    pass

  def area_set_ray_pickable(self, area:__core__.RID, enable:bool)->None:
    """
				Sets object pickable with rays.
			"""
    pass

  def body_create(self)->__core__.RID:
    """
				Creates a 3D body object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and body mode set to `constant BODY_MODE_RIGID`.
				Use `body_add_shape` to add shapes to it, use `body_set_state` to set its transform, and use `body_set_space` to add the body to a space.
			"""
    pass

  def body_set_space(self, body:__core__.RID, space:__core__.RID)->None:
    """
				Assigns a space to the body (see `space_create`).
			"""
    pass

  def body_get_space(self, body:__core__.RID)->__core__.RID:
    """
				Returns the `RID` of the space assigned to a body.
			"""
    pass

  def body_set_mode(self, body:__core__.RID, mode:int )->None:
    """
				Sets the body mode.
			"""
    pass

  def body_get_mode(self, body:__core__.RID)->int:
    """
				Returns the body mode.
			"""
    pass

  def body_set_collision_layer(self, body:__core__.RID, layer:int)->None:
    """
				Sets the physics layer or layers a body belongs to.
			"""
    pass

  def body_get_collision_layer(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers a body belongs to.
			"""
    pass

  def body_set_collision_mask(self, body:__core__.RID, mask:int)->None:
    """
				Sets the physics layer or layers a body can collide with.
			"""
    pass

  def body_get_collision_mask(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers a body can collide with.
			"""
    pass

  def body_set_collision_priority(self, body:__core__.RID, priority:float)->None:
    """
				Sets the body's collision priority.
			"""
    pass

  def body_get_collision_priority(self, body:__core__.RID)->float:
    """
				Returns the body's collision priority.
			"""
    pass

  def body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D= __core__.Transform3D.new0(), disabled:bool=False)->None:
    """
				Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
			"""
    pass

  def body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
				Substitutes a given body shape by another. The old shape is selected by its index, the new one by its `RID`.
			"""
    pass

  def body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None:
    """
				Sets the transform matrix for a body shape.
			"""
    pass

  def body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
"""
    pass

  def body_get_shape_count(self, body:__core__.RID)->int:
    """
				Returns the number of shapes assigned to a body.
			"""
    pass

  def body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID:
    """
				Returns the `RID` of the nth shape of a body.
			"""
    pass

  def body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform3D:
    """
				Returns the transform matrix of a body shape.
			"""
    pass

  def body_remove_shape(self, body:__core__.RID, shape_idx:int)->None:
    """
				Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
			"""
    pass

  def body_clear_shapes(self, body:__core__.RID)->None:
    """
				Removes all shapes from a body.
			"""
    pass

  def body_attach_object_instance_id(self, body:__core__.RID, id:int)->None:
    """
				Assigns the area to a descendant of `Object`, so it can exist in the node tree.
			"""
    pass

  def body_get_object_instance_id(self, body:__core__.RID)->int:
    """
				Gets the instance ID of the object the area is assigned to.
			"""
    pass

  def body_set_enable_continuous_collision_detection(self, body:__core__.RID, enable:bool)->None:
    """
				If `true`, the continuous collision detection mode is enabled.
				Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
			"""
    pass

  def body_is_continuous_collision_detection_enabled(self, body:__core__.RID)->bool:
    """
				If `true`, the continuous collision detection mode is enabled.
			"""
    pass

  def body_set_param(self, body:__core__.RID, param:int , value:Any)->None:
    """
				Sets a body parameter. A list of available parameters is on the `enum BodyParameter` constants.
			"""
    pass

  def body_get_param(self, body:__core__.RID, param:int )->Any:
    """
				Returns the value of a body parameter. A list of available parameters is on the `enum BodyParameter` constants.
			"""
    pass

  def body_reset_mass_properties(self, body:__core__.RID)->None:
    """
				Restores the default inertia and center of mass based on shapes to cancel any custom values previously set using `body_set_param`.
			"""
    pass

  def body_set_state(self, body:__core__.RID, state:int , value:Any)->None:
    """
				Sets a body state.
			"""
    pass

  def body_get_state(self, body:__core__.RID, state:int )->Any:
    """
				Returns a body state.
			"""
    pass

  def body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None:
    """
				Applies a directional impulse without affecting rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				This is equivalent to using `body_apply_impulse` at the body's center of mass.
			"""
    pass

  def body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None:
    """
				Applies a positioned impulse to the body.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_apply_torque_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None:
    """
				Applies a rotational impulse to the body without affecting the position.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			"""
    pass

  def body_apply_central_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
				Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
				This is equivalent to using `body_apply_force` at the body's center of mass.
			"""
    pass

  def body_apply_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None:
    """
				Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_apply_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
				Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
			"""
    pass

  def body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
				Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
				This is equivalent to using `body_add_constant_force` at the body's center of mass.
			"""
    pass

  def body_add_constant_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None:
    """
				Adds a constant positioned force to the body that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_add_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
				Adds a constant rotational force without affecting position that keeps being applied over time until cleared with `body_set_constant_torque(body, Vector3(0, 0, 0))`.
			"""
    pass

  def body_set_constant_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
				Sets the body's total constant positional forces applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			"""
    pass

  def body_get_constant_force(self, body:__core__.RID)->__core__.Vector3:
    """
				Returns the body's total constant positional forces applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			"""
    pass

  def body_set_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
				Sets the body's total constant rotational forces applied during each physics update.
				See `body_add_constant_torque`.
			"""
    pass

  def body_get_constant_torque(self, body:__core__.RID)->__core__.Vector3:
    """
				Returns the body's total constant rotational forces applied during each physics update.
				See `body_add_constant_torque`.
			"""
    pass

  def body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector3)->None:
    """
				Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
			"""
    pass

  def body_set_axis_lock(self, body:__core__.RID, axis:int , lock:bool)->None:
    """
"""
    pass

  def body_is_axis_locked(self, body:__core__.RID, axis:int )->bool:
    """
"""
    pass

  def body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
				Adds a body to the list of bodies exempt from collisions.
			"""
    pass

  def body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
				Removes a body from the list of bodies exempt from collisions.
				Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
			"""
    pass

  def body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None:
    """
				Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies. This is enabled by setting the maximum number of contacts reported to a number greater than 0.
			"""
    pass

  def body_get_max_contacts_reported(self, body:__core__.RID)->int:
    """
				Returns the maximum contacts that can be reported. See `body_set_max_contacts_reported`.
			"""
    pass

  def body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None:
    """
				Sets whether the body omits the standard force integration. If `enable` is `true`, the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, `body_set_force_integration_callback` can be used to manually update the linear and angular velocity instead.
				This method is called when the property `RigidBody3D.custom_integrator` is set.
			"""
    pass

  def body_is_omitting_force_integration(self, body:__core__.RID)->bool:
    """
				Returns `true` if the body is omitting the standard force integration. See `body_set_omit_force_integration`.
			"""
    pass

  def body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None:
    """
				Sets the body's state synchronization callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the callback.
				The function `callable` will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
				The function `callable` must take the following parameters:
				1. `state`: a `PhysicsDirectBodyState3D`, used to retrieve the body's state.
			"""
    pass

  def body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:Any=None)->None:
    """
				Sets the body's custom force integration callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the custom callback.
				The function `callable` will be called every physics tick, before the standard force integration (see `body_set_omit_force_integration`). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
				If `userdata` is not `null`, the function `callable` must take the following two parameters:
				1. `state`: a `PhysicsDirectBodyState3D`, used to retrieve and modify the body's state,
				2. `code skip-lint`userdata`: a `Variant`; its value will be the `userdata` passed into this method.
				If `userdata` is `null`, then `callable` must take only the `state` parameter.
			"""
    pass

  def body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None:
    """
				Sets the body pickable with rays if `enable` is set.
			"""
    pass

  def body_test_motion(self, body:__core__.RID, parameters:__physicstestmotionparameters3d__.PhysicsTestMotionParameters3D, result:__physicstestmotionresult3d__.PhysicsTestMotionResult3D= __physicstestmotionresult3d__.PhysicsTestMotionResult3D.constructor())->bool:
    """
				Returns `true` if a collision would result from moving along a motion vector from a given point in space. `PhysicsTestMotionParameters3D` is passed to set motion parameters. `PhysicsTestMotionResult3D` can be passed to return additional information.
			"""
    pass

  def body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate3d__.PhysicsDirectBodyState3D|__physicsdirectbodystate3dextension__.PhysicsDirectBodyState3DExtension:
    """
				Returns the `PhysicsDirectBodyState3D` of the body. Returns `null` if the body is destroyed or removed from the physics space.
			"""
    pass

  def soft_body_create(self)->__core__.RID:
    """
				Creates a new soft body and returns its internal `RID`.
			"""
    pass

  def soft_body_update_rendering_server(self, body:__core__.RID, rendering_server_handler:__physicsserver3drenderingserverhandler__.PhysicsServer3DRenderingServerHandler)->None:
    """
				Requests that the physics server updates the rendering server with the latest positions of the given soft body's points through the `rendering_server_handler` interface.
			"""
    pass

  def soft_body_set_space(self, body:__core__.RID, space:__core__.RID)->None:
    """
				Assigns a space to the given soft body (see `space_create`).
			"""
    pass

  def soft_body_get_space(self, body:__core__.RID)->__core__.RID:
    """
				Returns the `RID` of the space assigned to the given soft body.
			"""
    pass

  def soft_body_set_mesh(self, body:__core__.RID, mesh:__core__.RID)->None:
    """
				Sets the mesh of the given soft body.
			"""
    pass

  def soft_body_get_bounds(self, body:__core__.RID)->__core__.AABB:
    """
				Returns the bounds of the given soft body in global coordinates.
			"""
    pass

  def soft_body_set_collision_layer(self, body:__core__.RID, layer:int)->None:
    """
				Sets the physics layer or layers the given soft body belongs to.
			"""
    pass

  def soft_body_get_collision_layer(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers that the given soft body belongs to.
			"""
    pass

  def soft_body_set_collision_mask(self, body:__core__.RID, mask:int)->None:
    """
				Sets the physics layer or layers the given soft body can collide with.
			"""
    pass

  def soft_body_get_collision_mask(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers that the given soft body can collide with.
			"""
    pass

  def soft_body_add_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None:
    """
				Adds the given body to the list of bodies exempt from collisions.
			"""
    pass

  def soft_body_remove_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None:
    """
				Removes the given body from the list of bodies exempt from collisions.
			"""
    pass

  def soft_body_set_state(self, body:__core__.RID, state:int , variant:Any)->None:
    """
				Sets the given body state for the given body.
				**Note:** Godot's default physics implementation does not support `constant BODY_STATE_LINEAR_VELOCITY`, `constant BODY_STATE_ANGULAR_VELOCITY`, `constant BODY_STATE_SLEEPING`, or `constant BODY_STATE_CAN_SLEEP`.
			"""
    pass

  def soft_body_get_state(self, body:__core__.RID, state:int )->Any:
    """
				Returns the given soft body state.
				**Note:** Godot's default physics implementation does not support `constant BODY_STATE_LINEAR_VELOCITY`, `constant BODY_STATE_ANGULAR_VELOCITY`, `constant BODY_STATE_SLEEPING`, or `constant BODY_STATE_CAN_SLEEP`.
			"""
    pass

  def soft_body_set_transform(self, body:__core__.RID, transform:__core__.Transform3D)->None:
    """
				Sets the global transform of the given soft body.
			"""
    pass

  def soft_body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None:
    """
				Sets whether the given soft body will be pickable when using object picking.
			"""
    pass

  def soft_body_set_simulation_precision(self, body:__core__.RID, simulation_precision:int)->None:
    """
				Sets the simulation precision of the given soft body. Increasing this value will improve the resulting simulation, but can affect performance. Use with care.
			"""
    pass

  def soft_body_get_simulation_precision(self, body:__core__.RID)->int:
    """
				Returns the simulation precision of the given soft body.
			"""
    pass

  def soft_body_set_total_mass(self, body:__core__.RID, total_mass:float)->None:
    """
				Sets the total mass for the given soft body.
			"""
    pass

  def soft_body_get_total_mass(self, body:__core__.RID)->float:
    """
				Returns the total mass assigned to the given soft body.
			"""
    pass

  def soft_body_set_linear_stiffness(self, body:__core__.RID, stiffness:float)->None:
    """
				Sets the linear stiffness of the given soft body. Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between `0.0` and `1.0` (inclusive).
			"""
    pass

  def soft_body_get_linear_stiffness(self, body:__core__.RID)->float:
    """
				Returns the linear stiffness of the given soft body.
			"""
    pass

  def soft_body_set_pressure_coefficient(self, body:__core__.RID, pressure_coefficient:float)->None:
    """
				Sets the pressure coefficient of the given soft body. Simulates pressure build-up from inside this body. Higher values increase the strength of this effect.
			"""
    pass

  def soft_body_get_pressure_coefficient(self, body:__core__.RID)->float:
    """
				Returns the pressure coefficient of the given soft body.
			"""
    pass

  def soft_body_set_damping_coefficient(self, body:__core__.RID, damping_coefficient:float)->None:
    """
				Sets the damping coefficient of the given soft body. Higher values will slow down the body more noticeably when forces are applied.
			"""
    pass

  def soft_body_get_damping_coefficient(self, body:__core__.RID)->float:
    """
				Returns the damping coefficient of the given soft body.
			"""
    pass

  def soft_body_set_drag_coefficient(self, body:__core__.RID, drag_coefficient:float)->None:
    """
				Sets the drag coefficient of the given soft body. Higher values increase this body's air resistance.
				**Note:** This value is currently unused by Godot's default physics implementation.
			"""
    pass

  def soft_body_get_drag_coefficient(self, body:__core__.RID)->float:
    """
				Returns the drag coefficient of the given soft body.
			"""
    pass

  def soft_body_move_point(self, body:__core__.RID, point_index:int, global_position:__core__.Vector3)->None:
    """
				Moves the given soft body point to a position in global coordinates.
			"""
    pass

  def soft_body_get_point_global_position(self, body:__core__.RID, point_index:int)->__core__.Vector3:
    """
				Returns the current position of the given soft body point in global coordinates.
			"""
    pass

  def soft_body_remove_all_pinned_points(self, body:__core__.RID)->None:
    """
				Unpins all points of the given soft body.
			"""
    pass

  def soft_body_pin_point(self, body:__core__.RID, point_index:int, pin:bool)->None:
    """
				Pins or unpins the given soft body point based on the value of `pin`.
				**Note:** Pinning a point effectively makes it kinematic, preventing it from being affected by forces, but you can still move it using `soft_body_move_point`.
			"""
    pass

  def soft_body_is_point_pinned(self, body:__core__.RID, point_index:int)->bool:
    """
				Returns whether the given soft body point is pinned.
			"""
    pass

  def joint_create(self)->__core__.RID:
    """
"""
    pass

  def joint_clear(self, joint:__core__.RID)->None:
    """
"""
    pass

  def joint_make_pin(self, joint:__core__.RID, body_A:__core__.RID, local_A:__core__.Vector3, body_B:__core__.RID, local_B:__core__.Vector3)->None:
    """
"""
    pass

  def pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets a pin joint parameter.
			"""
    pass

  def pin_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Gets a pin joint parameter.
			"""
    pass

  def pin_joint_set_local_a(self, joint:__core__.RID, local_A:__core__.Vector3)->None:
    """
				Sets position of the joint in the local space of body a of the joint.
			"""
    pass

  def pin_joint_get_local_a(self, joint:__core__.RID)->__core__.Vector3:
    """
				Returns position of the joint in the local space of body a of the joint.
			"""
    pass

  def pin_joint_set_local_b(self, joint:__core__.RID, local_B:__core__.Vector3)->None:
    """
				Sets position of the joint in the local space of body b of the joint.
			"""
    pass

  def pin_joint_get_local_b(self, joint:__core__.RID)->__core__.Vector3:
    """
				Returns position of the joint in the local space of body b of the joint.
			"""
    pass

  def joint_make_hinge(self, joint:__core__.RID, body_A:__core__.RID, hinge_A:__core__.Transform3D, body_B:__core__.RID, hinge_B:__core__.Transform3D)->None:
    """
"""
    pass

  def hinge_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets a hinge joint parameter.
			"""
    pass

  def hinge_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Gets a hinge joint parameter.
			"""
    pass

  def hinge_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None:
    """
				Sets a hinge joint flag.
			"""
    pass

  def hinge_joint_get_flag(self, joint:__core__.RID, flag:int )->bool:
    """
				Gets a hinge joint flag.
			"""
    pass

  def joint_make_slider(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
"""
    pass

  def slider_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Gets a slider joint parameter.
			"""
    pass

  def slider_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Gets a slider joint parameter.
			"""
    pass

  def joint_make_cone_twist(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
"""
    pass

  def cone_twist_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets a cone twist joint parameter.
			"""
    pass

  def cone_twist_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Gets a cone twist joint parameter.
			"""
    pass

  def joint_get_type(self, joint:__core__.RID)->int:
    """
				Returns the type of the Joint3D.
			"""
    pass

  def joint_set_solver_priority(self, joint:__core__.RID, priority:int)->None:
    """
				Sets the priority value of the Joint3D.
			"""
    pass

  def joint_get_solver_priority(self, joint:__core__.RID)->int:
    """
				Gets the priority value of the Joint3D.
			"""
    pass

  def joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None:
    """
				Sets whether the bodies attached to the `Joint3D` will collide with each other.
			"""
    pass

  def joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool:
    """
				Returns whether the bodies attached to the `Joint3D` will collide with each other.
			"""
    pass

  def joint_make_generic_6dof(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
				Make the joint a generic six degrees of freedom (6DOF) joint. Use `generic_6dof_joint_set_flag` and `generic_6dof_joint_set_param` to set the joint's flags and parameters respectively.
			"""
    pass

  def generic_6dof_joint_set_param(self, joint:__core__.RID, axis:int , param:int , value:float)->None:
    """
				Sets the value of a given generic 6DOF joint parameter.
			"""
    pass

  def generic_6dof_joint_get_param(self, joint:__core__.RID, axis:int , param:int )->float:
    """
				Returns the value of a generic 6DOF joint parameter.
			"""
    pass

  def generic_6dof_joint_set_flag(self, joint:__core__.RID, axis:int , flag:int , enable:bool)->None:
    """
				Sets the value of a given generic 6DOF joint flag.
			"""
    pass

  def generic_6dof_joint_get_flag(self, joint:__core__.RID, axis:int , flag:int )->bool:
    """
				Returns the value of a generic 6DOF joint flag.
			"""
    pass

  def free_rid(self, rid:__core__.RID)->None:
    """
				Destroys any of the objects created by PhysicsServer3D. If the `RID` passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.
			"""
    pass

  def set_active(self, active:bool)->None:
    """
				Activates or deactivates the 3D physics engine.
			"""
    pass

  def get_process_info(self, process_info:int )->int:
    """
				Returns the value of a physics engine state specified by `process_info`.
			"""
    pass


