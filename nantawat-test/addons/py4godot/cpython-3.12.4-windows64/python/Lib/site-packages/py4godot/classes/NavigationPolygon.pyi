from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMesh as __navigationmesh__
import py4godot.classes.Resource as __resource__
import py4godot.classes.NavigationPolygon as __navigationpolygon__


class SamplePartitionType:
  SAMPLE_PARTITION_CONVEX_PARTITION:int = 0
  SAMPLE_PARTITION_TRIANGULATE:int = 1
  SAMPLE_PARTITION_MAX:int = 2
class ParsedGeometryType:
  PARSED_GEOMETRY_MESH_INSTANCES:int = 0
  PARSED_GEOMETRY_STATIC_COLLIDERS:int = 1
  PARSED_GEOMETRY_BOTH:int = 2
  PARSED_GEOMETRY_MAX:int = 3
class SourceGeometryMode:
  SOURCE_GEOMETRY_ROOT_NODE_CHILDREN:int = 0
  SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN:int = 1
  SOURCE_GEOMETRY_GROUPS_EXPLICIT:int = 2
  SOURCE_GEOMETRY_MAX:int = 3


class NavigationPolygon(__resource__.Resource):
  """
		A navigation mesh can be created either by baking it with the help of the `NavigationServer2D`, or by adding vertices and convex polygon indices arrays manually.
		To bake a navigation mesh at least one outline needs to be added that defines the outer bounds of the baked area.
		
		```gdscript
		var new_navigation_mesh = NavigationPolygon.new()
		var bounding_outline = PackedVector2Array(`Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)`)
		new_navigation_mesh.add_outline(bounding_outline)
		NavigationServer2D.bake_from_source_geometry_data(new_navigation_mesh, NavigationMeshSourceGeometryData2D.new());
		$NavigationRegion2D.navigation_polygon = new_navigation_mesh
		```
		
		
		Adding vertices and polygon indices manually.
		
		```gdscript
		var new_navigation_mesh = NavigationPolygon.new()
		var new_vertices = PackedVector2Array(`Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)`)
		new_navigation_mesh.vertices = new_vertices
		var new_polygon_indices = PackedInt32Array(`0, 1, 2, 3`)
		new_navigation_mesh.add_polygon(new_polygon_indices)
		$NavigationRegion2D.navigation_polygon = new_navigation_mesh
		```
		
		
	"""

  @staticmethod
  def constructor()->NavigationPolygon:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationPolygon:pass


  @property
  def vertices(self)->__core__.PackedVector2Array:
    """"""
    pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def polygons(self)->__core__.Array:
    """"""
    pass
  @polygons.setter
  def polygons(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def outlines(self)->__core__.Array:
    """"""
    pass
  @outlines.setter
  def outlines(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def sample_partition_type(self)->int:
    """"""
    pass
  @sample_partition_type.setter
  def sample_partition_type(self,  value:int)->None:
    """"""
    pass
  @property
  def parsed_geometry_type(self)->int:
    """"""
    pass
  @parsed_geometry_type.setter
  def parsed_geometry_type(self,  value:int)->None:
    """"""
    pass
  @property
  def parsed_collision_mask(self)->int:
    """"""
    pass
  @parsed_collision_mask.setter
  def parsed_collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def source_geometry_mode(self)->int:
    """"""
    pass
  @source_geometry_mode.setter
  def source_geometry_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def source_geometry_group_name(self)->str:
    """"""
    pass
  @source_geometry_group_name.setter
  def source_geometry_group_name(self,  value:str)->None:
    """"""
    pass
  @property
  def cell_size(self)->float:
    """"""
    pass
  @cell_size.setter
  def cell_size(self,  value:float)->None:
    """"""
    pass
  @property
  def border_size(self)->float:
    """"""
    pass
  @border_size.setter
  def border_size(self,  value:float)->None:
    """"""
    pass
  @property
  def agent_radius(self)->float:
    """"""
    pass
  @agent_radius.setter
  def agent_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def baking_rect(self)->__core__.Rect2:
    """"""
    pass
  @baking_rect.setter
  def baking_rect(self,  value:__core__.Rect2)->None:
    """"""
    pass
  @property
  def baking_rect_offset(self)->__core__.Vector2:
    """"""
    pass
  @baking_rect_offset.setter
  def baking_rect_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  def set_vertices(self, vertices:__core__.PackedVector2Array)->None:
    """
				Sets the vertices that can be then indexed to create polygons with the `add_polygon` method.
			"""
    pass

  def get_vertices(self)->__core__.PackedVector2Array:
    """
				Returns a `PackedVector2Array` containing all the vertices being used to create the polygons.
			"""
    pass

  def add_polygon(self, polygon:__core__.PackedInt32Array)->None:
    """
				Adds a polygon using the indices of the vertices you get when calling `get_vertices`.
			"""
    pass

  def get_polygon_count(self)->int:
    """
				Returns the count of all polygons.
			"""
    pass

  def get_polygon(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns a `PackedInt32Array` containing the indices of the vertices of a created polygon.
			"""
    pass

  def clear_polygons(self)->None:
    """
				Clears the array of polygons, but it doesn't clear the array of outlines and vertices.
			"""
    pass

  def get_navigation_mesh(self)->__navigationmesh__.NavigationMesh:
    """
				Returns the `NavigationMesh` resulting from this navigation polygon. This navigation mesh can be used to update the navigation mesh of a region with the `NavigationServer3D.region_set_navigation_mesh` API directly.
			"""
    pass

  def add_outline(self, outline:__core__.PackedVector2Array)->None:
    """
				Appends a `PackedVector2Array` that contains the vertices of an outline to the internal array that contains all the outlines.
			"""
    pass

  def add_outline_at_index(self, outline:__core__.PackedVector2Array, index:int)->None:
    """
				Adds a `PackedVector2Array` that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position.
			"""
    pass

  def get_outline_count(self)->int:
    """
				Returns the number of outlines that were created in the editor or by script.
			"""
    pass

  def set_outline(self, idx:int, outline:__core__.PackedVector2Array)->None:
    """
				Changes an outline created in the editor or by script. You have to call `make_polygons_from_outlines` for the polygons to update.
			"""
    pass

  def get_outline(self, idx:int)->__core__.PackedVector2Array:
    """
				Returns a `PackedVector2Array` containing the vertices of an outline that was created in the editor or by script.
			"""
    pass

  def remove_outline(self, idx:int)->None:
    """
				Removes an outline created in the editor or by script. You have to call `make_polygons_from_outlines` for the polygons to update.
			"""
    pass

  def clear_outlines(self)->None:
    """
				Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them.
			"""
    pass

  def make_polygons_from_outlines(self)->None:
    """
				Creates polygons from the outlines added in the editor or by script.
			"""
    pass

  def set_cell_size(self, cell_size:float)->None:
    """"""
    pass

  def get_cell_size(self)->float:
    """"""
    pass

  def set_border_size(self, border_size:float)->None:
    """"""
    pass

  def get_border_size(self)->float:
    """"""
    pass

  def set_sample_partition_type(self, sample_partition_type:int )->None:
    """"""
    pass

  def get_sample_partition_type(self)->int:
    """"""
    pass

  def set_parsed_geometry_type(self, geometry_type:int )->None:
    """"""
    pass

  def get_parsed_geometry_type(self)->int:
    """"""
    pass

  def set_parsed_collision_mask(self, mask:int)->None:
    """"""
    pass

  def get_parsed_collision_mask(self)->int:
    """"""
    pass

  def set_parsed_collision_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `parsed_collision_mask`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_parsed_collision_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `parsed_collision_mask` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_source_geometry_mode(self, geometry_mode:int )->None:
    """"""
    pass

  def get_source_geometry_mode(self)->int:
    """"""
    pass

  def set_source_geometry_group_name(self, group_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_source_geometry_group_name(self)->__core__.StringName:
    """"""
    pass

  def set_agent_radius(self, agent_radius:float)->None:
    """"""
    pass

  def get_agent_radius(self)->float:
    """"""
    pass

  def set_baking_rect(self, rect:__core__.Rect2)->None:
    """"""
    pass

  def get_baking_rect(self)->__core__.Rect2:
    """"""
    pass

  def set_baking_rect_offset(self, rect_offset:__core__.Vector2)->None:
    """"""
    pass

  def get_baking_rect_offset(self)->__core__.Vector2:
    """"""
    pass

  def clear(self)->None:
    """
				Clears the internal arrays for vertices and polygon indices.
			"""
    pass


