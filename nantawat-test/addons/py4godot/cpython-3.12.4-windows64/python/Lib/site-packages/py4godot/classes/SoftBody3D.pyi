from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.Node as __node__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.P as __p__
import py4godot.classes.h as __h__
import py4godot.classes.y as __y__
import py4godot.classes.s as __s__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.B as __b__
import py4godot.classes.3 as __3__


class DisableMode:
  DISABLE_MODE_REMOVE:int = 0
  DISABLE_MODE_KEEP_ACTIVE:int = 1


class SoftBody3D(__meshinstance3d__.MeshInstance3D):
  """
		A deformable 3D physics mesh. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials.
		Additionally, `SoftBody3D` is subject to wind forces defined in `Area3D` (see `Area3D.wind_source_path`, `Area3D.wind_force_magnitude`, and `Area3D.wind_attenuation_factor`).
		**Note:** It's recommended to use Jolt Physics when using `SoftBody3D` instead of the default GodotPhysics3D, as Jolt Physics' soft body implementation is faster and more reliable. You can switch the physics engine using the `ProjectSettings.physics/3d/physics_engine` project setting.
	"""

  @staticmethod
  def constructor()->SoftBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SoftBody3D:pass


  @property
  def collision_layer(self)->int:
    """"""
    pass
  @collision_layer.setter
  def collision_layer(self,  value:int)->None:
    """"""
    pass
  @property
  def collision_mask(self)->int:
    """"""
    pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def parent_collision_ignore(self)->__core__.NodePath:
    """"""
    pass
  @parent_collision_ignore.setter
  def parent_collision_ignore(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def simulation_precision(self)->int:
    """"""
    pass
  @simulation_precision.setter
  def simulation_precision(self,  value:int)->None:
    """"""
    pass
  @property
  def total_mass(self)->float:
    """"""
    pass
  @total_mass.setter
  def total_mass(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_stiffness(self)->float:
    """"""
    pass
  @linear_stiffness.setter
  def linear_stiffness(self,  value:float)->None:
    """"""
    pass
  @property
  def pressure_coefficient(self)->float:
    """"""
    pass
  @pressure_coefficient.setter
  def pressure_coefficient(self,  value:float)->None:
    """"""
    pass
  @property
  def damping_coefficient(self)->float:
    """"""
    pass
  @damping_coefficient.setter
  def damping_coefficient(self,  value:float)->None:
    """"""
    pass
  @property
  def drag_coefficient(self)->float:
    """"""
    pass
  @drag_coefficient.setter
  def drag_coefficient(self,  value:float)->None:
    """"""
    pass
  @property
  def ray_pickable(self)->bool:
    """"""
    pass
  @ray_pickable.setter
  def ray_pickable(self,  value:bool)->None:
    """"""
    pass
  @property
  def disable_mode(self)->int:
    """"""
    pass
  @disable_mode.setter
  def disable_mode(self,  value:int)->None:
    """"""
    pass
  def get_physics_rid(self)->__core__.RID:
    """
				Returns the internal `RID` used by the `PhysicsServer3D` for this body.
			"""
    pass

  def set_collision_mask(self, collision_mask:int)->None:
    """"""
    pass

  def get_collision_mask(self)->int:
    """"""
    pass

  def set_collision_layer(self, collision_layer:int)->None:
    """"""
    pass

  def get_collision_layer(self)->int:
    """"""
    pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `collision_mask`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_collision_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `collision_mask` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_collision_layer_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `collision_layer`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_collision_layer_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `collision_layer` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_parent_collision_ignore(self, parent_collision_ignore:__core__.NodePath|str)->None:
    """"""
    pass

  def get_parent_collision_ignore(self)->__core__.NodePath:
    """"""
    pass

  def set_disable_mode(self, mode:int )->None:
    """"""
    pass

  def get_disable_mode(self)->int:
    """"""
    pass

  def get_collision_exceptions(self)->typedarray::PhysicsBody3D:
    """
				Returns an array of nodes that were added as collision exceptions for this body.
			"""
    pass

  def add_collision_exception_with(self, body:__node__.Node)->None:
    """
				Adds a body to the list of bodies that this body can't collide with.
			"""
    pass

  def remove_collision_exception_with(self, body:__node__.Node)->None:
    """
				Removes a body from the list of bodies that this body can't collide with.
			"""
    pass

  def set_simulation_precision(self, simulation_precision:int)->None:
    """"""
    pass

  def get_simulation_precision(self)->int:
    """"""
    pass

  def set_total_mass(self, mass:float)->None:
    """"""
    pass

  def get_total_mass(self)->float:
    """"""
    pass

  def set_linear_stiffness(self, linear_stiffness:float)->None:
    """"""
    pass

  def get_linear_stiffness(self)->float:
    """"""
    pass

  def set_pressure_coefficient(self, pressure_coefficient:float)->None:
    """"""
    pass

  def get_pressure_coefficient(self)->float:
    """"""
    pass

  def set_damping_coefficient(self, damping_coefficient:float)->None:
    """"""
    pass

  def get_damping_coefficient(self)->float:
    """"""
    pass

  def set_drag_coefficient(self, drag_coefficient:float)->None:
    """"""
    pass

  def get_drag_coefficient(self)->float:
    """"""
    pass

  def get_point_transform(self, point_index:int)->__core__.Vector3:
    """
				Returns local translation of a vertex in the surface array.
			"""
    pass

  def set_point_pinned(self, point_index:int, pinned:bool, attachment_path:__core__.NodePath|str= __core__.NodePath.new0(), insert_at:int=-1)->None:
    """
				Sets the pinned state of a surface vertex. When set to `true`, the optional `attachment_path` can define a `Node3D` the pinned vertex will be attached to.
			"""
    pass

  def is_point_pinned(self, point_index:int)->bool:
    """
				Returns `true` if vertex is set to pinned.
			"""
    pass

  def set_ray_pickable(self, ray_pickable:bool)->None:
    """"""
    pass

  def is_ray_pickable(self)->bool:
    """"""
    pass


