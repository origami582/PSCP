from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.I as __i__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.p as __p__
import py4godot.classes.D as __d__
import py4godot.classes.R as __r__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__



class PhysicsTestMotionParameters2D(__refcounted__.RefCounted):
  """
		By changing various properties of this object, such as the motion, you can configure the parameters for `PhysicsServer2D.body_test_motion`.
	"""

  @staticmethod
  def constructor()->PhysicsTestMotionParameters2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsTestMotionParameters2D:pass


  @property
  def from_(self)->__core__.Transform2D:
    """"""
    pass
  @from_.setter
  def from_(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def motion(self)->__core__.Vector2:
    """"""
    pass
  @motion.setter
  def motion(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def margin(self)->float:
    """"""
    pass
  @margin.setter
  def margin(self,  value:float)->None:
    """"""
    pass
  @property
  def collide_separation_ray(self)->bool:
    """"""
    pass
  @collide_separation_ray.setter
  def collide_separation_ray(self,  value:bool)->None:
    """"""
    pass
  @property
  def exclude_bodies(self)->typedarray::RID:
    """"""
    pass
  @exclude_bodies.setter
  def exclude_bodies(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def exclude_objects(self)->__core__.Array:
    """"""
    pass
  @exclude_objects.setter
  def exclude_objects(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def recovery_as_collision(self)->bool:
    """"""
    pass
  @recovery_as_collision.setter
  def recovery_as_collision(self,  value:bool)->None:
    """"""
    pass
  def get_from(self)->__core__.Transform2D:
    """"""
    pass

  def set_from(self, from_:__core__.Transform2D)->None:
    """"""
    pass

  def get_motion(self)->__core__.Vector2:
    """"""
    pass

  def set_motion(self, motion:__core__.Vector2)->None:
    """"""
    pass

  def get_margin(self)->float:
    """"""
    pass

  def set_margin(self, margin:float)->None:
    """"""
    pass

  def is_collide_separation_ray_enabled(self)->bool:
    """"""
    pass

  def set_collide_separation_ray_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_exclude_bodies(self)->typedarray::RID:
    """"""
    pass

  def set_exclude_bodies(self, exclude_list:__core__.Array)->None:
    """"""
    pass

  def get_exclude_objects(self)->typedarray::int:
    """"""
    pass

  def set_exclude_objects(self, exclude_list:__core__.Array)->None:
    """"""
    pass

  def is_recovery_as_collision_enabled(self)->bool:
    """"""
    pass

  def set_recovery_as_collision_enabled(self, enabled:bool)->None:
    """"""
    pass


