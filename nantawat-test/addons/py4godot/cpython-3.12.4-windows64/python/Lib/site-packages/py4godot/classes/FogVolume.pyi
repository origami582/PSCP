from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__



class FogVolume(__visualinstance3d__.VisualInstance3D):
  """
		`FogVolume`s are used to add localized fog into the global volumetric fog effect. `FogVolume`s can also remove volumetric fog from specific areas if using a `FogMaterial` with a negative `FogMaterial.density`.
		Performance of `FogVolume`s is directly related to their relative size on the screen and the complexity of their attached `FogMaterial`. It is best to keep `FogVolume`s relatively small and simple where possible.
		**Note:** `FogVolume`s only have a visible effect if `Environment.volumetric_fog_enabled` is `true`. If you don't want fog to be globally visible (but only within `FogVolume` nodes), set `Environment.volumetric_fog_density` to `0.0`.
	"""

  @staticmethod
  def constructor()->FogVolume:pass



  @staticmethod
  def cast(other:__object__.Object)->FogVolume:pass


  @property
  def size(self)->__core__.Vector3:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def shape(self)->int:
    """"""
    pass
  @shape.setter
  def shape(self,  value:int)->None:
    """"""
    pass
  @property
  def material(self)->FogMaterial,ShaderMaterial:
    """"""
    pass
  @material.setter
  def material(self,  value:__fogmaterial__.FogMaterial)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector3:
    """"""
    pass

  def set_shape(self, shape:int )->None:
    """"""
    pass

  def get_shape(self)->int:
    """"""
    pass

  def set_material(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """"""
    pass


