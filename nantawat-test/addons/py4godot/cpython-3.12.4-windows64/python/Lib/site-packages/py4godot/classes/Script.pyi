from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GDScript as __gdscript__
import py4godot.classes.n as __n__
import py4godot.classes.Resource as __resource__
import py4godot.classes.Script as __script__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__
import py4godot.classes.ScriptExtension as __scriptextension__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.t as __t__
import py4godot.classes.p as __p__



class Script(__resource__.Resource):
  """
		A class stored as a resource. A script extends the functionality of all objects that instantiate it.
		This is the base class for all scripts and should not be used directly. Trying to create a new script with this class will result in an error.
		The `new` method of a script subclass creates a new instance. `Object.set_script` extends an existing object, if that object's class matches one of the script's base classes.
	"""

  @staticmethod
  def constructor()->Script:pass



  @staticmethod
  def cast(other:__object__.Object)->Script:pass


  @property
  def source_code(self)->str:
    """"""
    pass
  @source_code.setter
  def source_code(self,  value:str)->None:
    """"""
    pass
  def can_instantiate(self)->bool:
    """
				Returns `true` if the script can be instantiated.
			"""
    pass

  def instance_has(self, base_object:__object__.Object)->bool:
    """
				Returns `true` if `base_object` is an instance of this script.
			"""
    pass

  def has_source_code(self)->bool:
    """
				Returns `true` if the script contains non-empty source code.
				**Note:** If a script does not have source code, this does not mean that it is invalid or unusable. For example, a `GDScript` that was exported with binary tokenization has no source code, but still behaves as expected and could be instantiated. This can be checked with `can_instantiate`.
			"""
    pass

  def get_source_code(self)->str:
    """"""
    pass

  def set_source_code(self, source:str)->None:
    """"""
    pass

  def reload(self, keep_state:bool=False)->int:
    """
				Reloads the script's class implementation. Returns an error code.
			"""
    pass

  def get_base_script(self)->__script__.Script|__gdscript__.GDScript|__scriptextension__.ScriptExtension:
    """
				Returns the script directly inherited by this script.
			"""
    pass

  def get_instance_base_type(self)->__core__.StringName:
    """
				Returns the script's base type.
			"""
    pass

  def get_global_name(self)->__core__.StringName:
    """
				Returns the class name associated with the script, if there is one. Returns an empty string otherwise.
				To give the script a global name, you can use the `class_name` keyword in GDScript and the ``GlobalClass`` attribute in C#.
				
				```gdscript
				class_name MyNode
				extends Node
				```
				
				
			"""
    pass

  def has_script_signal(self, signal_name:__core__.StringName|str)->bool:
    """
				Returns `true` if the script, or a base class, defines a signal with the given name.
			"""
    pass

  def get_script_property_list(self)->typedarray::Dictionary:
    """
				Returns the list of properties in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_property_list`.
			"""
    pass

  def get_script_method_list(self)->typedarray::Dictionary:
    """
				Returns the list of methods in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_method_list`.
			"""
    pass

  def get_script_signal_list(self)->typedarray::Dictionary:
    """
				Returns the list of user signals defined in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_signal_list`.
			"""
    pass

  def get_script_constant_map(self)->__core__.Dictionary:
    """
				Returns a dictionary containing constant names and their values.
			"""
    pass

  def get_property_default_value(self, property:__core__.StringName|str)->Any:
    """
				Returns the default value of the specified property.
			"""
    pass

  def is_tool(self)->bool:
    """
				Returns `true` if the script is a tool script. A tool script can run in the editor.
			"""
    pass

  def is_abstract(self)->bool:
    """
				Returns `true` if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
			"""
    pass

  def get_rpc_config(self)->Any:
    """
				Returns a `Dictionary` mapping method names to their RPC configuration defined by this script.
			"""
    pass


