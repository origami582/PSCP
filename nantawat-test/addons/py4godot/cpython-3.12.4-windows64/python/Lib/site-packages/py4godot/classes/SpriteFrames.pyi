from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__



class SpriteFrames(__resource__.Resource):
  """
		Sprite frame library for an `AnimatedSprite2D` or `AnimatedSprite3D` node. Contains frames and animation data for playback.
	"""

  @staticmethod
  def constructor()->SpriteFrames:pass



  @staticmethod
  def cast(other:__object__.Object)->SpriteFrames:pass


  @property
  def animations(self)->__core__.Array:
    """"""
    pass
  @animations.setter
  def animations(self,  value:__core__.Array)->None:
    """"""
    pass
  def add_animation(self, anim:__core__.StringName|str)->None:
    """
				Adds a new `anim` animation to the library.
			"""
    pass

  def has_animation(self, anim:__core__.StringName|str)->bool:
    """
				Returns `true` if the `anim` animation exists.
			"""
    pass

  def duplicate_animation(self, anim_from:__core__.StringName|str, anim_to:__core__.StringName|str)->None:
    """
				Duplicates the animation `anim_from` to a new animation named `anim_to`. Fails if `anim_to` already exists, or if `anim_from` does not exist.
			"""
    pass

  def remove_animation(self, anim:__core__.StringName|str)->None:
    """
				Removes the `anim` animation.
			"""
    pass

  def rename_animation(self, anim:__core__.StringName|str, newname:__core__.StringName|str)->None:
    """
				Changes the `anim` animation's name to `newname`.
			"""
    pass

  def get_animation_names(self)->__core__.PackedStringArray:
    """
				Returns an array containing the names associated to each animation. Values are placed in alphabetical order.
			"""
    pass

  def set_animation_speed(self, anim:__core__.StringName|str, fps:float)->None:
    """
				Sets the speed for the `anim` animation in frames per second.
			"""
    pass

  def get_animation_speed(self, anim:__core__.StringName|str)->float:
    """
				Returns the speed in frames per second for the `anim` animation.
			"""
    pass

  def set_animation_loop(self, anim:__core__.StringName|str, loop:bool)->None:
    """
				If `loop` is `true`, the `anim` animation will loop when it reaches the end, or the start if it is played in reverse.
			"""
    pass

  def get_animation_loop(self, anim:__core__.StringName|str)->bool:
    """
				Returns `true` if the given animation is configured to loop when it finishes playing. Otherwise, returns `false`.
			"""
    pass

  def add_frame(self, anim:__core__.StringName|str, texture:__texture2d__.Texture2D, duration:float=1.0, at_position:int=-1)->None:
    """
				Adds a frame to the `anim` animation. If `at_position` is `-1`, the frame will be added to the end of the animation. `duration` specifies the relative duration, see `get_frame_duration` for details.
			"""
    pass

  def set_frame(self, anim:__core__.StringName|str, idx:int, texture:__texture2d__.Texture2D, duration:float=1.0)->None:
    """
				Sets the `texture` and the `duration` of the frame `idx` in the `anim` animation. `duration` specifies the relative duration, see `get_frame_duration` for details.
			"""
    pass

  def remove_frame(self, anim:__core__.StringName|str, idx:int)->None:
    """
				Removes the `anim` animation's frame `idx`.
			"""
    pass

  def get_frame_count(self, anim:__core__.StringName|str)->int:
    """
				Returns the number of frames for the `anim` animation.
			"""
    pass

  def get_frame_texture(self, anim:__core__.StringName|str, idx:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns the texture of the frame `idx` in the `anim` animation.
			"""
    pass

  def get_frame_duration(self, anim:__core__.StringName|str, idx:int)->float:
    """
				Returns a relative duration of the frame `idx` in the `anim` animation (defaults to `1.0`). For example, a frame with a duration of `2.0` is displayed twice as long as a frame with a duration of `1.0`. You can calculate the absolute duration (in seconds) of a frame using the following formula:
				```gdscript
				absolute_duration = relative_duration / (animation_fps * abs(playing_speed))
				```
				In this example, `playing_speed` refers to either `AnimatedSprite2D.get_playing_speed` or `AnimatedSprite3D.get_playing_speed`.
			"""
    pass

  def clear(self, anim:__core__.StringName|str)->None:
    """
				Removes all frames from the `anim` animation.
			"""
    pass

  def clear_all(self)->None:
    """
				Removes all animations. An empty `default` animation will be created.
			"""
    pass


