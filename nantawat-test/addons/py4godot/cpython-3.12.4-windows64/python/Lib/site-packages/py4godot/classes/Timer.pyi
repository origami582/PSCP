from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Timer as __timer__
import py4godot.classes.Node as __node__


class TimerProcessCallback:
  TIMER_PROCESS_PHYSICS:int = 0
  TIMER_PROCESS_IDLE:int = 1


class Timer(__node__.Node):
  """
		The `Timer` node is a countdown timer and is the simplest way to handle time-based logic in the engine. When a timer reaches the end of its `wait_time`, it will emit the `signal timeout` signal.
		After a timer enters the scene tree, it can be manually started with `start`. A timer node is also started automatically if `autostart` is `true`.
		Without requiring much code, a timer node can be added and configured in the editor. The `signal timeout` signal it emits can also be connected through the Node dock in the editor:
		```gdscript
		func _on_timer_timeout():
			print("Time to attack!")
		```
		**Note:** To create a one-shot timer without instantiating a node, use `SceneTree.create_timer`.
		**Note:** Timers are affected by `Engine.time_scale` unless `ignore_time_scale` is `true`. The higher the time scale, the sooner timers will end. How often a timer processes may depend on the framerate or `Engine.physics_ticks_per_second`.
	"""
  timeout: BuiltinSignal

  @staticmethod
  def constructor()->Timer:pass



  @staticmethod
  def cast(other:__object__.Object)->Timer:pass


  @property
  def process_callback(self)->int:
    """"""
    pass
  @process_callback.setter
  def process_callback(self,  value:int)->None:
    """"""
    pass
  @property
  def wait_time(self)->float:
    """"""
    pass
  @wait_time.setter
  def wait_time(self,  value:float)->None:
    """"""
    pass
  @property
  def one_shot(self)->bool:
    """"""
    pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None:
    """"""
    pass
  @property
  def autostart(self)->bool:
    """"""
    pass
  @autostart.setter
  def autostart(self,  value:bool)->None:
    """"""
    pass
  @property
  def paused(self)->bool:
    """"""
    pass
  @paused.setter
  def paused(self,  value:bool)->None:
    """"""
    pass
  @property
  def ignore_time_scale(self)->bool:
    """"""
    pass
  @ignore_time_scale.setter
  def ignore_time_scale(self,  value:bool)->None:
    """"""
    pass
  @property
  def time_left(self)->float:
    """"""
    pass
  def set_wait_time(self, time_sec:float)->None:
    """"""
    pass

  def get_wait_time(self)->float:
    """"""
    pass

  def set_one_shot(self, enable:bool)->None:
    """"""
    pass

  def is_one_shot(self)->bool:
    """"""
    pass

  def set_autostart(self, enable:bool)->None:
    """"""
    pass

  def has_autostart(self)->bool:
    """"""
    pass

  def start(self, time_sec:float=-1)->None:
    """
				Starts the timer, or resets the timer if it was started already. Fails if the timer is not inside the scene tree. If `time_sec` is greater than `0`, this value is used for the `wait_time`.
				**Note:** This method does not resume a paused timer. See `paused`.
			"""
    pass

  def stop(self)->None:
    """
				Stops the timer. See also `paused`. Unlike `start`, this can safely be called if the timer is not inside the scene tree.
				**Note:** Calling `stop` does not emit the `signal timeout` signal, as the timer is not considered to have timed out. If this is desired, use `$Timer.timeout.emit()` after calling `stop` to manually emit the signal.
			"""
    pass

  def set_paused(self, paused:bool)->None:
    """"""
    pass

  def is_paused(self)->bool:
    """"""
    pass

  def set_ignore_time_scale(self, ignore:bool)->None:
    """"""
    pass

  def is_ignoring_time_scale(self)->bool:
    """"""
    pass

  def is_stopped(self)->bool:
    """
				Returns `true` if the timer is stopped or has not started.
			"""
    pass

  def get_time_left(self)->float:
    """"""
    pass

  def set_timer_process_callback(self, callback:int )->None:
    """"""
    pass

  def get_timer_process_callback(self)->int:
    """"""
    pass


