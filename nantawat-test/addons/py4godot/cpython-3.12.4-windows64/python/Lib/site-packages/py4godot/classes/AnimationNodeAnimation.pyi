from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Animation as __animation__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationRootNode as __animationrootnode__


class PlayMode:
  PLAY_MODE_FORWARD:int = 0
  PLAY_MODE_BACKWARD:int = 1


class AnimationNodeAnimation(__animationrootnode__.AnimationRootNode):
  """
		A resource to add to an `AnimationNodeBlendTree`. Only has one output port using the `animation` property. Used as an input for `AnimationNode`s that blend animations together.
	"""

  @staticmethod
  def constructor()->AnimationNodeAnimation:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeAnimation:pass


  @property
  def animation(self)->__core__.StringName:
    """"""
    pass
  @animation.setter
  def animation(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def play_mode(self)->int:
    """"""
    pass
  @play_mode.setter
  def play_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def advance_on_start(self)->bool:
    """"""
    pass
  @advance_on_start.setter
  def advance_on_start(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_custom_timeline(self)->bool:
    """"""
    pass
  @use_custom_timeline.setter
  def use_custom_timeline(self,  value:bool)->None:
    """"""
    pass
  @property
  def timeline_length(self)->float:
    """"""
    pass
  @timeline_length.setter
  def timeline_length(self,  value:float)->None:
    """"""
    pass
  @property
  def stretch_time_scale(self)->bool:
    """"""
    pass
  @stretch_time_scale.setter
  def stretch_time_scale(self,  value:bool)->None:
    """"""
    pass
  @property
  def start_offset(self)->float:
    """"""
    pass
  @start_offset.setter
  def start_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def loop_mode(self)->int:
    """"""
    pass
  @loop_mode.setter
  def loop_mode(self,  value:int)->None:
    """"""
    pass
  def set_animation(self, name:__core__.StringName|str)->None:
    """"""
    pass

  def get_animation(self)->__core__.StringName:
    """"""
    pass

  def set_play_mode(self, mode:int )->None:
    """"""
    pass

  def get_play_mode(self)->int:
    """"""
    pass

  def set_advance_on_start(self, advance_on_start:bool)->None:
    """"""
    pass

  def is_advance_on_start(self)->bool:
    """"""
    pass

  def set_use_custom_timeline(self, use_custom_timeline:bool)->None:
    """"""
    pass

  def is_using_custom_timeline(self)->bool:
    """"""
    pass

  def set_timeline_length(self, timeline_length:float)->None:
    """"""
    pass

  def get_timeline_length(self)->float:
    """"""
    pass

  def set_stretch_time_scale(self, stretch_time_scale:bool)->None:
    """"""
    pass

  def is_stretching_time_scale(self)->bool:
    """"""
    pass

  def set_start_offset(self, start_offset:float)->None:
    """"""
    pass

  def get_start_offset(self)->float:
    """"""
    pass

  def set_loop_mode(self, loop_mode:int )->None:
    """"""
    pass

  def get_loop_mode(self)->int:
    """"""
    pass


