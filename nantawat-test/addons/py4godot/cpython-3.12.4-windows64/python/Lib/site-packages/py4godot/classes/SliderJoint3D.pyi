from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__


class Param:
  PARAM_LINEAR_LIMIT_UPPER:int = 0
  PARAM_LINEAR_LIMIT_LOWER:int = 1
  PARAM_LINEAR_LIMIT_SOFTNESS:int = 2
  PARAM_LINEAR_LIMIT_RESTITUTION:int = 3
  PARAM_LINEAR_LIMIT_DAMPING:int = 4
  PARAM_LINEAR_MOTION_SOFTNESS:int = 5
  PARAM_LINEAR_MOTION_RESTITUTION:int = 6
  PARAM_LINEAR_MOTION_DAMPING:int = 7
  PARAM_LINEAR_ORTHOGONAL_SOFTNESS:int = 8
  PARAM_LINEAR_ORTHOGONAL_RESTITUTION:int = 9
  PARAM_LINEAR_ORTHOGONAL_DAMPING:int = 10
  PARAM_ANGULAR_LIMIT_UPPER:int = 11
  PARAM_ANGULAR_LIMIT_LOWER:int = 12
  PARAM_ANGULAR_LIMIT_SOFTNESS:int = 13
  PARAM_ANGULAR_LIMIT_RESTITUTION:int = 14
  PARAM_ANGULAR_LIMIT_DAMPING:int = 15
  PARAM_ANGULAR_MOTION_SOFTNESS:int = 16
  PARAM_ANGULAR_MOTION_RESTITUTION:int = 17
  PARAM_ANGULAR_MOTION_DAMPING:int = 18
  PARAM_ANGULAR_ORTHOGONAL_SOFTNESS:int = 19
  PARAM_ANGULAR_ORTHOGONAL_RESTITUTION:int = 20
  PARAM_ANGULAR_ORTHOGONAL_DAMPING:int = 21
  PARAM_MAX:int = 22


class SliderJoint3D(__joint3d__.Joint3D):
  """
		A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body. For example, Body A could be a `StaticBody3D` representing a piston base, while Body B could be a `RigidBody3D` representing the piston head, moving up and down.
	"""

  @staticmethod
  def constructor()->SliderJoint3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SliderJoint3D:pass


  def set_param(self, param:int , value:float)->None:
    """
				Assigns `value` to the given parameter.
			"""
    pass

  def get_param(self, param:int )->float:
    """
				Returns the value of the given parameter.
			"""
    pass


