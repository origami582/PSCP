from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.TriangleMesh as __trianglemesh__
import py4godot.classes.o as __o__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.l as __l__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.Node3DGizmo as __node3dgizmo__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.d as __d__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.f as __f__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.s as __s__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.P as __p__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.3 as __3__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.n as __n__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.T as __t__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.D as __d__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.Node as __node__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.e as __e__
import py4godot.classes.SkinReference as __skinreference__
import py4godot.classes.m as __m__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.p as __p__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.Decal as __decal__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.EditorNode3DGizmoPlugin as __editornode3dgizmoplugin__
import py4godot.classes.Material as __material__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.A as __a__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.y as __y__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__



class EditorNode3DGizmo(__node3dgizmo__.Node3DGizmo):
  """
		Gizmo that is used for providing custom visualization and editing (handles and subgizmos) for `Node3D` objects. Can be overridden to create custom gizmos, but for simple gizmos creating an `EditorNode3DGizmoPlugin` is usually recommended.
	"""

  @staticmethod
  def constructor()->EditorNode3DGizmo:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorNode3DGizmo:pass


  def _redraw(self)->None:
    """
				Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call `clear` at the beginning of this method and then add visual elements depending on the node's properties.
			"""
    pass

  def _get_handle_name(self, id:int, secondary:bool)->str:
    """
				Override this method to return the name of an edited handle (handles must have been previously added by `add_handles`). Handles can be named for reference to the user when editing.
				The `secondary` argument is `true` when the requested handle is secondary (see `add_handles` for more information).
			"""
    pass

  def _is_handle_highlighted(self, id:int, secondary:bool)->bool:
    """
				Override this method to return `true` whenever the given handle should be highlighted in the editor.
				The `secondary` argument is `true` when the requested handle is secondary (see `add_handles` for more information).
			"""
    pass

  def _get_handle_value(self, id:int, secondary:bool)->Any:
    """
				Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the `restore` argument in `_commit_handle`.
				The `secondary` argument is `true` when the requested handle is secondary (see `add_handles` for more information).
			"""
    pass

  def _begin_handle_action(self, id:int, secondary:bool)->None:
    """
"""
    pass

  def _set_handle(self, id:int, secondary:bool, camera:__camera3d__.Camera3D, point:__core__.Vector2)->None:
    """
				Override this method to update the node properties when the user drags a gizmo handle (previously added with `add_handles`). The provided `point` is the mouse position in screen coordinates and the `camera` can be used to convert it to raycasts.
				The `secondary` argument is `true` when the edited handle is secondary (see `add_handles` for more information).
			"""
    pass

  def _commit_handle(self, id:int, secondary:bool, restore:Any, cancel:bool)->None:
    """
				Override this method to commit a handle being edited (handles must have been previously added by `add_handles`). This usually means creating an `UndoRedo` action for the change, using the current handle value as "do" and the `restore` argument as "undo".
				If the `cancel` argument is `true`, the `restore` value should be directly set, without any `UndoRedo` action.
				The `secondary` argument is `true` when the committed handle is secondary (see `add_handles` for more information).
			"""
    pass

  def _subgizmos_intersect_ray(self, camera:__camera3d__.Camera3D, point:__core__.Vector2)->int:
    """
				Override this method to allow selecting subgizmos using mouse clicks. Given a `camera` and a `point` in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`.
			"""
    pass

  def _subgizmos_intersect_frustum(self, camera:__camera3d__.Camera3D, frustum:__core__.Array)->__core__.PackedInt32Array:
    """
				Override this method to allow selecting subgizmos using mouse drag box selection. Given a `camera` and a `frustum`, this method should return which subgizmos are contained within the frustum. The `frustum` argument consists of an array with all the `Plane`s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, which can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`.
			"""
    pass

  def _set_subgizmo_transform(self, id:int, transform:__core__.Transform3D)->None:
    """
				Override this method to update the node properties during subgizmo editing (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). The `transform` is given in the `Node3D`'s local coordinate system.
			"""
    pass

  def _get_subgizmo_transform(self, id:int)->__core__.Transform3D:
    """
				Override this method to return the current transform of a subgizmo. This transform will be requested at the start of an edit and used as the `restore` argument in `_commit_subgizmos`.
			"""
    pass

  def _commit_subgizmos(self, ids:__core__.PackedInt32Array, restores:__core__.Array, cancel:bool)->None:
    """
				Override this method to commit a group of subgizmos being edited (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). This usually means creating an `UndoRedo` action for the change, using the current transforms as "do" and the `restores` transforms as "undo".
				If the `cancel` argument is `true`, the `restores` transforms should be directly set, without any `UndoRedo` action.
			"""
    pass

  def add_lines(self, lines:__core__.PackedVector3Array, material:__material__.Material, billboard:bool=False, modulate:__core__.Color= __core__.Color.new0())->None:
    """
				Adds lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this method during `_redraw`.
			"""
    pass

  def add_mesh(self, mesh:__mesh__.Mesh, material:__material__.Material= __material__.Material.constructor(), transform:__core__.Transform3D= __core__.Transform3D.new0(), skeleton:__skinreference__.SkinReference= __skinreference__.SkinReference.constructor())->None:
    """
				Adds a mesh to the gizmo with the specified `material`, local `transform` and `skeleton`. Call this method during `_redraw`.
			"""
    pass

  def add_collision_segments(self, segments:__core__.PackedVector3Array)->None:
    """
				Adds the specified `segments` to the gizmo's collision shape for picking. Call this method during `_redraw`.
			"""
    pass

  def add_collision_triangles(self, triangles:__trianglemesh__.TriangleMesh)->None:
    """
				Adds collision triangles to the gizmo for picking. A `TriangleMesh` can be generated from a regular `Mesh` too. Call this method during `_redraw`.
			"""
    pass

  def add_unscaled_billboard(self, material:__material__.Material, default_scale:float=1, modulate:__core__.Color= __core__.Color.new0())->None:
    """
				Adds an unscaled billboard for visualization and selection. Call this method during `_redraw`.
			"""
    pass

  def add_handles(self, handles:__core__.PackedVector3Array, material:__material__.Material, ids:__core__.PackedInt32Array, billboard:bool=False, secondary:bool=False)->None:
    """
				Adds a list of handles (points) which can be used to edit the properties of the gizmo's `Node3D`. The `ids` argument can be used to specify a custom identifier for each handle, if an empty array is passed, the ids will be assigned automatically from the `handles` argument order.
				The `secondary` argument marks the added handles as secondary, meaning they will normally have lower selection priority than regular handles. When the user is holding the shift key secondary handles will switch to have higher priority than regular handles. This change in priority can be used to place multiple handles at the same point while still giving the user control on their selection.
				There are virtual methods which will be called upon editing of these handles. Call this method during `_redraw`.
			"""
    pass

  def set_node_3d(self, node:__node__.Node)->None:
    """
				Sets the reference `Node3D` node for the gizmo. `node` must inherit from `Node3D`.
			"""
    pass

  def get_node_3d(self)->__csgbox3d__.CSGBox3D|__remotetransform3d__.RemoteTransform3D|__csgpolygon3d__.CSGPolygon3D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__xrorigin3d__.XROrigin3D|__xrbodymodifier3d__.XRBodyModifier3D|__label3d__.Label3D|__navigationobstacle3d__.NavigationObstacle3D|__csgcylinder3d__.CSGCylinder3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__importermeshinstance3d__.ImporterMeshInstance3D|__directionallight3d__.DirectionalLight3D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__gpuparticlescollision3d__.GPUParticlesCollision3D|__marker3d__.Marker3D|__audiolistener3d__.AudioListener3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__physicalbone3d__.PhysicalBone3D|__navigationregion3d__.NavigationRegion3D|__csgprimitive3d__.CSGPrimitive3D|__softbody3d__.SoftBody3D|__csgsphere3d__.CSGSphere3D|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__rigidbody3d__.RigidBody3D|__xrhandmodifier3d__.XRHandModifier3D|__shapecast3d__.ShapeCast3D|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__vehiclebody3d__.VehicleBody3D|__xrcamera3d__.XRCamera3D|__multimeshinstance3d__.MultiMeshInstance3D|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__navigationlink3d__.NavigationLink3D|__spotlight3d__.SpotLight3D|__xrfacemodifier3d__.XRFaceModifier3D|__cpuparticles3d__.CPUParticles3D|__reflectionprobe__.ReflectionProbe|__light3d__.Light3D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__vehiclewheel3d__.VehicleWheel3D|__csgmesh3d__.CSGMesh3D|__csgshape3d__.CSGShape3D|__xrnode3d__.XRNode3D|__skeleton3d__.Skeleton3D|__lightmapprobe__.LightmapProbe|__pathfollow3d__.PathFollow3D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__skeletonik3d__.SkeletonIK3D|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__geometryinstance3d__.GeometryInstance3D|__characterbody3d__.CharacterBody3D|__retargetmodifier3d__.RetargetModifier3D|__occluderinstance3d__.OccluderInstance3D|__joint3d__.Joint3D|__rootmotionview__.RootMotionView|__decal__.Decal|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__lightmapgi__.LightmapGI|__physicsbody3d__.PhysicsBody3D|__sprite3d__.Sprite3D|__raycast3d__.RayCast3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__collisionobject3d__.CollisionObject3D|__staticbody3d__.StaticBody3D|__springbonecollision3d__.SpringBoneCollision3D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__lookatmodifier3d__.LookAtModifier3D|__voxelgi__.VoxelGI|__springarm3d__.SpringArm3D|__skeletonmodifier3d__.SkeletonModifier3D|__hingejoint3d__.HingeJoint3D|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__meshinstance3d__.MeshInstance3D|__xranchor3d__.XRAnchor3D|__springbonesimulator3d__.SpringBoneSimulator3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad:
    """
				Returns the `Node3D` node associated with this gizmo.
			"""
    pass

  def get_plugin(self)->__editornode3dgizmoplugin__.EditorNode3DGizmoPlugin:
    """
				Returns the `EditorNode3DGizmoPlugin` that owns this gizmo. It's useful to retrieve materials using `EditorNode3DGizmoPlugin.get_material`.
			"""
    pass

  def clear(self)->None:
    """
				Removes everything in the gizmo including meshes, collisions and handles.
			"""
    pass

  def set_hidden(self, hidden:bool)->None:
    """
				Sets the gizmo's hidden state. If `true`, the gizmo will be hidden. If `false`, it will be shown.
			"""
    pass

  def is_subgizmo_selected(self, id:int)->bool:
    """
				Returns `true` if the given subgizmo is currently selected. Can be used to highlight selected elements during `_redraw`.
			"""
    pass

  def get_subgizmo_selection(self)->__core__.PackedInt32Array:
    """
				Returns a list of the currently selected subgizmos. Can be used to highlight selected elements during `_redraw`.
			"""
    pass


