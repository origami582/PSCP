from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RefCounted as __refcounted__



class RDPipelineRasterizationState(__refcounted__.RefCounted):
  """
		This object is used by `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDPipelineRasterizationState:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineRasterizationState:pass


  @property
  def enable_depth_clamp(self)->bool:
    """"""
    pass
  @enable_depth_clamp.setter
  def enable_depth_clamp(self,  value:bool)->None:
    """"""
    pass
  @property
  def discard_primitives(self)->bool:
    """"""
    pass
  @discard_primitives.setter
  def discard_primitives(self,  value:bool)->None:
    """"""
    pass
  @property
  def wireframe(self)->bool:
    """"""
    pass
  @wireframe.setter
  def wireframe(self,  value:bool)->None:
    """"""
    pass
  @property
  def cull_mode(self)->int:
    """"""
    pass
  @cull_mode.setter
  def cull_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def front_face(self)->int:
    """"""
    pass
  @front_face.setter
  def front_face(self,  value:int)->None:
    """"""
    pass
  @property
  def depth_bias_enabled(self)->bool:
    """"""
    pass
  @depth_bias_enabled.setter
  def depth_bias_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def depth_bias_constant_factor(self)->float:
    """"""
    pass
  @depth_bias_constant_factor.setter
  def depth_bias_constant_factor(self,  value:float)->None:
    """"""
    pass
  @property
  def depth_bias_clamp(self)->float:
    """"""
    pass
  @depth_bias_clamp.setter
  def depth_bias_clamp(self,  value:float)->None:
    """"""
    pass
  @property
  def depth_bias_slope_factor(self)->float:
    """"""
    pass
  @depth_bias_slope_factor.setter
  def depth_bias_slope_factor(self,  value:float)->None:
    """"""
    pass
  @property
  def line_width(self)->float:
    """"""
    pass
  @line_width.setter
  def line_width(self,  value:float)->None:
    """"""
    pass
  @property
  def patch_control_points(self)->int:
    """"""
    pass
  @patch_control_points.setter
  def patch_control_points(self,  value:int)->None:
    """"""
    pass
  def set_enable_depth_clamp(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_depth_clamp(self)->bool:
    """"""
    pass

  def set_discard_primitives(self, p_member:bool)->None:
    """"""
    pass

  def get_discard_primitives(self)->bool:
    """"""
    pass

  def set_wireframe(self, p_member:bool)->None:
    """"""
    pass

  def get_wireframe(self)->bool:
    """"""
    pass

  def set_cull_mode(self, p_member:int )->None:
    """"""
    pass

  def get_cull_mode(self)->int:
    """"""
    pass

  def set_front_face(self, p_member:int )->None:
    """"""
    pass

  def get_front_face(self)->int:
    """"""
    pass

  def set_depth_bias_enabled(self, p_member:bool)->None:
    """"""
    pass

  def get_depth_bias_enabled(self)->bool:
    """"""
    pass

  def set_depth_bias_constant_factor(self, p_member:float)->None:
    """"""
    pass

  def get_depth_bias_constant_factor(self)->float:
    """"""
    pass

  def set_depth_bias_clamp(self, p_member:float)->None:
    """"""
    pass

  def get_depth_bias_clamp(self)->float:
    """"""
    pass

  def set_depth_bias_slope_factor(self, p_member:float)->None:
    """"""
    pass

  def get_depth_bias_slope_factor(self)->float:
    """"""
    pass

  def set_line_width(self, p_member:float)->None:
    """"""
    pass

  def get_line_width(self)->float:
    """"""
    pass

  def set_patch_control_points(self, p_member:int)->None:
    """"""
    pass

  def get_patch_control_points(self)->int:
    """"""
    pass


