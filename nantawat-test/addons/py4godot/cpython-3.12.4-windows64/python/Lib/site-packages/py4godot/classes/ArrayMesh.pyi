from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.T as __t__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.e as __e__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.p as __p__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.d as __d__
import py4godot.classes.r as __r__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.y as __y__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__



class ArrayMesh(__mesh__.Mesh):
  """
		The `ArrayMesh` is used to construct a `Mesh` by specifying the attributes as arrays.
		The most basic example is the creation of a single triangle:
		
		```gdscript
		var vertices = PackedVector3Array()
		vertices.push_back(Vector3(0, 1, 0))
		vertices.push_back(Vector3(1, 0, 0))
		vertices.push_back(Vector3(0, 0, 1))

		# Initialize the ArrayMesh.
		var arr_mesh = ArrayMesh.new()
		var arrays = ``
		arrays.resize(Mesh.ARRAY_MAX)
		arrays`Mesh.ARRAY_VERTEX` = vertices

		# Create the Mesh.
		arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
		var m = MeshInstance3D.new()
		m.mesh = arr_mesh
		```
		
		
		The `MeshInstance3D` is ready to be added to the `SceneTree` to be shown.
		See also `ImmediateMesh`, `MeshDataTool` and `SurfaceTool` for procedural geometry generation.
		**Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes.
	"""

  @staticmethod
  def constructor()->ArrayMesh:pass



  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->ArrayMesh:pass

  @staticmethod
  def cast(other:__object__.Object)->ArrayMesh:pass


  @property
  def blend_shape_mode(self)->int:
    """"""
    pass
  @blend_shape_mode.setter
  def blend_shape_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def custom_aabb(self)->__core__.AABB:
    """"""
    pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  @property
  def shadow_mesh(self)->__arraymesh__.ArrayMesh:
    """"""
    pass
  @shadow_mesh.setter
  def shadow_mesh(self,  value:__arraymesh__.ArrayMesh)->None:
    """"""
    pass
  def add_blend_shape(self, name:__core__.StringName|str)->None:
    """
				Adds name for a blend shape that will be added with `add_surface_from_arrays`. Must be called before surface is added.
			"""
    pass

  def get_blend_shape_count(self)->int:
    """
				Returns the number of blend shapes that the `ArrayMesh` holds.
			"""
    pass

  def get_blend_shape_name(self, index:int)->__core__.StringName:
    """
				Returns the name of the blend shape at this index.
			"""
    pass

  def set_blend_shape_name(self, index:int, name:__core__.StringName|str)->None:
    """
				Sets the name of the blend shape at this index.
			"""
    pass

  def clear_blend_shapes(self)->None:
    """
				Removes all blend shapes from this `ArrayMesh`.
			"""
    pass

  def set_blend_shape_mode(self, mode:int )->None:
    """"""
    pass

  def get_blend_shape_mode(self)->int:
    """"""
    pass

  def add_surface_from_arrays(self, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array=[], lods:__core__.Dictionary= __core__.Dictionary.new0(), flags:int=0)->None:
    """
				Creates a new surface. `Mesh.get_surface_count` will become the `surf_idx` for this new surface.
				Surfaces are created to be rendered using a `primitive`, which may be any of the values defined in `enum Mesh.PrimitiveType`.
				The `arrays` argument is an array of arrays. Each of the `constant Mesh.ARRAY_MAX` elements contains an array with some of the mesh data for this surface as described by the corresponding member of `enum Mesh.ArrayType` or `null` if it is not used by the surface. For example, `arrays`0`` is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for `constant Mesh.ARRAY_INDEX` if it is used.
				The `blend_shapes` argument is an array of vertex data for each blend shape. Each element is an array of the same structure as `arrays`, but `constant Mesh.ARRAY_VERTEX`, `constant Mesh.ARRAY_NORMAL`, and `constant Mesh.ARRAY_TANGENT` are set if and only if they are set in `arrays` and all other entries are `null`.
				The `lods` argument is a dictionary with `float` keys and `PackedInt32Array` values. Each entry in the dictionary represents an LOD level of the surface, where the value is the `constant Mesh.ARRAY_INDEX` array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
				The `flags` argument is the bitwise OR of, as required: One value of `enum Mesh.ArrayCustomFormat` left shifted by `ARRAY_FORMAT_CUSTOMn_SHIFT` for each custom channel in use, `constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE`, `constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS`, or `constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY`.
				**Note:** When using indices, it is recommended to only use points, lines, or triangles.
			"""
    pass

  def clear_surfaces(self)->None:
    """
				Removes all surfaces from this `ArrayMesh`.
			"""
    pass

  def surface_remove(self, surf_idx:int)->None:
    """
				Removes the surface at the given index from the Mesh, shifting surfaces with higher index down by one.
			"""
    pass

  def surface_update_vertex_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def surface_update_attribute_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def surface_update_skin_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def surface_get_array_len(self, surf_idx:int)->int:
    """
				Returns the length in vertices of the vertex array in the requested surface (see `add_surface_from_arrays`).
			"""
    pass

  def surface_get_array_index_len(self, surf_idx:int)->int:
    """
				Returns the length in indices of the index array in the requested surface (see `add_surface_from_arrays`).
			"""
    pass

  def surface_get_format(self, surf_idx:int)->int:
    """
				Returns the format mask of the requested surface (see `add_surface_from_arrays`).
			"""
    pass

  def surface_get_primitive_type(self, surf_idx:int)->int:
    """
				Returns the primitive type of the requested surface (see `add_surface_from_arrays`).
			"""
    pass

  def surface_find_by_name(self, name:str)->int:
    """
				Returns the index of the first surface with this name held within this `ArrayMesh`. If none are found, -1 is returned.
			"""
    pass

  def surface_set_name(self, surf_idx:int, name:str)->None:
    """
				Sets a name for a given surface.
			"""
    pass

  def surface_get_name(self, surf_idx:int)->str:
    """
				Gets the name assigned to this surface.
			"""
    pass

  def regen_normal_maps(self)->None:
    """
				Regenerates tangents for each of the `ArrayMesh`'s surfaces.
			"""
    pass

  def lightmap_unwrap(self, transform:__core__.Transform3D, texel_size:float)->int:
    """
				Performs a UV unwrap on the `ArrayMesh` to prepare the mesh for lightmapping.
			"""
    pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None:
    """"""
    pass

  def get_custom_aabb(self)->__core__.AABB:
    """"""
    pass

  def set_shadow_mesh(self, mesh:__arraymesh__.ArrayMesh)->None:
    """"""
    pass

  def get_shadow_mesh(self)->__arraymesh__.ArrayMesh:
    """"""
    pass


