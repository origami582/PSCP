from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationMixer as __animationmixer__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationTree as __animationtree__


class AnimationProcessCallback:
  ANIMATION_PROCESS_PHYSICS:int = 0
  ANIMATION_PROCESS_IDLE:int = 1
  ANIMATION_PROCESS_MANUAL:int = 2


class AnimationTree(__animationmixer__.AnimationMixer):
  """
		A node used for advanced animation transitions in an `AnimationPlayer`.
		**Note:** When linked with an `AnimationPlayer`, several properties and methods of the corresponding `AnimationPlayer` will not function as expected. Playback and transitions should be handled using only the `AnimationTree` and its constituent `AnimationNode`(s). The `AnimationPlayer` node should be used solely for adding, deleting, and editing animations.
	"""
  animation_player_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationTree:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationTree:pass


  @property
  def tree_root(self)->__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeblendtree__.AnimationNodeBlendTree|__animationrootnode__.AnimationRootNode|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D:
    """"""
    pass
  @tree_root.setter
  def tree_root(self,  value:__animationrootnode__.AnimationRootNode)->None:
    """"""
    pass
  @property
  def advance_expression_base_node(self)->__core__.NodePath:
    """"""
    pass
  @advance_expression_base_node.setter
  def advance_expression_base_node(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def anim_player(self)->__core__.NodePath:
    """"""
    pass
  @anim_player.setter
  def anim_player(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_tree_root(self, animation_node:__animationrootnode__.AnimationRootNode)->None:
    """"""
    pass

  def get_tree_root(self)->__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeblendtree__.AnimationNodeBlendTree|__animationrootnode__.AnimationRootNode|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D:
    """"""
    pass

  def set_advance_expression_base_node(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_advance_expression_base_node(self)->__core__.NodePath:
    """"""
    pass

  def set_animation_player(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_animation_player(self)->__core__.NodePath:
    """"""
    pass

  def set_process_callback(self, mode:int )->None:
    """
				Sets the process notification in which to update animations.
			"""
    pass

  def get_process_callback(self)->int:
    """
				Returns the process notification in which to update animations.
			"""
    pass


