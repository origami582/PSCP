from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.Light3D as __light3d__


class ShadowMode:
  SHADOW_DUAL_PARABOLOID:int = 0
  SHADOW_CUBE:int = 1


class OmniLight3D(__light3d__.Light3D):
  """
		An Omnidirectional light is a type of `Light3D` that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.
		**Note:** When using the Mobile rendering method, only 8 omni lights can be displayed on each mesh resource. Attempting to display more than 8 omni lights on a single mesh resource will result in omni lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 omni lights can be displayed on each mesh resource by default, but this can be increased by adjusting `ProjectSettings.rendering/limits/opengl/max_lights_per_object`.
		**Note:** When using the Mobile or Compatibility rendering methods, omni lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, `GeometryInstance3D.extra_cull_margin` must be increased on the mesh. Otherwise, the light may not be visible on the mesh.
	"""

  @staticmethod
  def constructor()->OmniLight3D:pass



  @staticmethod
  def cast(other:__object__.Object)->OmniLight3D:pass


  @property
  def omni_range(self)->float:
    """"""
    pass
  @omni_range.setter
  def omni_range(self,  value:float)->None:
    """"""
    pass
  @property
  def omni_attenuation(self)->float:
    """"""
    pass
  @omni_attenuation.setter
  def omni_attenuation(self,  value:float)->None:
    """"""
    pass
  @property
  def omni_shadow_mode(self)->int:
    """"""
    pass
  @omni_shadow_mode.setter
  def omni_shadow_mode(self,  value:int)->None:
    """"""
    pass
  def set_shadow_mode(self, mode:int )->None:
    """"""
    pass

  def get_shadow_mode(self)->int:
    """"""
    pass


