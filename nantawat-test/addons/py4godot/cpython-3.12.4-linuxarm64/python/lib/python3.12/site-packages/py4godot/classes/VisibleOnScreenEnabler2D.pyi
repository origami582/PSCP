from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__


class EnableMode:
  ENABLE_MODE_INHERIT:int = 0
  ENABLE_MODE_ALWAYS:int = 1
  ENABLE_MODE_WHEN_PAUSED:int = 2


class VisibleOnScreenEnabler2D(__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D):
  """
		`VisibleOnScreenEnabler2D` contains a rectangular region of 2D space and a target node. The target node will be automatically enabled (via its `Node.process_mode` property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them.
		See `VisibleOnScreenNotifier2D` if you only want to be notified when the region is visible on screen.
		**Note:** `VisibleOnScreenEnabler2D` uses the render culling code to determine whether it's visible on screen, so it won't function unless `CanvasItem.visible` is set to `true`.
	"""

  @staticmethod
  def constructor()->VisibleOnScreenEnabler2D:pass



  @staticmethod
  def cast(other:__object__.Object)->VisibleOnScreenEnabler2D:pass


  @property
  def enable_mode(self)->int:
    """"""
    pass
  @enable_mode.setter
  def enable_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def enable_node_path(self)->__core__.NodePath:
    """"""
    pass
  @enable_node_path.setter
  def enable_node_path(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_enable_mode(self, mode:int )->None:
    """"""
    pass

  def get_enable_mode(self)->int:
    """"""
    pass

  def set_enable_node_path(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_enable_node_path(self)->__core__.NodePath:
    """"""
    pass


