from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.Material as __material__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__



class PanoramaSkyMaterial(__material__.Material):
  """
		A resource referenced in a `Sky` that is used to draw a background. `PanoramaSkyMaterial` functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a `Cubemap`.
		Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (`.hdr`) and OpenEXR (`.exr`) image formats for this purpose.
		You can use `url=https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html`this tool`/url` to convert a cubemap to an equirectangular sky map.
	"""

  @staticmethod
  def constructor()->PanoramaSkyMaterial:pass



  @staticmethod
  def cast(other:__object__.Object)->PanoramaSkyMaterial:pass


  @property
  def panorama(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass
  @panorama.setter
  def panorama(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def filter(self)->bool:
    """"""
    pass
  @filter.setter
  def filter(self,  value:bool)->None:
    """"""
    pass
  @property
  def energy_multiplier(self)->float:
    """"""
    pass
  @energy_multiplier.setter
  def energy_multiplier(self,  value:float)->None:
    """"""
    pass
  def set_panorama(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_panorama(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass

  def set_filtering_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_filtering_enabled(self)->bool:
    """"""
    pass

  def set_energy_multiplier(self, multiplier:float)->None:
    """"""
    pass

  def get_energy_multiplier(self)->float:
    """"""
    pass


