from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__



class VisualInstance3D(__node3d__.Node3D):
  """
		The `VisualInstance3D` is used to connect a resource to a visual representation. All visual 3D nodes inherit from the `VisualInstance3D`. In general, you should not access the `VisualInstance3D` properties directly as they are accessed and managed by the nodes that inherit from `VisualInstance3D`. `VisualInstance3D` is the node representation of the `RenderingServer` instance.
	"""

  @staticmethod
  def constructor()->VisualInstance3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualInstance3D:pass


  @property
  def layers(self)->int:
    """"""
    pass
  @layers.setter
  def layers(self,  value:int)->None:
    """"""
    pass
  @property
  def sorting_offset(self)->float:
    """"""
    pass
  @sorting_offset.setter
  def sorting_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def sorting_use_aabb_center(self)->bool:
    """"""
    pass
  @sorting_use_aabb_center.setter
  def sorting_use_aabb_center(self,  value:bool)->None:
    """"""
    pass
  def _get_aabb(self)->__core__.AABB:
    """
"""
    pass

  def set_base(self, base:__core__.RID)->None:
    """
				Sets the resource that is instantiated by this `VisualInstance3D`, which changes how the engine handles the `VisualInstance3D` under the hood. Equivalent to `RenderingServer.instance_set_base`.
			"""
    pass

  def get_base(self)->__core__.RID:
    """
				Returns the RID of the resource associated with this `VisualInstance3D`. For example, if the Node is a `MeshInstance3D`, this will return the RID of the associated `Mesh`.
			"""
    pass

  def get_instance(self)->__core__.RID:
    """
				Returns the RID of this instance. This RID is the same as the RID returned by `RenderingServer.instance_create`. This RID is needed if you want to call `RenderingServer` functions directly on this `VisualInstance3D`.
			"""
    pass

  def set_layer_mask(self, mask:int)->None:
    """"""
    pass

  def get_layer_mask(self)->int:
    """"""
    pass

  def set_layer_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `layers`, given a `layer_number` between 1 and 20.
			"""
    pass

  def get_layer_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `layers` is enabled, given a `layer_number` between 1 and 20.
			"""
    pass

  def set_sorting_offset(self, offset:float)->None:
    """"""
    pass

  def get_sorting_offset(self)->float:
    """"""
    pass

  def set_sorting_use_aabb_center(self, enabled:bool)->None:
    """"""
    pass

  def is_sorting_use_aabb_center(self)->bool:
    """"""
    pass

  def get_aabb(self)->__core__.AABB:
    """
				Returns the `AABB` (also known as the bounding box) for this `VisualInstance3D`.
			"""
    pass


