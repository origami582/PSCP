from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.Button as __button__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__



class OptionButton(__button__.Button):
  """
		`OptionButton` is a type of button that brings up a dropdown with selectable items when pressed. The item selected becomes the "current" item and is displayed as the button text.
		See also `BaseButton` which contains common properties and methods associated with this node.
		**Note:** The IDs used for items are limited to signed 32-bit integers, not the full 64 bits of `int`. These have a range of `-2^31` to `2^31 - 1`, that is, `-2147483648` to `2147483647`.
		**Note:** The `Button.text` and `Button.icon` properties are set automatically based on the selected item. They shouldn't be changed manually.
	"""
  item_selected: BuiltinSignal
  item_focused: BuiltinSignal

  @staticmethod
  def constructor()->OptionButton:pass



  @staticmethod
  def cast(other:__object__.Object)->OptionButton:pass


  @property
  def selected(self)->int:
    """"""
    pass
  @selected.setter
  def selected(self,  value:int)->None:
    """"""
    pass
  @property
  def fit_to_longest_item(self)->bool:
    """"""
    pass
  @fit_to_longest_item.setter
  def fit_to_longest_item(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_reselect(self)->bool:
    """"""
    pass
  @allow_reselect.setter
  def allow_reselect(self,  value:bool)->None:
    """"""
    pass
  @property
  def item_count(self)->int:
    """"""
    pass
  @item_count.setter
  def item_count(self,  value:int)->None:
    """"""
    pass
  def add_item(self, label:str, id:int=-1)->None:
    """
				Adds an item, with text `label` and (optionally) `id`. If no `id` is passed, the item index will be used as the item's ID. New items are appended at the end.
			"""
    pass

  def add_icon_item(self, texture:__texture2d__.Texture2D, label:str, id:int=-1)->None:
    """
				Adds an item, with a `texture` icon, text `label` and (optionally) `id`. If no `id` is passed, the item index will be used as the item's ID. New items are appended at the end.
			"""
    pass

  def set_item_text(self, idx:int, text:str)->None:
    """
				Sets the text of the item at index `idx`.
			"""
    pass

  def set_item_icon(self, idx:int, texture:__texture2d__.Texture2D)->None:
    """
				Sets the icon of the item at index `idx`.
			"""
    pass

  def set_item_disabled(self, idx:int, disabled:bool)->None:
    """
				Sets whether the item at index `idx` is disabled.
				Disabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected.
			"""
    pass

  def set_item_id(self, idx:int, id:int)->None:
    """
				Sets the ID of the item at index `idx`.
			"""
    pass

  def set_item_metadata(self, idx:int, metadata:Any)->None:
    """
				Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID.
			"""
    pass

  def set_item_tooltip(self, idx:int, tooltip:str)->None:
    """
				Sets the tooltip of the item at index `idx`.
			"""
    pass

  def get_item_text(self, idx:int)->str:
    """
				Returns the text of the item at index `idx`.
			"""
    pass

  def get_item_icon(self, idx:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the icon of the item at index `idx`.
			"""
    pass

  def get_item_id(self, idx:int)->int:
    """
				Returns the ID of the item at index `idx`.
			"""
    pass

  def get_item_index(self, id:int)->int:
    """
				Returns the index of the item with the given `id`.
			"""
    pass

  def get_item_metadata(self, idx:int)->Any:
    """
				Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID.
			"""
    pass

  def get_item_tooltip(self, idx:int)->str:
    """
				Returns the tooltip of the item at index `idx`.
			"""
    pass

  def is_item_disabled(self, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is disabled.
			"""
    pass

  def is_item_separator(self, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is marked as a separator.
			"""
    pass

  def add_separator(self, text:str= __core__.String.new0())->None:
    """
				Adds a separator to the list of items. Separators help to group items, and can optionally be given a `text` header. A separator also gets an index assigned, and is appended at the end of the item list.
			"""
    pass

  def clear(self)->None:
    """
				Clears all the items in the `OptionButton`.
			"""
    pass

  def select(self, idx:int)->None:
    """
				Selects an item by index and makes it the current item. This will work even if the item is disabled.
				Passing `-1` as the index deselects any currently selected item.
			"""
    pass

  def get_selected(self)->int:
    """"""
    pass

  def get_selected_id(self)->int:
    """
				Returns the ID of the selected item, or `-1` if no item is selected.
			"""
    pass

  def get_selected_metadata(self)->Any:
    """
				Gets the metadata of the selected item. Metadata for items can be set using `set_item_metadata`.
			"""
    pass

  def remove_item(self, idx:int)->None:
    """
				Removes the item at index `idx`.
			"""
    pass

  def get_popup(self)->__popupmenu__.PopupMenu:
    """
				Returns the `PopupMenu` contained in this button.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			"""
    pass

  def show_popup(self)->None:
    """
				Adjusts popup position and sizing for the `OptionButton`, then shows the `PopupMenu`. Prefer this over using `get_popup().popup()`.
			"""
    pass

  def set_item_count(self, count:int)->None:
    """"""
    pass

  def get_item_count(self)->int:
    """"""
    pass

  def has_selectable_items(self)->bool:
    """
				Returns `true` if this button contains at least one item which is not disabled, or marked as a separator.
			"""
    pass

  def get_selectable_item(self, from_last:bool=False)->int:
    """
				Returns the index of the first item which is not disabled, or marked as a separator. If `from_last` is `true`, the items will be searched in reverse order.
				Returns `-1` if no item is found.
			"""
    pass

  def set_fit_to_longest_item(self, fit:bool)->None:
    """"""
    pass

  def is_fit_to_longest_item(self)->bool:
    """"""
    pass

  def set_allow_reselect(self, allow:bool)->None:
    """"""
    pass

  def get_allow_reselect(self)->bool:
    """"""
    pass

  def set_disable_shortcuts(self, disabled:bool)->None:
    """
				If `true`, shortcuts are disabled and cannot be used to trigger the button.
			"""
    pass


