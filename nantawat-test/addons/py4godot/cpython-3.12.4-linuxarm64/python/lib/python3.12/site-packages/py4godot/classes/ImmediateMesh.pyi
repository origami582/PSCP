from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Material as __material__
import py4godot.classes.Mesh as __mesh__



class ImmediateMesh(__mesh__.Mesh):
  """
		A mesh type optimized for creating geometry manually, similar to OpenGL 1.x immediate mode.
		Here's a sample on how to generate a triangular face:
		
		```gdscript
		var mesh = ImmediateMesh.new()
		mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)
		mesh.surface_add_vertex(Vector3.LEFT)
		mesh.surface_add_vertex(Vector3.FORWARD)
		mesh.surface_add_vertex(Vector3.ZERO)
		mesh.surface_end()
		```
		
		
		**Note:** Generating complex geometries with `ImmediateMesh` is highly inefficient. Instead, it is designed to generate simple geometry that changes often.
	"""

  @staticmethod
  def constructor()->ImmediateMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->ImmediateMesh:pass


  def surface_begin(self, primitive:int , material:__material__.Material= __material__.Material.constructor())->None:
    """
				Begin a new surface.
			"""
    pass

  def surface_set_color(self, color:__core__.Color)->None:
    """
				Set the color attribute that will be pushed with the next vertex.
			"""
    pass

  def surface_set_normal(self, normal:__core__.Vector3)->None:
    """
				Set the normal attribute that will be pushed with the next vertex.
			"""
    pass

  def surface_set_tangent(self, tangent:__core__.Plane)->None:
    """
				Set the tangent attribute that will be pushed with the next vertex.
			"""
    pass

  def surface_set_uv(self, uv:__core__.Vector2)->None:
    """
				Set the UV attribute that will be pushed with the next vertex.
			"""
    pass

  def surface_set_uv2(self, uv2:__core__.Vector2)->None:
    """
				Set the UV2 attribute that will be pushed with the next vertex.
			"""
    pass

  def surface_add_vertex(self, vertex:__core__.Vector3)->None:
    """
				Add a 3D vertex using the current attributes previously set.
			"""
    pass

  def surface_add_vertex_2d(self, vertex:__core__.Vector2)->None:
    """
				Add a 2D vertex using the current attributes previously set.
			"""
    pass

  def surface_end(self)->None:
    """
				End and commit current surface. Note that surface being created will not be visible until this function is called.
			"""
    pass

  def clear_surfaces(self)->None:
    """
				Clear all surfaces.
			"""
    pass


