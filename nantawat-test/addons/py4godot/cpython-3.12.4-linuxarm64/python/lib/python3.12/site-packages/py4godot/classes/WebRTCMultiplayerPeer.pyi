from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.WebRTCPeerConnection as __webrtcpeerconnection__



class WebRTCMultiplayerPeer(__multiplayerpeer__.MultiplayerPeer):
  """"""

  @staticmethod
  def constructor()->WebRTCMultiplayerPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->WebRTCMultiplayerPeer:pass


  def create_server(self, channels_config:__core__.Array= __core__.Array.new0())->int:
    """"""
    pass

  def create_client(self, peer_id:int, channels_config:__core__.Array= __core__.Array.new0())->int:
    """"""
    pass

  def create_mesh(self, peer_id:int, channels_config:__core__.Array= __core__.Array.new0())->int:
    """"""
    pass

  def add_peer(self, peer:__webrtcpeerconnection__.WebRTCPeerConnection, peer_id:int, unreliable_lifetime:int=1)->int:
    """"""
    pass

  def remove_peer(self, peer_id:int)->None:
    """"""
    pass

  def has_peer(self, peer_id:int)->bool:
    """"""
    pass

  def get_peer(self, peer_id:int)->__core__.Dictionary:
    """"""
    pass

  def get_peers(self)->__core__.Dictionary:
    """"""
    pass


