from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.GDScriptSyntaxHighlighter as __gdscriptsyntaxhighlighter__
import py4godot.classes.EditorSyntaxHighlighter as __editorsyntaxhighlighter__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.p as __p__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.o as __o__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.2 as __2__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Container as __container__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.Label as __label__
import py4godot.classes.t as __t__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.A as __a__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.y as __y__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.CodeHighlighter as __codehighlighter__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.i as __i__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.e as __e__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.Slider as __slider__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.d as __d__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.SyntaxHighlighter as __syntaxhighlighter__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.GridContainer as __gridcontainer__


class MenuItems:
  MENU_CUT:int = 0
  MENU_COPY:int = 1
  MENU_PASTE:int = 2
  MENU_CLEAR:int = 3
  MENU_SELECT_ALL:int = 4
  MENU_UNDO:int = 5
  MENU_REDO:int = 6
  MENU_SUBMENU_TEXT_DIR:int = 7
  MENU_DIR_INHERITED:int = 8
  MENU_DIR_AUTO:int = 9
  MENU_DIR_LTR:int = 10
  MENU_DIR_RTL:int = 11
  MENU_DISPLAY_UCC:int = 12
  MENU_SUBMENU_INSERT_UCC:int = 13
  MENU_INSERT_LRM:int = 14
  MENU_INSERT_RLM:int = 15
  MENU_INSERT_LRE:int = 16
  MENU_INSERT_RLE:int = 17
  MENU_INSERT_LRO:int = 18
  MENU_INSERT_RLO:int = 19
  MENU_INSERT_PDF:int = 20
  MENU_INSERT_ALM:int = 21
  MENU_INSERT_LRI:int = 22
  MENU_INSERT_RLI:int = 23
  MENU_INSERT_FSI:int = 24
  MENU_INSERT_PDI:int = 25
  MENU_INSERT_ZWJ:int = 26
  MENU_INSERT_ZWNJ:int = 27
  MENU_INSERT_WJ:int = 28
  MENU_INSERT_SHY:int = 29
  MENU_EMOJI_AND_SYMBOL:int = 30
  MENU_MAX:int = 31
class EditAction:
  ACTION_NONE:int = 0
  ACTION_TYPING:int = 1
  ACTION_BACKSPACE:int = 2
  ACTION_DELETE:int = 3
class SearchFlags:
  SEARCH_MATCH_CASE:int = 1
  SEARCH_WHOLE_WORDS:int = 2
  SEARCH_BACKWARDS:int = 4
class CaretType:
  CARET_KIND_LINE:int = 0
  CARET_KIND_BLOCK:int = 1
class SelectionMode:
  SELECTION_MODE_NONE:int = 0
  SELECTION_MODE_SHIFT:int = 1
  SELECTION_MODE_POINTER:int = 2
  SELECTION_MODE_WORD:int = 3
  SELECTION_MODE_LINE:int = 4
class LineWrappingMode:
  LINE_WRAPPING_NONE:int = 0
  LINE_WRAPPING_BOUNDARY:int = 1
class GutterType:
  GUTTER_KIND_STRING:int = 0
  GUTTER_KIND_ICON:int = 1
  GUTTER_KIND_CUSTOM:int = 2


class TextEdit(__control__.Control):
  """
		A multiline text editor. It also has limited facilities for editing code, such as syntax highlighting support. For more advanced facilities for editing code, see `CodeEdit`.
		While entering text, it is possible to insert special characters using Unicode, OEM or Windows alt codes:
		- To enter Unicode codepoints, hold `kbd`Alt`/kbd` and type the codepoint on the numpad. For example, to enter the character `รก` (U+00E1), hold `kbd`Alt`/kbd` and type `kbd`+E1`/kbd` on the numpad (the leading zeroes can be omitted).
		- To enter OEM codepoints, hold `kbd`Alt`/kbd` and type the code on the numpad. For example, to enter the character `รก` (OEM 160), hold `kbd`Alt`/kbd` and type `160` on the numpad.
		- To enter Windows codepoints, hold `kbd`Alt`/kbd` and type the code on the numpad. For example, to enter the character `รก` (Windows 0225), hold `kbd`Alt`/kbd` and type `kbd`0`/kbd`, `kbd`2`/kbd`, `kbd`2`/kbd`, `kbd`5`/kbd` on the numpad. The leading zero here must **not** be omitted, as this is how Windows codepoints are distinguished from OEM codepoints.
		**Note:** Most viewport, caret, and edit methods contain a `caret_index` argument for `caret_multiple` support. The argument should be one of the following: `-1` for all carets, `0` for the main caret, or greater than `0` for secondary carets in the order they were created.
		**Note:** When holding down `kbd`Alt`/kbd`, the vertical scroll wheel will scroll 5 times as fast as it would normally do. This also works in the Godot script editor.
	"""
  text_set: BuiltinSignal
  text_changed: BuiltinSignal
  lines_edited_from: BuiltinSignal
  caret_changed: BuiltinSignal
  gutter_clicked: BuiltinSignal
  gutter_added: BuiltinSignal
  gutter_removed: BuiltinSignal

  @staticmethod
  def constructor()->TextEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->TextEdit:pass


  @property
  def text(self)->str:
    """"""
    pass
  @text.setter
  def text(self,  value:str)->None:
    """"""
    pass
  @property
  def placeholder_text(self)->str:
    """"""
    pass
  @placeholder_text.setter
  def placeholder_text(self,  value:str)->None:
    """"""
    pass
  @property
  def editable(self)->bool:
    """"""
    pass
  @editable.setter
  def editable(self,  value:bool)->None:
    """"""
    pass
  @property
  def context_menu_enabled(self)->bool:
    """"""
    pass
  @context_menu_enabled.setter
  def context_menu_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def emoji_menu_enabled(self)->bool:
    """"""
    pass
  @emoji_menu_enabled.setter
  def emoji_menu_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def shortcut_keys_enabled(self)->bool:
    """"""
    pass
  @shortcut_keys_enabled.setter
  def shortcut_keys_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def selecting_enabled(self)->bool:
    """"""
    pass
  @selecting_enabled.setter
  def selecting_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass
  @deselect_on_focus_loss_enabled.setter
  def deselect_on_focus_loss_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass
  @drag_and_drop_selection_enabled.setter
  def drag_and_drop_selection_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def virtual_keyboard_enabled(self)->bool:
    """"""
    pass
  @virtual_keyboard_enabled.setter
  def virtual_keyboard_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def middle_mouse_paste_enabled(self)->bool:
    """"""
    pass
  @middle_mouse_paste_enabled.setter
  def middle_mouse_paste_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def empty_selection_clipboard_enabled(self)->bool:
    """"""
    pass
  @empty_selection_clipboard_enabled.setter
  def empty_selection_clipboard_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def wrap_mode(self)->int:
    """"""
    pass
  @wrap_mode.setter
  def wrap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def autowrap_mode(self)->int:
    """"""
    pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def indent_wrapped_lines(self)->bool:
    """"""
    pass
  @indent_wrapped_lines.setter
  def indent_wrapped_lines(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_smooth(self)->bool:
    """"""
    pass
  @scroll_smooth.setter
  def scroll_smooth(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_v_scroll_speed(self)->float:
    """"""
    pass
  @scroll_v_scroll_speed.setter
  def scroll_v_scroll_speed(self,  value:float)->None:
    """"""
    pass
  @property
  def scroll_past_end_of_file(self)->bool:
    """"""
    pass
  @scroll_past_end_of_file.setter
  def scroll_past_end_of_file(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_vertical(self)->float:
    """"""
    pass
  @scroll_vertical.setter
  def scroll_vertical(self,  value:float)->None:
    """"""
    pass
  @property
  def scroll_horizontal(self)->int:
    """"""
    pass
  @scroll_horizontal.setter
  def scroll_horizontal(self,  value:int)->None:
    """"""
    pass
  @property
  def scroll_fit_content_height(self)->bool:
    """"""
    pass
  @scroll_fit_content_height.setter
  def scroll_fit_content_height(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_fit_content_width(self)->bool:
    """"""
    pass
  @scroll_fit_content_width.setter
  def scroll_fit_content_width(self,  value:bool)->None:
    """"""
    pass
  @property
  def minimap_draw(self)->bool:
    """"""
    pass
  @minimap_draw.setter
  def minimap_draw(self,  value:bool)->None:
    """"""
    pass
  @property
  def minimap_width(self)->int:
    """"""
    pass
  @minimap_width.setter
  def minimap_width(self,  value:int)->None:
    """"""
    pass
  @property
  def caret_type(self)->int:
    """"""
    pass
  @caret_type.setter
  def caret_type(self,  value:int)->None:
    """"""
    pass
  @property
  def caret_blink(self)->bool:
    """"""
    pass
  @caret_blink.setter
  def caret_blink(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_blink_interval(self)->float:
    """"""
    pass
  @caret_blink_interval.setter
  def caret_blink_interval(self,  value:float)->None:
    """"""
    pass
  @property
  def caret_draw_when_editable_disabled(self)->bool:
    """"""
    pass
  @caret_draw_when_editable_disabled.setter
  def caret_draw_when_editable_disabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_move_on_right_click(self)->bool:
    """"""
    pass
  @caret_move_on_right_click.setter
  def caret_move_on_right_click(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_mid_grapheme(self)->bool:
    """"""
    pass
  @caret_mid_grapheme.setter
  def caret_mid_grapheme(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_multiple(self)->bool:
    """"""
    pass
  @caret_multiple.setter
  def caret_multiple(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_default_word_separators(self)->bool:
    """"""
    pass
  @use_default_word_separators.setter
  def use_default_word_separators(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_custom_word_separators(self)->bool:
    """"""
    pass
  @use_custom_word_separators.setter
  def use_custom_word_separators(self,  value:bool)->None:
    """"""
    pass
  @property
  def custom_word_separators(self)->str:
    """"""
    pass
  @custom_word_separators.setter
  def custom_word_separators(self,  value:str)->None:
    """"""
    pass
  @property
  def syntax_highlighter(self)->__codehighlighter__.CodeHighlighter|__editorsyntaxhighlighter__.EditorSyntaxHighlighter|__syntaxhighlighter__.SyntaxHighlighter|__gdscriptsyntaxhighlighter__.GDScriptSyntaxHighlighter:
    """"""
    pass
  @syntax_highlighter.setter
  def syntax_highlighter(self,  value:__syntaxhighlighter__.SyntaxHighlighter)->None:
    """"""
    pass
  @property
  def highlight_all_occurrences(self)->bool:
    """"""
    pass
  @highlight_all_occurrences.setter
  def highlight_all_occurrences(self,  value:bool)->None:
    """"""
    pass
  @property
  def highlight_current_line(self)->bool:
    """"""
    pass
  @highlight_current_line.setter
  def highlight_current_line(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_control_chars(self)->bool:
    """"""
    pass
  @draw_control_chars.setter
  def draw_control_chars(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_tabs(self)->bool:
    """"""
    pass
  @draw_tabs.setter
  def draw_tabs(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_spaces(self)->bool:
    """"""
    pass
  @draw_spaces.setter
  def draw_spaces(self,  value:bool)->None:
    """"""
    pass
  @property
  def text_direction(self)->int:
    """"""
    pass
  @text_direction.setter
  def text_direction(self,  value:int)->None:
    """"""
    pass
  @property
  def language(self)->str:
    """"""
    pass
  @language.setter
  def language(self,  value:str)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override(self)->int:
    """"""
    pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None:
    """"""
    pass
  def _handle_unicode_input(self, unicode_char:int, caret_index:int)->None:
    """
				Override this method to define what happens when the user types in the provided key `unicode_char`.
			"""
    pass

  def _backspace(self, caret_index:int)->None:
    """
				Override this method to define what happens when the user presses the backspace key.
			"""
    pass

  def _cut(self, caret_index:int)->None:
    """
				Override this method to define what happens when the user performs a cut operation.
			"""
    pass

  def _copy(self, caret_index:int)->None:
    """
				Override this method to define what happens when the user performs a copy operation.
			"""
    pass

  def _paste(self, caret_index:int)->None:
    """
				Override this method to define what happens when the user performs a paste operation.
			"""
    pass

  def _paste_primary_clipboard(self, caret_index:int)->None:
    """
				Override this method to define what happens when the user performs a paste operation with middle mouse button.
				**Note:** This method is only implemented on Linux.
			"""
    pass

  def has_ime_text(self)->bool:
    """
				Returns `true` if the user has text in the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME).
			"""
    pass

  def cancel_ime(self)->None:
    """
				Closes the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME) if it is open. Any text in the IME will be lost.
			"""
    pass

  def apply_ime(self)->None:
    """
				Applies text from the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME) to each caret and closes the IME if it is open.
			"""
    pass

  def set_editable(self, enabled:bool)->None:
    """"""
    pass

  def is_editable(self)->bool:
    """"""
    pass

  def set_text_direction(self, direction:int )->None:
    """"""
    pass

  def get_text_direction(self)->int:
    """"""
    pass

  def set_language(self, language:str)->None:
    """"""
    pass

  def get_language(self)->str:
    """"""
    pass

  def set_structured_text_bidi_override(self, parser:int )->None:
    """"""
    pass

  def get_structured_text_bidi_override(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None:
    """"""
    pass

  def get_structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass

  def set_tab_size(self, size:int)->None:
    """
				Sets the tab size for the `TextEdit` to use.
			"""
    pass

  def get_tab_size(self)->int:
    """
				Returns the `TextEdit`'s' tab size.
			"""
    pass

  def set_indent_wrapped_lines(self, enabled:bool)->None:
    """"""
    pass

  def is_indent_wrapped_lines(self)->bool:
    """"""
    pass

  def set_overtype_mode_enabled(self, enabled:bool)->None:
    """
				If `true`, enables overtype mode. In this mode, typing overrides existing text instead of inserting text. The `ProjectSettings.input/ui_text_toggle_insert_mode` action toggles overtype mode. See `is_overtype_mode_enabled`.
			"""
    pass

  def is_overtype_mode_enabled(self)->bool:
    """
				Returns `true` if overtype mode is enabled. See `set_overtype_mode_enabled`.
			"""
    pass

  def set_context_menu_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_context_menu_enabled(self)->bool:
    """"""
    pass

  def set_emoji_menu_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_emoji_menu_enabled(self)->bool:
    """"""
    pass

  def set_shortcut_keys_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_shortcut_keys_enabled(self)->bool:
    """"""
    pass

  def set_virtual_keyboard_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_virtual_keyboard_enabled(self)->bool:
    """"""
    pass

  def set_middle_mouse_paste_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_middle_mouse_paste_enabled(self)->bool:
    """"""
    pass

  def set_empty_selection_clipboard_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_empty_selection_clipboard_enabled(self)->bool:
    """"""
    pass

  def clear(self)->None:
    """
				Performs a full reset of `TextEdit`, including undo history.
			"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def get_line_count(self)->int:
    """
				Returns the number of lines in the text.
			"""
    pass

  def set_placeholder(self, text:str)->None:
    """"""
    pass

  def get_placeholder(self)->str:
    """"""
    pass

  def set_line(self, line:int, new_text:str)->None:
    """
				Sets the text for a specific `line`.
				Carets on the line will attempt to keep their visual x position.
			"""
    pass

  def get_line(self, line:int)->str:
    """
				Returns the text of a specific line.
			"""
    pass

  def get_line_with_ime(self, line:int)->str:
    """
				Returns line text as it is currently displayed, including IME composition string.
			"""
    pass

  def get_line_width(self, line:int, wrap_index:int=-1)->int:
    """
				Returns the width in pixels of the `wrap_index` on `line`.
			"""
    pass

  def get_line_height(self)->int:
    """
				Returns the maximum value of the line height among all lines.
				**Note:** The return value is influenced by `theme_item line_spacing` and `theme_item font_size`. And it will not be less than `1`.
			"""
    pass

  def get_indent_level(self, line:int)->int:
    """
				Returns the indent level of the given line. This is the number of spaces and tabs at the beginning of the line, with the tabs taking the tab size into account (see `get_tab_size`).
			"""
    pass

  def get_first_non_whitespace_column(self, line:int)->int:
    """
				Returns the first column containing a non-whitespace character on the given line. If there is only whitespace, returns the number of characters.
			"""
    pass

  def swap_lines(self, from_line:int, to_line:int)->None:
    """
				Swaps the two lines. Carets will be swapped with the lines.
			"""
    pass

  def insert_line_at(self, line:int, text:str)->None:
    """
				Inserts a new line with `text` at `line`.
			"""
    pass

  def remove_line_at(self, line:int, move_carets_down:bool=True)->None:
    """
				Removes the line of text at `line`. Carets on this line will attempt to match their previous visual x position.
				If `move_carets_down` is `true` carets will move to the next line down, otherwise carets will move up.
			"""
    pass

  def insert_text_at_caret(self, text:str, caret_index:int=-1)->None:
    """
				Insert the specified text at the caret position.
			"""
    pass

  def insert_text(self, text:str, line:int, column:int, before_selection_begin:bool=True, before_selection_end:bool=False)->None:
    """
				Inserts the `text` at `line` and `column`.
				If `before_selection_begin` is `true`, carets and selections that begin at `line` and `column` will moved to the end of the inserted text, along with all carets after it.
				If `before_selection_end` is `true`, selections that end at `line` and `column` will be extended to the end of the inserted text. These parameters can be used to insert text inside of or outside of selections.
			"""
    pass

  def remove_text(self, from_line:int, from_column:int, to_line:int, to_column:int)->None:
    """
				Removes text between the given positions.
			"""
    pass

  def get_last_unhidden_line(self)->int:
    """
				Returns the last unhidden line in the entire `TextEdit`.
			"""
    pass

  def get_next_visible_line_offset_from(self, line:int, visible_amount:int)->int:
    """
				Returns the count to the next visible line from `line` to `line + visible_amount`. Can also count backwards. For example if a `TextEdit` has 5 lines with lines 2 and 3 hidden, calling this with `line = 1, visible_amount = 1` would return 3.
			"""
    pass

  def get_next_visible_line_index_offset_from(self, line:int, wrap_index:int, visible_amount:int)->__core__.Vector2i:
    """
				Similar to `get_next_visible_line_offset_from`, but takes into account the line wrap indexes. In the returned vector, `x` is the line, `y` is the wrap index.
			"""
    pass

  def backspace(self, caret_index:int=-1)->None:
    """
				Called when the user presses the backspace key. Can be overridden with `_backspace`.
			"""
    pass

  def cut(self, caret_index:int=-1)->None:
    """
				Cut's the current selection. Can be overridden with `_cut`.
			"""
    pass

  def copy(self, caret_index:int=-1)->None:
    """
				Copies the current text selection. Can be overridden with `_copy`.
			"""
    pass

  def paste(self, caret_index:int=-1)->None:
    """
				Paste at the current location. Can be overridden with `_paste`.
			"""
    pass

  def paste_primary_clipboard(self, caret_index:int=-1)->None:
    """
				Pastes the primary clipboard.
			"""
    pass

  def start_action(self, action:int )->None:
    """
				Starts an action, will end the current action if `action` is different.
				An action will also end after a call to `end_action`, after `ProjectSettings.gui/timers/text_edit_idle_detect_sec` is triggered or a new undoable step outside the `start_action` and `end_action` calls.
			"""
    pass

  def end_action(self)->None:
    """
				Marks the end of steps in the current action started with `start_action`.
			"""
    pass

  def begin_complex_operation(self)->None:
    """
				Starts a multipart edit. All edits will be treated as one action until `end_complex_operation` is called.
			"""
    pass

  def end_complex_operation(self)->None:
    """
				Ends a multipart edit, started with `begin_complex_operation`. If called outside a complex operation, the current operation is pushed onto the undo/redo stack.
			"""
    pass

  def has_undo(self)->bool:
    """
				Returns `true` if an "undo" action is available.
			"""
    pass

  def has_redo(self)->bool:
    """
				Returns `true` if a "redo" action is available.
			"""
    pass

  def undo(self)->None:
    """
				Perform undo operation.
			"""
    pass

  def redo(self)->None:
    """
				Perform redo operation.
			"""
    pass

  def clear_undo_history(self)->None:
    """
				Clears the undo history.
			"""
    pass

  def tag_saved_version(self)->None:
    """
				Tag the current version as saved.
			"""
    pass

  def get_version(self)->int:
    """
				Returns the current version of the `TextEdit`. The version is a count of recorded operations by the undo/redo history.
			"""
    pass

  def get_saved_version(self)->int:
    """
				Returns the last tagged saved version from `tag_saved_version`.
			"""
    pass

  def set_search_text(self, search_text:str)->None:
    """
				Sets the search text. See `set_search_flags`.
			"""
    pass

  def set_search_flags(self, flags:int)->None:
    """
				Sets the search `flags`. This is used with `set_search_text` to highlight occurrences of the searched text. Search flags can be specified from the `enum SearchFlags` enum.
			"""
    pass

  def search(self, text:str, flags:int, from_line:int, from_column:int)->__core__.Vector2i:
    """
				Perform a search inside the text. Search flags can be specified in the `enum SearchFlags` enum.
				In the returned vector, `x` is the column, `y` is the line. If no results are found, both are equal to `-1`.
				
				```gdscript
				var result = search("print", SEARCH_WHOLE_WORDS, 0, 0)
				if result.x != -1:
					# Result found.
					var line_number = result.y
					var column_number = result.x
				```
				
				
			"""
    pass

  def set_tooltip_request_func(self, callback:__core__.Callable)->None:
    """
				Provide custom tooltip text. The callback method must take the following args: `hovered_word: String`.
			"""
    pass

  def get_local_mouse_pos(self)->__core__.Vector2:
    """
				Returns the local mouse position adjusted for the text direction.
			"""
    pass

  def get_word_at_pos(self, position:__core__.Vector2)->str:
    """
				Returns the word at `position`.
			"""
    pass

  def get_line_column_at_pos(self, position:__core__.Vector2i, clamp_line:bool=True, clamp_column:bool=True)->__core__.Vector2i:
    """
				Returns the line and column at the given position. In the returned vector, `x` is the column and `y` is the line.
				If `clamp_line` is `false` and `position` is below the last line, `Vector2i(-1, -1)` is returned.
				If `clamp_column` is `false` and `position` is outside the column range of the line, `Vector2i(-1, -1)` is returned.
			"""
    pass

  def get_pos_at_line_column(self, line:int, column:int)->__core__.Vector2i:
    """
				Returns the local position for the given `line` and `column`. If `x` or `y` of the returned vector equal `-1`, the position is outside of the viewable area of the control.
				**Note:** The Y position corresponds to the bottom side of the line. Use `get_rect_at_line_column` to get the top side position.
			"""
    pass

  def get_rect_at_line_column(self, line:int, column:int)->__core__.Rect2i:
    """
				Returns the local position and size for the grapheme at the given `line` and `column`. If `x` or `y` position of the returned rect equal `-1`, the position is outside of the viewable area of the control.
				**Note:** The Y position of the returned rect corresponds to the top side of the line, unlike `get_pos_at_line_column` which returns the bottom side.
			"""
    pass

  def get_minimap_line_at_pos(self, position:__core__.Vector2i)->int:
    """
				Returns the equivalent minimap line at `position`.
			"""
    pass

  def is_dragging_cursor(self)->bool:
    """
				Returns `true` if the user is dragging their mouse for scrolling, selecting, or text dragging.
			"""
    pass

  def is_mouse_over_selection(self, edges:bool, caret_index:int=-1)->bool:
    """
				Returns `true` if the mouse is over a selection. If `edges` is `true`, the edges are considered part of the selection.
			"""
    pass

  def set_caret_type(self, type:int )->None:
    """"""
    pass

  def get_caret_type(self)->int:
    """"""
    pass

  def set_caret_blink_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_caret_blink_enabled(self)->bool:
    """"""
    pass

  def set_caret_blink_interval(self, interval:float)->None:
    """"""
    pass

  def get_caret_blink_interval(self)->float:
    """"""
    pass

  def set_draw_caret_when_editable_disabled(self, enable:bool)->None:
    """"""
    pass

  def is_drawing_caret_when_editable_disabled(self)->bool:
    """"""
    pass

  def set_move_caret_on_right_click_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_move_caret_on_right_click_enabled(self)->bool:
    """"""
    pass

  def set_caret_mid_grapheme_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_caret_mid_grapheme_enabled(self)->bool:
    """"""
    pass

  def set_multiple_carets_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_multiple_carets_enabled(self)->bool:
    """"""
    pass

  def add_caret(self, line:int, column:int)->int:
    """
				Adds a new caret at the given location. Returns the index of the new caret, or `-1` if the location is invalid.
			"""
    pass

  def remove_caret(self, caret:int)->None:
    """
				Removes the given caret index.
				**Note:** This can result in adjustment of all other caret indices.
			"""
    pass

  def remove_secondary_carets(self)->None:
    """
				Removes all additional carets.
			"""
    pass

  def get_caret_count(self)->int:
    """
				Returns the number of carets in this `TextEdit`.
			"""
    pass

  def add_caret_at_carets(self, below:bool)->None:
    """
				Adds an additional caret above or below every caret. If `below` is `true` the new caret will be added below and above otherwise.
			"""
    pass

  def get_sorted_carets(self, include_ignored_carets:bool=False)->__core__.PackedInt32Array:
    """
				Returns the carets sorted by selection beginning from lowest line and column to highest (from top to bottom of text).
				If `include_ignored_carets` is `false`, carets from `multicaret_edit_ignore_caret` will be ignored.
			"""
    pass

  def collapse_carets(self, from_line:int, from_column:int, to_line:int, to_column:int, inclusive:bool=False)->None:
    """
				Collapse all carets in the given range to the `from_line` and `from_column` position.
				`inclusive` applies to both ends.
				If `is_in_mulitcaret_edit` is `true`, carets that are collapsed will be `true` for `multicaret_edit_ignore_caret`.
				`merge_overlapping_carets` will be called if any carets were collapsed.
			"""
    pass

  def merge_overlapping_carets(self)->None:
    """
				Merges any overlapping carets. Will favor the newest caret, or the caret with a selection.
				If `is_in_mulitcaret_edit` is `true`, the merge will be queued to happen at the end of the multicaret edit. See `begin_multicaret_edit` and `end_multicaret_edit`.
				**Note:** This is not called when a caret changes position but after certain actions, so it is possible to get into a state where carets overlap.
			"""
    pass

  def begin_multicaret_edit(self)->None:
    """
				Starts an edit for multiple carets. The edit must be ended with `end_multicaret_edit`. Multicaret edits can be used to edit text at multiple carets and delay merging the carets until the end, so the caret indexes aren't affected immediately. `begin_multicaret_edit` and `end_multicaret_edit` can be nested, and the merge will happen at the last `end_multicaret_edit`.
				```gdscript
				begin_complex_operation()
				begin_multicaret_edit()
				for i in range(get_caret_count()):
					if multicaret_edit_ignore_caret(i):
						continue
					# Logic here.
				end_multicaret_edit()
				end_complex_operation()
				```
			"""
    pass

  def end_multicaret_edit(self)->None:
    """
				Ends an edit for multiple carets, that was started with `begin_multicaret_edit`. If this was the last `end_multicaret_edit` and `merge_overlapping_carets` was called, carets will be merged.
			"""
    pass

  def is_in_mulitcaret_edit(self)->bool:
    """
				Returns `true` if a `begin_multicaret_edit` has been called and `end_multicaret_edit` has not yet been called.
			"""
    pass

  def multicaret_edit_ignore_caret(self, caret_index:int)->bool:
    """
				Returns `true` if the given `caret_index` should be ignored as part of a multicaret edit. See `begin_multicaret_edit` and `end_multicaret_edit`. Carets that should be ignored are ones that were part of removed text and will likely be merged at the end of the edit, or carets that were added during the edit.
				It is recommended to `continue` within a loop iterating on multiple carets if a caret should be ignored.
			"""
    pass

  def is_caret_visible(self, caret_index:int=0)->bool:
    """
				Returns `true` if the caret is visible, `false` otherwise. A caret will be considered hidden if it is outside the scrollable area when scrolling is enabled.
				**Note:** `is_caret_visible` does not account for a caret being off-screen if it is still within the scrollable area. It will return `true` even if the caret is off-screen as long as it meets `TextEdit`'s own conditions for being visible. This includes uses of `scroll_fit_content_width` and `scroll_fit_content_height` that cause the `TextEdit` to expand beyond the viewport's bounds.
			"""
    pass

  def get_caret_draw_pos(self, caret_index:int=0)->__core__.Vector2:
    """
				Returns the caret pixel draw position.
			"""
    pass

  def set_caret_line(self, line:int, adjust_viewport:bool=True, can_be_hidden:bool=True, wrap_index:int=0, caret_index:int=0)->None:
    """
				Moves the caret to the specified `line` index. The caret column will be moved to the same visual position it was at the last time `set_caret_column` was called, or clamped to the end of the line.
				If `adjust_viewport` is `true`, the viewport will center at the caret position after the move occurs.
				If `can_be_hidden` is `true`, the specified `line` can be hidden.
				If `wrap_index` is `-1`, the caret column will be clamped to the `line`'s length. If `wrap_index` is greater than `-1`, the column will be moved to attempt to match the visual x position on the line's `wrap_index` to the position from the last time `set_caret_column` was called.
				**Note:** If supporting multiple carets this will not check for any overlap. See `merge_overlapping_carets`.
			"""
    pass

  def get_caret_line(self, caret_index:int=0)->int:
    """
				Returns the line the editing caret is on.
			"""
    pass

  def set_caret_column(self, column:int, adjust_viewport:bool=True, caret_index:int=0)->None:
    """
				Moves the caret to the specified `column` index.
				If `adjust_viewport` is `true`, the viewport will center at the caret position after the move occurs.
				**Note:** If supporting multiple carets this will not check for any overlap. See `merge_overlapping_carets`.
			"""
    pass

  def get_caret_column(self, caret_index:int=0)->int:
    """
				Returns the column the editing caret is at.
			"""
    pass

  def get_caret_wrap_index(self, caret_index:int=0)->int:
    """
				Returns the wrap index the editing caret is on.
			"""
    pass

  def get_word_under_caret(self, caret_index:int=-1)->str:
    """
				Returns a `String` text with the word under the caret's location.
			"""
    pass

  def set_use_default_word_separators(self, enabled:bool)->None:
    """"""
    pass

  def is_default_word_separators_enabled(self)->bool:
    """"""
    pass

  def set_use_custom_word_separators(self, enabled:bool)->None:
    """"""
    pass

  def is_custom_word_separators_enabled(self)->bool:
    """"""
    pass

  def set_custom_word_separators(self, custom_word_separators:str)->None:
    """"""
    pass

  def get_custom_word_separators(self)->str:
    """"""
    pass

  def set_selecting_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_selecting_enabled(self)->bool:
    """"""
    pass

  def set_deselect_on_focus_loss_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass

  def set_drag_and_drop_selection_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass

  def set_selection_mode(self, mode:int )->None:
    """
				Sets the current selection mode.
			"""
    pass

  def get_selection_mode(self)->int:
    """
				Returns the current selection mode.
			"""
    pass

  def select_all(self)->None:
    """
				Select all the text.
				If `selecting_enabled` is `false`, no selection will occur.
			"""
    pass

  def select_word_under_caret(self, caret_index:int=-1)->None:
    """
				Selects the word under the caret.
			"""
    pass

  def add_selection_for_next_occurrence(self)->None:
    """
				Adds a selection and a caret for the next occurrence of the current selection. If there is no active selection, selects word under caret.
			"""
    pass

  def skip_selection_for_next_occurrence(self)->None:
    """
				Moves a selection and a caret for the next occurrence of the current selection. If there is no active selection, moves to the next occurrence of the word under caret.
			"""
    pass

  def select(self, origin_line:int, origin_column:int, caret_line:int, caret_column:int, caret_index:int=0)->None:
    """
				Selects text from `origin_line` and `origin_column` to `caret_line` and `caret_column` for the given `caret_index`. This moves the selection origin and the caret. If the positions are the same, the selection will be deselected.
				If `selecting_enabled` is `false`, no selection will occur.
				**Note:** If supporting multiple carets this will not check for any overlap. See `merge_overlapping_carets`.
			"""
    pass

  def has_selection(self, caret_index:int=-1)->bool:
    """
				Returns `true` if the user has selected text.
			"""
    pass

  def get_selected_text(self, caret_index:int=-1)->str:
    """
				Returns the text inside the selection of a caret, or all the carets if `caret_index` is its default value `-1`.
			"""
    pass

  def get_selection_at_line_column(self, line:int, column:int, include_edges:bool=True, only_selections:bool=True)->int:
    """
				Returns the caret index of the selection at the given `line` and `column`, or `-1` if there is none.
				If `include_edges` is `false`, the position must be inside the selection and not at either end. If `only_selections` is `false`, carets without a selection will also be considered.
			"""
    pass

  def get_line_ranges_from_carets(self, only_selections:bool=False, merge_adjacent:bool=True)->typedarray::Vector2i:
    """
				Returns an `Array` of line ranges where `x` is the first line and `y` is the last line. All lines within these ranges will have a caret on them or be part of a selection. Each line will only be part of one line range, even if it has multiple carets on it.
				If a selection's end column (`get_selection_to_column`) is at column `0`, that line will not be included. If a selection begins on the line after another selection ends and `merge_adjacent` is `true`, or they begin and end on the same line, one line range will include both selections.
			"""
    pass

  def get_selection_origin_line(self, caret_index:int=0)->int:
    """
				Returns the origin line of the selection. This is the opposite end from the caret.
			"""
    pass

  def get_selection_origin_column(self, caret_index:int=0)->int:
    """
				Returns the origin column of the selection. This is the opposite end from the caret.
			"""
    pass

  def set_selection_origin_line(self, line:int, can_be_hidden:bool=True, wrap_index:int=-1, caret_index:int=0)->None:
    """
				Sets the selection origin line to the `line` for the given `caret_index`. If the selection origin is moved to the caret position, the selection will deselect.
				If `can_be_hidden` is `false`, The line will be set to the nearest unhidden line below or above.
				If `wrap_index` is `-1`, the selection origin column will be clamped to the `line`'s length. If `wrap_index` is greater than `-1`, the column will be moved to attempt to match the visual x position on the line's `wrap_index` to the position from the last time `set_selection_origin_column` or `select` was called.
			"""
    pass

  def set_selection_origin_column(self, column:int, caret_index:int=0)->None:
    """
				Sets the selection origin column to the `column` for the given `caret_index`. If the selection origin is moved to the caret position, the selection will deselect.
			"""
    pass

  def get_selection_from_line(self, caret_index:int=0)->int:
    """
				Returns the selection begin line. Returns the caret line if there is no selection.
			"""
    pass

  def get_selection_from_column(self, caret_index:int=0)->int:
    """
				Returns the selection begin column. Returns the caret column if there is no selection.
			"""
    pass

  def get_selection_to_line(self, caret_index:int=0)->int:
    """
				Returns the selection end line. Returns the caret line if there is no selection.
			"""
    pass

  def get_selection_to_column(self, caret_index:int=0)->int:
    """
				Returns the selection end column. Returns the caret column if there is no selection.
			"""
    pass

  def is_caret_after_selection_origin(self, caret_index:int=0)->bool:
    """
				Returns `true` if the caret of the selection is after the selection origin. This can be used to determine the direction of the selection.
			"""
    pass

  def deselect(self, caret_index:int=-1)->None:
    """
				Deselects the current selection.
			"""
    pass

  def delete_selection(self, caret_index:int=-1)->None:
    """
				Deletes the selected text.
			"""
    pass

  def set_line_wrapping_mode(self, mode:int )->None:
    """"""
    pass

  def get_line_wrapping_mode(self)->int:
    """"""
    pass

  def set_autowrap_mode(self, autowrap_mode:int )->None:
    """"""
    pass

  def get_autowrap_mode(self)->int:
    """"""
    pass

  def is_line_wrapped(self, line:int)->bool:
    """
				Returns if the given line is wrapped.
			"""
    pass

  def get_line_wrap_count(self, line:int)->int:
    """
				Returns the number of times the given line is wrapped.
			"""
    pass

  def get_line_wrap_index_at_column(self, line:int, column:int)->int:
    """
				Returns the wrap index of the given column on the given line. This ranges from `0` to `get_line_wrap_count`.
			"""
    pass

  def get_line_wrapped_text(self, line:int)->__core__.PackedStringArray:
    """
				Returns an array of `String`s representing each wrapped index.
			"""
    pass

  def set_smooth_scroll_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_smooth_scroll_enabled(self)->bool:
    """"""
    pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar:
    """
				Returns the `VScrollBar` of the `TextEdit`.
			"""
    pass

  def get_h_scroll_bar(self)->__hscrollbar__.HScrollBar:
    """
				Returns the `HScrollBar` used by `TextEdit`.
			"""
    pass

  def set_v_scroll(self, value:float)->None:
    """"""
    pass

  def get_v_scroll(self)->float:
    """"""
    pass

  def set_h_scroll(self, value:int)->None:
    """"""
    pass

  def get_h_scroll(self)->int:
    """"""
    pass

  def set_scroll_past_end_of_file_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_scroll_past_end_of_file_enabled(self)->bool:
    """"""
    pass

  def set_v_scroll_speed(self, speed:float)->None:
    """"""
    pass

  def get_v_scroll_speed(self)->float:
    """"""
    pass

  def set_fit_content_height_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_fit_content_height_enabled(self)->bool:
    """"""
    pass

  def set_fit_content_width_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_fit_content_width_enabled(self)->bool:
    """"""
    pass

  def get_scroll_pos_for_line(self, line:int, wrap_index:int=0)->float:
    """
				Returns the scroll position for `wrap_index` of `line`.
			"""
    pass

  def set_line_as_first_visible(self, line:int, wrap_index:int=0)->None:
    """
				Positions the `wrap_index` of `line` at the top of the viewport.
			"""
    pass

  def get_first_visible_line(self)->int:
    """
				Returns the first visible line.
			"""
    pass

  def set_line_as_center_visible(self, line:int, wrap_index:int=0)->None:
    """
				Positions the `wrap_index` of `line` at the center of the viewport.
			"""
    pass

  def set_line_as_last_visible(self, line:int, wrap_index:int=0)->None:
    """
				Positions the `wrap_index` of `line` at the bottom of the viewport.
			"""
    pass

  def get_last_full_visible_line(self)->int:
    """
				Returns the last visible line. Use `get_last_full_visible_line_wrap_index` for the wrap index.
			"""
    pass

  def get_last_full_visible_line_wrap_index(self)->int:
    """
				Returns the last visible wrap index of the last visible line.
			"""
    pass

  def get_visible_line_count(self)->int:
    """
				Returns the number of lines that can visually fit, rounded down, based on this control's height.
			"""
    pass

  def get_visible_line_count_in_range(self, from_line:int, to_line:int)->int:
    """
				Returns the total number of lines between `from_line` and `to_line` (inclusive) in the text. This includes wrapped lines and excludes folded lines. If the range covers all lines it is equivalent to `get_total_visible_line_count`.
			"""
    pass

  def get_total_visible_line_count(self)->int:
    """
				Returns the total number of lines in the text. This includes wrapped lines and excludes folded lines. If `wrap_mode` is set to `constant LINE_WRAPPING_NONE` and no lines are folded (see `CodeEdit.is_line_folded`) then this is equivalent to `get_line_count`. See `get_visible_line_count_in_range` for a limited range of lines.
			"""
    pass

  def adjust_viewport_to_caret(self, caret_index:int=0)->None:
    """
				Adjust the viewport so the caret is visible.
			"""
    pass

  def center_viewport_to_caret(self, caret_index:int=0)->None:
    """
				Centers the viewport on the line the editing caret is at. This also resets the `scroll_horizontal` value to `0`.
			"""
    pass

  def set_draw_minimap(self, enabled:bool)->None:
    """"""
    pass

  def is_drawing_minimap(self)->bool:
    """"""
    pass

  def set_minimap_width(self, width:int)->None:
    """"""
    pass

  def get_minimap_width(self)->int:
    """"""
    pass

  def get_minimap_visible_lines(self)->int:
    """
				Returns the number of lines that may be drawn on the minimap.
			"""
    pass

  def add_gutter(self, at:int=-1)->None:
    """
				Register a new gutter to this `TextEdit`. Use `at` to have a specific gutter order. A value of `-1` appends the gutter to the right.
			"""
    pass

  def remove_gutter(self, gutter:int)->None:
    """
				Removes the gutter at the given index.
			"""
    pass

  def get_gutter_count(self)->int:
    """
				Returns the number of gutters registered.
			"""
    pass

  def set_gutter_name(self, gutter:int, name:str)->None:
    """
				Sets the name of the gutter at the given index.
			"""
    pass

  def get_gutter_name(self, gutter:int)->str:
    """
				Returns the name of the gutter at the given index.
			"""
    pass

  def set_gutter_type(self, gutter:int, type:int )->None:
    """
				Sets the type of gutter at the given index. Gutters can contain icons, text, or custom visuals.
			"""
    pass

  def get_gutter_type(self, gutter:int)->int:
    """
				Returns the type of the gutter at the given index. Gutters can contain icons, text, or custom visuals.
			"""
    pass

  def set_gutter_width(self, gutter:int, width:int)->None:
    """
				Set the width of the gutter at the given index.
			"""
    pass

  def get_gutter_width(self, gutter:int)->int:
    """
				Returns the width of the gutter at the given index.
			"""
    pass

  def set_gutter_draw(self, gutter:int, draw:bool)->None:
    """
				If `true`, the gutter at the given index is drawn. The gutter type (`set_gutter_type`) determines how it is drawn. See `is_gutter_drawn`.
			"""
    pass

  def is_gutter_drawn(self, gutter:int)->bool:
    """
				Returns `true` if the gutter at the given index is currently drawn. See `set_gutter_draw`.
			"""
    pass

  def set_gutter_clickable(self, gutter:int, clickable:bool)->None:
    """
				If `true`, the mouse cursor will change to a pointing hand (`constant Control.CURSOR_POINTING_HAND`) when hovering over the gutter at the given index. See `is_gutter_clickable` and `set_line_gutter_clickable`.
			"""
    pass

  def is_gutter_clickable(self, gutter:int)->bool:
    """
				Returns `true` if the gutter at the given index is clickable. See `set_gutter_clickable`.
			"""
    pass

  def set_gutter_overwritable(self, gutter:int, overwritable:bool)->None:
    """
				If `true`, the line data of the gutter at the given index can be overridden when using `merge_gutters`. See `is_gutter_overwritable`.
			"""
    pass

  def is_gutter_overwritable(self, gutter:int)->bool:
    """
				Returns `true` if the gutter at the given index is overwritable. See `set_gutter_overwritable`.
			"""
    pass

  def merge_gutters(self, from_line:int, to_line:int)->None:
    """
				Merge the gutters from `from_line` into `to_line`. Only overwritable gutters will be copied. See `set_gutter_overwritable`.
			"""
    pass

  def set_gutter_custom_draw(self, column:int, draw_callback:__core__.Callable)->None:
    """
				Set a custom draw callback for the gutter at the given index. `draw_callback` must take the following arguments: A line index `int`, a gutter index `int`, and an area `Rect2`. This callback only works when the gutter type is `constant GUTTER_TYPE_CUSTOM` (see `set_gutter_type`).
			"""
    pass

  def get_total_gutter_width(self)->int:
    """
				Returns the total width of all gutters and internal padding.
			"""
    pass

  def set_line_gutter_metadata(self, line:int, gutter:int, metadata:Any)->None:
    """
				Sets the metadata for `gutter` on `line` to `metadata`.
			"""
    pass

  def get_line_gutter_metadata(self, line:int, gutter:int)->Any:
    """
				Returns the metadata currently in `gutter` at `line`.
			"""
    pass

  def set_line_gutter_text(self, line:int, gutter:int, text:str)->None:
    """
				Sets the text for `gutter` on `line` to `text`. This only works when the gutter type is `constant GUTTER_TYPE_STRING` (see `set_gutter_type`).
			"""
    pass

  def get_line_gutter_text(self, line:int, gutter:int)->str:
    """
				Returns the text currently in `gutter` at `line`. This only works when the gutter type is `constant GUTTER_TYPE_STRING` (see `set_gutter_type`).
			"""
    pass

  def set_line_gutter_icon(self, line:int, gutter:int, icon:__texture2d__.Texture2D)->None:
    """
				Sets the icon for `gutter` on `line` to `icon`. This only works when the gutter type is `constant GUTTER_TYPE_ICON` (see `set_gutter_type`).
			"""
    pass

  def get_line_gutter_icon(self, line:int, gutter:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the icon currently in `gutter` at `line`. This only works when the gutter type is `constant GUTTER_TYPE_ICON` (see `set_gutter_type`).
			"""
    pass

  def set_line_gutter_item_color(self, line:int, gutter:int, color:__core__.Color)->None:
    """
				Sets the color for `gutter` on `line` to `color`.
			"""
    pass

  def get_line_gutter_item_color(self, line:int, gutter:int)->__core__.Color:
    """
				Returns the color currently in `gutter` at `line`.
			"""
    pass

  def set_line_gutter_clickable(self, line:int, gutter:int, clickable:bool)->None:
    """
				If `clickable` is `true`, makes the `gutter` on the given `line` clickable. This is like `set_gutter_clickable`, but for a single line. If `is_gutter_clickable` is `true`, this will not have any effect. See `is_line_gutter_clickable` and `signal gutter_clicked`.
			"""
    pass

  def is_line_gutter_clickable(self, line:int, gutter:int)->bool:
    """
				Returns `true` if the gutter at the given index on the given line is clickable. See `set_line_gutter_clickable`.
			"""
    pass

  def set_line_background_color(self, line:int, color:__core__.Color)->None:
    """
				Sets the custom background color of the given line. If transparent, this color is applied on top of the default background color (See `theme_item background_color`). If set to `Color(0, 0, 0, 0)`, no additional color is applied.
			"""
    pass

  def get_line_background_color(self, line:int)->__core__.Color:
    """
				Returns the custom background color of the given line. If no color is set, returns `Color(0, 0, 0, 0)`.
			"""
    pass

  def set_syntax_highlighter(self, syntax_highlighter:__syntaxhighlighter__.SyntaxHighlighter)->None:
    """"""
    pass

  def get_syntax_highlighter(self)->__codehighlighter__.CodeHighlighter|__editorsyntaxhighlighter__.EditorSyntaxHighlighter|__syntaxhighlighter__.SyntaxHighlighter|__gdscriptsyntaxhighlighter__.GDScriptSyntaxHighlighter:
    """"""
    pass

  def set_highlight_current_line(self, enabled:bool)->None:
    """"""
    pass

  def is_highlight_current_line_enabled(self)->bool:
    """"""
    pass

  def set_highlight_all_occurrences(self, enabled:bool)->None:
    """"""
    pass

  def is_highlight_all_occurrences_enabled(self)->bool:
    """"""
    pass

  def get_draw_control_chars(self)->bool:
    """"""
    pass

  def set_draw_control_chars(self, enabled:bool)->None:
    """"""
    pass

  def set_draw_tabs(self, enabled:bool)->None:
    """"""
    pass

  def is_drawing_tabs(self)->bool:
    """"""
    pass

  def set_draw_spaces(self, enabled:bool)->None:
    """"""
    pass

  def is_drawing_spaces(self)->bool:
    """"""
    pass

  def get_menu(self)->__popupmenu__.PopupMenu:
    """
				Returns the `PopupMenu` of this `TextEdit`. By default, this menu is displayed when right-clicking on the `TextEdit`.
				You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see `enum MenuItems`). For example:
				
				```gdscript
				func _ready():
					var menu = get_menu()
					# Remove all items after "Redo".
					menu.item_count = menu.get_item_index(MENU_REDO) + 1
					# Add custom items.
					menu.add_separator()
					menu.add_item("Insert Date", MENU_MAX + 1)
					# Connect callback.
					menu.id_pressed.connect(_on_item_pressed)

				func _on_item_pressed(id):
					if id == MENU_MAX + 1:
						insert_text_at_caret(Time.get_date_string_from_system())
				```
				
				
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			"""
    pass

  def is_menu_visible(self)->bool:
    """
				Returns `true` if the menu is visible. Use this instead of `get_menu().visible` to improve performance (so the creation of the menu is avoided). See `get_menu`.
			"""
    pass

  def menu_option(self, option:int)->None:
    """
				Executes a given action as defined in the `enum MenuItems` enum.
			"""
    pass

  def adjust_carets_after_edit(self, caret:int, from_line:int, from_col:int, to_line:int, to_col:int)->None:
    """
				This method does nothing.
			"""
    pass

  def get_caret_index_edit_order(self)->__core__.PackedInt32Array:
    """
				Returns a list of caret indexes in their edit order, this done from bottom to top. Edit order refers to the way actions such as `insert_text_at_caret` are applied.
			"""
    pass

  def get_selection_line(self, caret_index:int=0)->int:
    """
				Returns the original start line of the selection.
			"""
    pass

  def get_selection_column(self, caret_index:int=0)->int:
    """
				Returns the original start column of the selection.
			"""
    pass


