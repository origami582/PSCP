from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.Font as __font__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.FontVariation as __fontvariation__
import py4godot.classes.TriangleMesh as __trianglemesh__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__


class DrawFlags:
  FLAG_SHADED:int = 0
  FLAG_DOUBLE_SIDED:int = 1
  FLAG_DISABLE_DEPTH_TEST:int = 2
  FLAG_FIXED_SIZE:int = 3
  FLAG_MAX:int = 4
class AlphaCutMode:
  ALPHA_CUT_DISABLED:int = 0
  ALPHA_CUT_DISCARD:int = 1
  ALPHA_CUT_OPAQUE_PREPASS:int = 2
  ALPHA_CUT_HASH:int = 3


class Label3D(__geometryinstance3d__.GeometryInstance3D):
  """
		A node for displaying plain text in 3D space. By adjusting various properties of this node, you can configure things such as the text's appearance and whether it always faces the camera.
	"""

  @staticmethod
  def constructor()->Label3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Label3D:pass


  @property
  def pixel_size(self)->float:
    """"""
    pass
  @pixel_size.setter
  def pixel_size(self,  value:float)->None:
    """"""
    pass
  @property
  def offset(self)->__core__.Vector2:
    """"""
    pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def billboard(self)->int:
    """"""
    pass
  @billboard.setter
  def billboard(self,  value:int)->None:
    """"""
    pass
  @property
  def shaded(self)->bool:
    """"""
    pass
  @shaded.setter
  def shaded(self,  value:bool)->None:
    """"""
    pass
  @property
  def double_sided(self)->bool:
    """"""
    pass
  @double_sided.setter
  def double_sided(self,  value:bool)->None:
    """"""
    pass
  @property
  def no_depth_test(self)->bool:
    """"""
    pass
  @no_depth_test.setter
  def no_depth_test(self,  value:bool)->None:
    """"""
    pass
  @property
  def fixed_size(self)->bool:
    """"""
    pass
  @fixed_size.setter
  def fixed_size(self,  value:bool)->None:
    """"""
    pass
  @property
  def alpha_cut(self)->int:
    """"""
    pass
  @alpha_cut.setter
  def alpha_cut(self,  value:int)->None:
    """"""
    pass
  @property
  def alpha_scissor_threshold(self)->float:
    """"""
    pass
  @alpha_scissor_threshold.setter
  def alpha_scissor_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def alpha_hash_scale(self)->float:
    """"""
    pass
  @alpha_hash_scale.setter
  def alpha_hash_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def alpha_antialiasing_mode(self)->int:
    """"""
    pass
  @alpha_antialiasing_mode.setter
  def alpha_antialiasing_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def alpha_antialiasing_edge(self)->float:
    """"""
    pass
  @alpha_antialiasing_edge.setter
  def alpha_antialiasing_edge(self,  value:float)->None:
    """"""
    pass
  @property
  def texture_filter(self)->int:
    """"""
    pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None:
    """"""
    pass
  @property
  def render_priority(self)->int:
    """"""
    pass
  @render_priority.setter
  def render_priority(self,  value:int)->None:
    """"""
    pass
  @property
  def outline_render_priority(self)->int:
    """"""
    pass
  @outline_render_priority.setter
  def outline_render_priority(self,  value:int)->None:
    """"""
    pass
  @property
  def modulate(self)->__core__.Color:
    """"""
    pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def outline_modulate(self)->__core__.Color:
    """"""
    pass
  @outline_modulate.setter
  def outline_modulate(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def text(self)->str:
    """"""
    pass
  @text.setter
  def text(self,  value:str)->None:
    """"""
    pass
  @property
  def font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass
  @font.setter
  def font(self,  value:__font__.Font)->None:
    """"""
    pass
  @property
  def font_size(self)->int:
    """"""
    pass
  @font_size.setter
  def font_size(self,  value:int)->None:
    """"""
    pass
  @property
  def outline_size(self)->int:
    """"""
    pass
  @outline_size.setter
  def outline_size(self,  value:int)->None:
    """"""
    pass
  @property
  def horizontal_alignment(self)->int:
    """"""
    pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def vertical_alignment(self)->int:
    """"""
    pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def uppercase(self)->bool:
    """"""
    pass
  @uppercase.setter
  def uppercase(self,  value:bool)->None:
    """"""
    pass
  @property
  def line_spacing(self)->float:
    """"""
    pass
  @line_spacing.setter
  def line_spacing(self,  value:float)->None:
    """"""
    pass
  @property
  def autowrap_mode(self)->int:
    """"""
    pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def justification_flags(self)->int:
    """"""
    pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None:
    """"""
    pass
  @property
  def width(self)->float:
    """"""
    pass
  @width.setter
  def width(self,  value:float)->None:
    """"""
    pass
  @property
  def text_direction(self)->int:
    """"""
    pass
  @text_direction.setter
  def text_direction(self,  value:int)->None:
    """"""
    pass
  @property
  def language(self)->str:
    """"""
    pass
  @language.setter
  def language(self,  value:str)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override(self)->int:
    """"""
    pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def set_vertical_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_vertical_alignment(self)->int:
    """"""
    pass

  def set_modulate(self, modulate:__core__.Color)->None:
    """"""
    pass

  def get_modulate(self)->__core__.Color:
    """"""
    pass

  def set_outline_modulate(self, modulate:__core__.Color)->None:
    """"""
    pass

  def get_outline_modulate(self)->__core__.Color:
    """"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def set_text_direction(self, direction:int )->None:
    """"""
    pass

  def get_text_direction(self)->int:
    """"""
    pass

  def set_language(self, language:str)->None:
    """"""
    pass

  def get_language(self)->str:
    """"""
    pass

  def set_structured_text_bidi_override(self, parser:int )->None:
    """"""
    pass

  def get_structured_text_bidi_override(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None:
    """"""
    pass

  def get_structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass

  def set_uppercase(self, enable:bool)->None:
    """"""
    pass

  def is_uppercase(self)->bool:
    """"""
    pass

  def set_render_priority(self, priority:int)->None:
    """"""
    pass

  def get_render_priority(self)->int:
    """"""
    pass

  def set_outline_render_priority(self, priority:int)->None:
    """"""
    pass

  def get_outline_render_priority(self)->int:
    """"""
    pass

  def set_font(self, font:__font__.Font)->None:
    """"""
    pass

  def get_font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass

  def set_font_size(self, size:int)->None:
    """"""
    pass

  def get_font_size(self)->int:
    """"""
    pass

  def set_outline_size(self, outline_size:int)->None:
    """"""
    pass

  def get_outline_size(self)->int:
    """"""
    pass

  def set_line_spacing(self, line_spacing:float)->None:
    """"""
    pass

  def get_line_spacing(self)->float:
    """"""
    pass

  def set_autowrap_mode(self, autowrap_mode:int )->None:
    """"""
    pass

  def get_autowrap_mode(self)->int:
    """"""
    pass

  def set_justification_flags(self, justification_flags:int)->None:
    """"""
    pass

  def get_justification_flags(self)->int:
    """"""
    pass

  def set_width(self, width:float)->None:
    """"""
    pass

  def get_width(self)->float:
    """"""
    pass

  def set_pixel_size(self, pixel_size:float)->None:
    """"""
    pass

  def get_pixel_size(self)->float:
    """"""
    pass

  def set_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_draw_flag(self, flag:int , enabled:bool)->None:
    """
				If `true`, the specified `flag` will be enabled.
			"""
    pass

  def get_draw_flag(self, flag:int )->bool:
    """
				Returns the value of the specified flag.
			"""
    pass

  def set_billboard_mode(self, mode:int )->None:
    """"""
    pass

  def get_billboard_mode(self)->int:
    """"""
    pass

  def set_alpha_cut_mode(self, mode:int )->None:
    """"""
    pass

  def get_alpha_cut_mode(self)->int:
    """"""
    pass

  def set_alpha_scissor_threshold(self, threshold:float)->None:
    """"""
    pass

  def get_alpha_scissor_threshold(self)->float:
    """"""
    pass

  def set_alpha_hash_scale(self, threshold:float)->None:
    """"""
    pass

  def get_alpha_hash_scale(self)->float:
    """"""
    pass

  def set_alpha_antialiasing(self, alpha_aa:int )->None:
    """"""
    pass

  def get_alpha_antialiasing(self)->int:
    """"""
    pass

  def set_alpha_antialiasing_edge(self, edge:float)->None:
    """"""
    pass

  def get_alpha_antialiasing_edge(self)->float:
    """"""
    pass

  def set_texture_filter(self, mode:int )->None:
    """"""
    pass

  def get_texture_filter(self)->int:
    """"""
    pass

  def generate_triangle_mesh(self)->__trianglemesh__.TriangleMesh:
    """
				Returns a `TriangleMesh` with the label's vertices following its current configuration (such as its `pixel_size`).
			"""
    pass


