from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.r as __r__
import py4godot.classes.SceneReplicationConfig as __scenereplicationconfig__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.N as __n__
import py4godot.classes.h as __h__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.y as __y__
import py4godot.classes.P as __p__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.A as __a__
import py4godot.classes.Resource as __resource__
import py4godot.classes.T as __t__


class ReplicationMode:
  REPLICATION_MODE_NEVER:int = 0
  REPLICATION_MODE_ALWAYS:int = 1
  REPLICATION_MODE_ON_CHANGE:int = 2


class SceneReplicationConfig(__resource__.Resource):
  """"""

  @staticmethod
  def constructor()->SceneReplicationConfig:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneReplicationConfig:pass


  def get_properties(self)->typedarray::NodePath:
    """"""
    pass

  def add_property(self, path:__core__.NodePath|str, index:int=-1)->None:
    """"""
    pass

  def has_property(self, path:__core__.NodePath|str)->bool:
    """"""
    pass

  def remove_property(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def property_get_index(self, path:__core__.NodePath|str)->int:
    """"""
    pass

  def property_get_spawn(self, path:__core__.NodePath|str)->bool:
    """"""
    pass

  def property_set_spawn(self, path:__core__.NodePath|str, enabled:bool)->None:
    """"""
    pass

  def property_get_replication_mode(self, path:__core__.NodePath|str)->int:
    """"""
    pass

  def property_set_replication_mode(self, path:__core__.NodePath|str, mode:int )->None:
    """"""
    pass

  def property_get_sync(self, path:__core__.NodePath|str)->bool:
    """"""
    pass

  def property_set_sync(self, path:__core__.NodePath|str, enabled:bool)->None:
    """"""
    pass

  def property_get_watch(self, path:__core__.NodePath|str)->bool:
    """"""
    pass

  def property_set_watch(self, path:__core__.NodePath|str, enabled:bool)->None:
    """"""
    pass


