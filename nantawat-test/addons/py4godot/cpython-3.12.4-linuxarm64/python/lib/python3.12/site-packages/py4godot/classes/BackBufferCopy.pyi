from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.BackBufferCopy as __backbuffercopy__


class CopyMode:
  COPY_MODE_DISABLED:int = 0
  COPY_MODE_RECT:int = 1
  COPY_MODE_VIEWPORT:int = 2


class BackBufferCopy(__node2d__.Node2D):
  """
		Node for back-buffering the currently-displayed screen. The region defined in the `BackBufferCopy` node is buffered with the content of the screen it covers, or the entire screen according to the `copy_mode`. It can be accessed in shader scripts using the screen texture (i.e. a uniform sampler with `hint_screen_texture`).
		**Note:** Since this node inherits from `Node2D` (and not `Control`), anchors and margins won't apply to child `Control`-derived nodes. This can be problematic when resizing the window. To avoid this, add `Control`-derived nodes as _siblings_ to the `BackBufferCopy` node instead of adding them as children.
	"""

  @staticmethod
  def constructor()->BackBufferCopy:pass



  @staticmethod
  def cast(other:__object__.Object)->BackBufferCopy:pass


  @property
  def copy_mode(self)->int:
    """"""
    pass
  @copy_mode.setter
  def copy_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def rect(self)->__core__.Rect2:
    """"""
    pass
  @rect.setter
  def rect(self,  value:__core__.Rect2)->None:
    """"""
    pass
  def set_rect(self, rect:__core__.Rect2)->None:
    """"""
    pass

  def get_rect(self)->__core__.Rect2:
    """"""
    pass

  def set_copy_mode(self, copy_mode:int )->None:
    """"""
    pass

  def get_copy_mode(self)->int:
    """"""
    pass


