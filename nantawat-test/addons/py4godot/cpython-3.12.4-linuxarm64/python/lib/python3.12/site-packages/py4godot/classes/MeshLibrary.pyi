from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.NavigationMesh as __navigationmesh__
import py4godot.classes.SphereMesh as __spheremesh__



class MeshLibrary(__resource__.Resource):
  """
		A library of meshes. Contains a list of `Mesh` resources, each with a name and ID. Each item can also include collision and navigation shapes. This resource is used in `GridMap`.
	"""

  @staticmethod
  def constructor()->MeshLibrary:pass



  @staticmethod
  def cast(other:__object__.Object)->MeshLibrary:pass


  def create_item(self, id:int)->None:
    """
				Creates a new item in the library with the given ID.
				You can get an unused ID from `get_last_unused_item_id`.
			"""
    pass

  def set_item_name(self, id:int, name:str)->None:
    """
				Sets the item's name.
				This name is shown in the editor. It can also be used to look up the item later using `find_item_by_name`.
			"""
    pass

  def set_item_mesh(self, id:int, mesh:__mesh__.Mesh)->None:
    """
				Sets the item's mesh.
			"""
    pass

  def set_item_mesh_transform(self, id:int, mesh_transform:__core__.Transform3D)->None:
    """
				Sets the transform to apply to the item's mesh.
			"""
    pass

  def set_item_mesh_cast_shadow(self, id:int, shadow_casting_setting:int )->None:
    """
				Sets the item's shadow casting mode to `shadow_casting_setting`.
			"""
    pass

  def set_item_navigation_mesh(self, id:int, navigation_mesh:__navigationmesh__.NavigationMesh)->None:
    """
				Sets the item's navigation mesh.
			"""
    pass

  def set_item_navigation_mesh_transform(self, id:int, navigation_mesh:__core__.Transform3D)->None:
    """
				Sets the transform to apply to the item's navigation mesh.
			"""
    pass

  def set_item_navigation_layers(self, id:int, navigation_layers:int)->None:
    """
				Sets the item's navigation layers bitmask.
			"""
    pass

  def set_item_shapes(self, id:int, shapes:__core__.Array)->None:
    """
				Sets an item's collision shapes.
				The array should consist of `Shape3D` objects, each followed by a `Transform3D` that will be applied to it. For shapes that should not have a transform, use `constant Transform3D.IDENTITY`.
			"""
    pass

  def set_item_preview(self, id:int, texture:__texture2d__.Texture2D)->None:
    """
				Sets a texture to use as the item's preview icon in the editor.
			"""
    pass

  def get_item_name(self, id:int)->str:
    """
				Returns the item's name.
			"""
    pass

  def get_item_mesh(self, id:int)->__immediatemesh__.ImmediateMesh|__primitivemesh__.PrimitiveMesh|__torusmesh__.TorusMesh|__capsulemesh__.CapsuleMesh|__textmesh__.TextMesh|__planemesh__.PlaneMesh|__tubetrailmesh__.TubeTrailMesh|__quadmesh__.QuadMesh|__boxmesh__.BoxMesh|__prismmesh__.PrismMesh|__arraymesh__.ArrayMesh|__cylindermesh__.CylinderMesh|__ribbontrailmesh__.RibbonTrailMesh|__mesh__.Mesh|__placeholdermesh__.PlaceholderMesh|__spheremesh__.SphereMesh|__pointmesh__.PointMesh:
    """
				Returns the item's mesh.
			"""
    pass

  def get_item_mesh_transform(self, id:int)->__core__.Transform3D:
    """
				Returns the transform applied to the item's mesh.
			"""
    pass

  def get_item_mesh_cast_shadow(self, id:int)->int:
    """
				Returns the item's shadow casting mode.
			"""
    pass

  def get_item_navigation_mesh(self, id:int)->__navigationmesh__.NavigationMesh:
    """
				Returns the item's navigation mesh.
			"""
    pass

  def get_item_navigation_mesh_transform(self, id:int)->__core__.Transform3D:
    """
				Returns the transform applied to the item's navigation mesh.
			"""
    pass

  def get_item_navigation_layers(self, id:int)->int:
    """
				Returns the item's navigation layers bitmask.
			"""
    pass

  def get_item_shapes(self, id:int)->__core__.Array:
    """
				Returns an item's collision shapes.
				The array consists of each `Shape3D` followed by its `Transform3D`.
			"""
    pass

  def get_item_preview(self, id:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				When running in the editor, returns a generated item preview (a 3D rendering in isometric perspective). When used in a running project, returns the manually-defined item preview which can be set using `set_item_preview`. Returns an empty `Texture2D` if no preview was manually set in a running project.
			"""
    pass

  def remove_item(self, id:int)->None:
    """
				Removes the item.
			"""
    pass

  def find_item_by_name(self, name:str)->int:
    """
				Returns the first item with the given name, or `-1` if no item is found.
			"""
    pass

  def clear(self)->None:
    """
				Clears the library.
			"""
    pass

  def get_item_list(self)->__core__.PackedInt32Array:
    """
				Returns the list of item IDs in use.
			"""
    pass

  def get_last_unused_item_id(self)->int:
    """
				Gets an unused ID for a new item.
			"""
    pass


