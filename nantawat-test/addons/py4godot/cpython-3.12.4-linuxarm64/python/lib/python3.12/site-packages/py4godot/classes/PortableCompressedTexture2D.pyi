from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Image as __image__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__


class CompressionMode:
  COMPRESSION_MODE_LOSSLESS:int = 0
  COMPRESSION_MODE_LOSSY:int = 1
  COMPRESSION_MODE_BASIS_UNIVERSAL:int = 2
  COMPRESSION_MODE_S3TC:int = 3
  COMPRESSION_MODE_ETC2:int = 4
  COMPRESSION_MODE_BPTC:int = 5


class PortableCompressedTexture2D(__texture2d__.Texture2D):
  """
		This class allows storing compressed textures as self contained (not imported) resources.
		For 2D usage (compressed on disk, uncompressed on VRAM), the lossy and lossless modes are recommended. For 3D usage (compressed on VRAM) it depends on the target platform.
		If you intend to only use desktop, S3TC or BPTC are recommended. For only mobile, ETC2 is recommended.
		For portable, self contained 3D textures that work on both desktop and mobile, Basis Universal is recommended (although it has a small quality cost and longer compression time as a tradeoff).
		This resource is intended to be created from code.
	"""

  @staticmethod
  def constructor()->PortableCompressedTexture2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PortableCompressedTexture2D:pass


  @property
  def size_override(self)->__core__.Vector2:
    """"""
    pass
  @size_override.setter
  def size_override(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def keep_compressed_buffer(self)->bool:
    """"""
    pass
  @keep_compressed_buffer.setter
  def keep_compressed_buffer(self,  value:bool)->None:
    """"""
    pass
  def create_from_image(self, image:__image__.Image, compression_mode:int , normal_map:bool=False, lossy_quality:float=0.8)->None:
    """
				Initializes the compressed texture from a base image. The compression mode must be provided.
				`normal_map` is recommended to ensure optimum quality if this image will be used as a normal map.
				If lossy compression is requested, the quality setting can optionally be provided. This maps to Lossy WebP compression quality.
			"""
    pass

  def get_format(self)->int:
    """
				Return the image format used (valid after initialized).
			"""
    pass

  def get_compression_mode(self)->int:
    """
				Return the compression mode used (valid after initialized).
			"""
    pass

  def set_size_override(self, size:__core__.Vector2)->None:
    """"""
    pass

  def get_size_override(self)->__core__.Vector2:
    """"""
    pass

  def set_keep_compressed_buffer(self, keep:bool)->None:
    """"""
    pass

  def is_keeping_compressed_buffer(self)->bool:
    """"""
    pass

  @staticmethod
  def set_keep_all_compressed_buffers(keep:bool)->None:
    """
				Overrides the flag globally for all textures of this type. This is used primarily by the editor.
			"""
    pass

  @staticmethod
  def is_keeping_all_compressed_buffers()->bool:
    """
				Return whether the flag is overridden for all textures of this type.
			"""
    pass


