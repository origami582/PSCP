from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.m as __m__
import py4godot.classes.Texture3D as __texture3d__
import py4godot.classes.g as __g__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.Image as __image__
import py4godot.classes.y as __y__
import py4godot.classes.I as __i__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__



class ImageTexture3D(__texture3d__.Texture3D):
  """
		`ImageTexture3D` is a 3-dimensional `ImageTexture` that has a width, height, and depth. See also `ImageTextureLayered`.
		3D textures are typically used to store density maps for `FogMaterial`, color correction LUTs for `Environment`, vector fields for `GPUParticlesAttractorVectorField3D` and collision maps for `GPUParticlesCollisionSDF3D`. 3D textures can also be used in custom shaders.
	"""

  @staticmethod
  def constructor()->ImageTexture3D:pass



  @staticmethod
  def cast(other:__object__.Object)->ImageTexture3D:pass


  def create(self, format:int , width:int, height:int, depth:int, use_mipmaps:bool, data:__core__.Array)->int:
    """
				Creates the `ImageTexture3D` with specified `format`, `width`, `height`, and `depth`. If `use_mipmaps` is `true`, generates mipmaps for the `ImageTexture3D`.
			"""
    pass

  def update(self, data:__core__.Array)->None:
    """
				Replaces the texture's existing data with the layers specified in `data`. The size of `data` must match the parameters that were used for `create`. In other words, the texture cannot be resized or have its format changed by calling `update`.
			"""
    pass


