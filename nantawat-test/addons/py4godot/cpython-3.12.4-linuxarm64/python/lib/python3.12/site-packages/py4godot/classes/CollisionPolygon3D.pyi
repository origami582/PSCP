from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__



class CollisionPolygon3D(__node3d__.Node3D):
  """
		A node that provides a thickened polygon shape (a prism) to a `CollisionObject3D` parent and allows to edit it. The polygon can be concave or convex. This can give a detection shape to an `Area3D` or turn `PhysicsBody3D` into a solid object.
		**Warning:** A non-uniformly scaled `CollisionShape3D` will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its shape resource instead.
	"""

  @staticmethod
  def constructor()->CollisionPolygon3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CollisionPolygon3D:pass


  @property
  def depth(self)->float:
    """"""
    pass
  @depth.setter
  def depth(self,  value:float)->None:
    """"""
    pass
  @property
  def disabled(self)->bool:
    """"""
    pass
  @disabled.setter
  def disabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def polygon(self)->__core__.PackedVector2Array:
    """"""
    pass
  @polygon.setter
  def polygon(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def margin(self)->float:
    """"""
    pass
  @margin.setter
  def margin(self,  value:float)->None:
    """"""
    pass
  @property
  def debug_color(self)->__core__.Color:
    """"""
    pass
  @debug_color.setter
  def debug_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def debug_fill(self)->bool:
    """"""
    pass
  @debug_fill.setter
  def debug_fill(self,  value:bool)->None:
    """"""
    pass
  def set_depth(self, depth:float)->None:
    """"""
    pass

  def get_depth(self)->float:
    """"""
    pass

  def set_polygon(self, polygon:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_polygon(self)->__core__.PackedVector2Array:
    """"""
    pass

  def set_disabled(self, disabled:bool)->None:
    """"""
    pass

  def is_disabled(self)->bool:
    """"""
    pass

  def set_debug_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_debug_color(self)->__core__.Color:
    """"""
    pass

  def set_enable_debug_fill(self, enable:bool)->None:
    """"""
    pass

  def get_enable_debug_fill(self)->bool:
    """"""
    pass

  def set_margin(self, margin:float)->None:
    """"""
    pass

  def get_margin(self)->float:
    """"""
    pass


