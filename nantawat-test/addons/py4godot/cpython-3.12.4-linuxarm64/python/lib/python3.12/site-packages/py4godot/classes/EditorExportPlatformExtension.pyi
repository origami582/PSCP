from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.a as __a__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.EditorExportPreset as __editorexportpreset__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.i as __i__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.p as __p__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.o as __o__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.e as __e__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.T as __t__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.y as __y__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__



class EditorExportPlatformExtension(__editorexportplatform__.EditorExportPlatform):
  """
		External `EditorExportPlatform` implementations should inherit from this class.
		To use `EditorExportPlatform`, register it using the `EditorPlugin.add_export_platform` method first.
	"""

  @staticmethod
  def constructor()->EditorExportPlatformExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPlatformExtension:pass


  def _get_preset_features(self, preset:__editorexportpreset__.EditorExportPreset)->__core__.PackedStringArray:
    """
				Returns array of platform specific features for the specified `preset`.
			"""
    pass

  def _is_executable(self, path:str)->bool:
    """
				Returns `true` if specified file is a valid executable (native executable or script) for the target platform.
			"""
    pass

  def _get_export_options(self)->typedarray::Dictionary:
    """
				Returns a property list, as an `Array` of dictionaries. Each `Dictionary` must at least contain the `name: StringName` and `type: Variant.Type` entries.
				Additionally, the following keys are supported:
				- `hint: PropertyHint`
				- `hint_string: String`
				- `usage: PropertyUsageFlags`
				- `class_name: StringName`
				- `default_value: Variant`, default value of the property.
				- `update_visibility: bool`, if set to `true`, `_get_export_option_visibility` is called for each property when this property is changed.
				- `required: bool`, if set to `true`, this property warnings are critical, and should be resolved to make export possible. This value is a hint for the `_has_valid_export_configuration` implementation, and not used by the engine directly.
				See also `Object._get_property_list`.
			"""
    pass

  def _should_update_export_options(self)->bool:
    """
				Returns `true` if export options list is changed and presets should be updated.
			"""
    pass

  def _get_export_option_visibility(self, preset:__editorexportpreset__.EditorExportPreset, option:str)->bool:
    """
				Validates `option` and returns visibility for the specified `preset`. Default implementation return `true` for all options.
			"""
    pass

  def _get_export_option_warning(self, preset:__editorexportpreset__.EditorExportPreset, option:__core__.StringName|str)->str:
    """
				Validates `option` and returns warning message for the specified `preset`. Default implementation return empty string for all options.
			"""
    pass

  def _get_os_name(self)->str:
    """
				Returns target OS name.
			"""
    pass

  def _get_name(self)->str:
    """
				Returns export platform name.
			"""
    pass

  def _get_logo(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the platform logo displayed in the export dialog. The logo should be 32Ã—32 pixels, adjusted for the current editor scale (see `EditorInterface.get_editor_scale`).
			"""
    pass

  def _poll_export(self)->bool:
    """
				Returns `true` if one-click deploy options are changed and editor interface should be updated.
			"""
    pass

  def _get_options_count(self)->int:
    """
				Returns the number of devices (or other options) available in the one-click deploy menu.
			"""
    pass

  def _get_options_tooltip(self)->str:
    """
				Returns tooltip of the one-click deploy menu button.
			"""
    pass

  def _get_option_icon(self, device:int)->__imagetexture__.ImageTexture:
    """
				Returns the item icon for the specified `device` in the one-click deploy menu. The icon should be 16Ã—16 pixels, adjusted for the current editor scale (see `EditorInterface.get_editor_scale`).
			"""
    pass

  def _get_option_label(self, device:int)->str:
    """
				Returns one-click deploy menu item label for the specified `device`.
			"""
    pass

  def _get_option_tooltip(self, device:int)->str:
    """
				Returns one-click deploy menu item tooltip for the specified `device`.
			"""
    pass

  def _get_device_architecture(self, device:int)->str:
    """
				Returns device architecture for one-click deploy.
			"""
    pass

  def _cleanup(self)->None:
    """
				Called by the editor before platform is unregistered.
			"""
    pass

  def _run(self, preset:__editorexportpreset__.EditorExportPreset, device:int, debug_flags:int)->int:
    """
				This method is called when `device` one-click deploy menu option is selected.
				Implementation should export project to a temporary location, upload and run it on the specific `device`, or perform another action associated with the menu item.
			"""
    pass

  def _get_run_icon(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the icon of the one-click deploy menu button. The icon should be 16Ã—16 pixels, adjusted for the current editor scale (see `EditorInterface.get_editor_scale`).
			"""
    pass

  def _can_export(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool)->bool:
    """
				Returns `true`, if specified `preset` is valid and can be exported. Use `set_config_error` and `set_config_missing_templates` to set error details.
				Usual implementation can call `_has_valid_export_configuration` and `_has_valid_project_configuration` to determine if export is possible.
			"""
    pass

  def _has_valid_export_configuration(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool)->bool:
    """
				Returns `true` if export configuration is valid.
			"""
    pass

  def _has_valid_project_configuration(self, preset:__editorexportpreset__.EditorExportPreset)->bool:
    """
				Returns `true` if project configuration is valid.
			"""
    pass

  def _get_binary_extensions(self, preset:__editorexportpreset__.EditorExportPreset)->__core__.PackedStringArray:
    """
				Returns array of supported binary extensions for the full project export.
			"""
    pass

  def _export_project(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int)->int:
    """
				Creates a full project at `path` for the specified `preset`.
				This method is called when "Export" button is pressed in the export dialog.
				This method implementation can call `EditorExportPlatform.save_pack` or `EditorExportPlatform.save_zip` to use default PCK/ZIP export process, or calls `EditorExportPlatform.export_project_files` and implement custom callback for processing each exported file.
			"""
    pass

  def _export_pack(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int)->int:
    """
				Creates a PCK archive at `path` for the specified `preset`.
				This method is called when "Export PCK/ZIP" button is pressed in the export dialog, with "Export as Patch" disabled, and PCK is selected as a file type.
			"""
    pass

  def _export_zip(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int)->int:
    """
				Create a ZIP archive at `path` for the specified `preset`.
				This method is called when "Export PCK/ZIP" button is pressed in the export dialog, with "Export as Patch" disabled, and ZIP is selected as a file type.
			"""
    pass

  def _export_pack_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray, flags:int)->int:
    """
				Creates a patch PCK archive at `path` for the specified `preset`, containing only the files that have changed since the last patch.
				This method is called when "Export PCK/ZIP" button is pressed in the export dialog, with "Export as Patch" enabled, and PCK is selected as a file type.
				**Note:** The patches provided in `patches` have already been loaded when this method is called and are merely provided as context. When empty the patches defined in the export preset have been loaded instead.
			"""
    pass

  def _export_zip_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray, flags:int)->int:
    """
				Create a ZIP archive at `path` for the specified `preset`, containing only the files that have changed since the last patch.
				This method is called when "Export PCK/ZIP" button is pressed in the export dialog, with "Export as Patch" enabled, and ZIP is selected as a file type.
				**Note:** The patches provided in `patches` have already been loaded when this method is called and are merely provided as context. When empty the patches defined in the export preset have been loaded instead.
			"""
    pass

  def _get_platform_features(self)->__core__.PackedStringArray:
    """
				Returns array of platform specific features.
			"""
    pass

  def _get_debug_protocol(self)->str:
    """
				Returns protocol used for remote debugging. Default implementation return `tcp://`.
			"""
    pass

  def set_config_error(self, error_text:str)->None:
    """
				Sets current configuration error message text. This method should be called only from the `_can_export`, `_has_valid_export_configuration`, or `_has_valid_project_configuration` implementations.
			"""
    pass

  def get_config_error(self)->str:
    """
				Returns current configuration error message text. This method should be called only from the `_can_export`, `_has_valid_export_configuration`, or `_has_valid_project_configuration` implementations.
			"""
    pass

  def set_config_missing_templates(self, missing_templates:bool)->None:
    """
				Set to `true` is export templates are missing from the current configuration. This method should be called only from the `_can_export`, `_has_valid_export_configuration`, or `_has_valid_project_configuration` implementations.
			"""
    pass

  def get_config_missing_templates(self)->bool:
    """
				Returns `true` is export templates are missing from the current configuration. This method should be called only from the `_can_export`, `_has_valid_export_configuration`, or `_has_valid_project_configuration` implementations.
			"""
    pass


