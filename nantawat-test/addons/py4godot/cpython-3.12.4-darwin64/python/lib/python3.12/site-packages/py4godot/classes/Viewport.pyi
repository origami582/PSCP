from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.W as __w__
import py4godot.classes.o as __o__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.Label as __label__
import py4godot.classes.Window as __window__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.Node as __node__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.y as __y__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.i as __i__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.T as __t__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.r as __r__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.n as __n__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.d as __d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.SubViewport as __subviewport__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.p as __p__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Container as __container__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.A as __a__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Popup as __popup__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.Separator as __separator__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.w as __w__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.a as __a__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.World2D as __world2d__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.e as __e__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.Slider as __slider__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.World3D as __world3d__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.GridContainer as __gridcontainer__


class PositionalShadowAtlasQuadrantSubdiv:
  SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED:int = 0
  SHADOW_ATLAS_QUADRANT_SUBDIV_1:int = 1
  SHADOW_ATLAS_QUADRANT_SUBDIV_4:int = 2
  SHADOW_ATLAS_QUADRANT_SUBDIV_16:int = 3
  SHADOW_ATLAS_QUADRANT_SUBDIV_64:int = 4
  SHADOW_ATLAS_QUADRANT_SUBDIV_256:int = 5
  SHADOW_ATLAS_QUADRANT_SUBDIV_1024:int = 6
  SHADOW_ATLAS_QUADRANT_SUBDIV_MAX:int = 7
class Scaling3DMode:
  SCALING_3D_MODE_BILINEAR:int = 0
  SCALING_3D_MODE_FSR:int = 1
  SCALING_3D_MODE_FSR2:int = 2
  SCALING_3D_MODE_METALFX_SPATIAL:int = 3
  SCALING_3D_MODE_METALFX_TEMPORAL:int = 4
  SCALING_3D_MODE_MAX:int = 5
class MSAA:
  MSAA_DISABLED:int = 0
  MSAA_2X:int = 1
  MSAA_4X:int = 2
  MSAA_8X:int = 3
  MSAA_MAX:int = 4
class AnisotropicFiltering:
  ANISOTROPY_DISABLED:int = 0
  ANISOTROPY_2X:int = 1
  ANISOTROPY_4X:int = 2
  ANISOTROPY_8X:int = 3
  ANISOTROPY_16X:int = 4
  ANISOTROPY_MAX:int = 5
class ScreenSpaceAA:
  SCREEN_SPACE_AA_DISABLED:int = 0
  SCREEN_SPACE_AA_FXAA:int = 1
  SCREEN_SPACE_AA_MAX:int = 2
class RenderInfo:
  RENDER_INFO_OBJECTS_IN_FRAME:int = 0
  RENDER_INFO_PRIMITIVES_IN_FRAME:int = 1
  RENDER_INFO_DRAW_CALLS_IN_FRAME:int = 2
  RENDER_INFO_MAX:int = 3
class RenderInfoType:
  RENDER_INFO_KIND_VISIBLE:int = 0
  RENDER_INFO_KIND_SHADOW:int = 1
  RENDER_INFO_KIND_CANVAS:int = 2
  RENDER_INFO_KIND_MAX:int = 3
class DebugDraw:
  DEBUG_DRAW_DISABLED:int = 0
  DEBUG_DRAW_UNSHADED:int = 1
  DEBUG_DRAW_LIGHTING:int = 2
  DEBUG_DRAW_OVERDRAW:int = 3
  DEBUG_DRAW_WIREFRAME:int = 4
  DEBUG_DRAW_NORMAL_BUFFER:int = 5
  DEBUG_DRAW_VOXEL_GI_ALBEDO:int = 6
  DEBUG_DRAW_VOXEL_GI_LIGHTING:int = 7
  DEBUG_DRAW_VOXEL_GI_EMISSION:int = 8
  DEBUG_DRAW_SHADOW_ATLAS:int = 9
  DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS:int = 10
  DEBUG_DRAW_SCENE_LUMINANCE:int = 11
  DEBUG_DRAW_SSAO:int = 12
  DEBUG_DRAW_SSIL:int = 13
  DEBUG_DRAW_PSSM_SPLITS:int = 14
  DEBUG_DRAW_DECAL_ATLAS:int = 15
  DEBUG_DRAW_SDFGI:int = 16
  DEBUG_DRAW_SDFGI_PROBES:int = 17
  DEBUG_DRAW_GI_BUFFER:int = 18
  DEBUG_DRAW_DISABLE_LOD:int = 19
  DEBUG_DRAW_CLUSTER_OMNI_LIGHTS:int = 20
  DEBUG_DRAW_CLUSTER_SPOT_LIGHTS:int = 21
  DEBUG_DRAW_CLUSTER_DECALS:int = 22
  DEBUG_DRAW_CLUSTER_REFLECTION_PROBES:int = 23
  DEBUG_DRAW_OCCLUDERS:int = 24
  DEBUG_DRAW_MOTION_VECTORS:int = 25
  DEBUG_DRAW_INTERNAL_BUFFER:int = 26
class DefaultCanvasItemTextureFilter:
  DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST:int = 0
  DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR:int = 1
  DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS:int = 2
  DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS:int = 3
  DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX:int = 4
class DefaultCanvasItemTextureRepeat:
  DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED:int = 0
  DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED:int = 1
  DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR:int = 2
  DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX:int = 3
class SDFOversize:
  SDF_OVERSIZE_100_PERCENT:int = 0
  SDF_OVERSIZE_120_PERCENT:int = 1
  SDF_OVERSIZE_150_PERCENT:int = 2
  SDF_OVERSIZE_200_PERCENT:int = 3
  SDF_OVERSIZE_MAX:int = 4
class SDFScale:
  SDF_SCALE_100_PERCENT:int = 0
  SDF_SCALE_50_PERCENT:int = 1
  SDF_SCALE_25_PERCENT:int = 2
  SDF_SCALE_MAX:int = 3
class VRSMode:
  VRS_DISABLED:int = 0
  VRS_TEXTURE:int = 1
  VRS_XR:int = 2
  VRS_MAX:int = 3
class VRSUpdateMode:
  VRS_UPDATE_DISABLED:int = 0
  VRS_UPDATE_ONCE:int = 1
  VRS_UPDATE_ALWAYS:int = 2
  VRS_UPDATE_MAX:int = 3


class Viewport(__node__.Node):
  """
		A `Viewport` creates a different view into the screen, or a sub-view inside another viewport. Child 2D nodes will display on it, and child Camera3D 3D nodes will render on it too.
		Optionally, a viewport can have its own 2D or 3D world, so it doesn't share what it draws with other viewports.
		Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
		Also, viewports can be assigned to different screens in case the devices have multiple screens.
		Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
	"""
  size_changed: BuiltinSignal
  gui_focus_changed: BuiltinSignal

  @staticmethod
  def constructor()->Viewport:pass



  @staticmethod
  def cast(other:__object__.Object)->Viewport:pass


  @property
  def disable_3d(self)->bool:
    """"""
    pass
  @disable_3d.setter
  def disable_3d(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_xr(self)->bool:
    """"""
    pass
  @use_xr.setter
  def use_xr(self,  value:bool)->None:
    """"""
    pass
  @property
  def own_world_3d(self)->bool:
    """"""
    pass
  @own_world_3d.setter
  def own_world_3d(self,  value:bool)->None:
    """"""
    pass
  @property
  def world_3d(self)->__world3d__.World3D:
    """"""
    pass
  @world_3d.setter
  def world_3d(self,  value:__world3d__.World3D)->None:
    """"""
    pass
  @property
  def world_2d(self)->__world2d__.World2D:
    """"""
    pass
  @world_2d.setter
  def world_2d(self,  value:__world2d__.World2D)->None:
    """"""
    pass
  @property
  def transparent_bg(self)->bool:
    """"""
    pass
  @transparent_bg.setter
  def transparent_bg(self,  value:bool)->None:
    """"""
    pass
  @property
  def handle_input_locally(self)->bool:
    """"""
    pass
  @handle_input_locally.setter
  def handle_input_locally(self,  value:bool)->None:
    """"""
    pass
  @property
  def snap_2d_transforms_to_pixel(self)->bool:
    """"""
    pass
  @snap_2d_transforms_to_pixel.setter
  def snap_2d_transforms_to_pixel(self,  value:bool)->None:
    """"""
    pass
  @property
  def snap_2d_vertices_to_pixel(self)->bool:
    """"""
    pass
  @snap_2d_vertices_to_pixel.setter
  def snap_2d_vertices_to_pixel(self,  value:bool)->None:
    """"""
    pass
  @property
  def msaa_2d(self)->int:
    """"""
    pass
  @msaa_2d.setter
  def msaa_2d(self,  value:int)->None:
    """"""
    pass
  @property
  def msaa_3d(self)->int:
    """"""
    pass
  @msaa_3d.setter
  def msaa_3d(self,  value:int)->None:
    """"""
    pass
  @property
  def screen_space_aa(self)->int:
    """"""
    pass
  @screen_space_aa.setter
  def screen_space_aa(self,  value:int)->None:
    """"""
    pass
  @property
  def use_taa(self)->bool:
    """"""
    pass
  @use_taa.setter
  def use_taa(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_debanding(self)->bool:
    """"""
    pass
  @use_debanding.setter
  def use_debanding(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_occlusion_culling(self)->bool:
    """"""
    pass
  @use_occlusion_culling.setter
  def use_occlusion_culling(self,  value:bool)->None:
    """"""
    pass
  @property
  def mesh_lod_threshold(self)->float:
    """"""
    pass
  @mesh_lod_threshold.setter
  def mesh_lod_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def debug_draw(self)->int:
    """"""
    pass
  @debug_draw.setter
  def debug_draw(self,  value:int)->None:
    """"""
    pass
  @property
  def use_hdr_2d(self)->bool:
    """"""
    pass
  @use_hdr_2d.setter
  def use_hdr_2d(self,  value:bool)->None:
    """"""
    pass
  @property
  def scaling_3d_mode(self)->int:
    """"""
    pass
  @scaling_3d_mode.setter
  def scaling_3d_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def scaling_3d_scale(self)->float:
    """"""
    pass
  @scaling_3d_scale.setter
  def scaling_3d_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def texture_mipmap_bias(self)->float:
    """"""
    pass
  @texture_mipmap_bias.setter
  def texture_mipmap_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def anisotropic_filtering_level(self)->int:
    """"""
    pass
  @anisotropic_filtering_level.setter
  def anisotropic_filtering_level(self,  value:int)->None:
    """"""
    pass
  @property
  def fsr_sharpness(self)->float:
    """"""
    pass
  @fsr_sharpness.setter
  def fsr_sharpness(self,  value:float)->None:
    """"""
    pass
  @property
  def vrs_mode(self)->int:
    """"""
    pass
  @vrs_mode.setter
  def vrs_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def vrs_update_mode(self)->int:
    """"""
    pass
  @vrs_update_mode.setter
  def vrs_update_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def vrs_texture(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass
  @vrs_texture.setter
  def vrs_texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def canvas_item_default_texture_filter(self)->int:
    """"""
    pass
  @canvas_item_default_texture_filter.setter
  def canvas_item_default_texture_filter(self,  value:int)->None:
    """"""
    pass
  @property
  def canvas_item_default_texture_repeat(self)->int:
    """"""
    pass
  @canvas_item_default_texture_repeat.setter
  def canvas_item_default_texture_repeat(self,  value:int)->None:
    """"""
    pass
  @property
  def audio_listener_enable_2d(self)->bool:
    """"""
    pass
  @audio_listener_enable_2d.setter
  def audio_listener_enable_2d(self,  value:bool)->None:
    """"""
    pass
  @property
  def audio_listener_enable_3d(self)->bool:
    """"""
    pass
  @audio_listener_enable_3d.setter
  def audio_listener_enable_3d(self,  value:bool)->None:
    """"""
    pass
  @property
  def physics_object_picking(self)->bool:
    """"""
    pass
  @physics_object_picking.setter
  def physics_object_picking(self,  value:bool)->None:
    """"""
    pass
  @property
  def physics_object_picking_sort(self)->bool:
    """"""
    pass
  @physics_object_picking_sort.setter
  def physics_object_picking_sort(self,  value:bool)->None:
    """"""
    pass
  @property
  def physics_object_picking_first_only(self)->bool:
    """"""
    pass
  @physics_object_picking_first_only.setter
  def physics_object_picking_first_only(self,  value:bool)->None:
    """"""
    pass
  @property
  def gui_disable_input(self)->bool:
    """"""
    pass
  @gui_disable_input.setter
  def gui_disable_input(self,  value:bool)->None:
    """"""
    pass
  @property
  def gui_snap_controls_to_pixels(self)->bool:
    """"""
    pass
  @gui_snap_controls_to_pixels.setter
  def gui_snap_controls_to_pixels(self,  value:bool)->None:
    """"""
    pass
  @property
  def gui_embed_subwindows(self)->bool:
    """"""
    pass
  @gui_embed_subwindows.setter
  def gui_embed_subwindows(self,  value:bool)->None:
    """"""
    pass
  @property
  def sdf_oversize(self)->int:
    """"""
    pass
  @sdf_oversize.setter
  def sdf_oversize(self,  value:int)->None:
    """"""
    pass
  @property
  def sdf_scale(self)->int:
    """"""
    pass
  @sdf_scale.setter
  def sdf_scale(self,  value:int)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_size(self)->int:
    """"""
    pass
  @positional_shadow_atlas_size.setter
  def positional_shadow_atlas_size(self,  value:int)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_16_bits(self)->bool:
    """"""
    pass
  @positional_shadow_atlas_16_bits.setter
  def positional_shadow_atlas_16_bits(self,  value:bool)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_quad_0(self)->int:
    """"""
    pass
  @positional_shadow_atlas_quad_0.setter
  def positional_shadow_atlas_quad_0(self,  value:int)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_quad_1(self)->int:
    """"""
    pass
  @positional_shadow_atlas_quad_1.setter
  def positional_shadow_atlas_quad_1(self,  value:int)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_quad_2(self)->int:
    """"""
    pass
  @positional_shadow_atlas_quad_2.setter
  def positional_shadow_atlas_quad_2(self,  value:int)->None:
    """"""
    pass
  @property
  def positional_shadow_atlas_quad_3(self)->int:
    """"""
    pass
  @positional_shadow_atlas_quad_3.setter
  def positional_shadow_atlas_quad_3(self,  value:int)->None:
    """"""
    pass
  @property
  def canvas_transform(self)->__core__.Transform2D:
    """"""
    pass
  @canvas_transform.setter
  def canvas_transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def global_canvas_transform(self)->__core__.Transform2D:
    """"""
    pass
  @global_canvas_transform.setter
  def global_canvas_transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def canvas_cull_mask(self)->int:
    """"""
    pass
  @canvas_cull_mask.setter
  def canvas_cull_mask(self,  value:int)->None:
    """"""
    pass
  def set_world_2d(self, world_2d:__world2d__.World2D)->None:
    """"""
    pass

  def get_world_2d(self)->__world2d__.World2D:
    """"""
    pass

  def find_world_2d(self)->__world2d__.World2D:
    """
				Returns the first valid `World2D` for this viewport, searching the `world_2d` property of itself and any Viewport ancestor.
			"""
    pass

  def set_canvas_transform(self, xform:__core__.Transform2D)->None:
    """"""
    pass

  def get_canvas_transform(self)->__core__.Transform2D:
    """"""
    pass

  def set_global_canvas_transform(self, xform:__core__.Transform2D)->None:
    """"""
    pass

  def get_global_canvas_transform(self)->__core__.Transform2D:
    """"""
    pass

  def get_stretch_transform(self)->__core__.Transform2D:
    """
				Returns the automatically computed 2D stretch transform, taking the `Viewport`'s stretch settings into account. The final value is multiplied by `Window.content_scale_factor`, but only for the root viewport. If this method is called on a `SubViewport` (e.g., in a scene tree with `SubViewportContainer` and `SubViewport`), the scale factor of the root window will not be applied. Using `Transform2D.get_scale` on the returned value, this can be used to compensate for scaling when zooming a `Camera2D` node, or to scale down a `TextureRect` to be pixel-perfect regardless of the automatically computed scale factor.
				**Note:** Due to how pixel scaling works, the returned transform's X and Y scale may differ slightly, even when `Window.content_scale_aspect` is set to a mode that preserves the pixels' aspect ratio. If `Window.content_scale_aspect` is `constant Window.CONTENT_SCALE_ASPECT_IGNORE`, the X and Y scale may differ _significantly_.
			"""
    pass

  def get_final_transform(self)->__core__.Transform2D:
    """
				Returns the transform from the viewport's coordinate system to the embedder's coordinate system.
			"""
    pass

  def get_screen_transform(self)->__core__.Transform2D:
    """
				Returns the transform from the Viewport's coordinates to the screen coordinates of the containing window manager window.
			"""
    pass

  def get_visible_rect(self)->__core__.Rect2:
    """
				Returns the visible rectangle in global screen coordinates.
			"""
    pass

  def set_transparent_background(self, enable:bool)->None:
    """"""
    pass

  def has_transparent_background(self)->bool:
    """"""
    pass

  def set_use_hdr_2d(self, enable:bool)->None:
    """"""
    pass

  def is_using_hdr_2d(self)->bool:
    """"""
    pass

  def set_msaa_2d(self, msaa:int )->None:
    """"""
    pass

  def get_msaa_2d(self)->int:
    """"""
    pass

  def set_msaa_3d(self, msaa:int )->None:
    """"""
    pass

  def get_msaa_3d(self)->int:
    """"""
    pass

  def set_screen_space_aa(self, screen_space_aa:int )->None:
    """"""
    pass

  def get_screen_space_aa(self)->int:
    """"""
    pass

  def set_use_taa(self, enable:bool)->None:
    """"""
    pass

  def is_using_taa(self)->bool:
    """"""
    pass

  def set_use_debanding(self, enable:bool)->None:
    """"""
    pass

  def is_using_debanding(self)->bool:
    """"""
    pass

  def set_use_occlusion_culling(self, enable:bool)->None:
    """"""
    pass

  def is_using_occlusion_culling(self)->bool:
    """"""
    pass

  def set_debug_draw(self, debug_draw:int )->None:
    """"""
    pass

  def get_debug_draw(self)->int:
    """"""
    pass

  def get_render_info(self, type:int , info:int )->int:
    """
				Returns rendering statistics of the given type.
			"""
    pass

  def get_texture(self)->__viewporttexture__.ViewportTexture:
    """
				Returns the viewport's texture.
				**Note:** When trying to store the current texture (e.g. in a file), it might be completely black or outdated if used too early, especially when used in e.g. `Node._ready`. To make sure the texture you get is correct, you can await `signal RenderingServer.frame_post_draw` signal.
				```gdscript
				func _ready():
					await RenderingServer.frame_post_draw
					$Viewport.get_texture().get_image().save_png("user://Screenshot.png")
				```
				**Note:** When `use_hdr_2d` is `true` the returned texture will be an HDR image encoded in linear space.
			"""
    pass

  def set_physics_object_picking(self, enable:bool)->None:
    """"""
    pass

  def get_physics_object_picking(self)->bool:
    """"""
    pass

  def set_physics_object_picking_sort(self, enable:bool)->None:
    """"""
    pass

  def get_physics_object_picking_sort(self)->bool:
    """"""
    pass

  def set_physics_object_picking_first_only(self, enable:bool)->None:
    """"""
    pass

  def get_physics_object_picking_first_only(self)->bool:
    """"""
    pass

  def get_viewport_rid(self)->__core__.RID:
    """
				Returns the viewport's RID from the `RenderingServer`.
			"""
    pass

  def push_text_input(self, text:str)->None:
    """
				Helper method which calls the `set_text()` method on the currently focused `Control`, provided that it is defined (e.g. if the focused Control is `Button` or `LineEdit`).
			"""
    pass

  def push_input(self, event:__inputevent__.InputEvent, in_local_coords:bool=False)->None:
    """
				Triggers the given `event` in this `Viewport`. This can be used to pass an `InputEvent` between viewports, or to locally apply inputs that were sent over the network or saved to a file.
				If `in_local_coords` is `false`, the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If `in_local_coords` is `true`, the event's position is in viewport coordinates.
				While this method serves a similar purpose as `Input.parse_input_event`, it does not remap the specified `event` based on project settings like `ProjectSettings.input_devices/pointing/emulate_touch_from_mouse`.
				Calling this method will propagate calls to child nodes for following methods in the given order:
				- `Node._input`
				- `Control._gui_input` for `Control` nodes
				- `Node._shortcut_input`
				- `Node._unhandled_key_input`
				- `Node._unhandled_input`
				If an earlier method marks the input as handled via `set_input_as_handled`, any later method in this list will not be called.
				If none of the methods handle the event and `physics_object_picking` is `true`, the event is used for physics object picking.
			"""
    pass

  def push_unhandled_input(self, event:__inputevent__.InputEvent, in_local_coords:bool=False)->None:
    """
				Triggers the given `event` in this `Viewport`. This can be used to pass an `InputEvent` between viewports, or to locally apply inputs that were sent over the network or saved to a file.
				If `in_local_coords` is `false`, the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If `in_local_coords` is `true`, the event's position is in viewport coordinates.
				Calling this method will propagate calls to child nodes for following methods in the given order:
				- `Node._shortcut_input`
				- `Node._unhandled_key_input`
				- `Node._unhandled_input`
				If an earlier method marks the input as handled via `set_input_as_handled`, any later method in this list will not be called.
				If none of the methods handle the event and `physics_object_picking` is `true`, the event is used for physics object picking.
				**Note:** This method doesn't propagate input events to embedded `Window`s or `SubViewport`s.
			"""
    pass

  def notify_mouse_entered(self)->None:
    """
				Inform the Viewport that the mouse has entered its area. Use this function before sending an `InputEventMouseButton` or `InputEventMouseMotion` to the `Viewport` with `Viewport.push_input`. See also `notify_mouse_exited`.
				**Note:** In most cases, it is not necessary to call this function because `SubViewport` nodes that are children of `SubViewportContainer` are notified automatically. This is only necessary when interacting with viewports in non-default ways, for example as textures in `TextureRect` or with an `Area3D` that forwards input events.
			"""
    pass

  def notify_mouse_exited(self)->None:
    """
				Inform the Viewport that the mouse has left its area. Use this function when the node that displays the viewport notices the mouse has left the area of the displayed viewport. See also `notify_mouse_entered`.
				**Note:** In most cases, it is not necessary to call this function because `SubViewport` nodes that are children of `SubViewportContainer` are notified automatically. This is only necessary when interacting with viewports in non-default ways, for example as textures in `TextureRect` or with an `Area3D` that forwards input events.
			"""
    pass

  def get_mouse_position(self)->__core__.Vector2:
    """
				Returns the mouse's position in this `Viewport` using the coordinate system of this `Viewport`.
			"""
    pass

  def warp_mouse(self, position:__core__.Vector2)->None:
    """
				Moves the mouse pointer to the specified position in this `Viewport` using the coordinate system of this `Viewport`.
				**Note:** `warp_mouse` is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.
			"""
    pass

  def update_mouse_cursor_state(self)->None:
    """
				Force instantly updating the display based on the current mouse cursor position. This includes updating the mouse cursor shape and sending necessary `signal Control.mouse_entered`, `signal CollisionObject2D.mouse_entered`, `signal CollisionObject3D.mouse_entered` and `signal Window.mouse_entered` signals and their respective `mouse_exited` counterparts.
			"""
    pass

  def gui_cancel_drag(self)->None:
    """
				Cancels the drag operation that was previously started through `Control._get_drag_data` or forced with `Control.force_drag`.
			"""
    pass

  def gui_get_drag_data(self)->Any:
    """
				Returns the drag data from the GUI, that was previously returned by `Control._get_drag_data`.
			"""
    pass

  def gui_is_dragging(self)->bool:
    """
				Returns `true` if a drag operation is currently ongoing and where the drop action could happen in this viewport.
				Alternative to `constant Node.NOTIFICATION_DRAG_BEGIN` and `constant Node.NOTIFICATION_DRAG_END` when you prefer polling the value.
			"""
    pass

  def gui_is_drag_successful(self)->bool:
    """
				Returns `true` if the drag operation is successful.
			"""
    pass

  def gui_release_focus(self)->None:
    """
				Removes the focus from the currently focused `Control` within this viewport. If no `Control` has the focus, does nothing.
			"""
    pass

  def gui_get_focus_owner(self)->__vsplitcontainer__.VSplitContainer|__editorinspector__.EditorInspector|__hboxcontainer__.HBoxContainer|__texturebutton__.TextureButton|__vflowcontainer__.VFlowContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__colorrect__.ColorRect|__spinbox__.SpinBox|__range__.Range|__referencerect__.ReferenceRect|__scrollcontainer__.ScrollContainer|__container__.Container|__checkbutton__.CheckButton|__label__.Label|__centercontainer__.CenterContainer|__hslider__.HSlider|__richtextlabel__.RichTextLabel|__lineedit__.LineEdit|__hseparator__.HSeparator|__hflowcontainer__.HFlowContainer|__panelcontainer__.PanelContainer|__tabbar__.TabBar|__vseparator__.VSeparator|__subviewportcontainer__.SubViewportContainer|__linkbutton__.LinkButton|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__graphedit__.GraphEdit|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__separator__.Separator|__textedit__.TextEdit|__tree__.Tree|__flowcontainer__.FlowContainer|__menubar__.MenuBar|__hsplitcontainer__.HSplitContainer|__ninepatchrect__.NinePatchRect|__vboxcontainer__.VBoxContainer|__vscrollbar__.VScrollBar|__itemlist__.ItemList|__textureprogressbar__.TextureProgressBar|__texturerect__.TextureRect|__videostreamplayer__.VideoStreamPlayer|__scripteditorbase__.ScriptEditorBase|__panel__.Panel|__vslider__.VSlider|__editortoaster__.EditorToaster|__progressbar__.ProgressBar|__scripteditor__.ScriptEditor|__optionbutton__.OptionButton|__splitcontainer__.SplitContainer|__graphelement__.GraphElement|__basebutton__.BaseButton|__colorpicker__.ColorPicker|__menubutton__.MenuButton|__filesystemdock__.FileSystemDock|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__scrollbar__.ScrollBar|__slider__.Slider|__editorspinslider__.EditorSpinSlider|__graphnode__.GraphNode|__hscrollbar__.HScrollBar|__checkbox__.CheckBox|__editorresourcepicker__.EditorResourcePicker|__graphframe__.GraphFrame|__codeedit__.CodeEdit|__colorpickerbutton__.ColorPickerButton|__editorscriptpicker__.EditorScriptPicker|__margincontainer__.MarginContainer|__boxcontainer__.BoxContainer|__tabcontainer__.TabContainer|__control__.Control|__button__.Button|__gridcontainer__.GridContainer:
    """
				Returns the currently focused `Control` within this viewport. If no `Control` is focused, returns `null`.
			"""
    pass

  def gui_get_hovered_control(self)->__vsplitcontainer__.VSplitContainer|__editorinspector__.EditorInspector|__hboxcontainer__.HBoxContainer|__texturebutton__.TextureButton|__vflowcontainer__.VFlowContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__colorrect__.ColorRect|__spinbox__.SpinBox|__range__.Range|__referencerect__.ReferenceRect|__scrollcontainer__.ScrollContainer|__container__.Container|__checkbutton__.CheckButton|__label__.Label|__centercontainer__.CenterContainer|__hslider__.HSlider|__richtextlabel__.RichTextLabel|__lineedit__.LineEdit|__hseparator__.HSeparator|__hflowcontainer__.HFlowContainer|__panelcontainer__.PanelContainer|__tabbar__.TabBar|__vseparator__.VSeparator|__subviewportcontainer__.SubViewportContainer|__linkbutton__.LinkButton|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__graphedit__.GraphEdit|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__separator__.Separator|__textedit__.TextEdit|__tree__.Tree|__flowcontainer__.FlowContainer|__menubar__.MenuBar|__hsplitcontainer__.HSplitContainer|__ninepatchrect__.NinePatchRect|__vboxcontainer__.VBoxContainer|__vscrollbar__.VScrollBar|__itemlist__.ItemList|__textureprogressbar__.TextureProgressBar|__texturerect__.TextureRect|__videostreamplayer__.VideoStreamPlayer|__scripteditorbase__.ScriptEditorBase|__panel__.Panel|__vslider__.VSlider|__editortoaster__.EditorToaster|__progressbar__.ProgressBar|__scripteditor__.ScriptEditor|__optionbutton__.OptionButton|__splitcontainer__.SplitContainer|__graphelement__.GraphElement|__basebutton__.BaseButton|__colorpicker__.ColorPicker|__menubutton__.MenuButton|__filesystemdock__.FileSystemDock|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__scrollbar__.ScrollBar|__slider__.Slider|__editorspinslider__.EditorSpinSlider|__graphnode__.GraphNode|__hscrollbar__.HScrollBar|__checkbox__.CheckBox|__editorresourcepicker__.EditorResourcePicker|__graphframe__.GraphFrame|__codeedit__.CodeEdit|__colorpickerbutton__.ColorPickerButton|__editorscriptpicker__.EditorScriptPicker|__margincontainer__.MarginContainer|__boxcontainer__.BoxContainer|__tabcontainer__.TabContainer|__control__.Control|__button__.Button|__gridcontainer__.GridContainer:
    """
				Returns the `Control` that the mouse is currently hovering over in this viewport. If no `Control` has the cursor, returns `null`.
				Typically the leaf `Control` node or deepest level of the subtree which claims hover. This is very useful when used together with `Node.is_ancestor_of` to find if the mouse is within a control tree.
			"""
    pass

  def set_disable_input(self, disable:bool)->None:
    """"""
    pass

  def is_input_disabled(self)->bool:
    """"""
    pass

  def set_positional_shadow_atlas_size(self, size:int)->None:
    """"""
    pass

  def get_positional_shadow_atlas_size(self)->int:
    """"""
    pass

  def set_positional_shadow_atlas_16_bits(self, enable:bool)->None:
    """"""
    pass

  def get_positional_shadow_atlas_16_bits(self)->bool:
    """"""
    pass

  def set_snap_controls_to_pixels(self, enabled:bool)->None:
    """"""
    pass

  def is_snap_controls_to_pixels_enabled(self)->bool:
    """"""
    pass

  def set_snap_2d_transforms_to_pixel(self, enabled:bool)->None:
    """"""
    pass

  def is_snap_2d_transforms_to_pixel_enabled(self)->bool:
    """"""
    pass

  def set_snap_2d_vertices_to_pixel(self, enabled:bool)->None:
    """"""
    pass

  def is_snap_2d_vertices_to_pixel_enabled(self)->bool:
    """"""
    pass

  def set_positional_shadow_atlas_quadrant_subdiv(self, quadrant:int, subdiv:int )->None:
    """
				Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible.
			"""
    pass

  def get_positional_shadow_atlas_quadrant_subdiv(self, quadrant:int)->int:
    """
				Returns the positional shadow atlas quadrant subdivision of the specified quadrant.
			"""
    pass

  def set_input_as_handled(self)->None:
    """
				Stops the input from propagating further down the `SceneTree`.
				**Note:** This does not affect the methods in `Input`, only the way events are propagated.
			"""
    pass

  def is_input_handled(self)->bool:
    """
				Returns whether the current `InputEvent` has been handled. Input events are not handled until `set_input_as_handled` has been called during the lifetime of an `InputEvent`.
				This is usually done as part of input handling methods like `Node._input`, `Control._gui_input` or others, as well as in corresponding signal handlers.
				If `handle_input_locally` is set to `false`, this method will try finding the first parent viewport that is set to handle input locally, and return its value for `is_input_handled` instead.
			"""
    pass

  def set_handle_input_locally(self, enable:bool)->None:
    """"""
    pass

  def is_handling_input_locally(self)->bool:
    """"""
    pass

  def set_default_canvas_item_texture_filter(self, mode:int )->None:
    """"""
    pass

  def get_default_canvas_item_texture_filter(self)->int:
    """"""
    pass

  def set_embedding_subwindows(self, enable:bool)->None:
    """"""
    pass

  def is_embedding_subwindows(self)->bool:
    """"""
    pass

  def get_embedded_subwindows(self)->typedarray::Window:
    """
				Returns a list of the visible embedded `Window`s inside the viewport.
				**Note:** `Window`s inside other viewports will not be listed.
			"""
    pass

  def set_canvas_cull_mask(self, mask:int)->None:
    """"""
    pass

  def get_canvas_cull_mask(self)->int:
    """"""
    pass

  def set_canvas_cull_mask_bit(self, layer:int, enable:bool)->None:
    """
				Set/clear individual bits on the rendering layer mask. This simplifies editing this `Viewport`'s layers.
			"""
    pass

  def get_canvas_cull_mask_bit(self, layer:int)->bool:
    """
				Returns an individual bit on the rendering layer mask.
			"""
    pass

  def set_default_canvas_item_texture_repeat(self, mode:int )->None:
    """"""
    pass

  def get_default_canvas_item_texture_repeat(self)->int:
    """"""
    pass

  def set_sdf_oversize(self, oversize:int )->None:
    """"""
    pass

  def get_sdf_oversize(self)->int:
    """"""
    pass

  def set_sdf_scale(self, scale:int )->None:
    """"""
    pass

  def get_sdf_scale(self)->int:
    """"""
    pass

  def set_mesh_lod_threshold(self, pixels:float)->None:
    """"""
    pass

  def get_mesh_lod_threshold(self)->float:
    """"""
    pass

  def set_as_audio_listener_2d(self, enable:bool)->None:
    """"""
    pass

  def is_audio_listener_2d(self)->bool:
    """"""
    pass

  def get_audio_listener_2d(self)->__audiolistener2d__.AudioListener2D:
    """
				Returns the currently active 2D audio listener. Returns `null` if there are no active 2D audio listeners, in which case the active 2D camera will be treated as listener.
			"""
    pass

  def get_camera_2d(self)->__camera2d__.Camera2D:
    """
				Returns the currently active 2D camera. Returns `null` if there are no active cameras.
			"""
    pass

  def set_world_3d(self, world_3d:__world3d__.World3D)->None:
    """"""
    pass

  def get_world_3d(self)->__world3d__.World3D:
    """"""
    pass

  def find_world_3d(self)->__world3d__.World3D:
    """
				Returns the first valid `World3D` for this viewport, searching the `world_3d` property of itself and any Viewport ancestor.
			"""
    pass

  def set_use_own_world_3d(self, enable:bool)->None:
    """"""
    pass

  def is_using_own_world_3d(self)->bool:
    """"""
    pass

  def get_audio_listener_3d(self)->__audiolistener3d__.AudioListener3D:
    """
				Returns the currently active 3D audio listener. Returns `null` if there are no active 3D audio listeners, in which case the active 3D camera will be treated as listener.
			"""
    pass

  def get_camera_3d(self)->__camera3d__.Camera3D|__xrcamera3d__.XRCamera3D:
    """
				Returns the currently active 3D camera.
			"""
    pass

  def set_as_audio_listener_3d(self, enable:bool)->None:
    """"""
    pass

  def is_audio_listener_3d(self)->bool:
    """"""
    pass

  def set_disable_3d(self, disable:bool)->None:
    """"""
    pass

  def is_3d_disabled(self)->bool:
    """"""
    pass

  def set_use_xr(self, use:bool)->None:
    """"""
    pass

  def is_using_xr(self)->bool:
    """"""
    pass

  def set_scaling_3d_mode(self, scaling_3d_mode:int )->None:
    """"""
    pass

  def get_scaling_3d_mode(self)->int:
    """"""
    pass

  def set_scaling_3d_scale(self, scale:float)->None:
    """"""
    pass

  def get_scaling_3d_scale(self)->float:
    """"""
    pass

  def set_fsr_sharpness(self, fsr_sharpness:float)->None:
    """"""
    pass

  def get_fsr_sharpness(self)->float:
    """"""
    pass

  def set_texture_mipmap_bias(self, texture_mipmap_bias:float)->None:
    """"""
    pass

  def get_texture_mipmap_bias(self)->float:
    """"""
    pass

  def set_anisotropic_filtering_level(self, anisotropic_filtering_level:int )->None:
    """"""
    pass

  def get_anisotropic_filtering_level(self)->int:
    """"""
    pass

  def set_vrs_mode(self, mode:int )->None:
    """"""
    pass

  def get_vrs_mode(self)->int:
    """"""
    pass

  def set_vrs_update_mode(self, mode:int )->None:
    """"""
    pass

  def get_vrs_update_mode(self)->int:
    """"""
    pass

  def set_vrs_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_vrs_texture(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass


