from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.F as __f__
import py4godot.classes.r as __r__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.R as __r__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.I as __i__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.Resource as __resource__
import py4godot.classes.T as __t__



class Font(__resource__.Resource):
  """
		Abstract base class for different font types. It has methods for drawing text and font character introspection.
	"""

  @staticmethod
  def constructor()->Font:pass



  @staticmethod
  def cast(other:__object__.Object)->Font:pass


  @property
  def fallbacks(self)->typedarray::24/17:Font:
    """"""
    pass
  @fallbacks.setter
  def fallbacks(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_fallbacks(self, fallbacks:__core__.Array)->None:
    """"""
    pass

  def get_fallbacks(self)->typedarray::Font:
    """"""
    pass

  def find_variation(self, variation_coordinates:__core__.Dictionary, face_index:int=0, strength:float=0.0, transform:__core__.Transform2D= __core__.Transform2D.new0(), spacing_top:int=0, spacing_bottom:int=0, spacing_space:int=0, spacing_glyph:int=0, baseline_offset:float=0.0)->__core__.RID:
    """
				Returns `TextServer` RID of the font cache for specific variation.
			"""
    pass

  def get_rids(self)->typedarray::RID:
    """
				Returns `Array` of valid `Font` `RID`s, which can be passed to the `TextServer` methods.
			"""
    pass

  def get_height(self, font_size:int=16)->float:
    """
				Returns the total average font height (ascent plus descent) in pixels.
				**Note:** Real height of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the height of empty line).
			"""
    pass

  def get_ascent(self, font_size:int=16)->float:
    """
				Returns the average font ascent (number of pixels above the baseline).
				**Note:** Real ascent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the ascent of empty line).
			"""
    pass

  def get_descent(self, font_size:int=16)->float:
    """
				Returns the average font descent (number of pixels below the baseline).
				**Note:** Real descent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the descent of empty line).
			"""
    pass

  def get_underline_position(self, font_size:int=16)->float:
    """
				Returns average pixel offset of the underline below the baseline.
				**Note:** Real underline position of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.
			"""
    pass

  def get_underline_thickness(self, font_size:int=16)->float:
    """
				Returns average thickness of the underline.
				**Note:** Real underline thickness of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.
			"""
    pass

  def get_font_name(self)->str:
    """
				Returns font family name.
			"""
    pass

  def get_font_style_name(self)->str:
    """
				Returns font style name.
			"""
    pass

  def get_ot_name_strings(self)->__core__.Dictionary:
    """
				Returns `Dictionary` with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
			"""
    pass

  def get_font_style(self)->int:
    """
				Returns font style flags.
			"""
    pass

  def get_font_weight(self)->int:
    """
				Returns weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
			"""
    pass

  def get_font_stretch(self)->int:
    """
				Returns font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
			"""
    pass

  def get_spacing(self, spacing:int )->int:
    """
				Returns the amount of spacing for the given `spacing` type.
			"""
    pass

  def get_opentype_features(self)->__core__.Dictionary:
    """
				Returns a set of OpenType feature tags. More info: `url=https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags`OpenType feature tags`/url`.
			"""
    pass

  def set_cache_capacity(self, single_line:int, multi_line:int)->None:
    """
				Sets LRU cache capacity for `draw_*` methods.
			"""
    pass

  def get_string_size(self, text:str, alignment:int =0, width:float=-1, font_size:int=16, justification_flags:int=3, direction:int =0, orientation:int =0)->__core__.Vector2:
    """
				Returns the size of a bounding box of a single-line string, taking kerning, advance and subpixel positioning into account. See also `get_multiline_string_size` and `draw_string`.
				For example, to get the string size as displayed by a single-line Label, use:
				
				```gdscript
				var string_size = $Label.get_theme_font("font").get_string_size($Label.text, HORIZONTAL_ALIGNMENT_LEFT, -1, $Label.get_theme_font_size("font_size"))
				```
				
				
				**Note:** Since kerning, advance and subpixel positioning are taken into account by `get_string_size`, using separate `get_string_size` calls on substrings of a string then adding the results together will return a different result compared to using a single `get_string_size` call on the full string.
				**Note:** Real height of the string is context-dependent and can be significantly different from the value returned by `get_height`.
			"""
    pass

  def get_multiline_string_size(self, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->__core__.Vector2:
    """
				Returns the size of a bounding box of a string broken into the lines, taking kerning and advance into account.
				See also `draw_multiline_string`.
			"""
    pass

  def draw_string(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None:
    """
				Draw `text` into a canvas item using the font, at a given position, with `modulate` color, optionally clipping the width and aligning horizontally. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				See also `CanvasItem.draw_string`.
			"""
    pass

  def draw_multiline_string(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None:
    """
				Breaks `text` into lines using rules specified by `brk_flags` and draws it into a canvas item using the font, at a given position, with `modulate` color, optionally clipping the width and aligning horizontally. `pos` specifies the baseline of the first line, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				See also `CanvasItem.draw_multiline_string`.
			"""
    pass

  def draw_string_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, size:int=1, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None:
    """
				Draw `text` outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size, optionally clipping the width and aligning horizontally. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				See also `CanvasItem.draw_string_outline`.
			"""
    pass

  def draw_multiline_string_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, size:int=1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None:
    """
				Breaks `text` to the lines using rules specified by `brk_flags` and draws text outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size, optionally clipping the width and aligning horizontally. `pos` specifies the baseline of the first line, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				See also `CanvasItem.draw_multiline_string_outline`.
			"""
    pass

  def get_char_size(self, char:int, font_size:int)->__core__.Vector2:
    """
				Returns the size of a character. Does not take kerning into account.
				**Note:** Do not use this function to calculate width of the string character by character, use `get_string_size` or `TextLine` instead. The height returned is the font height (see also `get_height`) and has no relation to the glyph height.
			"""
    pass

  def draw_char(self, canvas_item:__core__.RID, pos:__core__.Vector2, char:int, font_size:int, modulate:__core__.Color= __core__.Color.new0())->float:
    """
				Draw a single Unicode character `char` into a canvas item using the font, at a given position, with `modulate` color. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				**Note:** Do not use this function to draw strings character by character, use `draw_string` or `TextLine` instead.
			"""
    pass

  def draw_char_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, char:int, font_size:int, size:int=-1, modulate:__core__.Color= __core__.Color.new0())->float:
    """
				Draw a single Unicode character `char` outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				**Note:** Do not use this function to draw strings character by character, use `draw_string` or `TextLine` instead.
			"""
    pass

  def has_char(self, char:int)->bool:
    """
				Returns `true` if a Unicode `char` is available in the font.
			"""
    pass

  def get_supported_chars(self)->str:
    """
				Returns a string containing all the characters available in the font.
				If a given character is included in more than one font data source, it appears only once in the returned string.
			"""
    pass

  def is_language_supported(self, language:str)->bool:
    """
				Returns `true`, if font supports given language (`url=https://en.wikipedia.org/wiki/ISO_639-1`ISO 639`/url` code).
			"""
    pass

  def is_script_supported(self, script:str)->bool:
    """
				Returns `true`, if font supports given script (`url=https://en.wikipedia.org/wiki/ISO_15924`ISO 15924`/url` code).
			"""
    pass

  def get_supported_feature_list(self)->__core__.Dictionary:
    """
				Returns list of OpenType features supported by font.
			"""
    pass

  def get_supported_variation_list(self)->__core__.Dictionary:
    """
				Returns list of supported `url=https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg`variation coordinates`/url`, each coordinate is returned as `tag: Vector3i(min_value,max_value,default_value)`.
				Font variations allow for continuous change of glyph characteristics along some given design axis, such as weight, width or slant.
				To print available variation axes of a variable font:
				```gdscript
				var fv = FontVariation.new()
				fv.base_font = load("res://RobotoFlex.ttf")
				var variation_list = fv.get_supported_variation_list()
				for tag in variation_list:
					var name = TextServerManager.get_primary_interface().tag_to_name(tag)
					var values = variation_list`tag`
					print("variation axis: %s (%d)\n\tmin, max, default: %s" % `name, tag, values`)
				```
				**Note:** To set and get variation coordinates of a `FontVariation`, use `FontVariation.variation_opentype`.
			"""
    pass

  def get_face_count(self)->int:
    """
				Returns number of faces in the TrueType / OpenType collection.
			"""
    pass


