from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__



class SkeletonModification2DJiggle(__skeletonmodification2d__.SkeletonModification2D):
  """
		This modification moves a series of bones, typically called a bone chain, towards a target. What makes this modification special is that it calculates the velocity and acceleration for each bone in the bone chain, and runs a very light physics-like calculation using the inputted values. This allows the bones to overshoot the target and "jiggle" around. It can be configured to act more like a spring, or sway around like cloth might.
		This modification is useful for adding additional motion to things like hair, the edges of clothing, and more. It has several settings to that allow control over how the joint moves when the target moves.
		**Note:** The Jiggle modifier has `jiggle_joints`, which are the data objects that hold the data for each joint in the Jiggle chain. This is different from than `Bone2D` nodes! Jiggle joints hold the data needed for each `Bone2D` in the bone chain used by the Jiggle modification.
	"""

  @staticmethod
  def constructor()->SkeletonModification2DJiggle:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DJiggle:pass


  @property
  def target_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def jiggle_data_chain_length(self)->int:
    """"""
    pass
  @jiggle_data_chain_length.setter
  def jiggle_data_chain_length(self,  value:int)->None:
    """"""
    pass
  @property
  def stiffness(self)->float:
    """"""
    pass
  @stiffness.setter
  def stiffness(self,  value:float)->None:
    """"""
    pass
  @property
  def mass(self)->float:
    """"""
    pass
  @mass.setter
  def mass(self,  value:float)->None:
    """"""
    pass
  @property
  def damping(self)->float:
    """"""
    pass
  @damping.setter
  def damping(self,  value:float)->None:
    """"""
    pass
  @property
  def use_gravity(self)->bool:
    """"""
    pass
  @use_gravity.setter
  def use_gravity(self,  value:bool)->None:
    """"""
    pass
  @property
  def gravity(self)->__core__.Vector2:
    """"""
    pass
  @gravity.setter
  def gravity(self,  value:__core__.Vector2)->None:
    """"""
    pass
  def set_target_node(self, target_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_jiggle_data_chain_length(self, length:int)->None:
    """"""
    pass

  def get_jiggle_data_chain_length(self)->int:
    """"""
    pass

  def set_stiffness(self, stiffness:float)->None:
    """"""
    pass

  def get_stiffness(self)->float:
    """"""
    pass

  def set_mass(self, mass:float)->None:
    """"""
    pass

  def get_mass(self)->float:
    """"""
    pass

  def set_damping(self, damping:float)->None:
    """"""
    pass

  def get_damping(self)->float:
    """"""
    pass

  def set_use_gravity(self, use_gravity:bool)->None:
    """"""
    pass

  def get_use_gravity(self)->bool:
    """"""
    pass

  def set_gravity(self, gravity:__core__.Vector2)->None:
    """"""
    pass

  def get_gravity(self)->__core__.Vector2:
    """"""
    pass

  def set_use_colliders(self, use_colliders:bool)->None:
    """
				If `true`, the Jiggle modifier will take colliders into account, keeping them from entering into these collision objects.
			"""
    pass

  def get_use_colliders(self)->bool:
    """
				Returns whether the jiggle modifier is taking physics colliders into account when solving.
			"""
    pass

  def set_collision_mask(self, collision_mask:int)->None:
    """
				Sets the collision mask that the Jiggle modifier will use when reacting to colliders, if the Jiggle modifier is set to take colliders into account.
			"""
    pass

  def get_collision_mask(self)->int:
    """
				Returns the collision mask used by the Jiggle modifier when collisions are enabled.
			"""
    pass

  def set_jiggle_joint_bone2d_node(self, joint_idx:int, bone2d_node:__core__.NodePath|str)->None:
    """
				Sets the `Bone2D` node assigned to the Jiggle joint at `joint_idx`.
			"""
    pass

  def get_jiggle_joint_bone2d_node(self, joint_idx:int)->__core__.NodePath:
    """
				Returns the `Bone2D` node assigned to the Jiggle joint at `joint_idx`.
			"""
    pass

  def set_jiggle_joint_bone_index(self, joint_idx:int, bone_idx:int)->None:
    """
				Sets the bone index, `bone_idx`, of the Jiggle joint at `joint_idx`. When possible, this will also update the `bone2d_node` of the Jiggle joint based on data provided by the linked skeleton.
			"""
    pass

  def get_jiggle_joint_bone_index(self, joint_idx:int)->int:
    """
				Returns the index of the `Bone2D` node assigned to the Jiggle joint at `joint_idx`.
			"""
    pass

  def set_jiggle_joint_override(self, joint_idx:int, override:bool)->None:
    """
				Sets whether the Jiggle joint at `joint_idx` should override the default Jiggle joint settings. Setting this to `true` will make the joint use its own settings rather than the default ones attached to the modification.
			"""
    pass

  def get_jiggle_joint_override(self, joint_idx:int)->bool:
    """
				Returns a boolean that indicates whether the joint at `joint_idx` is overriding the default Jiggle joint data defined in the modification.
			"""
    pass

  def set_jiggle_joint_stiffness(self, joint_idx:int, stiffness:float)->None:
    """
				Sets the of stiffness of the Jiggle joint at `joint_idx`.
			"""
    pass

  def get_jiggle_joint_stiffness(self, joint_idx:int)->float:
    """
				Returns the stiffness of the Jiggle joint at `joint_idx`.
			"""
    pass

  def set_jiggle_joint_mass(self, joint_idx:int, mass:float)->None:
    """
				Sets the of mass of the Jiggle joint at `joint_idx`.
			"""
    pass

  def get_jiggle_joint_mass(self, joint_idx:int)->float:
    """
				Returns the amount of mass of the jiggle joint at `joint_idx`.
			"""
    pass

  def set_jiggle_joint_damping(self, joint_idx:int, damping:float)->None:
    """
				Sets the amount of damping of the Jiggle joint at `joint_idx`.
			"""
    pass

  def get_jiggle_joint_damping(self, joint_idx:int)->float:
    """
				Returns the amount of damping of the Jiggle joint at `joint_idx`.
			"""
    pass

  def set_jiggle_joint_use_gravity(self, joint_idx:int, use_gravity:bool)->None:
    """
				Sets whether the Jiggle joint at `joint_idx` should use gravity.
			"""
    pass

  def get_jiggle_joint_use_gravity(self, joint_idx:int)->bool:
    """
				Returns a boolean that indicates whether the joint at `joint_idx` is using gravity or not.
			"""
    pass

  def set_jiggle_joint_gravity(self, joint_idx:int, gravity:__core__.Vector2)->None:
    """
				Sets the gravity vector of the Jiggle joint at `joint_idx`.
			"""
    pass

  def get_jiggle_joint_gravity(self, joint_idx:int)->__core__.Vector2:
    """
				Returns a `Vector2` representing the amount of gravity the Jiggle joint at `joint_idx` is influenced by.
			"""
    pass


