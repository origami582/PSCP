from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D as __shape2d__
import py4godot.classes.Resource as __resource__



class Shape2D(__resource__.Resource):
  """
		Abstract base class for all 2D shapes, intended for use in physics.
		**Performance:** Primitive shapes, especially `CircleShape2D`, are fast to check collisions against. `ConvexPolygonShape2D` is slower, and `ConcavePolygonShape2D` is the slowest.
	"""

  @staticmethod
  def constructor()->Shape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Shape2D:pass


  @property
  def custom_solver_bias(self)->float:
    """"""
    pass
  @custom_solver_bias.setter
  def custom_solver_bias(self,  value:float)->None:
    """"""
    pass
  def set_custom_solver_bias(self, bias:float)->None:
    """"""
    pass

  def get_custom_solver_bias(self)->float:
    """"""
    pass

  def collide(self, local_xform:__core__.Transform2D, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D)->bool:
    """
				Returns `true` if this shape is colliding with another.
				This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`).
			"""
    pass

  def collide_with_motion(self, local_xform:__core__.Transform2D, local_motion:__core__.Vector2, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D, shape_motion:__core__.Vector2)->bool:
    """
				Returns whether this shape would collide with another, if a given movement was applied.
				This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`).
			"""
    pass

  def collide_and_get_contacts(self, local_xform:__core__.Transform2D, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D)->__core__.PackedVector2Array:
    """
				Returns a list of contact point pairs where this shape touches another.
				If there are no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of `with_shape`.
				A collision pair A, B can be used to calculate the collision normal with `(B - A).normalized()`, and the collision depth with `(B - A).length()`. This information is typically used to separate shapes, particularly in collision solvers.
				This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`).
			"""
    pass

  def collide_with_motion_and_get_contacts(self, local_xform:__core__.Transform2D, local_motion:__core__.Vector2, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D, shape_motion:__core__.Vector2)->__core__.PackedVector2Array:
    """
				Returns a list of contact point pairs where this shape would touch another, if a given movement was applied.
				If there would be no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of `with_shape`.
				A collision pair A, B can be used to calculate the collision normal with `(B - A).normalized()`, and the collision depth with `(B - A).length()`. This information is typically used to separate shapes, particularly in collision solvers.
				This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`).
			"""
    pass

  def draw(self, canvas_item:__core__.RID, color:__core__.Color)->None:
    """
				Draws a solid shape onto a `CanvasItem` with the `RenderingServer` API filled with the specified `color`. The exact drawing method is specific for each shape and cannot be configured.
			"""
    pass

  def get_rect(self)->__core__.Rect2:
    """
				Returns a `Rect2` representing the shapes boundary.
			"""
    pass


