from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class StreamPeer(__refcounted__.RefCounted):
  """
		StreamPeer is an abstract base class mostly used for stream-based protocols (such as TCP). It provides an API for sending and receiving data through streams as raw data or strings.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	"""

  @staticmethod
  def constructor()->StreamPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeer:pass


  @property
  def big_endian(self)->bool:
    """"""
    pass
  @big_endian.setter
  def big_endian(self,  value:bool)->None:
    """"""
    pass
  def put_data(self, data:__core__.PackedByteArray)->int:
    """
				Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an `enum Error` code.
			"""
    pass

  def put_partial_data(self, data:__core__.PackedByteArray)->__core__.Array:
    """
				Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an `enum Error` code and an integer, describing how much data was actually sent.
			"""
    pass

  def get_data(self, bytes:int)->__core__.Array:
    """
				Returns a chunk data with the received bytes. The number of bytes to be received can be requested in the `bytes` argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an `enum Error` code and a data array.
			"""
    pass

  def get_partial_data(self, bytes:int)->__core__.Array:
    """
				Returns a chunk data with the received bytes. The number of bytes to be received can be requested in the `bytes` argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values: an `enum Error` code and a data array.
			"""
    pass

  def get_available_bytes(self)->int:
    """
				Returns the number of bytes this `StreamPeer` has available.
			"""
    pass

  def set_big_endian(self, enable:bool)->None:
    """"""
    pass

  def is_big_endian_enabled(self)->bool:
    """"""
    pass

  def put_8(self, value:int)->None:
    """
				Puts a signed byte into the stream.
			"""
    pass

  def put_u8(self, value:int)->None:
    """
				Puts an unsigned byte into the stream.
			"""
    pass

  def put_16(self, value:int)->None:
    """
				Puts a signed 16-bit value into the stream.
			"""
    pass

  def put_u16(self, value:int)->None:
    """
				Puts an unsigned 16-bit value into the stream.
			"""
    pass

  def put_32(self, value:int)->None:
    """
				Puts a signed 32-bit value into the stream.
			"""
    pass

  def put_u32(self, value:int)->None:
    """
				Puts an unsigned 32-bit value into the stream.
			"""
    pass

  def put_64(self, value:int)->None:
    """
				Puts a signed 64-bit value into the stream.
			"""
    pass

  def put_u64(self, value:int)->None:
    """
				Puts an unsigned 64-bit value into the stream.
			"""
    pass

  def put_half(self, value:float)->None:
    """
				Puts a half-precision float into the stream.
			"""
    pass

  def put_float(self, value:float)->None:
    """
				Puts a single-precision float into the stream.
			"""
    pass

  def put_double(self, value:float)->None:
    """
				Puts a double-precision float into the stream.
			"""
    pass

  def put_string(self, value:str)->None:
    """
				Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.
				**Note:** To put an ASCII string without prepending its size, you can use `put_data`:
				
				```gdscript
				put_data("Hello world".to_ascii_buffer())
				```
				
				
			"""
    pass

  def put_utf8_string(self, value:str)->None:
    """
				Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.
				**Note:** To put a UTF-8 string without prepending its size, you can use `put_data`:
				
				```gdscript
				put_data("Hello world".to_utf8_buffer())
				```
				
				
			"""
    pass

  def put_var(self, value:Any, full_objects:bool=False)->None:
    """
				Puts a Variant into the stream. If `full_objects` is `true` encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method.
			"""
    pass

  def get_8(self)->int:
    """
				Gets a signed byte from the stream.
			"""
    pass

  def get_u8(self)->int:
    """
				Gets an unsigned byte from the stream.
			"""
    pass

  def get_16(self)->int:
    """
				Gets a signed 16-bit value from the stream.
			"""
    pass

  def get_u16(self)->int:
    """
				Gets an unsigned 16-bit value from the stream.
			"""
    pass

  def get_32(self)->int:
    """
				Gets a signed 32-bit value from the stream.
			"""
    pass

  def get_u32(self)->int:
    """
				Gets an unsigned 32-bit value from the stream.
			"""
    pass

  def get_64(self)->int:
    """
				Gets a signed 64-bit value from the stream.
			"""
    pass

  def get_u64(self)->int:
    """
				Gets an unsigned 64-bit value from the stream.
			"""
    pass

  def get_half(self)->float:
    """
				Gets a half-precision float from the stream.
			"""
    pass

  def get_float(self)->float:
    """
				Gets a single-precision float from the stream.
			"""
    pass

  def get_double(self)->float:
    """
				Gets a double-precision float from the stream.
			"""
    pass

  def get_string(self, bytes:int=-1)->str:
    """
				Gets an ASCII string with byte-length `bytes` from the stream. If `bytes` is negative (default) the length will be read from the stream using the reverse process of `put_string`.
			"""
    pass

  def get_utf8_string(self, bytes:int=-1)->str:
    """
				Gets a UTF-8 string with byte-length `bytes` from the stream (this decodes the string sent as UTF-8). If `bytes` is negative (default) the length will be read from the stream using the reverse process of `put_utf8_string`.
			"""
    pass

  def get_var(self, allow_objects:bool=False)->Any:
    """
				Gets a Variant from the stream. If `allow_objects` is `true`, decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			"""
    pass


