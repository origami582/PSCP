from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.3 as __3__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.Object as __object__
import py4godot.classes.i as __i__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.PhysicsShapeQueryParameters3D as __physicsshapequeryparameters3d__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.PhysicsPointQueryParameters3D as __physicspointqueryparameters3d__
import py4godot.classes.PhysicsRayQueryParameters3D as __physicsrayqueryparameters3d__
import py4godot.classes.y as __y__



class PhysicsDirectSpaceState3D(__object__.Object):
  """
		Provides direct access to a physics space in the `PhysicsServer3D`. It's used mainly to do queries against objects and areas residing in a given space.
		**Note:** This class is not meant to be instantiated directly. Use `World3D.direct_space_state` to get the world's physics 3D space state.
	"""

  @staticmethod
  def constructor()->PhysicsDirectSpaceState3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsDirectSpaceState3D:pass


  def intersect_point(self, parameters:__physicspointqueryparameters3d__.PhysicsPointQueryParameters3D, max_results:int=32)->typedarray::Dictionary:
    """
				Checks whether a point is inside any solid shape. Position and other parameters are defined through `PhysicsPointQueryParameters3D`. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				The number of intersections can be limited with the `max_results` parameter, to reduce the processing time.
			"""
    pass

  def intersect_ray(self, parameters:__physicsrayqueryparameters3d__.PhysicsRayQueryParameters3D)->__core__.Dictionary:
    """
				Intersects a ray in a given space. Ray position and other parameters are defined through `PhysicsRayQueryParameters3D`. The returned object is a dictionary with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`normal`: The object's surface normal at the intersection point, or `Vector3(0, 0, 0)` if the ray starts inside the shape and `PhysicsRayQueryParameters3D.hit_from_inside` is `true`.
				`position`: The intersection point.
				`face_index`: The face index at the intersection point.
				**Note:** Returns a valid number only if the intersected shape is a `ConcavePolygonShape3D`. Otherwise, `-1` is returned.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				If the ray did not intersect anything, then an empty dictionary is returned instead.
			"""
    pass

  def intersect_shape(self, parameters:__physicsshapequeryparameters3d__.PhysicsShapeQueryParameters3D, max_results:int=32)->typedarray::Dictionary:
    """
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters3D` object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				The number of intersections can be limited with the `max_results` parameter, to reduce the processing time.
				**Note:** This method does not take into account the `motion` property of the object.
			"""
    pass

  def cast_motion(self, parameters:__physicsshapequeryparameters3d__.PhysicsShapeQueryParameters3D)->__core__.PackedFloat32Array:
    """
				Checks how far a `Shape3D` can move without colliding. All the parameters for the query, including the shape and the motion, are supplied through a `PhysicsShapeQueryParameters3D` object.
				Returns an array with the safe and unsafe proportions (between 0 and 1) of the motion. The safe proportion is the maximum fraction of the motion that can be made without a collision. The unsafe proportion is the minimum fraction of the distance that must be moved for a collision. If no collision is detected a result of ``1.0, 1.0`` will be returned.
				**Note:** Any `Shape3D`s that the shape is already colliding with e.g. inside of, will be ignored. Use `collide_shape` to determine the `Shape3D`s that the shape is already colliding with.
			"""
    pass

  def collide_shape(self, parameters:__physicsshapequeryparameters3d__.PhysicsShapeQueryParameters3D, max_results:int=32)->typedarray::Vector3:
    """
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters3D` object, against the space. The resulting array contains a list of points where the shape intersects another. Like with `intersect_shape`, the number of returned results can be limited to save processing time.
				Returned points are a list of pairs of contact points. For each pair the first one is in the shape passed in `PhysicsShapeQueryParameters3D` object, second one is in the collided shape from the physics space.
				**Note:** This method does not take into account the `motion` property of the object.
			"""
    pass

  def get_rest_info(self, parameters:__physicsshapequeryparameters3d__.PhysicsShapeQueryParameters3D)->__core__.Dictionary:
    """
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters3D` object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:
				`collider_id`: The colliding object's ID.
				`linear_velocity`: The colliding object's velocity `Vector3`. If the object is an `Area3D`, the result is `(0, 0, 0)`.
				`normal`: The collision normal of the query shape at the intersection point, pointing away from the intersecting object.
				`point`: The intersection point.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				If the shape did not intersect anything, then an empty dictionary is returned instead.
				**Note:** This method does not take into account the `motion` property of the object.
			"""
    pass


