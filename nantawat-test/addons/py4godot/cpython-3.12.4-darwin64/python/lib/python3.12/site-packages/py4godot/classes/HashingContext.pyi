from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.HashingContext as __hashingcontext__
import py4godot.classes.RefCounted as __refcounted__


class HashType:
  HASH_MD5:int = 0
  HASH_SHA1:int = 1
  HASH_SHA256:int = 2


class HashingContext(__refcounted__.RefCounted):
  """
		The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. Useful for computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).
		The `enum HashType` enum shows the supported hashing algorithms.
		
		```gdscript
		const CHUNK_SIZE = 1024

		func hash_file(path):
			# Check that file exists.
			if not FileAccess.file_exists(path):
				return
			# Start an SHA-256 context.
			var ctx = HashingContext.new()
			ctx.start(HashingContext.HASH_SHA256)
			# Open the file to hash.
			var file = FileAccess.open(path, FileAccess.READ)
			# Update the context after reading each chunk.
			while file.get_position() < file.get_length():
				var remaining = file.get_length() - file.get_position()
				ctx.update(file.get_buffer(min(remaining, CHUNK_SIZE)))
			# Get the computed hash.
			var res = ctx.finish()
			# Print the result as hex string and array.
			printt(res.hex_encode(), Array(res))
		```
		
		
	"""

  @staticmethod
  def constructor()->HashingContext:pass



  @staticmethod
  def cast(other:__object__.Object)->HashingContext:pass


  def start(self, type:int )->int:
    """
				Starts a new hash computation of the given `type` (e.g. `constant HASH_SHA256` to start computation of an SHA-256).
			"""
    pass

  def update(self, chunk:__core__.PackedByteArray)->int:
    """
				Updates the computation with the given `chunk` of data.
			"""
    pass

  def finish(self)->__core__.PackedByteArray:
    """
				Closes the current context, and return the computed hash.
			"""
    pass


