from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class AStar2D(__refcounted__.RefCounted):
  """
		An implementation of the A* algorithm, used to find the shortest path between two vertices on a connected graph in 2D space.
		See `AStar3D` for a more thorough explanation on how to use this class. `AStar2D` is a wrapper for `AStar3D` that enforces 2D coordinates.
	"""

  @staticmethod
  def constructor()->AStar2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AStar2D:pass


  def _estimate_cost(self, from_id:int, end_id:int)->float:
    """
				Called when estimating the cost between a point and the path's ending point.
				Note that this function is hidden in the default `AStar2D` class.
			"""
    pass

  def _compute_cost(self, from_id:int, to_id:int)->float:
    """
				Called when computing the cost between two connected points.
				Note that this function is hidden in the default `AStar2D` class.
			"""
    pass

  def get_available_point_id(self)->int:
    """
				Returns the next available point ID with no point associated to it.
			"""
    pass

  def add_point(self, id:int, position:__core__.Vector2, weight_scale:float=1.0)->None:
    """
				Adds a new point at the given position with the given identifier. The `id` must be 0 or larger, and the `weight_scale` must be 0.0 or greater.
				The `weight_scale` is multiplied by the result of `_compute_cost` when determining the overall cost of traveling across a segment from a neighboring point to this point. Thus, all else being equal, the algorithm prefers points with lower `weight_scale`s to form a path.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1
				```
				
				
				If there already exists a point for the given `id`, its position and weight scale are updated to the given values.
			"""
    pass

  def get_point_position(self, id:int)->__core__.Vector2:
    """
				Returns the position of the point associated with the given `id`.
			"""
    pass

  def set_point_position(self, id:int, position:__core__.Vector2)->None:
    """
				Sets the `position` for the point with the given `id`.
			"""
    pass

  def get_point_weight_scale(self, id:int)->float:
    """
				Returns the weight scale of the point associated with the given `id`.
			"""
    pass

  def set_point_weight_scale(self, id:int, weight_scale:float)->None:
    """
				Sets the `weight_scale` for the point with the given `id`. The `weight_scale` is multiplied by the result of `_compute_cost` when determining the overall cost of traveling across a segment from a neighboring point to this point.
			"""
    pass

  def remove_point(self, id:int)->None:
    """
				Removes the point associated with the given `id` from the points pool.
			"""
    pass

  def has_point(self, id:int)->bool:
    """
				Returns whether a point associated with the given `id` exists.
			"""
    pass

  def get_point_connections(self, id:int)->__core__.PackedInt64Array:
    """
				Returns an array with the IDs of the points that form the connection with the given point.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1))
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, true)
				astar.connect_points(1, 3, true)

				var neighbors = astar.get_point_connections(1) # Returns `2, 3`
				```
				
				
			"""
    pass

  def get_point_ids(self)->__core__.PackedInt64Array:
    """
				Returns an array of all point IDs.
			"""
    pass

  def set_point_disabled(self, id:int, disabled:bool=True)->None:
    """
				Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.
			"""
    pass

  def is_point_disabled(self, id:int)->bool:
    """
				Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.
			"""
    pass

  def connect_points(self, id:int, to_id:int, bidirectional:bool=True)->None:
    """
				Creates a segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is allowed, not the reverse direction.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 1))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2, false)
				```
				
				
			"""
    pass

  def disconnect_points(self, id:int, to_id:int, bidirectional:bool=True)->None:
    """
				Deletes the segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is prevented, and a unidirectional segment possibly remains.
			"""
    pass

  def are_points_connected(self, id:int, to_id:int, bidirectional:bool=True)->bool:
    """
				Returns whether there is a connection/segment between the given points. If `bidirectional` is `false`, returns whether movement from `id` to `to_id` is possible through this segment.
			"""
    pass

  def get_point_count(self)->int:
    """
				Returns the number of points currently in the points pool.
			"""
    pass

  def get_point_capacity(self)->int:
    """
				Returns the capacity of the structure backing the points, useful in conjunction with `reserve_space`.
			"""
    pass

  def reserve_space(self, num_nodes:int)->None:
    """
				Reserves space internally for `num_nodes` points. Useful if you're adding a known large number of points at once, such as points on a grid.
			"""
    pass

  def clear(self)->None:
    """
				Clears all the points and segments.
			"""
    pass

  def get_closest_point(self, to_position:__core__.Vector2, include_disabled:bool=False)->int:
    """
				Returns the ID of the closest point to `to_position`, optionally taking disabled points into account. Returns `-1` if there are no points in the points pool.
				**Note:** If several points are the closest to `to_position`, the one with the smallest ID will be returned, ensuring a deterministic result.
			"""
    pass

  def get_closest_position_in_segment(self, to_position:__core__.Vector2)->__core__.Vector2:
    """
				Returns the closest position to `to_position` that resides inside a segment between two connected points.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2)
				var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)
				```
				
				
				The result is in the segment that goes from `y = 0` to `y = 5`. It's the closest position in the segment to the given point.
			"""
    pass

  def get_point_path(self, from_id:int, to_id:int, allow_partial_path:bool=False)->__core__.PackedVector2Array:
    """
				Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				If there is no valid path to the target, and `allow_partial_path` is `true`, returns a path to the point closest to the target that can be reached.
				**Note:** This method is not thread-safe. If called from a `Thread`, it will return an empty array and will print an error message.
				Additionally, when `allow_partial_path` is `true` and `to_id` is disabled the search may take an unusually long time to finish.
			"""
    pass

  def get_id_path(self, from_id:int, to_id:int, allow_partial_path:bool=False)->__core__.PackedInt64Array:
    """
				Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				If there is no valid path to the target, and `allow_partial_path` is `true`, returns a path to the point closest to the target that can be reached.
				**Note:** When `allow_partial_path` is `true` and `to_id` is disabled the search may take an unusually long time to finish.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, false)
				astar.connect_points(2, 3, false)
				astar.connect_points(4, 3, false)
				astar.connect_points(1, 4, false)

				var res = astar.get_id_path(1, 3) # Returns `1, 2, 3`
				```
				
				
				If you change the 2nd point's weight to 3, then the result will be ``1, 4, 3`` instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.
			"""
    pass


