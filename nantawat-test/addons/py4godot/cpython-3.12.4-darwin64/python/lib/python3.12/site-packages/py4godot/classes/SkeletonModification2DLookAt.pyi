from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__



class SkeletonModification2DLookAt(__skeletonmodification2d__.SkeletonModification2D):
  """
		This `SkeletonModification2D` rotates a bone to look a target. This is extremely helpful for moving character's head to look at the player, rotating a turret to look at a target, or any other case where you want to make a bone rotate towards something quickly and easily.
	"""

  @staticmethod
  def constructor()->SkeletonModification2DLookAt:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DLookAt:pass


  @property
  def bone_index(self)->int:
    """"""
    pass
  @bone_index.setter
  def bone_index(self,  value:int)->None:
    """"""
    pass
  @property
  def bone2d_node(self)->__core__.NodePath:
    """"""
    pass
  @bone2d_node.setter
  def bone2d_node(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def target_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_bone2d_node(self, bone2d_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_bone2d_node(self)->__core__.NodePath:
    """"""
    pass

  def set_bone_index(self, bone_idx:int)->None:
    """"""
    pass

  def get_bone_index(self)->int:
    """"""
    pass

  def set_target_node(self, target_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_additional_rotation(self, rotation:float)->None:
    """
				Sets the amount of additional rotation that is to be applied after executing the modification. This allows for offsetting the results by the inputted rotation amount.
			"""
    pass

  def get_additional_rotation(self)->float:
    """
				Returns the amount of additional rotation that is applied after the LookAt modification executes.
			"""
    pass

  def set_enable_constraint(self, enable_constraint:bool)->None:
    """
				Sets whether this modification will use constraints or not. When `true`, constraints will be applied when solving the LookAt modification.
			"""
    pass

  def get_enable_constraint(self)->bool:
    """
				Returns `true` if the LookAt modification is using constraints.
			"""
    pass

  def set_constraint_angle_min(self, angle_min:float)->None:
    """
				Sets the constraint's minimum allowed angle.
			"""
    pass

  def get_constraint_angle_min(self)->float:
    """
				Returns the constraint's minimum allowed angle.
			"""
    pass

  def set_constraint_angle_max(self, angle_max:float)->None:
    """
				Sets the constraint's maximum allowed angle.
			"""
    pass

  def get_constraint_angle_max(self)->float:
    """
				Returns the constraint's maximum allowed angle.
			"""
    pass

  def set_constraint_angle_invert(self, invert:bool)->None:
    """
				When `true`, the modification will use an inverted joint constraint.
				An inverted joint constraint only constraints the `Bone2D` to the angles _outside of_ the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values.
			"""
    pass

  def get_constraint_angle_invert(self)->bool:
    """
				Returns whether the constraints to this modification are inverted or not.
			"""
    pass


