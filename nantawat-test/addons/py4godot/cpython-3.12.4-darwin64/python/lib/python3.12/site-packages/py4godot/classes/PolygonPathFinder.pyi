from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class PolygonPathFinder(__resource__.Resource):
  """
"""

  @staticmethod
  def constructor()->PolygonPathFinder:pass



  @staticmethod
  def cast(other:__object__.Object)->PolygonPathFinder:pass


  @property
  def data(self)->__core__.Dictionary:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def setup(self, points:__core__.PackedVector2Array, connections:__core__.PackedInt32Array)->None:
    """
				Sets up `PolygonPathFinder` with an array of points that define the vertices of the polygon, and an array of indices that determine the edges of the polygon.
				The length of `connections` must be even, returns an error if odd.
				
				```gdscript
				var polygon_path_finder = PolygonPathFinder.new()
				var points = `Vector2(0.0, 0.0), Vector2(1.0, 0.0), Vector2(0.0, 1.0)`
				var connections = `0, 1, 1, 2, 2, 0`
				polygon_path_finder.setup(points, connections)
				```
				
				
			"""
    pass

  def find_path(self, from_:__core__.Vector2, to:__core__.Vector2)->__core__.PackedVector2Array:
    """
"""
    pass

  def get_intersections(self, from_:__core__.Vector2, to:__core__.Vector2)->__core__.PackedVector2Array:
    """
"""
    pass

  def get_closest_point(self, point:__core__.Vector2)->__core__.Vector2:
    """
"""
    pass

  def is_point_inside(self, point:__core__.Vector2)->bool:
    """
				Returns `true` if `point` falls inside the polygon area.
				
				```gdscript
				var polygon_path_finder = PolygonPathFinder.new()
				var points = `Vector2(0.0, 0.0), Vector2(1.0, 0.0), Vector2(0.0, 1.0)`
				var connections = `0, 1, 1, 2, 2, 0`
				polygon_path_finder.setup(points, connections)
				print(polygon_path_finder.is_point_inside(Vector2(0.2, 0.2))) # Prints true
				print(polygon_path_finder.is_point_inside(Vector2(1.0, 1.0))) # Prints false
				```
				
				
			"""
    pass

  def set_point_penalty(self, idx:int, penalty:float)->None:
    """
"""
    pass

  def get_point_penalty(self, idx:int)->float:
    """
"""
    pass

  def get_bounds(self)->__core__.Rect2:
    """
"""
    pass


