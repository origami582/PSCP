from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__


class ErrorCode:
  PARSE_ERROR:int = -32700
  INVALID_REQUEST:int = -32600
  METHOD_NOT_FOUND:int = -32601
  INVALID_PARAMS:int = -32602
  INTERNAL_ERROR:int = -32603


class JSONRPC(__object__.Object):
  """
		`url=https://www.jsonrpc.org/`JSON-RPC`/url` is a standard which wraps a method call in a `JSON` object. The object has a particular structure and identifies which method is called, the parameters to that function, and carries an ID to keep track of responses. This class implements that standard on top of `Dictionary`; you will have to convert between a `Dictionary` and `JSON` with other functions.
	"""

  @staticmethod
  def constructor()->JSONRPC:pass



  @staticmethod
  def cast(other:__object__.Object)->JSONRPC:pass


  def set_scope(self, scope:str, target:__object__.Object)->None:
    """"""
    pass

  def process_action(self, action:Any, recurse:bool=False)->Any:
    """
				Given a Dictionary which takes the form of a JSON-RPC request: unpack the request and run it. Methods are resolved by looking at the field called "method" and looking for an equivalently named function in the JSONRPC object. If one is found that method is called.
				To add new supported methods extend the JSONRPC class and call `process_action` on your subclass.
				`action`: The action to be run, as a Dictionary in the form of a JSON-RPC request or notification.
			"""
    pass

  def process_string(self, action:str)->str:
    """
"""
    pass

  def make_request(self, method:str, params:Any, id:Any)->__core__.Dictionary:
    """
				Returns a dictionary in the form of a JSON-RPC request. Requests are sent to a server with the expectation of a response. The ID field is used for the server to specify which exact request it is responding to.
				- `method`: Name of the method being called.
				- `params`: An array or dictionary of parameters being passed to the method.
				- `id`: Uniquely identifies this request. The server is expected to send a response with the same ID.
			"""
    pass

  def make_response(self, result:Any, id:Any)->__core__.Dictionary:
    """
				When a server has received and processed a request, it is expected to send a response. If you did not want a response then you need to have sent a Notification instead.
				- `result`: The return value of the function which was called.
				- `id`: The ID of the request this response is targeted to.
			"""
    pass

  def make_notification(self, method:str, params:Any)->__core__.Dictionary:
    """
				Returns a dictionary in the form of a JSON-RPC notification. Notifications are one-shot messages which do not expect a response.
				- `method`: Name of the method being called.
				- `params`: An array or dictionary of parameters being passed to the method.
			"""
    pass

  def make_response_error(self, code:int, message:str, id:Any=None)->__core__.Dictionary:
    """
				Creates a response which indicates a previous reply has failed in some way.
				- `code`: The error code corresponding to what kind of error this is. See the `enum ErrorCode` constants.
				- `message`: A custom message about this error.
				- `id`: The request this error is a response to.
			"""
    pass


