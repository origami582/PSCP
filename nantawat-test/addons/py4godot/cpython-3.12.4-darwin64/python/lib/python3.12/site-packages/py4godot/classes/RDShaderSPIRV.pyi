from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.RenderingDevice as __renderingdevice__



class RDShaderSPIRV(__resource__.Resource):
  """
		`RDShaderSPIRV` represents an `RDShaderFile`'s `url=https://www.khronos.org/spir/`SPIR-V`/url` code for various shader stages, as well as possible compilation error messages. SPIR-V is a low-level intermediate shader representation. This intermediate representation is not used directly by GPUs for rendering, but it can be compiled into binary shaders that GPUs can understand. Unlike compiled shaders, SPIR-V is portable across GPU models and driver versions.
		This object is used by `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDShaderSPIRV:pass



  @staticmethod
  def cast(other:__object__.Object)->RDShaderSPIRV:pass


  @property
  def bytecode_vertex(self)->__core__.PackedByteArray:
    """"""
    pass
  @bytecode_vertex.setter
  def bytecode_vertex(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def bytecode_fragment(self)->__core__.PackedByteArray:
    """"""
    pass
  @bytecode_fragment.setter
  def bytecode_fragment(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def bytecode_tesselation_control(self)->__core__.PackedByteArray:
    """"""
    pass
  @bytecode_tesselation_control.setter
  def bytecode_tesselation_control(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def bytecode_tesselation_evaluation(self)->__core__.PackedByteArray:
    """"""
    pass
  @bytecode_tesselation_evaluation.setter
  def bytecode_tesselation_evaluation(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def bytecode_compute(self)->__core__.PackedByteArray:
    """"""
    pass
  @bytecode_compute.setter
  def bytecode_compute(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def compile_error_vertex(self)->str:
    """"""
    pass
  @compile_error_vertex.setter
  def compile_error_vertex(self,  value:str)->None:
    """"""
    pass
  @property
  def compile_error_fragment(self)->str:
    """"""
    pass
  @compile_error_fragment.setter
  def compile_error_fragment(self,  value:str)->None:
    """"""
    pass
  @property
  def compile_error_tesselation_control(self)->str:
    """"""
    pass
  @compile_error_tesselation_control.setter
  def compile_error_tesselation_control(self,  value:str)->None:
    """"""
    pass
  @property
  def compile_error_tesselation_evaluation(self)->str:
    """"""
    pass
  @compile_error_tesselation_evaluation.setter
  def compile_error_tesselation_evaluation(self,  value:str)->None:
    """"""
    pass
  @property
  def compile_error_compute(self)->str:
    """"""
    pass
  @compile_error_compute.setter
  def compile_error_compute(self,  value:str)->None:
    """"""
    pass
  def set_stage_bytecode(self, stage:int , bytecode:__core__.PackedByteArray)->None:
    """
				Sets the SPIR-V `bytecode` for the given shader `stage`. Equivalent to setting one of `bytecode_compute`, `bytecode_fragment`, `bytecode_tesselation_control`, `bytecode_tesselation_evaluation`, `bytecode_vertex`.
			"""
    pass

  def get_stage_bytecode(self, stage:int )->__core__.PackedByteArray:
    """
				Equivalent to getting one of `bytecode_compute`, `bytecode_fragment`, `bytecode_tesselation_control`, `bytecode_tesselation_evaluation`, `bytecode_vertex`.
			"""
    pass

  def set_stage_compile_error(self, stage:int , compile_error:str)->None:
    """
				Sets the compilation error message for the given shader `stage` to `compile_error`. Equivalent to setting one of `compile_error_compute`, `compile_error_fragment`, `compile_error_tesselation_control`, `compile_error_tesselation_evaluation`, `compile_error_vertex`.
			"""
    pass

  def get_stage_compile_error(self, stage:int )->str:
    """
				Returns the compilation error message for the given shader `stage`. Equivalent to getting one of `compile_error_compute`, `compile_error_fragment`, `compile_error_tesselation_control`, `compile_error_tesselation_evaluation`, `compile_error_vertex`.
			"""
    pass


