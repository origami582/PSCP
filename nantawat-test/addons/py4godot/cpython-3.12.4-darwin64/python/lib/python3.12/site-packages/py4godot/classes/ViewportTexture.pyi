from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D as __texture2d__



class ViewportTexture(__texture2d__.Texture2D):
  """
		A `ViewportTexture` provides the content of a `Viewport` as a dynamic `Texture2D`. This can be used to combine the rendering of `Control`, `Node2D` and `Node3D` nodes. For example, you can use this texture to display a 3D scene inside a `TextureRect`, or a 2D overlay in a `Sprite3D`.
		To get a `ViewportTexture` in code, use the `Viewport.get_texture` method on the target viewport.
		**Note:** A `ViewportTexture` is always local to its scene (see `Resource.resource_local_to_scene`). If the scene root is not ready, it may return incorrect data (see `signal Node.ready`).
		**Note:** Instantiating scenes containing a high-resolution `ViewportTexture` may cause noticeable stutter.
		**Note:** When using a `Viewport` with `Viewport.use_hdr_2d` set to `true`, the returned texture will be an HDR image encoded in linear space. This may look darker than normal when displayed directly on screen. To convert to gamma space, you can do the following:
		```gdscript
		img.convert(Image.FORMAT_RGBA8)
		imb.linear_to_srgb()
		```
		**Note:** Some nodes such as `Decal`, `Light3D`, and `PointLight2D` do not support using `ViewportTexture` directly. To use texture data from a `ViewportTexture` in these nodes, you need to create an `ImageTexture` by calling `Texture2D.get_image` on the `ViewportTexture` and passing the result to `ImageTexture.create_from_image`. This conversion is a slow operation, so it should not be performed every frame.
	"""

  @staticmethod
  def constructor()->ViewportTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->ViewportTexture:pass


  @property
  def viewport_path(self)->__core__.NodePath:
    """"""
    pass
  @viewport_path.setter
  def viewport_path(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_viewport_path_in_scene(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_viewport_path_in_scene(self)->__core__.NodePath:
    """"""
    pass


