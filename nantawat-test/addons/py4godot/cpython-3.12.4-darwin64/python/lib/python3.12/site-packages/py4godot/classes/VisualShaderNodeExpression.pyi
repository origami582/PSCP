from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeGroupBase as __visualshadernodegroupbase__



class VisualShaderNodeExpression(__visualshadernodegroupbase__.VisualShaderNodeGroupBase):
  """
		Custom Godot Shading Language expression, with a custom number of input and output ports.
		The provided code is directly injected into the graph's matching shader function (`vertex`, `fragment`, or `light`), so it cannot be used to declare functions, varyings, uniforms, or global constants. See `VisualShaderNodeGlobalExpression` for such global definitions.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeExpression:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeExpression:pass


  @property
  def expression(self)->str:
    """"""
    pass
  @expression.setter
  def expression(self,  value:str)->None:
    """"""
    pass
  def set_expression(self, expression:str)->None:
    """"""
    pass

  def get_expression(self)->str:
    """"""
    pass


