from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.r as __r__
import py4godot.classes.l as __l__
import py4godot.classes.e as __e__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.P as __p__
import py4godot.classes.d as __d__
import py4godot.classes.Object as __object__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__



class Geometry3D(__object__.Object):
  """
		Provides a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations in 3D.
	"""



  @staticmethod
  def cast(other:__object__.Object)->Geometry3D:pass

  @staticmethod
  def instance()->Geometry3D:pass

  def compute_convex_mesh_points(self, planes:__core__.Array)->__core__.PackedVector3Array:
    """
				Calculates and returns all the vertex points of a convex shape defined by an array of `planes`.
			"""
    pass

  def build_box_planes(self, extents:__core__.Vector3)->typedarray::Plane:
    """
				Returns an array with 6 `Plane`s that describe the sides of a box centered at the origin. The box size is defined by `extents`, which represents one (positive) corner of the box (i.e. half its actual size).
			"""
    pass

  def build_cylinder_planes(self, radius:float, height:float, sides:int, axis:int =2)->typedarray::Plane:
    """
				Returns an array of `Plane`s closely bounding a faceted cylinder centered at the origin with radius `radius` and height `height`. The parameter `sides` defines how many planes will be generated for the round part of the cylinder. The parameter `axis` describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).
			"""
    pass

  def build_capsule_planes(self, radius:float, height:float, sides:int, lats:int, axis:int =2)->typedarray::Plane:
    """
				Returns an array of `Plane`s closely bounding a faceted capsule centered at the origin with radius `radius` and height `height`. The parameter `sides` defines how many planes will be generated for the side part of the capsule, whereas `lats` gives the number of latitudinal steps at the bottom and top of the capsule. The parameter `axis` describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).
			"""
    pass

  def get_closest_points_between_segments(self, p1:__core__.Vector3, p2:__core__.Vector3, q1:__core__.Vector3, q2:__core__.Vector3)->__core__.PackedVector3Array:
    """
				Given the two 3D segments (`p1`, `p2`) and (`q1`, `q2`), finds those two points on the two segments that are closest to each other. Returns a `PackedVector3Array` that contains this point on (`p1`, `p2`) as well the accompanying point on (`q1`, `q2`).
			"""
    pass

  def get_closest_point_to_segment(self, point:__core__.Vector3, s1:__core__.Vector3, s2:__core__.Vector3)->__core__.Vector3:
    """
				Returns the 3D point on the 3D segment (`s1`, `s2`) that is closest to `point`. The returned point will always be inside the specified segment.
			"""
    pass

  def get_closest_point_to_segment_uncapped(self, point:__core__.Vector3, s1:__core__.Vector3, s2:__core__.Vector3)->__core__.Vector3:
    """
				Returns the 3D point on the 3D line defined by (`s1`, `s2`) that is closest to `point`. The returned point can be inside the segment (`s1`, `s2`) or outside of it, i.e. somewhere on the line extending from the segment.
			"""
    pass

  def get_triangle_barycentric_coords(self, point:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->__core__.Vector3:
    """
				Returns a `Vector3` containing weights based on how close a 3D position (`point`) is to a triangle's different vertices (`a`, `b` and `c`). This is useful for interpolating between the data of different vertices in a triangle. One example use case is using this to smoothly rotate over a mesh instead of relying solely on face normals.
				`url=https://en.wikipedia.org/wiki/Barycentric_coordinate_system`Here is a more detailed explanation of barycentric coordinates.`/url`
			"""
    pass

  def ray_intersects_triangle(self, from_:__core__.Vector3, dir:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->Any:
    """
				Tests if the 3D ray starting at `from` with the direction of `dir` intersects the triangle specified by `a`, `b` and `c`. If yes, returns the point of intersection as `Vector3`. If no intersection takes place, returns `null`.
			"""
    pass

  def segment_intersects_triangle(self, from_:__core__.Vector3, to:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->Any:
    """
				Tests if the segment (`from`, `to`) intersects the triangle `a`, `b`, `c`. If yes, returns the point of intersection as `Vector3`. If no intersection takes place, returns `null`.
			"""
    pass

  def segment_intersects_sphere(self, from_:__core__.Vector3, to:__core__.Vector3, sphere_position:__core__.Vector3, sphere_radius:float)->__core__.PackedVector3Array:
    """
				Checks if the segment (`from`, `to`) intersects the sphere that is located at `sphere_position` and has radius `sphere_radius`. If no, returns an empty `PackedVector3Array`. If yes, returns a `PackedVector3Array` containing the point of intersection and the sphere's normal at the point of intersection.
			"""
    pass

  def segment_intersects_cylinder(self, from_:__core__.Vector3, to:__core__.Vector3, height:float, radius:float)->__core__.PackedVector3Array:
    """
				Checks if the segment (`from`, `to`) intersects the cylinder with height `height` that is centered at the origin and has radius `radius`. If no, returns an empty `PackedVector3Array`. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.
			"""
    pass

  def segment_intersects_convex(self, from_:__core__.Vector3, to:__core__.Vector3, planes:__core__.Array)->__core__.PackedVector3Array:
    """
				Given a convex hull defined though the `Plane`s in the array `planes`, tests if the segment (`from`, `to`) intersects with that hull. If an intersection is found, returns a `PackedVector3Array` containing the point the intersection and the hull's normal. Otherwise, returns an empty array.
			"""
    pass

  def clip_polygon(self, points:__core__.PackedVector3Array, plane:__core__.Plane)->__core__.PackedVector3Array:
    """
				Clips the polygon defined by the points in `points` against the `plane` and returns the points of the clipped polygon.
			"""
    pass

  def tetrahedralize_delaunay(self, points:__core__.PackedVector3Array)->__core__.PackedInt32Array:
    """
				Tetrahedralizes the volume specified by a discrete set of `points` in 3D space, ensuring that no point lies within the circumsphere of any resulting tetrahedron. The method returns a `PackedInt32Array` where each tetrahedron consists of four consecutive point indices into the `points` array (resulting in an array with `n * 4` elements, where `n` is the number of tetrahedra found). If the tetrahedralization is unsuccessful, an empty `PackedInt32Array` is returned.
			"""
    pass


