from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModificationStack2D as __skeletonmodificationstack2d__
import py4godot.classes.Resource as __resource__



class SkeletonModification2D(__resource__.Resource):
  """
		This resource provides an interface that can be expanded so code that operates on `Bone2D` nodes in a `Skeleton2D` can be mixed and matched together to create complex interactions.
		This is used to provide Godot with a flexible and powerful Inverse Kinematics solution that can be adapted for many different uses.
	"""

  @staticmethod
  def constructor()->SkeletonModification2D:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2D:pass


  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def execution_mode(self)->int:
    """"""
    pass
  @execution_mode.setter
  def execution_mode(self,  value:int)->None:
    """"""
    pass
  def _execute(self, delta:float)->None:
    """
				Executes the given modification. This is where the modification performs whatever function it is designed to do.
			"""
    pass

  def _setup_modification(self, modification_stack:__skeletonmodificationstack2d__.SkeletonModificationStack2D)->None:
    """
				Called when the modification is setup. This is where the modification performs initialization.
			"""
    pass

  def _draw_editor_gizmo(self)->None:
    """
				Used for drawing **editor-only** modification gizmos. This function will only be called in the Godot editor and can be overridden to draw custom gizmos.
				**Note:** You will need to use the Skeleton2D from `SkeletonModificationStack2D.get_skeleton` and it's draw functions, as the `SkeletonModification2D` resource cannot draw on its own.
			"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_enabled(self)->bool:
    """"""
    pass

  def get_modification_stack(self)->__skeletonmodificationstack2d__.SkeletonModificationStack2D:
    """
				Returns the `SkeletonModificationStack2D` that this modification is bound to. Through the modification stack, you can access the Skeleton2D the modification is operating on.
			"""
    pass

  def set_is_setup(self, is_setup:bool)->None:
    """
				Manually allows you to set the setup state of the modification. This function should only rarely be used, as the `SkeletonModificationStack2D` the modification is bound to should handle setting the modification up.
			"""
    pass

  def get_is_setup(self)->bool:
    """
				Returns whether this modification has been successfully setup or not.
			"""
    pass

  def set_execution_mode(self, execution_mode:int)->None:
    """"""
    pass

  def get_execution_mode(self)->int:
    """"""
    pass

  def clamp_angle(self, angle:float, min:float, max:float, invert:bool)->float:
    """
				Takes an angle and clamps it so it is within the passed-in `min` and `max` range. `invert` will inversely clamp the angle, clamping it to the range outside of the given bounds.
			"""
    pass

  def set_editor_draw_gizmo(self, draw_gizmo:bool)->None:
    """
				Sets whether this modification will call `_draw_editor_gizmo` in the Godot editor to draw modification-specific gizmos.
			"""
    pass

  def get_editor_draw_gizmo(self)->bool:
    """
				Returns whether this modification will call `_draw_editor_gizmo` in the Godot editor to draw modification-specific gizmos.
			"""
    pass


