from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RefCounted as __refcounted__



class RDPipelineDepthStencilState(__refcounted__.RefCounted):
  """
		`RDPipelineDepthStencilState` controls the way depth and stencil comparisons are performed when sampling those values using `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDPipelineDepthStencilState:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineDepthStencilState:pass


  @property
  def enable_depth_test(self)->bool:
    """"""
    pass
  @enable_depth_test.setter
  def enable_depth_test(self,  value:bool)->None:
    """"""
    pass
  @property
  def enable_depth_write(self)->bool:
    """"""
    pass
  @enable_depth_write.setter
  def enable_depth_write(self,  value:bool)->None:
    """"""
    pass
  @property
  def depth_compare_operator(self)->int:
    """"""
    pass
  @depth_compare_operator.setter
  def depth_compare_operator(self,  value:int)->None:
    """"""
    pass
  @property
  def enable_depth_range(self)->bool:
    """"""
    pass
  @enable_depth_range.setter
  def enable_depth_range(self,  value:bool)->None:
    """"""
    pass
  @property
  def depth_range_min(self)->float:
    """"""
    pass
  @depth_range_min.setter
  def depth_range_min(self,  value:float)->None:
    """"""
    pass
  @property
  def depth_range_max(self)->float:
    """"""
    pass
  @depth_range_max.setter
  def depth_range_max(self,  value:float)->None:
    """"""
    pass
  @property
  def enable_stencil(self)->bool:
    """"""
    pass
  @enable_stencil.setter
  def enable_stencil(self,  value:bool)->None:
    """"""
    pass
  @property
  def front_op_fail(self)->int:
    """"""
    pass
  @front_op_fail.setter
  def front_op_fail(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_pass(self)->int:
    """"""
    pass
  @front_op_pass.setter
  def front_op_pass(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_depth_fail(self)->int:
    """"""
    pass
  @front_op_depth_fail.setter
  def front_op_depth_fail(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_compare(self)->int:
    """"""
    pass
  @front_op_compare.setter
  def front_op_compare(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_compare_mask(self)->int:
    """"""
    pass
  @front_op_compare_mask.setter
  def front_op_compare_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_write_mask(self)->int:
    """"""
    pass
  @front_op_write_mask.setter
  def front_op_write_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def front_op_reference(self)->int:
    """"""
    pass
  @front_op_reference.setter
  def front_op_reference(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_fail(self)->int:
    """"""
    pass
  @back_op_fail.setter
  def back_op_fail(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_pass(self)->int:
    """"""
    pass
  @back_op_pass.setter
  def back_op_pass(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_depth_fail(self)->int:
    """"""
    pass
  @back_op_depth_fail.setter
  def back_op_depth_fail(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_compare(self)->int:
    """"""
    pass
  @back_op_compare.setter
  def back_op_compare(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_compare_mask(self)->int:
    """"""
    pass
  @back_op_compare_mask.setter
  def back_op_compare_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_write_mask(self)->int:
    """"""
    pass
  @back_op_write_mask.setter
  def back_op_write_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def back_op_reference(self)->int:
    """"""
    pass
  @back_op_reference.setter
  def back_op_reference(self,  value:int)->None:
    """"""
    pass
  def set_enable_depth_test(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_depth_test(self)->bool:
    """"""
    pass

  def set_enable_depth_write(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_depth_write(self)->bool:
    """"""
    pass

  def set_depth_compare_operator(self, p_member:int )->None:
    """"""
    pass

  def get_depth_compare_operator(self)->int:
    """"""
    pass

  def set_enable_depth_range(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_depth_range(self)->bool:
    """"""
    pass

  def set_depth_range_min(self, p_member:float)->None:
    """"""
    pass

  def get_depth_range_min(self)->float:
    """"""
    pass

  def set_depth_range_max(self, p_member:float)->None:
    """"""
    pass

  def get_depth_range_max(self)->float:
    """"""
    pass

  def set_enable_stencil(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_stencil(self)->bool:
    """"""
    pass

  def set_front_op_fail(self, p_member:int )->None:
    """"""
    pass

  def get_front_op_fail(self)->int:
    """"""
    pass

  def set_front_op_pass(self, p_member:int )->None:
    """"""
    pass

  def get_front_op_pass(self)->int:
    """"""
    pass

  def set_front_op_depth_fail(self, p_member:int )->None:
    """"""
    pass

  def get_front_op_depth_fail(self)->int:
    """"""
    pass

  def set_front_op_compare(self, p_member:int )->None:
    """"""
    pass

  def get_front_op_compare(self)->int:
    """"""
    pass

  def set_front_op_compare_mask(self, p_member:int)->None:
    """"""
    pass

  def get_front_op_compare_mask(self)->int:
    """"""
    pass

  def set_front_op_write_mask(self, p_member:int)->None:
    """"""
    pass

  def get_front_op_write_mask(self)->int:
    """"""
    pass

  def set_front_op_reference(self, p_member:int)->None:
    """"""
    pass

  def get_front_op_reference(self)->int:
    """"""
    pass

  def set_back_op_fail(self, p_member:int )->None:
    """"""
    pass

  def get_back_op_fail(self)->int:
    """"""
    pass

  def set_back_op_pass(self, p_member:int )->None:
    """"""
    pass

  def get_back_op_pass(self)->int:
    """"""
    pass

  def set_back_op_depth_fail(self, p_member:int )->None:
    """"""
    pass

  def get_back_op_depth_fail(self)->int:
    """"""
    pass

  def set_back_op_compare(self, p_member:int )->None:
    """"""
    pass

  def get_back_op_compare(self)->int:
    """"""
    pass

  def set_back_op_compare_mask(self, p_member:int)->None:
    """"""
    pass

  def get_back_op_compare_mask(self)->int:
    """"""
    pass

  def set_back_op_write_mask(self, p_member:int)->None:
    """"""
    pass

  def get_back_op_write_mask(self)->int:
    """"""
    pass

  def set_back_op_reference(self, p_member:int)->None:
    """"""
    pass

  def get_back_op_reference(self)->int:
    """"""
    pass


