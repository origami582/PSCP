from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RefCounted as __refcounted__



class RDTextureFormat(__refcounted__.RefCounted):
  """
		This object is used by `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDTextureFormat:pass



  @staticmethod
  def cast(other:__object__.Object)->RDTextureFormat:pass


  @property
  def format(self)->int:
    """"""
    pass
  @format.setter
  def format(self,  value:int)->None:
    """"""
    pass
  @property
  def width(self)->int:
    """"""
    pass
  @width.setter
  def width(self,  value:int)->None:
    """"""
    pass
  @property
  def height(self)->int:
    """"""
    pass
  @height.setter
  def height(self,  value:int)->None:
    """"""
    pass
  @property
  def depth(self)->int:
    """"""
    pass
  @depth.setter
  def depth(self,  value:int)->None:
    """"""
    pass
  @property
  def array_layers(self)->int:
    """"""
    pass
  @array_layers.setter
  def array_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def mipmaps(self)->int:
    """"""
    pass
  @mipmaps.setter
  def mipmaps(self,  value:int)->None:
    """"""
    pass
  @property
  def texture_type(self)->int:
    """"""
    pass
  @texture_type.setter
  def texture_type(self,  value:int)->None:
    """"""
    pass
  @property
  def samples(self)->int:
    """"""
    pass
  @samples.setter
  def samples(self,  value:int)->None:
    """"""
    pass
  @property
  def usage_bits(self)->int:
    """"""
    pass
  @usage_bits.setter
  def usage_bits(self,  value:int)->None:
    """"""
    pass
  @property
  def is_resolve_buffer(self)->bool:
    """"""
    pass
  @is_resolve_buffer.setter
  def is_resolve_buffer(self,  value:bool)->None:
    """"""
    pass
  @property
  def is_discardable(self)->bool:
    """"""
    pass
  @is_discardable.setter
  def is_discardable(self,  value:bool)->None:
    """"""
    pass
  def set_format(self, p_member:int )->None:
    """"""
    pass

  def get_format(self)->int:
    """"""
    pass

  def set_width(self, p_member:int)->None:
    """"""
    pass

  def get_width(self)->int:
    """"""
    pass

  def set_height(self, p_member:int)->None:
    """"""
    pass

  def get_height(self)->int:
    """"""
    pass

  def set_depth(self, p_member:int)->None:
    """"""
    pass

  def get_depth(self)->int:
    """"""
    pass

  def set_array_layers(self, p_member:int)->None:
    """"""
    pass

  def get_array_layers(self)->int:
    """"""
    pass

  def set_mipmaps(self, p_member:int)->None:
    """"""
    pass

  def get_mipmaps(self)->int:
    """"""
    pass

  def set_texture_type(self, p_member:int )->None:
    """"""
    pass

  def get_texture_type(self)->int:
    """"""
    pass

  def set_samples(self, p_member:int )->None:
    """"""
    pass

  def get_samples(self)->int:
    """"""
    pass

  def set_usage_bits(self, p_member:int)->None:
    """"""
    pass

  def get_usage_bits(self)->int:
    """"""
    pass

  def set_is_resolve_buffer(self, p_member:bool)->None:
    """"""
    pass

  def get_is_resolve_buffer(self)->bool:
    """"""
    pass

  def set_is_discardable(self, p_member:bool)->None:
    """"""
    pass

  def get_is_discardable(self)->bool:
    """"""
    pass

  def add_shareable_format(self, format:int )->None:
    """
				Adds `format` as a valid format for the corresponding `RDTextureView`'s `RDTextureView.format_override` property. If any format is added as shareable, then the main `format` must also be added.
			"""
    pass

  def remove_shareable_format(self, format:int )->None:
    """
				Removes `format` from the list of valid formats that the corresponding `RDTextureView`'s `RDTextureView.format_override` property can be set to.
			"""
    pass


