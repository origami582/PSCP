from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.Decal as __decal__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.LightmapGI as __lightmapgi__



class VehicleWheel3D(__node3d__.Node3D):
  """
		A node used as a child of a `VehicleBody3D` parent to simulate the behavior of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.
		**Note:** This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you may need to write your own physics integration using another `PhysicsBody3D` class.
	"""

  @staticmethod
  def constructor()->VehicleWheel3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VehicleWheel3D:pass


  @property
  def engine_force(self)->float:
    """"""
    pass
  @engine_force.setter
  def engine_force(self,  value:float)->None:
    """"""
    pass
  @property
  def brake(self)->float:
    """"""
    pass
  @brake.setter
  def brake(self,  value:float)->None:
    """"""
    pass
  @property
  def steering(self)->float:
    """"""
    pass
  @steering.setter
  def steering(self,  value:float)->None:
    """"""
    pass
  @property
  def use_as_traction(self)->bool:
    """"""
    pass
  @use_as_traction.setter
  def use_as_traction(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_as_steering(self)->bool:
    """"""
    pass
  @use_as_steering.setter
  def use_as_steering(self,  value:bool)->None:
    """"""
    pass
  @property
  def wheel_roll_influence(self)->float:
    """"""
    pass
  @wheel_roll_influence.setter
  def wheel_roll_influence(self,  value:float)->None:
    """"""
    pass
  @property
  def wheel_radius(self)->float:
    """"""
    pass
  @wheel_radius.setter
  def wheel_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def wheel_rest_length(self)->float:
    """"""
    pass
  @wheel_rest_length.setter
  def wheel_rest_length(self,  value:float)->None:
    """"""
    pass
  @property
  def wheel_friction_slip(self)->float:
    """"""
    pass
  @wheel_friction_slip.setter
  def wheel_friction_slip(self,  value:float)->None:
    """"""
    pass
  @property
  def suspension_travel(self)->float:
    """"""
    pass
  @suspension_travel.setter
  def suspension_travel(self,  value:float)->None:
    """"""
    pass
  @property
  def suspension_stiffness(self)->float:
    """"""
    pass
  @suspension_stiffness.setter
  def suspension_stiffness(self,  value:float)->None:
    """"""
    pass
  @property
  def suspension_max_force(self)->float:
    """"""
    pass
  @suspension_max_force.setter
  def suspension_max_force(self,  value:float)->None:
    """"""
    pass
  @property
  def damping_compression(self)->float:
    """"""
    pass
  @damping_compression.setter
  def damping_compression(self,  value:float)->None:
    """"""
    pass
  @property
  def damping_relaxation(self)->float:
    """"""
    pass
  @damping_relaxation.setter
  def damping_relaxation(self,  value:float)->None:
    """"""
    pass
  def set_radius(self, length:float)->None:
    """"""
    pass

  def get_radius(self)->float:
    """"""
    pass

  def set_suspension_rest_length(self, length:float)->None:
    """"""
    pass

  def get_suspension_rest_length(self)->float:
    """"""
    pass

  def set_suspension_travel(self, length:float)->None:
    """"""
    pass

  def get_suspension_travel(self)->float:
    """"""
    pass

  def set_suspension_stiffness(self, length:float)->None:
    """"""
    pass

  def get_suspension_stiffness(self)->float:
    """"""
    pass

  def set_suspension_max_force(self, length:float)->None:
    """"""
    pass

  def get_suspension_max_force(self)->float:
    """"""
    pass

  def set_damping_compression(self, length:float)->None:
    """"""
    pass

  def get_damping_compression(self)->float:
    """"""
    pass

  def set_damping_relaxation(self, length:float)->None:
    """"""
    pass

  def get_damping_relaxation(self)->float:
    """"""
    pass

  def set_use_as_traction(self, enable:bool)->None:
    """"""
    pass

  def is_used_as_traction(self)->bool:
    """"""
    pass

  def set_use_as_steering(self, enable:bool)->None:
    """"""
    pass

  def is_used_as_steering(self)->bool:
    """"""
    pass

  def set_friction_slip(self, length:float)->None:
    """"""
    pass

  def get_friction_slip(self)->float:
    """"""
    pass

  def is_in_contact(self)->bool:
    """
				Returns `true` if this wheel is in contact with a surface.
			"""
    pass

  def get_contact_body(self)->__navigationlink3d__.NavigationLink3D|__gpuparticlescollision3d__.GPUParticlesCollision3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__csgtorus3d__.CSGTorus3D|__csgcombiner3d__.CSGCombiner3D|__skeleton3d__.Skeleton3D|__lookatmodifier3d__.LookAtModifier3D|__light3d__.Light3D|__rootmotionview__.RootMotionView|__openxrhand__.OpenXRHand|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__boneattachment3d__.BoneAttachment3D|__pathfollow3d__.PathFollow3D|__directionallight3d__.DirectionalLight3D|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__meshinstance3d__.MeshInstance3D|__xrcamera3d__.XRCamera3D|__navigationobstacle3d__.NavigationObstacle3D|__staticbody3d__.StaticBody3D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrfacemodifier3d__.XRFaceModifier3D|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__joint3d__.Joint3D|__spotlight3d__.SpotLight3D|__animatablebody3d__.AnimatableBody3D|__sliderjoint3d__.SliderJoint3D|__conetwistjoint3d__.ConeTwistJoint3D|__csgbox3d__.CSGBox3D|__retargetmodifier3d__.RetargetModifier3D|__rigidbody3d__.RigidBody3D|__csgmesh3d__.CSGMesh3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__softbody3d__.SoftBody3D|__collisionshape3d__.CollisionShape3D|__collisionobject3d__.CollisionObject3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__gpuparticles3d__.GPUParticles3D|__csgprimitive3d__.CSGPrimitive3D|__gridmap__.GridMap|__csgcylinder3d__.CSGCylinder3D|__camera3d__.Camera3D|__occluderinstance3d__.OccluderInstance3D|__importermeshinstance3d__.ImporterMeshInstance3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__springbonesimulator3d__.SpringBoneSimulator3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__decal__.Decal|__lightmapprobe__.LightmapProbe|__fogvolume__.FogVolume|__spritebase3d__.SpriteBase3D|__visualinstance3d__.VisualInstance3D|__audiostreamplayer3d__.AudioStreamPlayer3D|__physicalbone3d__.PhysicalBone3D|__shapecast3d__.ShapeCast3D|__csgsphere3d__.CSGSphere3D|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__navigationregion3d__.NavigationRegion3D|__cpuparticles3d__.CPUParticles3D|__csgshape3d__.CSGShape3D|__node3d__.Node3D|__audiolistener3d__.AudioListener3D|__vehiclewheel3d__.VehicleWheel3D|__voxelgi__.VoxelGI|__geometryinstance3d__.GeometryInstance3D|__xrorigin3d__.XROrigin3D|__springarm3d__.SpringArm3D|__path3d__.Path3D|__marker3d__.Marker3D|__remotetransform3d__.RemoteTransform3D|__pinjoint3d__.PinJoint3D|__collisionpolygon3d__.CollisionPolygon3D|__xranchor3d__.XRAnchor3D|__skeletonik3d__.SkeletonIK3D|__springbonecollision3d__.SpringBoneCollision3D|__xrcontroller3d__.XRController3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__reflectionprobe__.ReflectionProbe|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__skeletonmodifier3d__.SkeletonModifier3D|__vehiclebody3d__.VehicleBody3D|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__multimeshinstance3d__.MultiMeshInstance3D|__csgpolygon3d__.CSGPolygon3D|__raycast3d__.RayCast3D|__physicsbody3d__.PhysicsBody3D|__xrnode3d__.XRNode3D|__xrhandmodifier3d__.XRHandModifier3D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__area3d__.Area3D|__animatedsprite3d__.AnimatedSprite3D|__xrbodymodifier3d__.XRBodyModifier3D|__label3d__.Label3D|__hingejoint3d__.HingeJoint3D|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__omnilight3d__.OmniLight3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__lightmapgi__.LightmapGI:
    """
				Returns the contacting body node if valid in the tree, as `Node3D`. At the moment, `GridMap` is not supported so the node will be always of type `PhysicsBody3D`.
				Returns `null` if the wheel is not in contact with a surface, or the contact body is not a `PhysicsBody3D`.
			"""
    pass

  def get_contact_point(self)->__core__.Vector3:
    """
				Returns the point of the suspension's collision in world space if the wheel is in contact. If the wheel isn't in contact with anything, returns the maximum point of the wheel's ray cast in world space, which is defined by `wheel_rest_length + wheel_radius`.
			"""
    pass

  def get_contact_normal(self)->__core__.Vector3:
    """
				Returns the normal of the suspension's collision in world space if the wheel is in contact. If the wheel isn't in contact with anything, returns a vector pointing directly along the suspension axis toward the vehicle in world space.
			"""
    pass

  def set_roll_influence(self, roll_influence:float)->None:
    """"""
    pass

  def get_roll_influence(self)->float:
    """"""
    pass

  def get_skidinfo(self)->float:
    """
				Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is skidding (the wheel has lost grip, e.g. icy terrain), 1.0 means not skidding (the wheel has full grip, e.g. dry asphalt road).
			"""
    pass

  def get_rpm(self)->float:
    """
				Returns the rotational speed of the wheel in revolutions per minute.
			"""
    pass

  def set_engine_force(self, engine_force:float)->None:
    """"""
    pass

  def get_engine_force(self)->float:
    """"""
    pass

  def set_brake(self, brake:float)->None:
    """"""
    pass

  def get_brake(self)->float:
    """"""
    pass

  def set_steering(self, steering:float)->None:
    """"""
    pass

  def get_steering(self)->float:
    """"""
    pass


