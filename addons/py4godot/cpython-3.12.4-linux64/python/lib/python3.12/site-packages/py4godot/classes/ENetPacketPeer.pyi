from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.PacketPeer as __packetpeer__


class PeerState:
  STATE_DISCONNECTED:int = 0
  STATE_CONNECTING:int = 1
  STATE_ACKNOWLEDGING_CONNECT:int = 2
  STATE_CONNECTION_PENDING:int = 3
  STATE_CONNECTION_SUCCEEDED:int = 4
  STATE_CONNECTED:int = 5
  STATE_DISCONNECT_LATER:int = 6
  STATE_DISCONNECTING:int = 7
  STATE_ACKNOWLEDGING_DISCONNECT:int = 8
  STATE_ZOMBIE:int = 9
class PeerStatistic:
  PEER_PACKET_LOSS:int = 0
  PEER_PACKET_LOSS_VARIANCE:int = 1
  PEER_PACKET_LOSS_EPOCH:int = 2
  PEER_ROUND_TRIP_TIME:int = 3
  PEER_ROUND_TRIP_TIME_VARIANCE:int = 4
  PEER_LAST_ROUND_TRIP_TIME:int = 5
  PEER_LAST_ROUND_TRIP_TIME_VARIANCE:int = 6
  PEER_PACKET_THROTTLE:int = 7
  PEER_PACKET_THROTTLE_LIMIT:int = 8
  PEER_PACKET_THROTTLE_COUNTER:int = 9
  PEER_PACKET_THROTTLE_EPOCH:int = 10
  PEER_PACKET_THROTTLE_ACCELERATION:int = 11
  PEER_PACKET_THROTTLE_DECELERATION:int = 12
  PEER_PACKET_THROTTLE_INTERVAL:int = 13


class ENetPacketPeer(__packetpeer__.PacketPeer):
  """"""

  @staticmethod
  def constructor()->ENetPacketPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->ENetPacketPeer:pass


  def peer_disconnect(self, data:int=0)->None:
    """"""
    pass

  def peer_disconnect_later(self, data:int=0)->None:
    """"""
    pass

  def peer_disconnect_now(self, data:int=0)->None:
    """"""
    pass

  def ping(self)->None:
    """"""
    pass

  def ping_interval(self, ping_interval:int)->None:
    """"""
    pass

  def reset(self)->None:
    """"""
    pass

  def send(self, channel:int, packet:__core__.PackedByteArray, flags:int)->int:
    """"""
    pass

  def throttle_configure(self, interval:int, acceleration:int, deceleration:int)->None:
    """"""
    pass

  def set_timeout(self, timeout:int, timeout_min:int, timeout_max:int)->None:
    """"""
    pass

  def get_packet_flags(self)->int:
    """"""
    pass

  def get_remote_address(self)->str:
    """"""
    pass

  def get_remote_port(self)->int:
    """"""
    pass

  def get_statistic(self, statistic:int )->float:
    """"""
    pass

  def get_state(self)->int:
    """"""
    pass

  def get_channels(self)->int:
    """"""
    pass

  def is_active(self)->bool:
    """"""
    pass


