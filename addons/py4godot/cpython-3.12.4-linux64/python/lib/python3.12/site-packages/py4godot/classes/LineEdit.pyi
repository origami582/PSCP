from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Container as __container__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.Label as __label__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.Slider as __slider__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.GridContainer as __gridcontainer__


class MenuItems:
  MENU_CUT:int = 0
  MENU_COPY:int = 1
  MENU_PASTE:int = 2
  MENU_CLEAR:int = 3
  MENU_SELECT_ALL:int = 4
  MENU_UNDO:int = 5
  MENU_REDO:int = 6
  MENU_SUBMENU_TEXT_DIR:int = 7
  MENU_DIR_INHERITED:int = 8
  MENU_DIR_AUTO:int = 9
  MENU_DIR_LTR:int = 10
  MENU_DIR_RTL:int = 11
  MENU_DISPLAY_UCC:int = 12
  MENU_SUBMENU_INSERT_UCC:int = 13
  MENU_INSERT_LRM:int = 14
  MENU_INSERT_RLM:int = 15
  MENU_INSERT_LRE:int = 16
  MENU_INSERT_RLE:int = 17
  MENU_INSERT_LRO:int = 18
  MENU_INSERT_RLO:int = 19
  MENU_INSERT_PDF:int = 20
  MENU_INSERT_ALM:int = 21
  MENU_INSERT_LRI:int = 22
  MENU_INSERT_RLI:int = 23
  MENU_INSERT_FSI:int = 24
  MENU_INSERT_PDI:int = 25
  MENU_INSERT_ZWJ:int = 26
  MENU_INSERT_ZWNJ:int = 27
  MENU_INSERT_WJ:int = 28
  MENU_INSERT_SHY:int = 29
  MENU_EMOJI_AND_SYMBOL:int = 30
  MENU_MAX:int = 31
class VirtualKeyboardType:
  KEYBOARD_KIND_DEFAULT:int = 0
  KEYBOARD_KIND_MULTILINE:int = 1
  KEYBOARD_KIND_NUMBER:int = 2
  KEYBOARD_KIND_NUMBER_DECIMAL:int = 3
  KEYBOARD_KIND_PHONE:int = 4
  KEYBOARD_KIND_EMAIL_ADDRESS:int = 5
  KEYBOARD_KIND_PASSWORD:int = 6
  KEYBOARD_KIND_URL:int = 7


class LineEdit(__control__.Control):
  """
		`LineEdit` provides an input field for editing a single line of text.
		- When the `LineEdit` control is focused using the keyboard arrow keys, it will only gain focus and not enter edit mode.
		- To enter edit mode, click on the control with the mouse, see also `keep_editing_on_text_submit`.
		- To exit edit mode, press `ui_text_submit` or `ui_cancel` (by default `kbd`Escape`/kbd`) actions.
		- Check `edit`, `unedit`, `is_editing`, and `signal editing_toggled` for more information.
		While entering text, it is possible to insert special characters using Unicode, OEM or Windows alt codes:
		- To enter Unicode codepoints, hold `kbd`Alt`/kbd` and type the codepoint on the numpad. For example, to enter the character `รก` (U+00E1), hold `kbd`Alt`/kbd` and type `kbd`+E1`/kbd` on the numpad (the leading zeroes can be omitted).
		- To enter OEM codepoints, hold `kbd`Alt`/kbd` and type the code on the numpad. For example, to enter the character `รก` (OEM 160), hold `kbd`Alt`/kbd` and type `160` on the numpad.
		- To enter Windows codepoints, hold `kbd`Alt`/kbd` and type the code on the numpad. For example, to enter the character `รก` (Windows 0225), hold `kbd`Alt`/kbd` and type `kbd`0`/kbd`, `kbd`2`/kbd`, `kbd`2`/kbd`, `kbd`5`/kbd` on the numpad. The leading zero here must **not** be omitted, as this is how Windows codepoints are distinguished from OEM codepoints.
		**Important:**
		- Focusing the `LineEdit` with `ui_focus_next` (by default `kbd`Tab`/kbd`) or `ui_focus_prev` (by default `kbd`Shift + Tab`/kbd`) or `Control.grab_focus` still enters edit mode (for compatibility).
		`LineEdit` features many built-in shortcuts that are always available (`kbd`Ctrl`/kbd` here maps to `kbd`Cmd`/kbd` on macOS):
		- `kbd`Ctrl + C`/kbd`: Copy
		- `kbd`Ctrl + X`/kbd`: Cut
		- `kbd`Ctrl + V`/kbd` or `kbd`Ctrl + Y`/kbd`: Paste/"yank"
		- `kbd`Ctrl + Z`/kbd`: Undo
		- `kbd`Ctrl + ~`/kbd`: Swap input direction.
		- `kbd`Ctrl + Shift + Z`/kbd`: Redo
		- `kbd`Ctrl + U`/kbd`: Delete text from the caret position to the beginning of the line
		- `kbd`Ctrl + K`/kbd`: Delete text from the caret position to the end of the line
		- `kbd`Ctrl + A`/kbd`: Select all text
		- `kbd`Up Arrow`/kbd`/`kbd`Down Arrow`/kbd`: Move the caret to the beginning/end of the line
		On macOS, some extra keyboard shortcuts are available:
		- `kbd`Cmd + F`/kbd`: Same as `kbd`Right Arrow`/kbd`, move the caret one character right
		- `kbd`Cmd + B`/kbd`: Same as `kbd`Left Arrow`/kbd`, move the caret one character left
		- `kbd`Cmd + P`/kbd`: Same as `kbd`Up Arrow`/kbd`, move the caret to the previous line
		- `kbd`Cmd + N`/kbd`: Same as `kbd`Down Arrow`/kbd`, move the caret to the next line
		- `kbd`Cmd + D`/kbd`: Same as `kbd`Delete`/kbd`, delete the character on the right side of caret
		- `kbd`Cmd + H`/kbd`: Same as `kbd`Backspace`/kbd`, delete the character on the left side of the caret
		- `kbd`Cmd + A`/kbd`: Same as `kbd`Home`/kbd`, move the caret to the beginning of the line
		- `kbd`Cmd + E`/kbd`: Same as `kbd`End`/kbd`, move the caret to the end of the line
		- `kbd`Cmd + Left Arrow`/kbd`: Same as `kbd`Home`/kbd`, move the caret to the beginning of the line
		- `kbd`Cmd + Right Arrow`/kbd`: Same as `kbd`End`/kbd`, move the caret to the end of the line
		**Note:** Caret movement shortcuts listed above are not affected by `shortcut_keys_enabled`.
	"""
  text_changed: BuiltinSignal
  text_change_rejected: BuiltinSignal
  text_submitted: BuiltinSignal
  editing_toggled: BuiltinSignal

  @staticmethod
  def constructor()->LineEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->LineEdit:pass


  @property
  def text(self)->str:
    """"""
    pass
  @text.setter
  def text(self,  value:str)->None:
    """"""
    pass
  @property
  def placeholder_text(self)->str:
    """"""
    pass
  @placeholder_text.setter
  def placeholder_text(self,  value:str)->None:
    """"""
    pass
  @property
  def alignment(self)->int:
    """"""
    pass
  @alignment.setter
  def alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def max_length(self)->int:
    """"""
    pass
  @max_length.setter
  def max_length(self,  value:int)->None:
    """"""
    pass
  @property
  def editable(self)->bool:
    """"""
    pass
  @editable.setter
  def editable(self,  value:bool)->None:
    """"""
    pass
  @property
  def keep_editing_on_text_submit(self)->bool:
    """"""
    pass
  @keep_editing_on_text_submit.setter
  def keep_editing_on_text_submit(self,  value:bool)->None:
    """"""
    pass
  @property
  def expand_to_text_length(self)->bool:
    """"""
    pass
  @expand_to_text_length.setter
  def expand_to_text_length(self,  value:bool)->None:
    """"""
    pass
  @property
  def context_menu_enabled(self)->bool:
    """"""
    pass
  @context_menu_enabled.setter
  def context_menu_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def emoji_menu_enabled(self)->bool:
    """"""
    pass
  @emoji_menu_enabled.setter
  def emoji_menu_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def virtual_keyboard_enabled(self)->bool:
    """"""
    pass
  @virtual_keyboard_enabled.setter
  def virtual_keyboard_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def virtual_keyboard_type(self)->int:
    """"""
    pass
  @virtual_keyboard_type.setter
  def virtual_keyboard_type(self,  value:int)->None:
    """"""
    pass
  @property
  def clear_button_enabled(self)->bool:
    """"""
    pass
  @clear_button_enabled.setter
  def clear_button_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def shortcut_keys_enabled(self)->bool:
    """"""
    pass
  @shortcut_keys_enabled.setter
  def shortcut_keys_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def middle_mouse_paste_enabled(self)->bool:
    """"""
    pass
  @middle_mouse_paste_enabled.setter
  def middle_mouse_paste_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def selecting_enabled(self)->bool:
    """"""
    pass
  @selecting_enabled.setter
  def selecting_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass
  @deselect_on_focus_loss_enabled.setter
  def deselect_on_focus_loss_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass
  @drag_and_drop_selection_enabled.setter
  def drag_and_drop_selection_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def right_icon(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass
  @right_icon.setter
  def right_icon(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def flat(self)->bool:
    """"""
    pass
  @flat.setter
  def flat(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_control_chars(self)->bool:
    """"""
    pass
  @draw_control_chars.setter
  def draw_control_chars(self,  value:bool)->None:
    """"""
    pass
  @property
  def select_all_on_focus(self)->bool:
    """"""
    pass
  @select_all_on_focus.setter
  def select_all_on_focus(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_blink(self)->bool:
    """"""
    pass
  @caret_blink.setter
  def caret_blink(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_blink_interval(self)->float:
    """"""
    pass
  @caret_blink_interval.setter
  def caret_blink_interval(self,  value:float)->None:
    """"""
    pass
  @property
  def caret_column(self)->int:
    """"""
    pass
  @caret_column.setter
  def caret_column(self,  value:int)->None:
    """"""
    pass
  @property
  def caret_force_displayed(self)->bool:
    """"""
    pass
  @caret_force_displayed.setter
  def caret_force_displayed(self,  value:bool)->None:
    """"""
    pass
  @property
  def caret_mid_grapheme(self)->bool:
    """"""
    pass
  @caret_mid_grapheme.setter
  def caret_mid_grapheme(self,  value:bool)->None:
    """"""
    pass
  @property
  def secret(self)->bool:
    """"""
    pass
  @secret.setter
  def secret(self,  value:bool)->None:
    """"""
    pass
  @property
  def secret_character(self)->str:
    """"""
    pass
  @secret_character.setter
  def secret_character(self,  value:str)->None:
    """"""
    pass
  @property
  def text_direction(self)->int:
    """"""
    pass
  @text_direction.setter
  def text_direction(self,  value:int)->None:
    """"""
    pass
  @property
  def language(self)->str:
    """"""
    pass
  @language.setter
  def language(self,  value:str)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override(self)->int:
    """"""
    pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None:
    """"""
    pass
  def has_ime_text(self)->bool:
    """
				Returns `true` if the user has text in the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME).
			"""
    pass

  def cancel_ime(self)->None:
    """
				Closes the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME) if it is open. Any text in the IME will be lost.
			"""
    pass

  def apply_ime(self)->None:
    """
				Applies text from the `url=https://en.wikipedia.org/wiki/Input_method`Input Method Editor`/url` (IME) and closes the IME if it is open.
			"""
    pass

  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def edit(self)->None:
    """
				Allows entering edit mode whether the `LineEdit` is focused or not.
				See also `keep_editing_on_text_submit`.
			"""
    pass

  def unedit(self)->None:
    """
				Allows exiting edit mode while preserving focus.
			"""
    pass

  def is_editing(self)->bool:
    """
				Returns whether the `LineEdit` is being edited.
			"""
    pass

  def set_keep_editing_on_text_submit(self, enable:bool)->None:
    """"""
    pass

  def is_editing_kept_on_text_submit(self)->bool:
    """"""
    pass

  def clear(self)->None:
    """
				Erases the `LineEdit`'s `text`.
			"""
    pass

  def select(self, from_:int=0, to:int=-1)->None:
    """
				Selects characters inside `LineEdit` between `from` and `to`. By default, `from` is at the beginning and `to` at the end.
				
				```gdscript
				text = "Welcome"
				select() # Will select "Welcome".
				select(4) # Will select "ome".
				select(2, 5) # Will select "lco".
				```
				
				
			"""
    pass

  def select_all(self)->None:
    """
				Selects the whole `String`.
			"""
    pass

  def deselect(self)->None:
    """
				Clears the current selection.
			"""
    pass

  def has_undo(self)->bool:
    """
				Returns `true` if an "undo" action is available.
			"""
    pass

  def has_redo(self)->bool:
    """
				Returns `true` if a "redo" action is available.
			"""
    pass

  def has_selection(self)->bool:
    """
				Returns `true` if the user has selected text.
			"""
    pass

  def get_selected_text(self)->str:
    """
				Returns the text inside the selection.
			"""
    pass

  def get_selection_from_column(self)->int:
    """
				Returns the selection begin column.
			"""
    pass

  def get_selection_to_column(self)->int:
    """
				Returns the selection end column.
			"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def get_draw_control_chars(self)->bool:
    """"""
    pass

  def set_draw_control_chars(self, enable:bool)->None:
    """"""
    pass

  def set_text_direction(self, direction:int )->None:
    """"""
    pass

  def get_text_direction(self)->int:
    """"""
    pass

  def set_language(self, language:str)->None:
    """"""
    pass

  def get_language(self)->str:
    """"""
    pass

  def set_structured_text_bidi_override(self, parser:int )->None:
    """"""
    pass

  def get_structured_text_bidi_override(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None:
    """"""
    pass

  def get_structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass

  def set_placeholder(self, text:str)->None:
    """"""
    pass

  def get_placeholder(self)->str:
    """"""
    pass

  def set_caret_column(self, position:int)->None:
    """"""
    pass

  def get_caret_column(self)->int:
    """"""
    pass

  def get_scroll_offset(self)->float:
    """
				Returns the scroll offset due to `caret_column`, as a number of characters.
			"""
    pass

  def set_expand_to_text_length_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_expand_to_text_length_enabled(self)->bool:
    """"""
    pass

  def set_caret_blink_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_caret_blink_enabled(self)->bool:
    """"""
    pass

  def set_caret_mid_grapheme_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_caret_mid_grapheme_enabled(self)->bool:
    """"""
    pass

  def set_caret_force_displayed(self, enabled:bool)->None:
    """"""
    pass

  def is_caret_force_displayed(self)->bool:
    """"""
    pass

  def set_caret_blink_interval(self, interval:float)->None:
    """"""
    pass

  def get_caret_blink_interval(self)->float:
    """"""
    pass

  def set_max_length(self, chars:int)->None:
    """"""
    pass

  def get_max_length(self)->int:
    """"""
    pass

  def insert_text_at_caret(self, text:str)->None:
    """
				Inserts `text` at the caret. If the resulting value is longer than `max_length`, nothing happens.
			"""
    pass

  def delete_char_at_caret(self)->None:
    """
				Deletes one character at the caret's current position (equivalent to pressing `kbd`Delete`/kbd`).
			"""
    pass

  def delete_text(self, from_column:int, to_column:int)->None:
    """
				Deletes a section of the `text` going from position `from_column` to `to_column`. Both parameters should be within the text's length.
			"""
    pass

  def set_editable(self, enabled:bool)->None:
    """"""
    pass

  def is_editable(self)->bool:
    """"""
    pass

  def set_secret(self, enabled:bool)->None:
    """"""
    pass

  def is_secret(self)->bool:
    """"""
    pass

  def set_secret_character(self, character:str)->None:
    """"""
    pass

  def get_secret_character(self)->str:
    """"""
    pass

  def menu_option(self, option:int)->None:
    """
				Executes a given action as defined in the `enum MenuItems` enum.
			"""
    pass

  def get_menu(self)->__popupmenu__.PopupMenu:
    """
				Returns the `PopupMenu` of this `LineEdit`. By default, this menu is displayed when right-clicking on the `LineEdit`.
				You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see `enum MenuItems`). For example:
				
				```gdscript
				func _ready():
					var menu = get_menu()
					# Remove all items after "Redo".
					menu.item_count = menu.get_item_index(MENU_REDO) + 1
					# Add custom items.
					menu.add_separator()
					menu.add_item("Insert Date", MENU_MAX + 1)
					# Connect callback.
					menu.id_pressed.connect(_on_item_pressed)

				func _on_item_pressed(id):
					if id == MENU_MAX + 1:
						insert_text_at_caret(Time.get_date_string_from_system())
				```
				
				
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			"""
    pass

  def is_menu_visible(self)->bool:
    """
				Returns whether the menu is visible. Use this instead of `get_menu().visible` to improve performance (so the creation of the menu is avoided).
			"""
    pass

  def set_context_menu_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_context_menu_enabled(self)->bool:
    """"""
    pass

  def set_emoji_menu_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_emoji_menu_enabled(self)->bool:
    """"""
    pass

  def set_virtual_keyboard_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_virtual_keyboard_enabled(self)->bool:
    """"""
    pass

  def set_virtual_keyboard_type(self, type:int )->None:
    """"""
    pass

  def get_virtual_keyboard_type(self)->int:
    """"""
    pass

  def set_clear_button_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_clear_button_enabled(self)->bool:
    """"""
    pass

  def set_shortcut_keys_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_shortcut_keys_enabled(self)->bool:
    """"""
    pass

  def set_middle_mouse_paste_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_middle_mouse_paste_enabled(self)->bool:
    """"""
    pass

  def set_selecting_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_selecting_enabled(self)->bool:
    """"""
    pass

  def set_deselect_on_focus_loss_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass

  def set_drag_and_drop_selection_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass

  def set_right_icon(self, icon:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_right_icon(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass

  def set_flat(self, enabled:bool)->None:
    """"""
    pass

  def is_flat(self)->bool:
    """"""
    pass

  def set_select_all_on_focus(self, enabled:bool)->None:
    """"""
    pass

  def is_select_all_on_focus(self)->bool:
    """"""
    pass


