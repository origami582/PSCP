from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.IP as __ip__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Object as __object__
import py4godot.classes.T as __t__


class ResolverStatus:
  RESOLVER_STATUS_NONE:int = 0
  RESOLVER_STATUS_WAITING:int = 1
  RESOLVER_STATUS_DONE:int = 2
  RESOLVER_STATUS_ERROR:int = 3
class Type:
  KIND_NONE:int = 0
  KIND_IPV4:int = 1
  KIND_IPV6:int = 2
  KIND_ANY:int = 3


class IP(__object__.Object):
  """
		IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see `StreamPeerTCP` and `TCPServer`). IP provides DNS hostname resolution support, both blocking and threaded.
	"""



  @staticmethod
  def cast(other:__object__.Object)->IP:pass

  @staticmethod
  def instance()->IP:pass

  def resolve_hostname(self, host:str, ip_type:int =3)->str:
    """
				Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the `enum Type` constant given as `ip_type`.
			"""
    pass

  def resolve_hostname_addresses(self, host:str, ip_type:int =3)->__core__.PackedStringArray:
    """
				Resolves a given hostname in a blocking way. Addresses are returned as an `Array` of IPv4 or IPv6 addresses depending on `ip_type`.
			"""
    pass

  def resolve_hostname_queue_item(self, host:str, ip_type:int =3)->int:
    """
				Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the `enum Type` constant given as `ip_type`. Returns the queue ID if successful, or `constant RESOLVER_INVALID_ID` on error.
			"""
    pass

  def get_resolve_item_status(self, id:int)->int:
    """
				Returns a queued hostname's status as a `enum ResolverStatus` constant, given its queue `id`.
			"""
    pass

  def get_resolve_item_address(self, id:int)->str:
    """
				Returns a queued hostname's IP address, given its queue `id`. Returns an empty string on error or if resolution hasn't happened yet (see `get_resolve_item_status`).
			"""
    pass

  def get_resolve_item_addresses(self, id:int)->__core__.Array:
    """
				Returns resolved addresses, or an empty array if an error happened or resolution didn't happen yet (see `get_resolve_item_status`).
			"""
    pass

  def erase_resolve_item(self, id:int)->None:
    """
				Removes a given item `id` from the queue. This should be used to free a queue after it has completed to enable more queries to happen.
			"""
    pass

  def get_local_addresses(self)->__core__.PackedStringArray:
    """
				Returns all the user's current IPv4 and IPv6 addresses as an array.
			"""
    pass

  def get_local_interfaces(self)->typedarray::Dictionary:
    """
				Returns all network adapters as an array.
				Each adapter is a dictionary of the form:
				```gdscript
				{
					"index": "1", # Interface index.
					"name": "eth0", # Interface name.
					"friendly": "Ethernet One", # A friendly name (might be empty).
					"addresses": `"192.168.1.101"`, # An array of IP addresses associated to this interface.
				}
				```
			"""
    pass

  def clear_cache(self, hostname:str= __core__.String.new0())->None:
    """
				Removes all of a `hostname`'s cached references. If no `hostname` is given, all cached IP addresses are removed.
			"""
    pass


