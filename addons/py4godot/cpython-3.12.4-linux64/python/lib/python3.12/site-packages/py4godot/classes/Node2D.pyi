from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.Node as __node__



class Node2D(__canvasitem__.CanvasItem):
  """
		A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order.
		**Note:** Since both `Node2D` and `Control` inherit from `CanvasItem`, they share several concepts from the class such as the `CanvasItem.z_index` and `CanvasItem.visible` properties.
	"""

  @staticmethod
  def constructor()->Node2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Node2D:pass


  @property
  def position(self)->__core__.Vector2:
    """"""
    pass
  @position.setter
  def position(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def rotation(self)->float:
    """"""
    pass
  @rotation.setter
  def rotation(self,  value:float)->None:
    """"""
    pass
  @property
  def rotation_degrees(self)->float:
    """"""
    pass
  @rotation_degrees.setter
  def rotation_degrees(self,  value:float)->None:
    """"""
    pass
  @property
  def scale(self)->__core__.Vector2:
    """"""
    pass
  @scale.setter
  def scale(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def skew(self)->float:
    """"""
    pass
  @skew.setter
  def skew(self,  value:float)->None:
    """"""
    pass
  @property
  def transform(self)->__core__.Transform2D:
    """"""
    pass
  @transform.setter
  def transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def global_position(self)->__core__.Vector2:
    """"""
    pass
  @global_position.setter
  def global_position(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def global_rotation(self)->float:
    """"""
    pass
  @global_rotation.setter
  def global_rotation(self,  value:float)->None:
    """"""
    pass
  @property
  def global_rotation_degrees(self)->float:
    """"""
    pass
  @global_rotation_degrees.setter
  def global_rotation_degrees(self,  value:float)->None:
    """"""
    pass
  @property
  def global_scale(self)->__core__.Vector2:
    """"""
    pass
  @global_scale.setter
  def global_scale(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def global_skew(self)->float:
    """"""
    pass
  @global_skew.setter
  def global_skew(self,  value:float)->None:
    """"""
    pass
  @property
  def global_transform(self)->__core__.Transform2D:
    """"""
    pass
  @global_transform.setter
  def global_transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  def set_position(self, position:__core__.Vector2)->None:
    """"""
    pass

  def set_rotation(self, radians:float)->None:
    """"""
    pass

  def set_rotation_degrees(self, degrees:float)->None:
    """"""
    pass

  def set_skew(self, radians:float)->None:
    """"""
    pass

  def set_scale(self, scale:__core__.Vector2)->None:
    """"""
    pass

  def get_position(self)->__core__.Vector2:
    """"""
    pass

  def get_rotation(self)->float:
    """"""
    pass

  def get_rotation_degrees(self)->float:
    """"""
    pass

  def get_skew(self)->float:
    """"""
    pass

  def get_scale(self)->__core__.Vector2:
    """"""
    pass

  def rotate(self, radians:float)->None:
    """
				Applies a rotation to the node, in radians, starting from its current rotation.
			"""
    pass

  def move_local_x(self, delta:float, scaled:bool=False)->None:
    """
				Applies a local translation on the node's X axis based on the `Node._process`'s `delta`. If `scaled` is `false`, normalizes the movement.
			"""
    pass

  def move_local_y(self, delta:float, scaled:bool=False)->None:
    """
				Applies a local translation on the node's Y axis based on the `Node._process`'s `delta`. If `scaled` is `false`, normalizes the movement.
			"""
    pass

  def translate(self, offset:__core__.Vector2)->None:
    """
				Translates the node by the given `offset` in local coordinates.
			"""
    pass

  def global_translate(self, offset:__core__.Vector2)->None:
    """
				Adds the `offset` vector to the node's global position.
			"""
    pass

  def apply_scale(self, ratio:__core__.Vector2)->None:
    """
				Multiplies the current scale by the `ratio` vector.
			"""
    pass

  def set_global_position(self, position:__core__.Vector2)->None:
    """"""
    pass

  def get_global_position(self)->__core__.Vector2:
    """"""
    pass

  def set_global_rotation(self, radians:float)->None:
    """"""
    pass

  def set_global_rotation_degrees(self, degrees:float)->None:
    """"""
    pass

  def get_global_rotation(self)->float:
    """"""
    pass

  def get_global_rotation_degrees(self)->float:
    """"""
    pass

  def set_global_skew(self, radians:float)->None:
    """"""
    pass

  def get_global_skew(self)->float:
    """"""
    pass

  def set_global_scale(self, scale:__core__.Vector2)->None:
    """"""
    pass

  def get_global_scale(self)->__core__.Vector2:
    """"""
    pass

  def set_transform(self, xform:__core__.Transform2D)->None:
    """"""
    pass

  def set_global_transform(self, xform:__core__.Transform2D)->None:
    """"""
    pass

  def look_at(self, point:__core__.Vector2)->None:
    """
				Rotates the node so that its local +X axis points towards the `point`, which is expected to use global coordinates.
				`point` should not be the same as the node's position, otherwise the node always looks to the right.
			"""
    pass

  def get_angle_to(self, point:__core__.Vector2)->float:
    """
				Returns the angle between the node and the `point` in radians.
				`url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/node2d_get_angle_to.png`Illustration of the returned angle.`/url`
			"""
    pass

  def to_local(self, global_point:__core__.Vector2)->__core__.Vector2:
    """
				Transforms the provided global position into a position in local coordinate space. The output will be local relative to the `Node2D` it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent.
			"""
    pass

  def to_global(self, local_point:__core__.Vector2)->__core__.Vector2:
    """
				Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the `Node2D` it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position.
			"""
    pass

  def get_relative_transform_to_parent(self, parent:__node__.Node)->__core__.Transform2D:
    """
				Returns the `Transform2D` relative to this node's parent.
			"""
    pass


