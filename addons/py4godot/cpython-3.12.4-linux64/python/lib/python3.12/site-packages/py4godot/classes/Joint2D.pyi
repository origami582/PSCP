from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__



class Joint2D(__node2d__.Node2D):
  """
		Abstract base class for all joints in 2D physics. 2D joints bind together two physics bodies (`node_a` and `node_b`) and apply a constraint.
	"""

  @staticmethod
  def constructor()->Joint2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Joint2D:pass


  @property
  def node_a(self)->__core__.NodePath:
    """"""
    pass
  @node_a.setter
  def node_a(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def node_b(self)->__core__.NodePath:
    """"""
    pass
  @node_b.setter
  def node_b(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def bias(self)->float:
    """"""
    pass
  @bias.setter
  def bias(self,  value:float)->None:
    """"""
    pass
  @property
  def disable_collision(self)->bool:
    """"""
    pass
  @disable_collision.setter
  def disable_collision(self,  value:bool)->None:
    """"""
    pass
  def set_node_a(self, node:__core__.NodePath|str)->None:
    """"""
    pass

  def get_node_a(self)->__core__.NodePath:
    """"""
    pass

  def set_node_b(self, node:__core__.NodePath|str)->None:
    """"""
    pass

  def get_node_b(self)->__core__.NodePath:
    """"""
    pass

  def set_bias(self, bias:float)->None:
    """"""
    pass

  def get_bias(self)->float:
    """"""
    pass

  def set_exclude_nodes_from_collision(self, enable:bool)->None:
    """"""
    pass

  def get_exclude_nodes_from_collision(self)->bool:
    """"""
    pass

  def get_rid(self)->__core__.RID:
    """
				Returns the joint's internal `RID` from the `PhysicsServer2D`.
			"""
    pass


