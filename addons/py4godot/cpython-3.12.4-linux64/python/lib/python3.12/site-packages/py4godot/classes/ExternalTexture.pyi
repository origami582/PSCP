from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D as __texture2d__



class ExternalTexture(__texture2d__.Texture2D):
  """
		Displays the content of an external buffer provided by the platform.
		Requires the `url=https://registry.khronos.org/OpenGL/extensions/OES/OES_EGL_image_external.txt`OES_EGL_image_external`/url` extension (OpenGL) or `url=https://registry.khronos.org/vulkan/specs/1.1-extensions/html/vkspec.html#VK_ANDROID_external_memory_android_hardware_buffer`VK_ANDROID_external_memory_android_hardware_buffer`/url` extension (Vulkan).
		**Note:** This is currently only supported in Android builds.
	"""

  @staticmethod
  def constructor()->ExternalTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->ExternalTexture:pass


  @property
  def size(self)->__core__.Vector2:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector2)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector2)->None:
    """"""
    pass

  def get_external_texture_id(self)->int:
    """
				Returns the external texture ID.
				Depending on your use case, you may need to pass this to platform APIs, for example, when creating an `android.graphics.SurfaceTexture` on Android.
			"""
    pass

  def set_external_buffer_id(self, external_buffer_id:int)->None:
    """
				Sets the external buffer ID.
				Depending on your use case, you may need to call this with data received from a platform API, for example, `SurfaceTexture.getHardwareBuffer()` on Android.
			"""
    pass


