from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeVectorFunc as __visualshadernodevectorfunc__
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.VisualShaderNodeVectorCompose as __visualshadernodevectorcompose__
import py4godot.classes.VisualShaderNodeVectorDecompose as __visualshadernodevectordecompose__
import py4godot.classes.VisualShaderNodeFaceForward as __visualshadernodefaceforward__
import py4godot.classes.VisualShaderNodeVectorRefract as __visualshadernodevectorrefract__
import py4godot.classes.VisualShaderNodeVectorOp as __visualshadernodevectorop__
import py4godot.classes.VisualShaderNodeVectorBase as __visualshadernodevectorbase__
import py4godot.classes.VisualShaderNodeVectorLen as __visualshadernodevectorlen__
import py4godot.classes.VisualShaderNodeVectorDistance as __visualshadernodevectordistance__


class OpType:
  OPERATOR_KIND_VECTOR_2D:int = 0
  OPERATOR_KIND_VECTOR_3D:int = 1
  OPERATOR_KIND_VECTOR_4D:int = 2
  OPERATOR_KIND_MAX:int = 3


class VisualShaderNodeVectorBase(__visualshadernode__.VisualShaderNode):
  """
		This is an abstract class. See the derived types for descriptions of the possible operations.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeVectorBase:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeVectorBase:pass


  @property
  def op_type(self)->int:
    """"""
    pass
  @op_type.setter
  def op_type(self,  value:int)->None:
    """"""
    pass
  def set_op_type(self, type:int )->None:
    """"""
    pass

  def get_op_type(self)->int:
    """"""
    pass


