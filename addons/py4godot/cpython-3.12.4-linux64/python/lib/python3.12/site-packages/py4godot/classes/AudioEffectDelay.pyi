from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__



class AudioEffectDelay(__audioeffect__.AudioEffect):
  """
		Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.
	"""

  @staticmethod
  def constructor()->AudioEffectDelay:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectDelay:pass


  @property
  def dry(self)->float:
    """"""
    pass
  @dry.setter
  def dry(self,  value:float)->None:
    """"""
    pass
  @property
  def tap1_active(self)->bool:
    """"""
    pass
  @tap1_active.setter
  def tap1_active(self,  value:bool)->None:
    """"""
    pass
  @property
  def tap1_delay_ms(self)->float:
    """"""
    pass
  @tap1_delay_ms.setter
  def tap1_delay_ms(self,  value:float)->None:
    """"""
    pass
  @property
  def tap1_level_db(self)->float:
    """"""
    pass
  @tap1_level_db.setter
  def tap1_level_db(self,  value:float)->None:
    """"""
    pass
  @property
  def tap1_pan(self)->float:
    """"""
    pass
  @tap1_pan.setter
  def tap1_pan(self,  value:float)->None:
    """"""
    pass
  @property
  def tap2_active(self)->bool:
    """"""
    pass
  @tap2_active.setter
  def tap2_active(self,  value:bool)->None:
    """"""
    pass
  @property
  def tap2_delay_ms(self)->float:
    """"""
    pass
  @tap2_delay_ms.setter
  def tap2_delay_ms(self,  value:float)->None:
    """"""
    pass
  @property
  def tap2_level_db(self)->float:
    """"""
    pass
  @tap2_level_db.setter
  def tap2_level_db(self,  value:float)->None:
    """"""
    pass
  @property
  def tap2_pan(self)->float:
    """"""
    pass
  @tap2_pan.setter
  def tap2_pan(self,  value:float)->None:
    """"""
    pass
  @property
  def feedback_active(self)->bool:
    """"""
    pass
  @feedback_active.setter
  def feedback_active(self,  value:bool)->None:
    """"""
    pass
  @property
  def feedback_delay_ms(self)->float:
    """"""
    pass
  @feedback_delay_ms.setter
  def feedback_delay_ms(self,  value:float)->None:
    """"""
    pass
  @property
  def feedback_level_db(self)->float:
    """"""
    pass
  @feedback_level_db.setter
  def feedback_level_db(self,  value:float)->None:
    """"""
    pass
  @property
  def feedback_lowpass(self)->float:
    """"""
    pass
  @feedback_lowpass.setter
  def feedback_lowpass(self,  value:float)->None:
    """"""
    pass
  def set_dry(self, amount:float)->None:
    """"""
    pass

  def get_dry(self)->float:
    """"""
    pass

  def set_tap1_active(self, amount:bool)->None:
    """"""
    pass

  def is_tap1_active(self)->bool:
    """"""
    pass

  def set_tap1_delay_ms(self, amount:float)->None:
    """"""
    pass

  def get_tap1_delay_ms(self)->float:
    """"""
    pass

  def set_tap1_level_db(self, amount:float)->None:
    """"""
    pass

  def get_tap1_level_db(self)->float:
    """"""
    pass

  def set_tap1_pan(self, amount:float)->None:
    """"""
    pass

  def get_tap1_pan(self)->float:
    """"""
    pass

  def set_tap2_active(self, amount:bool)->None:
    """"""
    pass

  def is_tap2_active(self)->bool:
    """"""
    pass

  def set_tap2_delay_ms(self, amount:float)->None:
    """"""
    pass

  def get_tap2_delay_ms(self)->float:
    """"""
    pass

  def set_tap2_level_db(self, amount:float)->None:
    """"""
    pass

  def get_tap2_level_db(self)->float:
    """"""
    pass

  def set_tap2_pan(self, amount:float)->None:
    """"""
    pass

  def get_tap2_pan(self)->float:
    """"""
    pass

  def set_feedback_active(self, amount:bool)->None:
    """"""
    pass

  def is_feedback_active(self)->bool:
    """"""
    pass

  def set_feedback_delay_ms(self, amount:float)->None:
    """"""
    pass

  def get_feedback_delay_ms(self)->float:
    """"""
    pass

  def set_feedback_level_db(self, amount:float)->None:
    """"""
    pass

  def get_feedback_level_db(self)->float:
    """"""
    pass

  def set_feedback_lowpass(self, amount:float)->None:
    """"""
    pass

  def get_feedback_lowpass(self)->float:
    """"""
    pass


