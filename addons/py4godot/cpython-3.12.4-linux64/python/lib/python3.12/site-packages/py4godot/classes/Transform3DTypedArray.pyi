from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal



class Transform3DTypedArray():
  """"""

  @staticmethod
  def constructor()->Transform3DTypedArray:pass


  @staticmethod
  def new0() -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName|str, script:Any) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __transform3dtypedarray__.Transform3DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __transform3dtypedarray__.Transform3DTypedArray:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->Transform3DTypedArray:pass

  def to_list(self) -> list[Transform3D]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[Transform3D]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[Transform3D]) -> Transform3DTypedArray:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[Transform3D]): A list of elements to populate the PackedArray with.

    Returns:
        Transform3DTypedArray
    """
    pass


  def size(self)->int:
    """"""
    pass

  def is_empty(self)->bool:
    """"""
    pass

  def clear(self)->None:
    """"""
    pass

  def hash(self)->int:
    """"""
    pass

  def assign(self, array:Array)->None:
    """"""
    pass

  def get(self, index:int)->Transform3D:
    """"""
    pass

  def set(self, index:int, value:Transform3D)->None:
    """"""
    pass

  def push_back(self, value:Transform3D)->None:
    """"""
    pass

  def push_front(self, value:Transform3D)->None:
    """"""
    pass

  def append(self, value:Transform3D)->None:
    """"""
    pass

  def append_array(self, array:Array)->None:
    """"""
    pass

  def resize(self, size:int)->int:
    """"""
    pass

  def insert(self, position:int, value:Transform3D)->int:
    """"""
    pass

  def remove_at(self, position:int)->None:
    """"""
    pass

  def fill(self, value:Transform3D)->None:
    """"""
    pass

  def erase(self, value:Transform3D)->None:
    """"""
    pass

  def front(self)->Transform3D:
    """"""
    pass

  def back(self)->Transform3D:
    """"""
    pass

  def pick_random(self)->Transform3D:
    """"""
    pass

  def find(self, what:Transform3D, from_:int=0)->int:
    """"""
    pass

  def find_custom(self, method:Callable, from_:int=0)->int:
    """"""
    pass

  def rfind(self, what:Transform3D, from_:int=-1)->int:
    """"""
    pass

  def rfind_custom(self, method:Callable, from_:int=-1)->int:
    """"""
    pass

  def count(self, value:Transform3D)->int:
    """"""
    pass

  def has(self, value:Transform3D)->bool:
    """"""
    pass

  def pop_back(self)->Transform3D:
    """"""
    pass

  def pop_front(self)->Transform3D:
    """"""
    pass

  def pop_at(self, position:int)->Transform3D:
    """"""
    pass

  def sort(self)->None:
    """"""
    pass

  def sort_custom(self, func:Callable)->None:
    """"""
    pass

  def shuffle(self)->None:
    """"""
    pass

  def bsearch(self, value:Transform3D, before:bool=True)->int:
    """"""
    pass

  def bsearch_custom(self, value:Transform3D, func:Callable, before:bool=True)->int:
    """"""
    pass

  def reverse(self)->None:
    """"""
    pass

  def duplicate(self, deep:bool=False)->Array:
    """"""
    pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array:
    """"""
    pass

  def filter(self, method:Callable)->Array:
    """"""
    pass

  def map(self, method:Callable)->Array:
    """"""
    pass

  def reduce(self, method:Callable, accum:Transform3D=None)->Transform3D:
    """"""
    pass

  def any(self, method:Callable)->bool:
    """"""
    pass

  def all(self, method:Callable)->bool:
    """"""
    pass

  def max(self)->Transform3D:
    """"""
    pass

  def min(self)->Transform3D:
    """"""
    pass

  def is_typed(self)->bool:
    """"""
    pass

  def is_same_typed(self, array:Array)->bool:
    """"""
    pass

  def get_typed_builtin(self)->int:
    """"""
    pass

  def get_typed_class_name(self)->StringName:
    """"""
    pass

  def get_typed_script(self)->Transform3D:
    """"""
    pass

  def make_read_only(self)->None:
    """"""
    pass

  def is_read_only(self)->bool:
    """"""
    pass


