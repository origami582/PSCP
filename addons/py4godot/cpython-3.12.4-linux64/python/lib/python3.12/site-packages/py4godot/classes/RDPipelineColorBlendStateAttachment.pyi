from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RefCounted as __refcounted__



class RDPipelineColorBlendStateAttachment(__refcounted__.RefCounted):
  """
		Controls how blending between source and destination fragments is performed when using `RenderingDevice`.
		For reference, this is how common user-facing blend modes are implemented in Godot's 2D renderer:
		**Mix:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		```
		**Add:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		```
		**Subtract:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
		attachment.color_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		```
		**Multiply:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_DST_COLOR
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_DST_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
		```
		**Pre-multiplied alpha:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		```
	"""

  @staticmethod
  def constructor()->RDPipelineColorBlendStateAttachment:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineColorBlendStateAttachment:pass


  @property
  def enable_blend(self)->bool:
    """"""
    pass
  @enable_blend.setter
  def enable_blend(self,  value:bool)->None:
    """"""
    pass
  @property
  def src_color_blend_factor(self)->int:
    """"""
    pass
  @src_color_blend_factor.setter
  def src_color_blend_factor(self,  value:int)->None:
    """"""
    pass
  @property
  def dst_color_blend_factor(self)->int:
    """"""
    pass
  @dst_color_blend_factor.setter
  def dst_color_blend_factor(self,  value:int)->None:
    """"""
    pass
  @property
  def color_blend_op(self)->int:
    """"""
    pass
  @color_blend_op.setter
  def color_blend_op(self,  value:int)->None:
    """"""
    pass
  @property
  def src_alpha_blend_factor(self)->int:
    """"""
    pass
  @src_alpha_blend_factor.setter
  def src_alpha_blend_factor(self,  value:int)->None:
    """"""
    pass
  @property
  def dst_alpha_blend_factor(self)->int:
    """"""
    pass
  @dst_alpha_blend_factor.setter
  def dst_alpha_blend_factor(self,  value:int)->None:
    """"""
    pass
  @property
  def alpha_blend_op(self)->int:
    """"""
    pass
  @alpha_blend_op.setter
  def alpha_blend_op(self,  value:int)->None:
    """"""
    pass
  @property
  def write_r(self)->bool:
    """"""
    pass
  @write_r.setter
  def write_r(self,  value:bool)->None:
    """"""
    pass
  @property
  def write_g(self)->bool:
    """"""
    pass
  @write_g.setter
  def write_g(self,  value:bool)->None:
    """"""
    pass
  @property
  def write_b(self)->bool:
    """"""
    pass
  @write_b.setter
  def write_b(self,  value:bool)->None:
    """"""
    pass
  @property
  def write_a(self)->bool:
    """"""
    pass
  @write_a.setter
  def write_a(self,  value:bool)->None:
    """"""
    pass
  def set_as_mix(self)->None:
    """
				Convenience method to perform standard mix blending with straight (non-premultiplied) alpha. This sets `enable_blend` to `true`, `src_color_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA`, `dst_color_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA`, `src_alpha_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA` and `dst_alpha_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA`.
			"""
    pass

  def set_enable_blend(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_blend(self)->bool:
    """"""
    pass

  def set_src_color_blend_factor(self, p_member:int )->None:
    """"""
    pass

  def get_src_color_blend_factor(self)->int:
    """"""
    pass

  def set_dst_color_blend_factor(self, p_member:int )->None:
    """"""
    pass

  def get_dst_color_blend_factor(self)->int:
    """"""
    pass

  def set_color_blend_op(self, p_member:int )->None:
    """"""
    pass

  def get_color_blend_op(self)->int:
    """"""
    pass

  def set_src_alpha_blend_factor(self, p_member:int )->None:
    """"""
    pass

  def get_src_alpha_blend_factor(self)->int:
    """"""
    pass

  def set_dst_alpha_blend_factor(self, p_member:int )->None:
    """"""
    pass

  def get_dst_alpha_blend_factor(self)->int:
    """"""
    pass

  def set_alpha_blend_op(self, p_member:int )->None:
    """"""
    pass

  def get_alpha_blend_op(self)->int:
    """"""
    pass

  def set_write_r(self, p_member:bool)->None:
    """"""
    pass

  def get_write_r(self)->bool:
    """"""
    pass

  def set_write_g(self, p_member:bool)->None:
    """"""
    pass

  def get_write_g(self)->bool:
    """"""
    pass

  def set_write_b(self, p_member:bool)->None:
    """"""
    pass

  def get_write_b(self)->bool:
    """"""
    pass

  def set_write_a(self, p_member:bool)->None:
    """"""
    pass

  def get_write_a(self)->bool:
    """"""
    pass


