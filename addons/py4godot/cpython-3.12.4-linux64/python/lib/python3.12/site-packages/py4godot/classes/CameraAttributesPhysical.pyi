from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CameraAttributes as __cameraattributes__



class CameraAttributesPhysical(__cameraattributes__.CameraAttributes):
  """
		`CameraAttributesPhysical` is used to set rendering settings based on a physically-based camera's settings. It is responsible for exposure, auto-exposure, and depth of field.
		When used in a `WorldEnvironment` it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own `CameraAttributes`, including the editor camera. When used in a `Camera3D` it will override any `CameraAttributes` set in the `WorldEnvironment` and will override the `Camera3D`s `Camera3D.far`, `Camera3D.near`, `Camera3D.fov`, and `Camera3D.keep_aspect` properties. When used in `VoxelGI` or `LightmapGI`, only the exposure settings will be used.
		The default settings are intended for use in an outdoor environment, tips for settings for use in an indoor environment can be found in each setting's documentation.
		**Note:** Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility.
	"""

  @staticmethod
  def constructor()->CameraAttributesPhysical:pass



  @staticmethod
  def cast(other:__object__.Object)->CameraAttributesPhysical:pass


  @property
  def frustum_focus_distance(self)->float:
    """"""
    pass
  @frustum_focus_distance.setter
  def frustum_focus_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def frustum_focal_length(self)->float:
    """"""
    pass
  @frustum_focal_length.setter
  def frustum_focal_length(self,  value:float)->None:
    """"""
    pass
  @property
  def frustum_near(self)->float:
    """"""
    pass
  @frustum_near.setter
  def frustum_near(self,  value:float)->None:
    """"""
    pass
  @property
  def frustum_far(self)->float:
    """"""
    pass
  @frustum_far.setter
  def frustum_far(self,  value:float)->None:
    """"""
    pass
  @property
  def exposure_aperture(self)->float:
    """"""
    pass
  @exposure_aperture.setter
  def exposure_aperture(self,  value:float)->None:
    """"""
    pass
  @property
  def exposure_shutter_speed(self)->float:
    """"""
    pass
  @exposure_shutter_speed.setter
  def exposure_shutter_speed(self,  value:float)->None:
    """"""
    pass
  @property
  def auto_exposure_min_exposure_value(self)->float:
    """"""
    pass
  @auto_exposure_min_exposure_value.setter
  def auto_exposure_min_exposure_value(self,  value:float)->None:
    """"""
    pass
  @property
  def auto_exposure_max_exposure_value(self)->float:
    """"""
    pass
  @auto_exposure_max_exposure_value.setter
  def auto_exposure_max_exposure_value(self,  value:float)->None:
    """"""
    pass
  def set_aperture(self, aperture:float)->None:
    """"""
    pass

  def get_aperture(self)->float:
    """"""
    pass

  def set_shutter_speed(self, shutter_speed:float)->None:
    """"""
    pass

  def get_shutter_speed(self)->float:
    """"""
    pass

  def set_focal_length(self, focal_length:float)->None:
    """"""
    pass

  def get_focal_length(self)->float:
    """"""
    pass

  def set_focus_distance(self, focus_distance:float)->None:
    """"""
    pass

  def get_focus_distance(self)->float:
    """"""
    pass

  def set_near(self, near:float)->None:
    """"""
    pass

  def get_near(self)->float:
    """"""
    pass

  def set_far(self, far:float)->None:
    """"""
    pass

  def get_far(self)->float:
    """"""
    pass

  def get_fov(self)->float:
    """
				Returns the vertical field of view that corresponds to the `frustum_focal_length`. This value is calculated internally whenever `frustum_focal_length` is changed.
			"""
    pass

  def set_auto_exposure_max_exposure_value(self, exposure_value_max:float)->None:
    """"""
    pass

  def get_auto_exposure_max_exposure_value(self)->float:
    """"""
    pass

  def set_auto_exposure_min_exposure_value(self, exposure_value_min:float)->None:
    """"""
    pass

  def get_auto_exposure_min_exposure_value(self)->float:
    """"""
    pass


