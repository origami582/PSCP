from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh as __primitivemesh__



class PointMesh(__primitivemesh__.PrimitiveMesh):
  """
		A `PointMesh` is a primitive mesh composed of a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with particle systems, but can also be used as a cheap way to render billboarded sprites (for example in a point cloud).
		In order to be displayed, point meshes must be used with a material that has a point size. The point size can be accessed in a shader with the `POINT_SIZE` built-in, or in a `BaseMaterial3D` by setting the `BaseMaterial3D.use_point_size` and `BaseMaterial3D.point_size` properties.
		**Note:** When using point meshes, properties that normally affect vertices will be ignored, including `BaseMaterial3D.billboard_mode`, `BaseMaterial3D.grow`, and `BaseMaterial3D.cull_mode`.
	"""

  @staticmethod
  def constructor()->PointMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->PointMesh:pass


