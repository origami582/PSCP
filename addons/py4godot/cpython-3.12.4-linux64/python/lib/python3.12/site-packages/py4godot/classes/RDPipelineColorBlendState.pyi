from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.C as __c__
import py4godot.classes.a as __a__
import py4godot.classes.S as __s__
import py4godot.classes.m as __m__
import py4godot.classes.i as __i__
import py4godot.classes.B as __b__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.e as __e__
import py4godot.classes.P as __p__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.R as __r__
import py4godot.classes.l as __l__
import py4godot.classes.t as __t__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.h as __h__
import py4godot.classes.y as __y__



class RDPipelineColorBlendState(__refcounted__.RefCounted):
  """
		This object is used by `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDPipelineColorBlendState:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineColorBlendState:pass


  @property
  def enable_logic_op(self)->bool:
    """"""
    pass
  @enable_logic_op.setter
  def enable_logic_op(self,  value:bool)->None:
    """"""
    pass
  @property
  def logic_op(self)->int:
    """"""
    pass
  @logic_op.setter
  def logic_op(self,  value:int)->None:
    """"""
    pass
  @property
  def blend_constant(self)->__core__.Color:
    """"""
    pass
  @blend_constant.setter
  def blend_constant(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def attachments(self)->typedarray::RDPipelineColorBlendStateAttachment:
    """"""
    pass
  @attachments.setter
  def attachments(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_enable_logic_op(self, p_member:bool)->None:
    """"""
    pass

  def get_enable_logic_op(self)->bool:
    """"""
    pass

  def set_logic_op(self, p_member:int )->None:
    """"""
    pass

  def get_logic_op(self)->int:
    """"""
    pass

  def set_blend_constant(self, p_member:__core__.Color)->None:
    """"""
    pass

  def get_blend_constant(self)->__core__.Color:
    """"""
    pass

  def set_attachments(self, attachments:__core__.Array)->None:
    """"""
    pass

  def get_attachments(self)->typedarray::RDPipelineColorBlendStateAttachment:
    """"""
    pass


