from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.Font as __font__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.FontVariation as __fontvariation__



class FontVariation(__font__.Font):
  """
		Provides OpenType variations, simulated bold / slant, and additional font settings like OpenType features and extra spacing.
		To use simulated bold font variant:
		
		```gdscript
		var fv = FontVariation.new()
		fv.base_font = load("res://BarlowCondensed-Regular.ttf")
		fv.variation_embolden = 1.2
		$Label.add_theme_font_override("font", fv)
		$Label.add_theme_font_size_override("font_size", 64)
		```
		
		
		To set the coordinate of multiple variation axes:
		```gdscript
		var fv = FontVariation.new();
		var ts = TextServerManager.get_primary_interface()
		fv.base_font = load("res://BarlowCondensed-Regular.ttf")
		fv.variation_opentype = { ts.name_to_tag("wght"): 900, ts.name_to_tag("custom_hght"): 900 }
		```
	"""

  @staticmethod
  def constructor()->FontVariation:pass



  @staticmethod
  def cast(other:__object__.Object)->FontVariation:pass


  @property
  def base_font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass
  @base_font.setter
  def base_font(self,  value:__font__.Font)->None:
    """"""
    pass
  @property
  def variation_opentype(self)->__core__.Dictionary:
    """"""
    pass
  @variation_opentype.setter
  def variation_opentype(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def variation_face_index(self)->int:
    """"""
    pass
  @variation_face_index.setter
  def variation_face_index(self,  value:int)->None:
    """"""
    pass
  @property
  def variation_embolden(self)->float:
    """"""
    pass
  @variation_embolden.setter
  def variation_embolden(self,  value:float)->None:
    """"""
    pass
  @property
  def variation_transform(self)->__core__.Transform2D:
    """"""
    pass
  @variation_transform.setter
  def variation_transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def opentype_features(self)->__core__.Dictionary:
    """"""
    pass
  @opentype_features.setter
  def opentype_features(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def spacing_glyph(self)->int:
    """"""
    pass
  @spacing_glyph.setter
  def spacing_glyph(self,  value:int)->None:
    """"""
    pass
  @property
  def spacing_space(self)->int:
    """"""
    pass
  @spacing_space.setter
  def spacing_space(self,  value:int)->None:
    """"""
    pass
  @property
  def spacing_top(self)->int:
    """"""
    pass
  @spacing_top.setter
  def spacing_top(self,  value:int)->None:
    """"""
    pass
  @property
  def spacing_bottom(self)->int:
    """"""
    pass
  @spacing_bottom.setter
  def spacing_bottom(self,  value:int)->None:
    """"""
    pass
  @property
  def baseline_offset(self)->float:
    """"""
    pass
  @baseline_offset.setter
  def baseline_offset(self,  value:float)->None:
    """"""
    pass
  def set_base_font(self, font:__font__.Font)->None:
    """"""
    pass

  def get_base_font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass

  def set_variation_opentype(self, coords:__core__.Dictionary)->None:
    """"""
    pass

  def get_variation_opentype(self)->__core__.Dictionary:
    """"""
    pass

  def set_variation_embolden(self, strength:float)->None:
    """"""
    pass

  def get_variation_embolden(self)->float:
    """"""
    pass

  def set_variation_face_index(self, face_index:int)->None:
    """"""
    pass

  def get_variation_face_index(self)->int:
    """"""
    pass

  def set_variation_transform(self, transform:__core__.Transform2D)->None:
    """"""
    pass

  def get_variation_transform(self)->__core__.Transform2D:
    """"""
    pass

  def set_opentype_features(self, features:__core__.Dictionary)->None:
    """"""
    pass

  def set_spacing(self, spacing:int , value:int)->None:
    """
				Sets the spacing for `spacing` to `value` in pixels (not relative to the font size).
			"""
    pass

  def set_baseline_offset(self, baseline_offset:float)->None:
    """"""
    pass

  def get_baseline_offset(self)->float:
    """"""
    pass


