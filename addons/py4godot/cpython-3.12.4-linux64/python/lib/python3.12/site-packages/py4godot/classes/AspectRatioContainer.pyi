from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Container as __container__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__


class StretchMode:
  STRETCH_WIDTH_CONTROLS_HEIGHT:int = 0
  STRETCH_HEIGHT_CONTROLS_WIDTH:int = 1
  STRETCH_FIT:int = 2
  STRETCH_COVER:int = 3
class AlignmentMode:
  ALIGNMENT_BEGIN:int = 0
  ALIGNMENT_CENTER:int = 1
  ALIGNMENT_END:int = 2


class AspectRatioContainer(__container__.Container):
  """
		A container type that arranges its child controls in a way that preserves their proportions automatically when the container is resized. Useful when a container has a dynamic size and the child nodes must adjust their sizes accordingly without losing their aspect ratios.
	"""

  @staticmethod
  def constructor()->AspectRatioContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->AspectRatioContainer:pass


  @property
  def ratio(self)->float:
    """"""
    pass
  @ratio.setter
  def ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def stretch_mode(self)->int:
    """"""
    pass
  @stretch_mode.setter
  def stretch_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def alignment_horizontal(self)->int:
    """"""
    pass
  @alignment_horizontal.setter
  def alignment_horizontal(self,  value:int)->None:
    """"""
    pass
  @property
  def alignment_vertical(self)->int:
    """"""
    pass
  @alignment_vertical.setter
  def alignment_vertical(self,  value:int)->None:
    """"""
    pass
  def set_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_ratio(self)->float:
    """"""
    pass

  def set_stretch_mode(self, stretch_mode:int )->None:
    """"""
    pass

  def get_stretch_mode(self)->int:
    """"""
    pass

  def set_alignment_horizontal(self, alignment_horizontal:int )->None:
    """"""
    pass

  def get_alignment_horizontal(self)->int:
    """"""
    pass

  def set_alignment_vertical(self, alignment_vertical:int )->None:
    """"""
    pass

  def get_alignment_vertical(self)->int:
    """"""
    pass


