from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorResourceConversionPlugin as __editorresourceconversionplugin__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.EditorContextMenuPlugin as __editorcontextmenuplugin__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.EditorPlugin as __editorplugin__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.EditorImportPlugin as __editorimportplugin__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.EditorNode3DGizmoPlugin as __editornode3dgizmoplugin__
import py4godot.classes.EditorInterface as __editorinterface__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.Node as __node__
import py4godot.classes.EditorDebuggerPlugin as __editordebuggerplugin__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.EditorTranslationParserPlugin as __editortranslationparserplugin__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.EditorSceneFormatImporter as __editorsceneformatimporter__
import py4godot.classes.EditorExportPlugin as __editorexportplugin__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.Object as __object__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.Shortcut as __shortcut__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.EditorScenePostImportPlugin as __editorscenepostimportplugin__
import py4godot.classes.EditorInspectorPlugin as __editorinspectorplugin__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.EditorUndoRedoManager as __editorundoredomanager__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.ConfigFile as __configfile__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.Script as __script__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__


class CustomControlContainer:
  CONTAINER_TOOLBAR:int = 0
  CONTAINER_SPATIAL_EDITOR_MENU:int = 1
  CONTAINER_SPATIAL_EDITOR_SIDE_LEFT:int = 2
  CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT:int = 3
  CONTAINER_SPATIAL_EDITOR_BOTTOM:int = 4
  CONTAINER_CANVAS_EDITOR_MENU:int = 5
  CONTAINER_CANVAS_EDITOR_SIDE_LEFT:int = 6
  CONTAINER_CANVAS_EDITOR_SIDE_RIGHT:int = 7
  CONTAINER_CANVAS_EDITOR_BOTTOM:int = 8
  CONTAINER_INSPECTOR_BOTTOM:int = 9
  CONTAINER_PROJECT_SETTING_TAB_LEFT:int = 10
  CONTAINER_PROJECT_SETTING_TAB_RIGHT:int = 11
class DockSlot:
  DOCK_SLOT_LEFT_UL:int = 0
  DOCK_SLOT_LEFT_BL:int = 1
  DOCK_SLOT_LEFT_UR:int = 2
  DOCK_SLOT_LEFT_BR:int = 3
  DOCK_SLOT_RIGHT_UL:int = 4
  DOCK_SLOT_RIGHT_BL:int = 5
  DOCK_SLOT_RIGHT_UR:int = 6
  DOCK_SLOT_RIGHT_BR:int = 7
  DOCK_SLOT_MAX:int = 8
class AfterGUIInput:
  AFTER_GUI_INPUT_PASS:int = 0
  AFTER_GUI_INPUT_STOP:int = 1
  AFTER_GUI_INPUT_CUSTOM:int = 2


class EditorPlugin(__node__.Node):
  """
		Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also `EditorScript` to add functions to the editor.
		**Note:** Some names in this class contain "left" or "right" (e.g. `constant DOCK_SLOT_LEFT_UL`). These APIs assume left-to-right layout, and would be backwards when using right-to-left layout. These names are kept for compatibility reasons.
	"""
  scene_changed: BuiltinSignal
  scene_closed: BuiltinSignal
  main_screen_changed: BuiltinSignal
  resource_saved: BuiltinSignal
  scene_saved: BuiltinSignal
  project_settings_changed: BuiltinSignal

  @staticmethod
  def constructor()->EditorPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorPlugin:pass


  def _forward_canvas_gui_input(self, event:__inputevent__.InputEvent)->bool:
    """
				Called when there is a root node in the current edited scene, `_handles` is implemented, and an `InputEvent` happens in the 2D viewport. If this method returns `true`, `event` is intercepted by this `EditorPlugin`, otherwise `event` is forwarded to other Editor classes.
				
				```gdscript
				# Prevents the InputEvent from reaching other Editor classes.
				func _forward_canvas_gui_input(event):
					return true
				```
				
				
				This method must return `false` in order to forward the `InputEvent` to other Editor classes.
				
				```gdscript
				# Consumes InputEventMouseMotion and forwards other InputEvent types.
				func _forward_canvas_gui_input(event):
					if (event is InputEventMouseMotion):
						return true
					return false
				```
				
				
			"""
    pass

  def _forward_canvas_draw_over_viewport(self, viewport_control:__control__.Control)->None:
    """
				Called by the engine when the 2D editor's viewport is updated. `viewport_control` is an overlay on top of the viewport and it can be used for drawing. You can update the viewport manually by calling `update_overlays`.
				
				```gdscript
				func _forward_canvas_draw_over_viewport(overlay):
					# Draw a circle at the cursor's position.
					overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

				func _forward_canvas_gui_input(event):
					if event is InputEventMouseMotion:
						# Redraw the viewport when the cursor is moved.
						update_overlays()
						return true
					return false
				```
				
				
			"""
    pass

  def _forward_canvas_force_draw_over_viewport(self, viewport_control:__control__.Control)->None:
    """
				This method is the same as `_forward_canvas_draw_over_viewport`, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
				You need to enable calling of this method by using `set_force_draw_over_forwarding_enabled`.
			"""
    pass

  def _forward_3d_gui_input(self, viewport_camera:__camera3d__.Camera3D, event:__inputevent__.InputEvent)->int:
    """
				Called when there is a root node in the current edited scene, `_handles` is implemented, and an `InputEvent` happens in the 3D viewport. The return value decides whether the `InputEvent` is consumed or forwarded to other `EditorPlugin`s. See `enum AfterGUIInput` for options.
				
				```gdscript
				# Prevents the InputEvent from reaching other Editor classes.
				func _forward_3d_gui_input(camera, event):
					return EditorPlugin.AFTER_GUI_INPUT_STOP
				```
				
				
				This method must return `constant AFTER_GUI_INPUT_PASS` in order to forward the `InputEvent` to other Editor classes.
				
				```gdscript
				# Consumes InputEventMouseMotion and forwards other InputEvent types.
				func _forward_3d_gui_input(camera, event):
					return EditorPlugin.AFTER_GUI_INPUT_STOP if event is InputEventMouseMotion else EditorPlugin.AFTER_GUI_INPUT_PASS
				```
				
				
			"""
    pass

  def _forward_3d_draw_over_viewport(self, viewport_control:__control__.Control)->None:
    """
				Called by the engine when the 3D editor's viewport is updated. `viewport_control` is an overlay on top of the viewport and it can be used for drawing. You can update the viewport manually by calling `update_overlays`.
				
				```gdscript
				func _forward_3d_draw_over_viewport(overlay):
					# Draw a circle at the cursor's position.
					overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

				func _forward_3d_gui_input(camera, event):
					if event is InputEventMouseMotion:
						# Redraw the viewport when the cursor is moved.
						update_overlays()
						return EditorPlugin.AFTER_GUI_INPUT_STOP
					return EditorPlugin.AFTER_GUI_INPUT_PASS
				```
				
				
			"""
    pass

  def _forward_3d_force_draw_over_viewport(self, viewport_control:__control__.Control)->None:
    """
				This method is the same as `_forward_3d_draw_over_viewport`, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
				You need to enable calling of this method by using `set_force_draw_over_forwarding_enabled`.
			"""
    pass

  def _get_plugin_name(self)->str:
    """
				Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.
				For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", "Game", and "AssetLib" buttons.
			"""
    pass

  def _get_plugin_icon(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Override this method in your plugin to return a `Texture2D` in order to give it an icon.
				For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", "Game", and "AssetLib" buttons.
				Ideally, the plugin icon should be white with a transparent background and 16×16 pixels in size.
				
				```gdscript
				func _get_plugin_icon():
					# You can use a custom icon:
					return preload("res://addons/my_plugin/my_plugin_icon.svg")
					# Or use a built-in icon:
					return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
				```
				
				
			"""
    pass

  def _has_main_screen(self)->bool:
    """
				Returns `true` if this is a main screen editor plugin (it goes in the workspace selector together with **2D**, **3D**, **Script**, **Game**, and **AssetLib**).
				When the plugin's workspace is selected, other main screen plugins will be hidden, but your plugin will not appear automatically. It needs to be added as a child of `EditorInterface.get_editor_main_screen` and made visible inside `_make_visible`.
				Use `_get_plugin_name` and `_get_plugin_icon` to customize the plugin button's appearance.
				```gdscript
				var plugin_control

				func _enter_tree():
					plugin_control = preload("my_plugin_control.tscn").instantiate()
					EditorInterface.get_editor_main_screen().add_child(plugin_control)
					plugin_control.hide()

				func _has_main_screen():
					return true

				func _make_visible(visible):
					plugin_control.visible = visible

				func _get_plugin_name():
					return "My Super Cool Plugin 3000"

				func _get_plugin_icon():
					return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
				```
			"""
    pass

  def _make_visible(self, visible:bool)->None:
    """
				This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.
				Remember that you have to manage the visibility of all your editor controls manually.
			"""
    pass

  def _edit(self, object:__object__.Object)->None:
    """
				This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
				`object` can be `null` if the plugin was editing an object, but there is no longer any selected object handled by this plugin. It can be used to cleanup editing state.
			"""
    pass

  def _handles(self, object:__object__.Object)->bool:
    """
				Implement this function if your plugin edits a specific type of object (Resource or Node). If you return `true`, then you will get the functions `_edit` and `_make_visible` called when the editor requests them. If you have declared the methods `_forward_canvas_gui_input` and `_forward_3d_gui_input` these will be called too.
				**Note:** Each plugin should handle only one type of objects at a time. If a plugin handles more types of objects and they are edited at the same time, it will result in errors.
			"""
    pass

  def _get_state(self)->__core__.Dictionary:
    """
				Override this method to provide a state data you want to be saved, like view position, grid settings, folding, etc. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). This data is automatically saved for each scene in an `editstate` file in the editor metadata folder. If you want to store global (scene-independent) editor data for your plugin, you can use `_get_window_layout` instead.
				Use `_set_state` to restore your saved state.
				**Note:** This method should not be used to save important settings that should persist with the project.
				**Note:** You must implement `_get_plugin_name` for the state to be stored and restored correctly.
				```gdscript
				func _get_state():
					var state = { "zoom": zoom, "preferred_color": my_color }
					return state
				```
			"""
    pass

  def _set_state(self, state:__core__.Dictionary)->None:
    """
				Restore the state saved by `_get_state`. This method is called when the current scene tab is changed in the editor.
				**Note:** Your plugin must implement `_get_plugin_name`, otherwise it will not be recognized and this method will not be called.
				```gdscript
				func _set_state(data):
					zoom = data.get("zoom", 1.0)
					preferred_color = data.get("my_color", Color.WHITE)
				```
			"""
    pass

  def _clear(self)->None:
    """
				Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
			"""
    pass

  def _get_unsaved_status(self, for_scene:str)->str:
    """
				Override this method to provide a custom message that lists unsaved changes. The editor will call this method when exiting or when closing a scene, and display the returned string in a confirmation dialog. Return empty string if the plugin has no unsaved changes.
				When closing a scene, `for_scene` is the path to the scene being closed. You can use it to handle built-in resources in that scene.
				If the user confirms saving, `_save_external_data` will be called, before closing the editor.
				```gdscript
				func _get_unsaved_status(for_scene):
					if not unsaved:
						return ""

					if for_scene.is_empty():
						return "Save changes in MyCustomPlugin before closing?"
					else:
						return "Scene %s has changes from MyCustomPlugin. Save before closing?" % for_scene.get_file()

				func _save_external_data():
					unsaved = false
				```
				If the plugin has no scene-specific changes, you can ignore the calls when closing scenes:
				```gdscript
				func _get_unsaved_status(for_scene):
					if not for_scene.is_empty():
						return ""
				```
			"""
    pass

  def _save_external_data(self)->None:
    """
				This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
			"""
    pass

  def _apply_changes(self)->None:
    """
				This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.
				This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
			"""
    pass

  def _get_breakpoints(self)->__core__.PackedStringArray:
    """
				This is for editors that edit script-based objects. You can return a list of breakpoints in the format (`script:line`), for example: `res://path_to_script.gd:25`.
			"""
    pass

  def _set_window_layout(self, configuration:__configfile__.ConfigFile)->None:
    """
				Restore the plugin GUI layout and data saved by `_get_window_layout`. This method is called for every plugin on editor startup. Use the provided `configuration` file to read your saved data.
				```gdscript
				func _set_window_layout(configuration):
					$Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
					$Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.WHITE)
				```
			"""
    pass

  def _get_window_layout(self, configuration:__configfile__.ConfigFile)->None:
    """
				Override this method to provide the GUI layout of the plugin or any other data you want to be stored. This is used to save the project's editor layout when `queue_save_layout` is called or the editor layout was changed (for example changing the position of a dock). The data is stored in the `editor_layout.cfg` file in the editor metadata directory.
				Use `_set_window_layout` to restore your saved layout.
				```gdscript
				func _get_window_layout(configuration):
					configuration.set_value("MyPlugin", "window_position", $Window.position)
					configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)
				```
			"""
    pass

  def _build(self)->bool:
    """
				This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs.
				This method must return a boolean. If this method returns `false`, the project will not run. The run is aborted immediately, so this also prevents all other plugins' `_build` methods from running.
			"""
    pass

  def _enable_plugin(self)->None:
    """
				Called by the engine when the user enables the `EditorPlugin` in the Plugin tab of the project settings window.
			"""
    pass

  def _disable_plugin(self)->None:
    """
				Called by the engine when the user disables the `EditorPlugin` in the Plugin tab of the project settings window.
			"""
    pass

  def add_control_to_container(self, container:int , control:__control__.Control)->None:
    """
				Adds a custom control to a container in the editor UI.
				Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).
				When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_container` and free it with `Node.queue_free`.
			"""
    pass

  def add_control_to_bottom_panel(self, control:__control__.Control, title:str, shortcut:__shortcut__.Shortcut= __shortcut__.Shortcut.constructor())->__checkbox__.CheckBox|__button__.Button|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__optionbutton__.OptionButton|__checkbutton__.CheckButton:
    """
				Adds a control to the bottom panel (together with Output, Debug, Animation, etc.). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_bottom_panel` and free it with `Node.queue_free`.
				Optionally, you can specify a shortcut parameter. When pressed, this shortcut will toggle the bottom panel's visibility. See the default editor bottom panel shortcuts in the Editor Settings for inspiration. Per convention, they all use `kbd`Alt`/kbd` modifier.
			"""
    pass

  def add_control_to_dock(self, slot:int , control:__control__.Control, shortcut:__shortcut__.Shortcut= __shortcut__.Shortcut.constructor())->None:
    """
				Adds the control to a specific dock slot.
				If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.
				When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_docks` and free it with `Node.queue_free`.
				Optionally, you can specify a shortcut parameter. When pressed, this shortcut will open and focus the dock.
			"""
    pass

  def remove_control_from_docks(self, control:__control__.Control)->None:
    """
				Removes the control from the dock. You have to manually `Node.queue_free` the control.
			"""
    pass

  def remove_control_from_bottom_panel(self, control:__control__.Control)->None:
    """
				Removes the control from the bottom panel. You have to manually `Node.queue_free` the control.
			"""
    pass

  def remove_control_from_container(self, container:int , control:__control__.Control)->None:
    """
				Removes the control from the specified container. You have to manually `Node.queue_free` the control.
			"""
    pass

  def set_dock_tab_icon(self, control:__control__.Control, icon:__texture2d__.Texture2D)->None:
    """
				Sets the tab icon for the given control in a dock slot. Setting to `null` removes the icon.
			"""
    pass

  def add_tool_menu_item(self, name:str, callable:__core__.Callable)->None:
    """
				Adds a custom menu item to **Project > Tools** named `name`. When clicked, the provided `callable` will be called.
			"""
    pass

  def add_tool_submenu_item(self, name:str, submenu:__popupmenu__.PopupMenu)->None:
    """
				Adds a custom `PopupMenu` submenu under **Project > Tools >** `name`. Use `remove_tool_menu_item` on plugin clean up to remove the menu.
			"""
    pass

  def remove_tool_menu_item(self, name:str)->None:
    """
				Removes a menu `name` from **Project > Tools**.
			"""
    pass

  def get_export_as_menu(self)->__popupmenu__.PopupMenu:
    """
				Returns the `PopupMenu` under **Scene > Export As...**.
			"""
    pass

  def add_custom_type(self, type:str, base:str, script:__script__.Script, icon:__texture2d__.Texture2D)->None:
    """
				Adds a custom type, which will appear in the list of nodes or resources.
				When a given node or resource is selected, the base type will be instantiated (e.g. "Node3D", "Control", "Resource"), then the script will be loaded and set to this object.
				**Note:** The base type is the base engine class which this type's class hierarchy inherits, not any custom type parent classes.
				You can use the virtual method `_handles` to check if your custom object is being edited by checking the script or using the `is` keyword.
				During run-time, this will be a simple object with a script so this function does not need to be called then.
				**Note:** Custom types added this way are not true classes. They are just a helper to create a node with specific script.
			"""
    pass

  def remove_custom_type(self, type:str)->None:
    """
				Removes a custom type added by `add_custom_type`.
			"""
    pass

  def add_autoload_singleton(self, name:str, path:str)->None:
    """
				Adds a script at `path` to the Autoload list as `name`.
			"""
    pass

  def remove_autoload_singleton(self, name:str)->None:
    """
				Removes an Autoload `name` from the list.
			"""
    pass

  def update_overlays(self)->int:
    """
				Updates the overlays of the 2D and 3D editor viewport. Causes methods `_forward_canvas_draw_over_viewport`, `_forward_canvas_force_draw_over_viewport`, `_forward_3d_draw_over_viewport` and `_forward_3d_force_draw_over_viewport` to be called.
			"""
    pass

  def make_bottom_panel_item_visible(self, item:__control__.Control)->None:
    """
				Makes a specific item in the bottom panel visible.
			"""
    pass

  def hide_bottom_panel(self)->None:
    """
				Minimizes the bottom panel.
			"""
    pass

  def get_undo_redo(self)->__editorundoredomanager__.EditorUndoRedoManager:
    """
				Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.
			"""
    pass

  def add_undo_redo_inspector_hook_callback(self, callable:__core__.Callable)->None:
    """
				Hooks a callback into the undo/redo action creation when a property is modified in the inspector. This allows, for example, to save other properties that may be lost when a given property is modified.
				The callback should have 4 arguments: `Object` `undo_redo`, `Object` `modified_object`, `String` `property` and `Variant` `new_value`. They are, respectively, the `UndoRedo` object used by the inspector, the currently modified object, the name of the modified property and the new value the property is about to take.
			"""
    pass

  def remove_undo_redo_inspector_hook_callback(self, callable:__core__.Callable)->None:
    """
				Removes a callback previously added by `add_undo_redo_inspector_hook_callback`.
			"""
    pass

  def queue_save_layout(self)->None:
    """
				Queue save the project's editor layout.
			"""
    pass

  def add_translation_parser_plugin(self, parser:__editortranslationparserplugin__.EditorTranslationParserPlugin)->None:
    """
				Registers a custom translation parser plugin for extracting translatable strings from custom files.
			"""
    pass

  def remove_translation_parser_plugin(self, parser:__editortranslationparserplugin__.EditorTranslationParserPlugin)->None:
    """
				Removes a custom translation parser plugin registered by `add_translation_parser_plugin`.
			"""
    pass

  def add_import_plugin(self, importer:__editorimportplugin__.EditorImportPlugin, first_priority:bool=False)->None:
    """
				Registers a new `EditorImportPlugin`. Import plugins are used to import custom and unsupported assets as a custom `Resource` type.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
				**Note:** If you want to import custom 3D asset formats use `add_scene_format_importer_plugin` instead.
				See `add_inspector_plugin` for an example of how to register a plugin.
			"""
    pass

  def remove_import_plugin(self, importer:__editorimportplugin__.EditorImportPlugin)->None:
    """
				Removes an import plugin registered by `add_import_plugin`.
			"""
    pass

  def add_scene_format_importer_plugin(self, scene_format_importer:__editorsceneformatimporter__.EditorSceneFormatImporter, first_priority:bool=False)->None:
    """
				Registers a new `EditorSceneFormatImporter`. Scene importers are used to import custom 3D asset formats as scenes.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
			"""
    pass

  def remove_scene_format_importer_plugin(self, scene_format_importer:__editorsceneformatimporter__.EditorSceneFormatImporter)->None:
    """
				Removes a scene format importer registered by `add_scene_format_importer_plugin`.
			"""
    pass

  def add_scene_post_import_plugin(self, scene_import_plugin:__editorscenepostimportplugin__.EditorScenePostImportPlugin, first_priority:bool=False)->None:
    """
				Add an `EditorScenePostImportPlugin`. These plugins allow customizing the import process of 3D assets by adding new options to the import dialogs.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
			"""
    pass

  def remove_scene_post_import_plugin(self, scene_import_plugin:__editorscenepostimportplugin__.EditorScenePostImportPlugin)->None:
    """
				Remove the `EditorScenePostImportPlugin`, added with `add_scene_post_import_plugin`.
			"""
    pass

  def add_export_plugin(self, plugin:__editorexportplugin__.EditorExportPlugin)->None:
    """
				Registers a new `EditorExportPlugin`. Export plugins are used to perform tasks when the project is being exported.
				See `add_inspector_plugin` for an example of how to register a plugin.
			"""
    pass

  def remove_export_plugin(self, plugin:__editorexportplugin__.EditorExportPlugin)->None:
    """
				Removes an export plugin registered by `add_export_plugin`.
			"""
    pass

  def add_export_platform(self, platform:__editorexportplatform__.EditorExportPlatform)->None:
    """
				Registers a new `EditorExportPlatform`. Export platforms provides functionality of exporting to the specific platform.
			"""
    pass

  def remove_export_platform(self, platform:__editorexportplatform__.EditorExportPlatform)->None:
    """
				Removes an export platform registered by `add_export_platform`.
			"""
    pass

  def add_node_3d_gizmo_plugin(self, plugin:__editornode3dgizmoplugin__.EditorNode3DGizmoPlugin)->None:
    """
				Registers a new `EditorNode3DGizmoPlugin`. Gizmo plugins are used to add custom gizmos to the 3D preview viewport for a `Node3D`.
				See `add_inspector_plugin` for an example of how to register a plugin.
			"""
    pass

  def remove_node_3d_gizmo_plugin(self, plugin:__editornode3dgizmoplugin__.EditorNode3DGizmoPlugin)->None:
    """
				Removes a gizmo plugin registered by `add_node_3d_gizmo_plugin`.
			"""
    pass

  def add_inspector_plugin(self, plugin:__editorinspectorplugin__.EditorInspectorPlugin)->None:
    """
				Registers a new `EditorInspectorPlugin`. Inspector plugins are used to extend `EditorInspector` and provide custom configuration tools for your object's properties.
				**Note:** Always use `remove_inspector_plugin` to remove the registered `EditorInspectorPlugin` when your `EditorPlugin` is disabled to prevent leaks and an unexpected behavior.
				
				```gdscript
				const MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
				var inspector_plugin = MyInspectorPlugin.new()

				func _enter_tree():
					add_inspector_plugin(inspector_plugin)

				func _exit_tree():
					remove_inspector_plugin(inspector_plugin)
				```
				
			"""
    pass

  def remove_inspector_plugin(self, plugin:__editorinspectorplugin__.EditorInspectorPlugin)->None:
    """
				Removes an inspector plugin registered by `add_inspector_plugin`.
			"""
    pass

  def add_resource_conversion_plugin(self, plugin:__editorresourceconversionplugin__.EditorResourceConversionPlugin)->None:
    """
				Registers a new `EditorResourceConversionPlugin`. Resource conversion plugins are used to add custom resource converters to the editor inspector.
				See `EditorResourceConversionPlugin` for an example of how to create a resource conversion plugin.
			"""
    pass

  def remove_resource_conversion_plugin(self, plugin:__editorresourceconversionplugin__.EditorResourceConversionPlugin)->None:
    """
				Removes a resource conversion plugin registered by `add_resource_conversion_plugin`.
			"""
    pass

  def set_input_event_forwarding_always_enabled(self)->None:
    """
				Use this method if you always want to receive inputs from 3D view screen inside `_forward_3d_gui_input`. It might be especially usable if your plugin will want to use raycast in the scene.
			"""
    pass

  def set_force_draw_over_forwarding_enabled(self)->None:
    """
				Enables calling of `_forward_canvas_force_draw_over_viewport` for the 2D editor and `_forward_3d_force_draw_over_viewport` for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin.
			"""
    pass

  def add_context_menu_plugin(self, slot:int , plugin:__editorcontextmenuplugin__.EditorContextMenuPlugin)->None:
    """
				Adds a plugin to the context menu. `slot` is the context menu where the plugin will be added.
				**Note:** A plugin instance can belong only to a single context menu slot.
			"""
    pass

  def remove_context_menu_plugin(self, plugin:__editorcontextmenuplugin__.EditorContextMenuPlugin)->None:
    """
				Removes the specified context menu plugin.
			"""
    pass

  def get_editor_interface(self)->__editorinterface__.EditorInterface:
    """
				Returns the `EditorInterface` singleton instance.
			"""
    pass

  def get_script_create_dialog(self)->__scriptcreatedialog__.ScriptCreateDialog:
    """
				Gets the Editor's dialog used for making scripts.
				**Note:** Users can configure it before use.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def add_debugger_plugin(self, script:__editordebuggerplugin__.EditorDebuggerPlugin)->None:
    """
				Adds a `Script` as debugger plugin to the Debugger. The script must extend `EditorDebuggerPlugin`.
			"""
    pass

  def remove_debugger_plugin(self, script:__editordebuggerplugin__.EditorDebuggerPlugin)->None:
    """
				Removes the debugger plugin with given script from the Debugger.
			"""
    pass

  def get_plugin_version(self)->str:
    """
				Provide the version of the plugin declared in the `plugin.cfg` config file.
			"""
    pass


