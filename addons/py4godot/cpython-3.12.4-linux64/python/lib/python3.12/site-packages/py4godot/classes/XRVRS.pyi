from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__



class XRVRS(__object__.Object):
  """
		This class is used by various XR interfaces to generate VRS textures that can be used to speed up rendering.
	"""

  @staticmethod
  def constructor()->XRVRS:pass



  @staticmethod
  def cast(other:__object__.Object)->XRVRS:pass


  @property
  def vrs_min_radius(self)->float:
    """"""
    pass
  @vrs_min_radius.setter
  def vrs_min_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def vrs_strength(self)->float:
    """"""
    pass
  @vrs_strength.setter
  def vrs_strength(self,  value:float)->None:
    """"""
    pass
  @property
  def vrs_render_region(self)->__core__.Rect2i:
    """"""
    pass
  @vrs_render_region.setter
  def vrs_render_region(self,  value:__core__.Rect2i)->None:
    """"""
    pass
  def get_vrs_min_radius(self)->float:
    """"""
    pass

  def set_vrs_min_radius(self, radius:float)->None:
    """"""
    pass

  def get_vrs_strength(self)->float:
    """"""
    pass

  def set_vrs_strength(self, strength:float)->None:
    """"""
    pass

  def get_vrs_render_region(self)->__core__.Rect2i:
    """"""
    pass

  def set_vrs_render_region(self, render_region:__core__.Rect2i)->None:
    """"""
    pass

  def make_vrs_texture(self, target_size:__core__.Vector2, eye_foci:__core__.PackedVector2Array)->__core__.RID:
    """
				Generates the VRS texture based on a render `target_size` adjusted by our VRS tile size. For each eyes focal point passed in `eye_foci` a layer is created. Focal point should be in NDC.
				The result will be cached, requesting a VRS texture with unchanged parameters and settings will return the cached RID.
			"""
    pass


