from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.PinJoint2D as __pinjoint2d__



class PhysicalBone2D(__rigidbody2d__.RigidBody2D):
  """
		The `PhysicalBone2D` node is a `RigidBody2D`-based node that can be used to make `Bone2D`s in a `Skeleton2D` react to physics.
		**Note:** To make the `Bone2D`s visually follow the `PhysicalBone2D` node, use a `SkeletonModification2DPhysicalBones` modification on the `Skeleton2D` parent.
		**Note:** The `PhysicalBone2D` node does not automatically create a `Joint2D` node to keep `PhysicalBone2D` nodes together. They must be created manually. For most cases, you want to use a `PinJoint2D` node. The `PhysicalBone2D` node will automatically configure the `Joint2D` node once it's been added as a child node.
	"""

  @staticmethod
  def constructor()->PhysicalBone2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicalBone2D:pass


  @property
  def bone2d_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @bone2d_nodepath.setter
  def bone2d_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def bone2d_index(self)->int:
    """"""
    pass
  @bone2d_index.setter
  def bone2d_index(self,  value:int)->None:
    """"""
    pass
  @property
  def auto_configure_joint(self)->bool:
    """"""
    pass
  @auto_configure_joint.setter
  def auto_configure_joint(self,  value:bool)->None:
    """"""
    pass
  @property
  def simulate_physics(self)->bool:
    """"""
    pass
  @simulate_physics.setter
  def simulate_physics(self,  value:bool)->None:
    """"""
    pass
  @property
  def follow_bone_when_simulating(self)->bool:
    """"""
    pass
  @follow_bone_when_simulating.setter
  def follow_bone_when_simulating(self,  value:bool)->None:
    """"""
    pass
  def get_joint(self)->__pinjoint2d__.PinJoint2D|__dampedspringjoint2d__.DampedSpringJoint2D|__groovejoint2d__.GrooveJoint2D|__joint2d__.Joint2D:
    """
				Returns the first `Joint2D` child node, if one exists. This is mainly a helper function to make it easier to get the `Joint2D` that the `PhysicalBone2D` is autoconfiguring.
			"""
    pass

  def get_auto_configure_joint(self)->bool:
    """"""
    pass

  def set_auto_configure_joint(self, auto_configure_joint:bool)->None:
    """"""
    pass

  def set_simulate_physics(self, simulate_physics:bool)->None:
    """"""
    pass

  def get_simulate_physics(self)->bool:
    """"""
    pass

  def is_simulating_physics(self)->bool:
    """
				Returns a boolean that indicates whether the `PhysicalBone2D` is running and simulating using the Godot 2D physics engine. When `true`, the PhysicalBone2D node is using physics.
			"""
    pass

  def set_bone2d_nodepath(self, nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_bone2d_nodepath(self)->__core__.NodePath:
    """"""
    pass

  def set_bone2d_index(self, bone_index:int)->None:
    """"""
    pass

  def get_bone2d_index(self)->int:
    """"""
    pass

  def set_follow_bone_when_simulating(self, follow_bone:bool)->None:
    """"""
    pass

  def get_follow_bone_when_simulating(self)->bool:
    """"""
    pass


