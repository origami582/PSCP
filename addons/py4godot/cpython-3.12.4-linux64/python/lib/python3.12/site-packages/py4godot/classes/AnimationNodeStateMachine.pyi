from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeAdd2 as __animationnodeadd2__
import py4godot.classes.AnimationNodeTimeSeek as __animationnodetimeseek__
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.AnimationNodeStateMachineTransition as __animationnodestatemachinetransition__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationNodeOutput as __animationnodeoutput__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeOneShot as __animationnodeoneshot__
import py4godot.classes.AnimationNodeSub2 as __animationnodesub2__
import py4godot.classes.AnimationNodeTransition as __animationnodetransition__
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationNodeBlend3 as __animationnodeblend3__
import py4godot.classes.AnimationNodeTimeScale as __animationnodetimescale__
import py4godot.classes.AnimationNodeBlend2 as __animationnodeblend2__
import py4godot.classes.AnimationNode as __animationnode__
import py4godot.classes.AnimationNodeExtension as __animationnodeextension__
import py4godot.classes.AnimationNodeAdd3 as __animationnodeadd3__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__


class StateMachineType:
  STATE_MACHINE_KIND_ROOT:int = 0
  STATE_MACHINE_KIND_NESTED:int = 1
  STATE_MACHINE_KIND_GROUPED:int = 2


class AnimationNodeStateMachine(__animationrootnode__.AnimationRootNode):
  """
		Contains multiple `AnimationRootNode`s representing animation states, connected in a graph. State transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the `AnimationNodeStateMachinePlayback` object from the `AnimationTree` node to control it programmatically.
		
		```gdscript
		var state_machine = $AnimationTree.get("parameters/playback")
		state_machine.travel("some_state")
		```
		
		
	"""

  @staticmethod
  def constructor()->AnimationNodeStateMachine:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeStateMachine:pass


  @property
  def state_machine_type(self)->int:
    """"""
    pass
  @state_machine_type.setter
  def state_machine_type(self,  value:int)->None:
    """"""
    pass
  @property
  def allow_transition_to_self(self)->bool:
    """"""
    pass
  @allow_transition_to_self.setter
  def allow_transition_to_self(self,  value:bool)->None:
    """"""
    pass
  @property
  def reset_ends(self)->bool:
    """"""
    pass
  @reset_ends.setter
  def reset_ends(self,  value:bool)->None:
    """"""
    pass
  def add_node(self, name:__core__.StringName|str, node:__animationnode__.AnimationNode, position:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Adds a new animation node to the graph. The `position` is used for display in the editor.
			"""
    pass

  def replace_node(self, name:__core__.StringName|str, node:__animationnode__.AnimationNode)->None:
    """
				Replaces the given animation node with a new animation node.
			"""
    pass

  def get_node(self, name:__core__.StringName|str)->__animationnodeadd2__.AnimationNodeAdd2|__animationnodetimeseek__.AnimationNodeTimeSeek|__animationnodesync__.AnimationNodeSync|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeoutput__.AnimationNodeOutput|__animationrootnode__.AnimationRootNode|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeoneshot__.AnimationNodeOneShot|__animationnodesub2__.AnimationNodeSub2|__animationnodetransition__.AnimationNodeTransition|__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodeblend3__.AnimationNodeBlend3|__animationnodetimescale__.AnimationNodeTimeScale|__animationnodeblend2__.AnimationNodeBlend2|__animationnode__.AnimationNode|__animationnodeextension__.AnimationNodeExtension|__animationnodeadd3__.AnimationNodeAdd3|__animationnodeblendtree__.AnimationNodeBlendTree:
    """
				Returns the animation node with the given name.
			"""
    pass

  def remove_node(self, name:__core__.StringName|str)->None:
    """
				Deletes the given animation node from the graph.
			"""
    pass

  def rename_node(self, name:__core__.StringName|str, new_name:__core__.StringName|str)->None:
    """
				Renames the given animation node.
			"""
    pass

  def has_node(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if the graph contains the given animation node.
			"""
    pass

  def get_node_name(self, node:__animationnode__.AnimationNode)->__core__.StringName:
    """
				Returns the given animation node's name.
			"""
    pass

  def set_node_position(self, name:__core__.StringName|str, position:__core__.Vector2)->None:
    """
				Sets the animation node's coordinates. Used for display in the editor.
			"""
    pass

  def get_node_position(self, name:__core__.StringName|str)->__core__.Vector2:
    """
				Returns the given animation node's coordinates. Used for display in the editor.
			"""
    pass

  def has_transition(self, from_:__core__.StringName|str, to:__core__.StringName|str)->bool:
    """
				Returns `true` if there is a transition between the given animation nodes.
			"""
    pass

  def add_transition(self, from_:__core__.StringName|str, to:__core__.StringName|str, transition:__animationnodestatemachinetransition__.AnimationNodeStateMachineTransition)->None:
    """
				Adds a transition between the given animation nodes.
			"""
    pass

  def get_transition(self, idx:int)->__animationnodestatemachinetransition__.AnimationNodeStateMachineTransition:
    """
				Returns the given transition.
			"""
    pass

  def get_transition_from(self, idx:int)->__core__.StringName:
    """
				Returns the given transition's start node.
			"""
    pass

  def get_transition_to(self, idx:int)->__core__.StringName:
    """
				Returns the given transition's end node.
			"""
    pass

  def get_transition_count(self)->int:
    """
				Returns the number of connections in the graph.
			"""
    pass

  def remove_transition_by_index(self, idx:int)->None:
    """
				Deletes the given transition by index.
			"""
    pass

  def remove_transition(self, from_:__core__.StringName|str, to:__core__.StringName|str)->None:
    """
				Deletes the transition between the two specified animation nodes.
			"""
    pass

  def set_graph_offset(self, offset:__core__.Vector2)->None:
    """
				Sets the draw offset of the graph. Used for display in the editor.
			"""
    pass

  def get_graph_offset(self)->__core__.Vector2:
    """
				Returns the draw offset of the graph. Used for display in the editor.
			"""
    pass

  def set_state_machine_type(self, state_machine_type:int )->None:
    """"""
    pass

  def get_state_machine_type(self)->int:
    """"""
    pass

  def set_allow_transition_to_self(self, enable:bool)->None:
    """"""
    pass

  def is_allow_transition_to_self(self)->bool:
    """"""
    pass

  def set_reset_ends(self, enable:bool)->None:
    """"""
    pass

  def are_ends_reset(self)->bool:
    """"""
    pass


