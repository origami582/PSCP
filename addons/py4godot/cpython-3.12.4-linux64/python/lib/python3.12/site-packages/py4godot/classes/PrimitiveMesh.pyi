from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__



class PrimitiveMesh(__mesh__.Mesh):
  """
		Base class for all primitive meshes. Handles applying a `Material` to a primitive mesh. Examples include `BoxMesh`, `CapsuleMesh`, `CylinderMesh`, `PlaneMesh`, `PrismMesh`, and `SphereMesh`.
	"""

  @staticmethod
  def constructor()->PrimitiveMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->PrimitiveMesh:pass


  @property
  def material(self)->BaseMaterial3D,ShaderMaterial:
    """"""
    pass
  @material.setter
  def material(self,  value:__basematerial3d__.BaseMaterial3D)->None:
    """"""
    pass
  @property
  def custom_aabb(self)->__core__.AABB:
    """"""
    pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  @property
  def flip_faces(self)->bool:
    """"""
    pass
  @flip_faces.setter
  def flip_faces(self,  value:bool)->None:
    """"""
    pass
  @property
  def add_uv2(self)->bool:
    """"""
    pass
  @add_uv2.setter
  def add_uv2(self,  value:bool)->None:
    """"""
    pass
  @property
  def uv2_padding(self)->float:
    """"""
    pass
  @uv2_padding.setter
  def uv2_padding(self,  value:float)->None:
    """"""
    pass
  def _create_mesh_array(self)->__core__.Array:
    """
				Override this method to customize how this primitive mesh should be generated. Should return an `Array` where each element is another Array of values required for the mesh (see the `enum Mesh.ArrayType` constants).
			"""
    pass

  def set_material(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material(self)->__fogmaterial__.FogMaterial|__material__.Material|__panoramaskymaterial__.PanoramaSkyMaterial|__basematerial3d__.BaseMaterial3D|__particleprocessmaterial__.ParticleProcessMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__ormmaterial3d__.ORMMaterial3D|__canvasitemmaterial__.CanvasItemMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__placeholdermaterial__.PlaceholderMaterial|__standardmaterial3d__.StandardMaterial3D:
    """"""
    pass

  def get_mesh_arrays(self)->__core__.Array:
    """
				Returns the mesh arrays used to make up the surface of this primitive mesh.
				**Example:** Pass the result to `ArrayMesh.add_surface_from_arrays` to create a new surface:
				
				```gdscript
				var c = CylinderMesh.new()
				var arr_mesh = ArrayMesh.new()
				arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())
				```
				
				
			"""
    pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None:
    """"""
    pass

  def get_custom_aabb(self)->__core__.AABB:
    """"""
    pass

  def set_flip_faces(self, flip_faces:bool)->None:
    """"""
    pass

  def get_flip_faces(self)->bool:
    """"""
    pass

  def set_add_uv2(self, add_uv2:bool)->None:
    """"""
    pass

  def get_add_uv2(self)->bool:
    """"""
    pass

  def set_uv2_padding(self, uv2_padding:float)->None:
    """"""
    pass

  def get_uv2_padding(self)->float:
    """"""
    pass

  def request_update(self)->None:
    """
				Request an update of this primitive mesh based on its properties.
			"""
    pass


