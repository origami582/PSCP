from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.UPNPDevice as __upnpdevice__
import py4godot.classes.RefCounted as __refcounted__


class UPNPResult:
  UPNP_RESULT_SUCCESS:int = 0
  UPNP_RESULT_NOT_AUTHORIZED:int = 1
  UPNP_RESULT_PORT_MAPPING_NOT_FOUND:int = 2
  UPNP_RESULT_INCONSISTENT_PARAMETERS:int = 3
  UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY:int = 4
  UPNP_RESULT_ACTION_FAILED:int = 5
  UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED:int = 6
  UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED:int = 7
  UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED:int = 8
  UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD:int = 9
  UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD:int = 10
  UPNP_RESULT_NO_PORT_MAPS_AVAILABLE:int = 11
  UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM:int = 12
  UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING:int = 13
  UPNP_RESULT_SAME_PORT_VALUES_REQUIRED:int = 14
  UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED:int = 15
  UPNP_RESULT_INVALID_GATEWAY:int = 16
  UPNP_RESULT_INVALID_PORT:int = 17
  UPNP_RESULT_INVALID_PROTOCOL:int = 18
  UPNP_RESULT_INVALID_DURATION:int = 19
  UPNP_RESULT_INVALID_ARGS:int = 20
  UPNP_RESULT_INVALID_RESPONSE:int = 21
  UPNP_RESULT_INVALID_PARAM:int = 22
  UPNP_RESULT_HTTP_ERROR:int = 23
  UPNP_RESULT_SOCKET_ERROR:int = 24
  UPNP_RESULT_MEM_ALLOC_ERROR:int = 25
  UPNP_RESULT_NO_GATEWAY:int = 26
  UPNP_RESULT_NO_DEVICES:int = 27
  UPNP_RESULT_UNKNOWN_ERROR:int = 28


class UPNP(__refcounted__.RefCounted):
  """"""

  @staticmethod
  def constructor()->UPNP:pass



  @staticmethod
  def cast(other:__object__.Object)->UPNP:pass


  @property
  def discover_multicast_if(self)->str:
    """"""
    pass
  @discover_multicast_if.setter
  def discover_multicast_if(self,  value:str)->None:
    """"""
    pass
  @property
  def discover_local_port(self)->int:
    """"""
    pass
  @discover_local_port.setter
  def discover_local_port(self,  value:int)->None:
    """"""
    pass
  @property
  def discover_ipv6(self)->bool:
    """"""
    pass
  @discover_ipv6.setter
  def discover_ipv6(self,  value:bool)->None:
    """"""
    pass
  def get_device_count(self)->int:
    """"""
    pass

  def get_device(self, index:int)->__upnpdevice__.UPNPDevice:
    """"""
    pass

  def add_device(self, device:__upnpdevice__.UPNPDevice)->None:
    """"""
    pass

  def set_device(self, index:int, device:__upnpdevice__.UPNPDevice)->None:
    """"""
    pass

  def remove_device(self, index:int)->None:
    """"""
    pass

  def clear_devices(self)->None:
    """"""
    pass

  def get_gateway(self)->__upnpdevice__.UPNPDevice:
    """"""
    pass

  def discover(self, timeout:int=2000, ttl:int=2, device_filter:str= __core__.String.new0())->int:
    """"""
    pass

  def query_external_address(self)->str:
    """"""
    pass

  def add_port_mapping(self, port:int, port_internal:int=0, desc:str= __core__.String.new0(), proto:str= __core__.String.new0(), duration:int=0)->int:
    """"""
    pass

  def delete_port_mapping(self, port:int, proto:str= __core__.String.new0())->int:
    """"""
    pass

  def set_discover_multicast_if(self, m_if:str)->None:
    """"""
    pass

  def get_discover_multicast_if(self)->str:
    """"""
    pass

  def set_discover_local_port(self, port:int)->None:
    """"""
    pass

  def get_discover_local_port(self)->int:
    """"""
    pass

  def set_discover_ipv6(self, ipv6:bool)->None:
    """"""
    pass

  def is_discover_ipv6(self)->bool:
    """"""
    pass


