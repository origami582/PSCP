from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__


class CacheMode:
  CACHE_MODE_IGNORE:int = 0
  CACHE_MODE_REUSE:int = 1
  CACHE_MODE_REPLACE:int = 2
  CACHE_MODE_IGNORE_DEEP:int = 3
  CACHE_MODE_REPLACE_DEEP:int = 4


class ResourceFormatLoader(__refcounted__.RefCounted):
  """
		Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the `ResourceLoader` singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.
		Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a `ResourceFormatSaver`.
		**Note:** You can also extend `EditorImportPlugin` if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends on if the format is suitable or not for the final exported game. For example, it's better to import `.png` textures as `.ctex` (`CompressedTexture2D`) first, so they can be loaded with better efficiency on the graphics card.
	"""

  @staticmethod
  def constructor()->ResourceFormatLoader:pass



  @staticmethod
  def cast(other:__object__.Object)->ResourceFormatLoader:pass


  def _get_recognized_extensions(self)->__core__.PackedStringArray:
    """
				Gets the list of extensions for files this loader is able to read.
			"""
    pass

  def _recognize_path(self, path:str, type:__core__.StringName|str)->bool:
    """
				Tells whether or not this loader should load a resource from its resource path for a given type.
				If it is not implemented, the default behavior returns whether the path's extension is within the ones provided by `_get_recognized_extensions`, and if the type is within the ones provided by `_get_resource_type`.
			"""
    pass

  def _handles_type(self, type:__core__.StringName|str)->bool:
    """
				Tells which resource class this loader can load.
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just handle `"Resource"` for them.
			"""
    pass

  def _get_resource_type(self, path:str)->str:
    """
				Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return `""`.
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just return `"Resource"` for them.
			"""
    pass

  def _get_resource_script_class(self, path:str)->str:
    """
				Returns the script class name associated with the `Resource` under the given `path`. If the resource has no script or the script isn't a named class, it should return `""`.
			"""
    pass

  def _get_resource_uid(self, path:str)->int:
    """
				Should return the unique ID for the resource associated with the given path. If this method is not overridden, a `.uid` file is generated along with the resource file, containing the unique ID.
			"""
    pass

  def _get_dependencies(self, path:str, add_types:bool)->__core__.PackedStringArray:
    """
				Should return the dependencies for the resource at the given `path`. Each dependency is a string composed of one to three sections separated by `::`, with trailing empty sections omitted:
				- The first section should contain the UID if the resource has one. Otherwise, it should contain the file path.
				- The second section should contain the class name of the dependency if `add_types` is `true`. Otherwise, it should be empty.
				- The third section should contain the fallback path if the resource has a UID. Otherwise, it should be empty.
				```gdscript
				func _get_dependencies(path, add_types):
					return `
						"uid://fqgvuwrkuixh::Script::res://script.gd",
						"uid://fqgvuwrkuixh::::res://script.gd",
						"res://script.gd::Script",
						"res://script.gd",
					`
				```
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so `"Resource"` can be used for the class name.
			"""
    pass

  def _rename_dependencies(self, path:str, renames:__core__.Dictionary)->int:
    """
				If implemented, renames dependencies within the given resource and saves it. `renames` is a dictionary `{ String => String }` mapping old dependency paths to new paths.
				Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			"""
    pass

  def _exists(self, path:str)->bool:
    """
"""
    pass

  def _get_classes_used(self, path:str)->__core__.PackedStringArray:
    """
"""
    pass

  def _load(self, path:str, original_path:str, use_sub_threads:bool, cache_mode:int)->Any:
    """
				Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, `original_path` will target the source file. Returns a `Resource` object on success, or an `enum Error` constant in case of failure.
				The `cache_mode` property defines whether and how the cache should be used or updated when loading the resource. See `enum CacheMode` for details.
			"""
    pass


