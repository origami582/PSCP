from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.Curve as __curve__



class CurveXYZTexture(__texture2d__.Texture2D):
  """
		A 1D texture where the red, green, and blue color channels correspond to points on 3 unit `Curve` resources. Compared to using separate `CurveTexture`s, this further simplifies the task of saving curves as image files.
		If you only need to store one curve within a single texture, use `CurveTexture` instead. See also `GradientTexture1D` and `GradientTexture2D`.
	"""

  @staticmethod
  def constructor()->CurveXYZTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->CurveXYZTexture:pass


  @property
  def width(self)->int:
    """"""
    pass
  @width.setter
  def width(self,  value:int)->None:
    """"""
    pass
  @property
  def curve_x(self)->__curve__.Curve:
    """"""
    pass
  @curve_x.setter
  def curve_x(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def curve_y(self)->__curve__.Curve:
    """"""
    pass
  @curve_y.setter
  def curve_y(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def curve_z(self)->__curve__.Curve:
    """"""
    pass
  @curve_z.setter
  def curve_z(self,  value:__curve__.Curve)->None:
    """"""
    pass
  def set_width(self, width:int)->None:
    """"""
    pass

  def set_curve_x(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_curve_x(self)->__curve__.Curve:
    """"""
    pass

  def set_curve_y(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_curve_y(self)->__curve__.Curve:
    """"""
    pass

  def set_curve_z(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_curve_z(self)->__curve__.Curve:
    """"""
    pass


