from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.AudioStreamWAV as __audiostreamwav__



class AudioEffectRecord(__audioeffect__.AudioEffect):
  """
		Allows the user to record the sound from an audio bus into an `AudioStreamWAV`. When used on the "Master" audio bus, this includes all audio output by Godot.
		Unlike `AudioEffectCapture`, this effect encodes the recording with the given format (8-bit, 16-bit, or compressed) instead of giving access to the raw audio samples.
		Can be used (with an `AudioStreamMicrophone`) to record from a microphone.
		**Note:** `ProjectSettings.audio/driver/enable_input` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
	"""

  @staticmethod
  def constructor()->AudioEffectRecord:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectRecord:pass


  @property
  def format(self)->int:
    """"""
    pass
  @format.setter
  def format(self,  value:int)->None:
    """"""
    pass
  def set_recording_active(self, record:bool)->None:
    """
				If `true`, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.
			"""
    pass

  def is_recording_active(self)->bool:
    """
				Returns whether the recording is active or not.
			"""
    pass

  def set_format(self, format:int )->None:
    """"""
    pass

  def get_format(self)->int:
    """"""
    pass

  def get_recording(self)->__audiostreamwav__.AudioStreamWAV:
    """
				Returns the recorded sample.
			"""
    pass


