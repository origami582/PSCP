from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModificationStack2D as __skeletonmodificationstack2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.Bone2D as __bone2d__



class Skeleton2D(__node2d__.Node2D):
  """
		`Skeleton2D` parents a hierarchy of `Bone2D` nodes. It holds a reference to each `Bone2D`'s rest pose and acts as a single point of access to its bones.
		To set up different types of inverse kinematics for the given Skeleton2D, a `SkeletonModificationStack2D` should be created. The inverse kinematics be applied by increasing `SkeletonModificationStack2D.modification_count` and creating the desired number of modifications.
	"""
  bone_setup_changed: BuiltinSignal

  @staticmethod
  def constructor()->Skeleton2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Skeleton2D:pass


  def get_bone_count(self)->int:
    """
				Returns the number of `Bone2D` nodes in the node hierarchy parented by Skeleton2D.
			"""
    pass

  def get_bone(self, idx:int)->__bone2d__.Bone2D:
    """
				Returns a `Bone2D` from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter `idx`. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling.
			"""
    pass

  def get_skeleton(self)->__core__.RID:
    """
				Returns the `RID` of a Skeleton2D instance.
			"""
    pass

  def set_modification_stack(self, modification_stack:__skeletonmodificationstack2d__.SkeletonModificationStack2D)->None:
    """
				Sets the `SkeletonModificationStack2D` attached to this skeleton.
			"""
    pass

  def get_modification_stack(self)->__skeletonmodificationstack2d__.SkeletonModificationStack2D:
    """
				Returns the `SkeletonModificationStack2D` attached to this skeleton, if one exists.
			"""
    pass

  def execute_modifications(self, delta:float, execution_mode:int)->None:
    """
				Executes all the modifications on the `SkeletonModificationStack2D`, if the Skeleton2D has one assigned.
			"""
    pass

  def set_bone_local_pose_override(self, bone_idx:int, override_pose:__core__.Transform2D, strength:float, persistent:bool)->None:
    """
				Sets the local pose transform, `override_pose`, for the bone at `bone_idx`.
				`strength` is the interpolation strength that will be used when applying the pose, and `persistent` determines if the applied pose will remain.
				**Note:** The pose transform needs to be a local transform relative to the `Bone2D` node at `bone_idx`!
			"""
    pass

  def get_bone_local_pose_override(self, bone_idx:int)->__core__.Transform2D:
    """
				Returns the local pose override transform for `bone_idx`.
			"""
    pass


