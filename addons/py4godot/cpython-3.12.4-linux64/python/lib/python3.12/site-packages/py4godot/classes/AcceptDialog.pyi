from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Label as __label__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.Window as __window__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.Button as __button__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.CheckButton as __checkbutton__



class AcceptDialog(__window__.Window):
  """
		The default use of `AcceptDialog` is to allow it to only be accepted or closed, with the same result. However, the `signal confirmed` and `signal canceled` signals allow to make the two actions different, and the `add_button` method allows to add custom buttons and actions.
	"""
  confirmed: BuiltinSignal
  canceled: BuiltinSignal
  custom_action: BuiltinSignal

  @staticmethod
  def constructor()->AcceptDialog:pass



  @staticmethod
  def cast(other:__object__.Object)->AcceptDialog:pass


  @property
  def ok_button_text(self)->str:
    """"""
    pass
  @ok_button_text.setter
  def ok_button_text(self,  value:str)->None:
    """"""
    pass
  @property
  def dialog_text(self)->str:
    """"""
    pass
  @dialog_text.setter
  def dialog_text(self,  value:str)->None:
    """"""
    pass
  @property
  def dialog_hide_on_ok(self)->bool:
    """"""
    pass
  @dialog_hide_on_ok.setter
  def dialog_hide_on_ok(self,  value:bool)->None:
    """"""
    pass
  @property
  def dialog_close_on_escape(self)->bool:
    """"""
    pass
  @dialog_close_on_escape.setter
  def dialog_close_on_escape(self,  value:bool)->None:
    """"""
    pass
  @property
  def dialog_autowrap(self)->bool:
    """"""
    pass
  @dialog_autowrap.setter
  def dialog_autowrap(self,  value:bool)->None:
    """"""
    pass
  def get_ok_button(self)->__checkbox__.CheckBox|__button__.Button|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__optionbutton__.OptionButton|__checkbutton__.CheckButton:
    """
				Returns the OK `Button` instance.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def get_label(self)->__label__.Label:
    """
				Returns the label used for built-in text.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def set_hide_on_ok(self, enabled:bool)->None:
    """"""
    pass

  def get_hide_on_ok(self)->bool:
    """"""
    pass

  def set_close_on_escape(self, enabled:bool)->None:
    """"""
    pass

  def get_close_on_escape(self)->bool:
    """"""
    pass

  def add_button(self, text:str, right:bool=False, action:str= __core__.String.new0())->__checkbox__.CheckBox|__button__.Button|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__optionbutton__.OptionButton|__checkbutton__.CheckButton:
    """
				Adds a button with label `text` and a custom `action` to the dialog and returns the created button.
				If `action` is not empty, pressing the button will emit the `signal custom_action` signal with the specified action string.
				If `true`, `right` will place the button to the right of any sibling buttons.
				You can use `remove_button` method to remove a button created with this method from the dialog.
			"""
    pass

  def add_cancel_button(self, name:str)->__checkbox__.CheckBox|__button__.Button|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__optionbutton__.OptionButton|__checkbutton__.CheckButton:
    """
				Adds a button with label `name` and a cancel action to the dialog and returns the created button.
				You can use `remove_button` method to remove a button created with this method from the dialog.
			"""
    pass

  def remove_button(self, button:__button__.Button)->None:
    """
				Removes the `button` from the dialog. Does NOT free the `button`. The `button` must be a `Button` added with `add_button` or `add_cancel_button` method. After removal, pressing the `button` will no longer emit this dialog's `signal custom_action` or `signal canceled` signals.
			"""
    pass

  def register_text_enter(self, line_edit:__lineedit__.LineEdit)->None:
    """
				Registers a `LineEdit` in the dialog. When the enter key is pressed, the dialog will be accepted.
			"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def set_autowrap(self, autowrap:bool)->None:
    """"""
    pass

  def has_autowrap(self)->bool:
    """"""
    pass

  def set_ok_button_text(self, text:str)->None:
    """"""
    pass

  def get_ok_button_text(self)->str:
    """"""
    pass


