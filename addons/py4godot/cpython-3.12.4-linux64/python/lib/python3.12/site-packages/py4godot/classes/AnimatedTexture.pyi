from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__



class AnimatedTexture(__texture2d__.Texture2D):
  """
		`AnimatedTexture` is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike `AnimationPlayer` or `AnimatedSprite2D`, it isn't a `Node`, but has the advantage of being usable anywhere a `Texture2D` resource can be used, e.g. in a `TileSet`.
		The playback of the animation is controlled by the `speed_scale` property, as well as each frame's duration (see `set_frame_duration`). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame.
		`AnimatedTexture` currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one.
		**Note:** AnimatedTexture doesn't support using `AtlasTexture`s. Each frame needs to be a separate `Texture2D`.
		**Warning:** The current implementation is not efficient for the modern renderers.
	"""

  @staticmethod
  def constructor()->AnimatedTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimatedTexture:pass


  @property
  def frames(self)->int:
    """"""
    pass
  @frames.setter
  def frames(self,  value:int)->None:
    """"""
    pass
  @property
  def current_frame(self)->int:
    """"""
    pass
  @current_frame.setter
  def current_frame(self,  value:int)->None:
    """"""
    pass
  @property
  def pause(self)->bool:
    """"""
    pass
  @pause.setter
  def pause(self,  value:bool)->None:
    """"""
    pass
  @property
  def one_shot(self)->bool:
    """"""
    pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None:
    """"""
    pass
  @property
  def speed_scale(self)->float:
    """"""
    pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None:
    """"""
    pass
  def set_frames(self, frames:int)->None:
    """"""
    pass

  def get_frames(self)->int:
    """"""
    pass

  def set_current_frame(self, frame:int)->None:
    """"""
    pass

  def get_current_frame(self)->int:
    """"""
    pass

  def set_pause(self, pause:bool)->None:
    """"""
    pass

  def get_pause(self)->bool:
    """"""
    pass

  def set_one_shot(self, one_shot:bool)->None:
    """"""
    pass

  def get_one_shot(self)->bool:
    """"""
    pass

  def set_speed_scale(self, scale:float)->None:
    """"""
    pass

  def get_speed_scale(self)->float:
    """"""
    pass

  def set_frame_texture(self, frame:int, texture:__texture2d__.Texture2D)->None:
    """
				Assigns a `Texture2D` to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID `frames` - 1.
				You can define any number of textures up to `constant MAX_FRAMES`, but keep in mind that only frames from 0 to `frames` - 1 will be part of the animation.
			"""
    pass

  def get_frame_texture(self, frame:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the given frame's `Texture2D`.
			"""
    pass

  def set_frame_duration(self, frame:int, duration:float)->None:
    """
				Sets the duration of any given `frame`. The final duration is affected by the `speed_scale`. If set to `0`, the frame is skipped during playback.
			"""
    pass

  def get_frame_duration(self, frame:int)->float:
    """
				Returns the given `frame`'s duration, in seconds.
			"""
    pass


