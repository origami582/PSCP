from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__



class AudioEffectHardLimiter(__audioeffect__.AudioEffect):
  """
		A limiter is an effect designed to disallow sound from going over a given dB threshold. Hard limiters predict volume peaks, and will smoothly apply gain reduction when a peak crosses the ceiling threshold to prevent clipping and distortion. It preserves the waveform and prevents it from crossing the ceiling threshold. Adding one in the Master bus is recommended as a safety measure to prevent sudden volume peaks from occurring, and to prevent distortion caused by clipping.
	"""

  @staticmethod
  def constructor()->AudioEffectHardLimiter:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectHardLimiter:pass


  @property
  def pre_gain_db(self)->float:
    """"""
    pass
  @pre_gain_db.setter
  def pre_gain_db(self,  value:float)->None:
    """"""
    pass
  @property
  def ceiling_db(self)->float:
    """"""
    pass
  @ceiling_db.setter
  def ceiling_db(self,  value:float)->None:
    """"""
    pass
  @property
  def release(self)->float:
    """"""
    pass
  @release.setter
  def release(self,  value:float)->None:
    """"""
    pass
  def set_ceiling_db(self, ceiling:float)->None:
    """"""
    pass

  def get_ceiling_db(self)->float:
    """"""
    pass

  def set_pre_gain_db(self, p_pre_gain:float)->None:
    """"""
    pass

  def get_pre_gain_db(self)->float:
    """"""
    pass

  def set_release(self, p_release:float)->None:
    """"""
    pass

  def get_release(self)->float:
    """"""
    pass


