from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StreamPeerTCP as __streampeertcp__
import py4godot.classes.StreamPeerGZIP as __streampeergzip__
import py4godot.classes.StreamPeerTLS as __streampeertls__
import py4godot.classes.StreamPeer as __streampeer__
import py4godot.classes.StreamPeerBuffer as __streampeerbuffer__
import py4godot.classes.StreamPeerExtension as __streampeerextension__
import py4godot.classes.TLSOptions as __tlsoptions__


class Status:
  STATUS_DISCONNECTED:int = 0
  STATUS_HANDSHAKING:int = 1
  STATUS_CONNECTED:int = 2
  STATUS_ERROR:int = 3
  STATUS_ERROR_HOSTNAME_MISMATCH:int = 4


class StreamPeerTLS(__streampeer__.StreamPeer):
  """
		A stream peer that handles TLS connections. This object can be used to connect to a TLS server or accept a single TLS client connection.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	"""

  @staticmethod
  def constructor()->StreamPeerTLS:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeerTLS:pass


  def poll(self)->None:
    """
				Poll the connection to check for incoming bytes. Call this right before `StreamPeer.get_available_bytes` for it to work properly.
			"""
    pass

  def accept_stream(self, stream:__streampeer__.StreamPeer, server_options:__tlsoptions__.TLSOptions)->int:
    """
				Accepts a peer connection as a server using the given `server_options`. See `TLSOptions.server`.
			"""
    pass

  def connect_to_stream(self, stream:__streampeer__.StreamPeer, common_name:str, client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int:
    """
				Connects to a peer using an underlying `StreamPeer` `stream` and verifying the remote certificate is correctly signed for the given `common_name`. You can pass the optional `client_options` parameter to customize the trusted certification authorities, or disable the common name verification. See `TLSOptions.client` and `TLSOptions.client_unsafe`.
			"""
    pass

  def get_status(self)->int:
    """
				Returns the status of the connection.
			"""
    pass

  def get_stream(self)->__streampeertcp__.StreamPeerTCP|__streampeergzip__.StreamPeerGZIP|__streampeertls__.StreamPeerTLS|__streampeerextension__.StreamPeerExtension|__streampeer__.StreamPeer|__streampeerbuffer__.StreamPeerBuffer:
    """
				Returns the underlying `StreamPeer` connection, used in `accept_stream` or `connect_to_stream`.
			"""
    pass

  def disconnect_from_stream(self)->None:
    """
				Disconnects from host.
			"""
    pass


