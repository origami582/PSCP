from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRInterface as __openxrinterface__
import py4godot.classes.MobileVRInterface as __mobilevrinterface__
import py4godot.classes.XRInterfaceExtension as __xrinterfaceextension__
import py4godot.classes.XRInterface as __xrinterface__
import py4godot.classes.WebXRInterface as __webxrinterface__



class XRInterfaceExtension(__xrinterface__.XRInterface):
  """
		External XR interface plugins should inherit from this class.
	"""

  @staticmethod
  def constructor()->XRInterfaceExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->XRInterfaceExtension:pass


  def _get_name(self)->__core__.StringName:
    """
				Returns the name of this interface.
			"""
    pass

  def _get_capabilities(self)->int:
    """
				Returns the capabilities of this interface.
			"""
    pass

  def _is_initialized(self)->bool:
    """
				Returns `true` if this interface has been initialized.
			"""
    pass

  def _initialize(self)->bool:
    """
				Initializes the interface, returns `true` on success.
			"""
    pass

  def _uninitialize(self)->None:
    """
				Uninitialize the interface.
			"""
    pass

  def _get_system_info(self)->__core__.Dictionary:
    """
				Returns a `Dictionary` with system information related to this interface.
			"""
    pass

  def _supports_play_area_mode(self, mode:int )->bool:
    """
				Returns `true` if this interface supports this play area mode.
			"""
    pass

  def _get_play_area_mode(self)->int:
    """
				Returns the play area mode that sets up our play area.
			"""
    pass

  def _set_play_area_mode(self, mode:int )->bool:
    """
				Set the play area mode for this interface.
			"""
    pass

  def _get_play_area(self)->__core__.PackedVector3Array:
    """
				Returns a `PackedVector3Array` that represents the play areas boundaries (if applicable).
			"""
    pass

  def _get_render_target_size(self)->__core__.Vector2:
    """
				Returns the size of our render target for this interface, this overrides the size of the `Viewport` marked as the xr viewport.
			"""
    pass

  def _get_view_count(self)->int:
    """
				Returns the number of views this interface requires, 1 for mono, 2 for stereoscopic.
			"""
    pass

  def _get_camera_transform(self)->__core__.Transform3D:
    """
				Returns the `Transform3D` that positions the `XRCamera3D` in the world.
			"""
    pass

  def _get_transform_for_view(self, view:int, cam_transform:__core__.Transform3D)->__core__.Transform3D:
    """
				Returns a `Transform3D` for a given view.
			"""
    pass

  def _get_projection_for_view(self, view:int, aspect:float, z_near:float, z_far:float)->__core__.PackedFloat64Array:
    """
				Returns the projection matrix for the given view as a `PackedFloat64Array`.
			"""
    pass

  def _get_vrs_texture(self)->__core__.RID:
    """
"""
    pass

  def _process(self)->None:
    """
				Called if this `XRInterfaceExtension` is active before our physics and game process is called. Most XR interfaces will update its `XRPositionalTracker`s at this point in time.
			"""
    pass

  def _pre_render(self)->None:
    """
				Called if this `XRInterfaceExtension` is active before rendering starts. Most XR interfaces will sync tracking at this point in time.
			"""
    pass

  def _pre_draw_viewport(self, render_target:__core__.RID)->bool:
    """
				Called if this is our primary `XRInterfaceExtension` before we start processing a `Viewport` for every active XR `Viewport`, returns `true` if that viewport should be rendered. An XR interface may return `false` if the user has taken off their headset and we can pause rendering.
			"""
    pass

  def _post_draw_viewport(self, render_target:__core__.RID, screen_rect:__core__.Rect2)->None:
    """
				Called after the XR `Viewport` draw logic has completed.
			"""
    pass

  def _end_frame(self)->None:
    """
				Called if interface is active and queues have been submitted.
			"""
    pass

  def _get_suggested_tracker_names(self)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` with tracker names configured by this interface. Note that user configuration can override this list.
			"""
    pass

  def _get_suggested_pose_names(self, tracker_name:__core__.StringName|str)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` with pose names configured by this interface. Note that user configuration can override this list.
			"""
    pass

  def _get_tracking_status(self)->int:
    """
				Returns an `enum XRInterface.TrackingStatus` specifying the current status of our tracking.
			"""
    pass

  def _trigger_haptic_pulse(self, action_name:str, tracker_name:__core__.StringName|str, frequency:float, amplitude:float, duration_sec:float, delay_sec:float)->None:
    """
				Triggers a haptic pulse to be emitted on the specified tracker.
			"""
    pass

  def _get_anchor_detection_is_enabled(self)->bool:
    """
				Return `true` if anchor detection is enabled for this interface.
			"""
    pass

  def _set_anchor_detection_is_enabled(self, enabled:bool)->None:
    """
				Enables anchor detection on this interface if supported.
			"""
    pass

  def _get_camera_feed_id(self)->int:
    """
				Returns the camera feed ID for the `CameraFeed` registered with the `CameraServer` that should be presented as the background on an AR capable device (if applicable).
			"""
    pass

  def _get_color_texture(self)->__core__.RID:
    """
				Return color texture into which to render (if applicable).
			"""
    pass

  def _get_depth_texture(self)->__core__.RID:
    """
				Return depth texture into which to render (if applicable).
			"""
    pass

  def _get_velocity_texture(self)->__core__.RID:
    """
				Return velocity texture into which to render (if applicable).
			"""
    pass

  def get_color_texture(self)->__core__.RID:
    """
"""
    pass

  def get_depth_texture(self)->__core__.RID:
    """
"""
    pass

  def get_velocity_texture(self)->__core__.RID:
    """
"""
    pass

  def add_blit(self, render_target:__core__.RID, src_rect:__core__.Rect2, dst_rect:__core__.Rect2i, use_layer:bool, layer:int, apply_lens_distortion:bool, eye_center:__core__.Vector2, k1:float, k2:float, upscale:float, aspect_ratio:float)->None:
    """
				Blits our render results to screen optionally applying lens distortion. This can only be called while processing `_commit_views`.
			"""
    pass

  def get_render_target_texture(self, render_target:__core__.RID)->__core__.RID:
    """
				Returns a valid `RID` for a texture to which we should render the current frame if supported by the interface.
			"""
    pass


