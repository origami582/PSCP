from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeRandomRange as __visualshadernoderandomrange__
import py4godot.classes.VisualShaderNodeVec2Parameter as __visualshadernodevec2parameter__
import py4godot.classes.VisualShaderNodeVarying as __visualshadernodevarying__
import py4godot.classes.VisualShaderNodeParticleOutput as __visualshadernodeparticleoutput__
import py4godot.classes.VisualShaderNodeCurveTexture as __visualshadernodecurvetexture__
import py4godot.classes.VisualShaderNodeParticleMeshEmitter as __visualshadernodeparticlemeshemitter__
import py4godot.classes.VisualShaderNodeTextureSDF as __visualshadernodetexturesdf__
import py4godot.classes.VisualShaderNodeMultiplyAdd as __visualshadernodemultiplyadd__
import py4godot.classes.VisualShaderNodeGlobalExpression as __visualshadernodeglobalexpression__
import py4godot.classes.VisualShaderNodeIntFunc as __visualshadernodeintfunc__
import py4godot.classes.VisualShaderNodeBooleanConstant as __visualshadernodebooleanconstant__
import py4godot.classes.VisualShaderNodeClamp as __visualshadernodeclamp__
import py4godot.classes.VisualShaderNodeUVFunc as __visualshadernodeuvfunc__
import py4godot.classes.VisualShaderNodeTextureParameterTriplanar as __visualshadernodetextureparametertriplanar__
import py4godot.classes.VisualShaderNodeFloatOp as __visualshadernodefloatop__
import py4godot.classes.VisualShaderNodeTransformFunc as __visualshadernodetransformfunc__
import py4godot.classes.t as __t__
import py4godot.classes.VisualShaderNodeGroupBase as __visualshadernodegroupbase__
import py4godot.classes.VisualShaderNodeFaceForward as __visualshadernodefaceforward__
import py4godot.classes.VisualShaderNodeDotProduct as __visualshadernodedotproduct__
import py4godot.classes.VisualShaderNodeSwitch as __visualshadernodeswitch__
import py4godot.classes.VisualShaderNodeParameterRef as __visualshadernodeparameterref__
import py4godot.classes.VisualShaderNodeComment as __visualshadernodecomment__
import py4godot.classes.VisualShaderNodeInput as __visualshadernodeinput__
import py4godot.classes.VisualShaderNodeVectorDistance as __visualshadernodevectordistance__
import py4godot.classes.VisualShaderNodeWorldPositionFromDepth as __visualshadernodeworldpositionfromdepth__
import py4godot.classes.VisualShaderNodeTransformConstant as __visualshadernodetransformconstant__
import py4godot.classes.VisualShaderNodeIntConstant as __visualshadernodeintconstant__
import py4godot.classes.VisualShaderNodeTextureSDFNormal as __visualshadernodetexturesdfnormal__
import py4godot.classes.VisualShaderNodeIntParameter as __visualshadernodeintparameter__
import py4godot.classes.VisualShaderNodeTexture2DParameter as __visualshadernodetexture2dparameter__
import py4godot.classes.y as __y__
import py4godot.classes.VisualShaderNodeTransformDecompose as __visualshadernodetransformdecompose__
import py4godot.classes.VisualShaderNodeCurveXYZTexture as __visualshadernodecurvexyztexture__
import py4godot.classes.VisualShaderNodeVectorCompose as __visualshadernodevectorcompose__
import py4godot.classes.VisualShaderNodeIntOp as __visualshadernodeintop__
import py4godot.classes.VisualShaderNodeUIntParameter as __visualshadernodeuintparameter__
import py4godot.classes.VisualShaderNodeTexture2DArray as __visualshadernodetexture2darray__
import py4godot.classes.VisualShaderNodeFloatParameter as __visualshadernodefloatparameter__
import py4godot.classes.VisualShaderNodeParticleSphereEmitter as __visualshadernodeparticlesphereemitter__
import py4godot.classes.VisualShaderNodeScreenNormalWorldSpace as __visualshadernodescreennormalworldspace__
import py4godot.classes.VisualShaderNodeParticleEmitter as __visualshadernodeparticleemitter__
import py4godot.classes.i as __i__
import py4godot.classes.VisualShaderNodeIf as __visualshadernodeif__
import py4godot.classes.VisualShaderNodeSDFRaymarch as __visualshadernodesdfraymarch__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.g as __g__
import py4godot.classes.VisualShaderNodeParticleMultiplyByAxisAngle as __visualshadernodeparticlemultiplybyaxisangle__
import py4godot.classes.VisualShaderNodeCustom as __visualshadernodecustom__
import py4godot.classes.VisualShaderNodeTransformParameter as __visualshadernodetransformparameter__
import py4godot.classes.VisualShaderNodeParticleRandomness as __visualshadernodeparticlerandomness__
import py4godot.classes.n as __n__
import py4godot.classes.d as __d__
import py4godot.classes.VisualShaderNodeConstant as __visualshadernodeconstant__
import py4godot.classes.VisualShaderNodeColorFunc as __visualshadernodecolorfunc__
import py4godot.classes.VisualShaderNodeVaryingGetter as __visualshadernodevaryinggetter__
import py4godot.classes.VisualShaderNodeUVPolarCoord as __visualshadernodeuvpolarcoord__
import py4godot.classes.Shader as __shader__
import py4godot.classes.VisualShaderNodeTransformCompose as __visualshadernodetransformcompose__
import py4godot.classes.VisualShaderNodeParticleRingEmitter as __visualshadernodeparticleringemitter__
import py4godot.classes.VisualShaderNodeOutput as __visualshadernodeoutput__
import py4godot.classes.VisualShaderNodeTexture3D as __visualshadernodetexture3d__
import py4godot.classes.VisualShaderNodeCubemapParameter as __visualshadernodecubemapparameter__
import py4godot.classes.VisualShaderNodeBillboard as __visualshadernodebillboard__
import py4godot.classes.VisualShaderNodeVec2Constant as __visualshadernodevec2constant__
import py4godot.classes.VisualShaderNodeSDFToScreenUV as __visualshadernodesdftoscreenuv__
import py4godot.classes.VisualShaderNodeColorOp as __visualshadernodecolorop__
import py4godot.classes.VisualShaderNodeOuterProduct as __visualshadernodeouterproduct__
import py4godot.classes.VisualShaderNodeVec4Parameter as __visualshadernodevec4parameter__
import py4godot.classes.VisualShaderNodeTexture as __visualshadernodetexture__
import py4godot.classes.VisualShaderNodeTextureParameter as __visualshadernodetextureparameter__
import py4godot.classes.VisualShaderNodeUIntOp as __visualshadernodeuintop__
import py4godot.classes.VisualShaderNodeTexture3DParameter as __visualshadernodetexture3dparameter__
import py4godot.classes.VisualShaderNodeParticleEmit as __visualshadernodeparticleemit__
import py4godot.classes.p as __p__
import py4godot.classes.VisualShaderNodeRemap as __visualshadernoderemap__
import py4godot.classes.VisualShaderNodeVectorOp as __visualshadernodevectorop__
import py4godot.classes.VisualShaderNodeUIntFunc as __visualshadernodeuintfunc__
import py4godot.classes.VisualShaderNodeParticleConeVelocity as __visualshadernodeparticleconevelocity__
import py4godot.classes.VisualShaderNodeReroute as __visualshadernodereroute__
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.VisualShaderNodeVaryingSetter as __visualshadernodevaryingsetter__
import py4godot.classes.VisualShaderNodeCompare as __visualshadernodecompare__
import py4godot.classes.VisualShaderNodeBooleanParameter as __visualshadernodebooleanparameter__
import py4godot.classes.VisualShaderNodeSample3D as __visualshadernodesample3d__
import py4godot.classes.A as __a__
import py4godot.classes.VisualShaderNodeFloatFunc as __visualshadernodefloatfunc__
import py4godot.classes.VisualShaderNodeLinearSceneDepth as __visualshadernodelinearscenedepth__
import py4godot.classes.VisualShaderNodeVec3Constant as __visualshadernodevec3constant__
import py4godot.classes.VisualShaderNodeParticleBoxEmitter as __visualshadernodeparticleboxemitter__
import py4godot.classes.VisualShaderNodeParameter as __visualshadernodeparameter__
import py4godot.classes.VisualShaderNodeRotationByAxis as __visualshadernoderotationbyaxis__
import py4godot.classes.VisualShaderNodeVec4Constant as __visualshadernodevec4constant__
import py4godot.classes.VisualShaderNodeColorConstant as __visualshadernodecolorconstant__
import py4godot.classes.VisualShaderNodeFrame as __visualshadernodeframe__
import py4godot.classes.VisualShaderNodeVectorFunc as __visualshadernodevectorfunc__
import py4godot.classes.VisualShaderNodeFresnel as __visualshadernodefresnel__
import py4godot.classes.VisualShaderNodeMix as __visualshadernodemix__
import py4godot.classes.VisualShaderNodeExpression as __visualshadernodeexpression__
import py4godot.classes.a as __a__
import py4godot.classes.VisualShaderNodeScreenUVToSDF as __visualshadernodescreenuvtosdf__
import py4godot.classes.S as __s__
import py4godot.classes.VisualShaderNodeParticleAccelerator as __visualshadernodeparticleaccelerator__
import py4godot.classes.VisualShaderNodeTransformVecMult as __visualshadernodetransformvecmult__
import py4godot.classes.VisualShaderNodeDerivativeFunc as __visualshadernodederivativefunc__
import py4godot.classes.VisualShaderNodeDeterminant as __visualshadernodedeterminant__
import py4godot.classes.VisualShaderNodeSmoothStep as __visualshadernodesmoothstep__
import py4godot.classes.VisualShaderNodeFloatConstant as __visualshadernodefloatconstant__
import py4godot.classes.VisualShaderNodeCubemap as __visualshadernodecubemap__
import py4godot.classes.e as __e__
import py4godot.classes.VisualShaderNodeStep as __visualshadernodestep__
import py4godot.classes.VisualShaderNodeTransformOp as __visualshadernodetransformop__
import py4godot.classes.VisualShaderNodeResizableBase as __visualshadernoderesizablebase__
import py4godot.classes.VisualShaderNodeVectorDecompose as __visualshadernodevectordecompose__
import py4godot.classes.VisualShaderNodeUIntConstant as __visualshadernodeuintconstant__
import py4godot.classes.VisualShaderNodeVectorRefract as __visualshadernodevectorrefract__
import py4godot.classes.VisualShader as __visualshader__
import py4godot.classes.VisualShaderNodeDistanceFade as __visualshadernodedistancefade__
import py4godot.classes.VisualShaderNodeIs as __visualshadernodeis__
import py4godot.classes.VisualShaderNodeTexture2DArrayParameter as __visualshadernodetexture2darrayparameter__
import py4godot.classes.VisualShaderNodeVectorBase as __visualshadernodevectorbase__
import py4godot.classes.VisualShaderNodeColorParameter as __visualshadernodecolorparameter__
import py4godot.classes.VisualShaderNodeVectorLen as __visualshadernodevectorlen__
import py4godot.classes.VisualShaderNodeProximityFade as __visualshadernodeproximityfade__
import py4godot.classes.VisualShaderNodeVec3Parameter as __visualshadernodevec3parameter__



class VisualShaderNodeCustom(__visualshadernode__.VisualShaderNode):
  """
		By inheriting this class you can create a custom `VisualShader` script addon which will be automatically added to the Visual Shader Editor. The `VisualShaderNode`'s behavior is defined by overriding the provided virtual methods.
		In order for the node to be registered as an editor addon, you must use the `@tool` annotation and provide a `class_name` for your custom script. For example:
		```gdscript
		@tool
		extends VisualShaderNodeCustom
		class_name VisualShaderNodeNoise
		```
	"""

  @staticmethod
  def constructor()->VisualShaderNodeCustom:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeCustom:pass


  @property
  def initialized(self)->bool:
    """"""
    pass
  @initialized.setter
  def initialized(self,  value:bool)->None:
    """"""
    pass
  @property
  def properties(self)->str:
    """"""
    pass
  @properties.setter
  def properties(self,  value:str)->None:
    """"""
    pass
  def _get_name(self)->str:
    """
				Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph.
				Defining this method is **optional**, but recommended. If not overridden, the node will be named as "Unnamed".
			"""
    pass

  def _get_description(self)->str:
    """
				Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog.
				Defining this method is **optional**.
			"""
    pass

  def _get_category(self)->str:
    """
				Override this method to define the path to the associated custom node in the Visual Shader Editor's members dialog. The path may look like `"MyGame/MyFunctions/Noise"`.
				Defining this method is **optional**. If not overridden, the node will be filed under the "Addons" category.
			"""
    pass

  def _get_return_icon_type(self)->int:
    """
				Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog.
				Defining this method is **optional**. If not overridden, no return icon is shown.
			"""
    pass

  def _get_input_port_count(self)->int:
    """
				Override this method to define the number of input ports of the associated custom node.
				Defining this method is **required**. If not overridden, the node has no input ports.
			"""
    pass

  def _get_input_port_type(self, port:int)->int:
    """
				Override this method to define the returned type of each input port of the associated custom node.
				Defining this method is **optional**, but recommended. If not overridden, input ports will return the `constant VisualShaderNode.PORT_TYPE_SCALAR` type.
			"""
    pass

  def _get_input_port_name(self, port:int)->str:
    """
				Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the `input_vars` array in `_get_code`.
				Defining this method is **optional**, but recommended. If not overridden, input ports are named as `"in" + str(port)`.
			"""
    pass

  def _get_input_port_default_value(self, port:int)->Any:
    """
				Override this method to define the default value for the specified input port. Prefer use this over `VisualShaderNode.set_input_port_default_value`.
				Defining this method is **required**. If not overridden, the node has no default values for their input ports.
			"""
    pass

  def _get_default_input_port(self, type:int )->int:
    """
				Override this method to define the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
				Defining this method is **optional**. If not overridden, the connection will be created to the first valid port.
			"""
    pass

  def _get_output_port_count(self)->int:
    """
				Override this method to define the number of output ports of the associated custom node.
				Defining this method is **required**. If not overridden, the node has no output ports.
			"""
    pass

  def _get_output_port_type(self, port:int)->int:
    """
				Override this method to define the returned type of each output port of the associated custom node.
				Defining this method is **optional**, but recommended. If not overridden, output ports will return the `constant VisualShaderNode.PORT_TYPE_SCALAR` type.
			"""
    pass

  def _get_output_port_name(self, port:int)->str:
    """
				Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the `output_vars` array in `_get_code`.
				Defining this method is **optional**, but recommended. If not overridden, output ports are named as `"out" + str(port)`.
			"""
    pass

  def _get_property_count(self)->int:
    """
				Override this method to define the number of the properties.
				Defining this method is **optional**.
			"""
    pass

  def _get_property_name(self, index:int)->str:
    """
				Override this method to define the names of the property of the associated custom node.
				Defining this method is **optional**.
			"""
    pass

  def _get_property_default_index(self, index:int)->int:
    """
				Override this method to define the default index of the property of the associated custom node.
				Defining this method is **optional**.
			"""
    pass

  def _get_property_options(self, index:int)->__core__.PackedStringArray:
    """
				Override this method to define the options inside the drop-down list property of the associated custom node.
				Defining this method is **optional**.
			"""
    pass

  def _get_code(self, input_vars:__core__.Array, output_vars:__core__.Array, mode:int , type:int )->str:
    """
				Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the `"""` multiline string construct can be used for convenience).
				The `input_vars` and `output_vars` arrays contain the string names of the various input and output variables, as defined by `_get_input_*` and `_get_output_*` virtual methods in this class.
				The output ports can be assigned values in the shader code. For example, `return output_vars`0` + " = " + input_vars`0` + ";"`.
				You can customize the generated code based on the shader `mode` and/or `type`.
				Defining this method is **required**.
			"""
    pass

  def _get_func_code(self, mode:int , type:int )->str:
    """
				Override this method to add a shader code to the beginning of each shader function (once). The shader code should be returned as a string, which can have multiple lines (the `"""` multiline string construct can be used for convenience).
				If there are multiple custom nodes of different types which use this feature the order of each insertion is undefined.
				You can customize the generated code based on the shader `mode` and/or `type`.
				Defining this method is **optional**.
			"""
    pass

  def _get_global_code(self, mode:int )->str:
    """
				Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the `"""` multiline string construct can be used for convenience).
				Be careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names.
				You can customize the generated code based on the shader `mode`.
				Defining this method is **optional**.
			"""
    pass

  def _is_highend(self)->bool:
    """
				Override this method to enable high-end mark in the Visual Shader Editor's members dialog.
				Defining this method is **optional**. If not overridden, it's `false`.
			"""
    pass

  def _is_available(self, mode:int , type:int )->bool:
    """
				Override this method to prevent the node to be visible in the member dialog for the certain `mode` and/or `type`.
				Defining this method is **optional**. If not overridden, it's `true`.
			"""
    pass

  def get_option_index(self, option:int)->int:
    """
				Returns the selected index of the drop-down list option within a graph. You may use this function to define the specific behavior in the `_get_code` or `_get_global_code`.
			"""
    pass


