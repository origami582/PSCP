from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PacketPeer as __packetpeer__



class PacketPeerUDP(__packetpeer__.PacketPeer):
  """
		UDP packet peer. Can be used to send and receive raw UDP packets as well as `Variant`s.
		**Example:** Send a packet:
		```gdscript
		var peer = PacketPeerUDP.new()

		# Optionally, you can select the local port used to send the packet.
		peer.bind(4444)

		peer.set_dest_address("1.1.1.1", 4433)
		peer.put_packet("hello".to_utf8_buffer())
		```
		**Example:** Listen for packets:
		```gdscript
		var peer

		func _ready():
			peer = PacketPeerUDP.new()
			peer.bind(4433)


		func _process(_delta):
			if peer.get_available_packet_count() > 0:
				var array_bytes = peer.get_packet()
				var packet_string = array_bytes.get_string_from_ascii()
				print("Received message: ", packet_string)
		```
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	"""

  @staticmethod
  def constructor()->PacketPeerUDP:pass



  @staticmethod
  def cast(other:__object__.Object)->PacketPeerUDP:pass


  def bind(self, port:int, bind_address:str= __core__.String.new0(), recv_buf_size:int=65536)->int:
    """
				Binds this `PacketPeerUDP` to the specified `port` and `bind_address` with a buffer size `recv_buf_size`, allowing it to receive incoming packets.
				If `bind_address` is set to `"*"` (default), the peer will be bound on all available addresses (both IPv4 and IPv6).
				If `bind_address` is set to `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the peer will be bound to all available addresses matching that IP type.
				If `bind_address` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc.), the peer will only be bound to the interface with that address (or fail if no interface with the given address exists).
			"""
    pass

  def close(self)->None:
    """
				Closes the `PacketPeerUDP`'s underlying UDP socket.
			"""
    pass

  def wait(self)->int:
    """
				Waits for a packet to arrive on the bound address. See `bind`.
				**Note:** `wait` can't be interrupted once it has been called. This can be worked around by allowing the other party to send a specific "death pill" packet like this:
				
				```gdscript
				socket = PacketPeerUDP.new()
				# Server
				socket.set_dest_address("127.0.0.1", 789)
				socket.put_packet("Time to stop".to_ascii_buffer())

				# Client
				while socket.wait() == OK:
					var data = socket.get_packet().get_string_from_ascii()
					if data == "Time to stop":
						return
				```
				
				
			"""
    pass

  def is_bound(self)->bool:
    """
				Returns whether this `PacketPeerUDP` is bound to an address and can receive packets.
			"""
    pass

  def connect_to_host(self, host:str, port:int)->int:
    """
				Calling this method connects this UDP peer to the given `host`/`port` pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to `set_dest_address` are not allowed). This method does not send any data to the remote peer, to do that, use `PacketPeer.put_var` or `PacketPeer.put_packet` as usual. See also `UDPServer`.
				**Note:** Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like TLS or DTLS if you feel like your application is transferring sensitive information.
			"""
    pass

  def is_socket_connected(self)->bool:
    """
				Returns `true` if the UDP socket is open and has been connected to a remote address. See `connect_to_host`.
			"""
    pass

  def get_packet_ip(self)->str:
    """
				Returns the IP of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`).
			"""
    pass

  def get_packet_port(self)->int:
    """
				Returns the port of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`).
			"""
    pass

  def get_local_port(self)->int:
    """
				Returns the local port to which this peer is bound.
			"""
    pass

  def set_dest_address(self, host:str, port:int)->int:
    """
				Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.
				**Note:** `set_broadcast_enabled` must be enabled before sending packets to a broadcast address (e.g. `255.255.255.255`).
			"""
    pass

  def set_broadcast_enabled(self, enabled:bool)->None:
    """
				Enable or disable sending of broadcast packets (e.g. `set_dest_address("255.255.255.255", 4343)`. This option is disabled by default.
				**Note:** Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission and this option to be enabled to receive broadcast packets too.
			"""
    pass

  def join_multicast_group(self, multicast_address:str, interface_name:str)->int:
    """
				Joins the multicast group specified by `multicast_address` using the interface identified by `interface_name`.
				You can join the same multicast group with multiple interfaces. Use `IP.get_local_interfaces` to know which are available.
				**Note:** Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission for multicast to work.
			"""
    pass

  def leave_multicast_group(self, multicast_address:str, interface_name:str)->int:
    """
				Removes the interface identified by `interface_name` from the multicast group specified by `multicast_address`.
			"""
    pass


