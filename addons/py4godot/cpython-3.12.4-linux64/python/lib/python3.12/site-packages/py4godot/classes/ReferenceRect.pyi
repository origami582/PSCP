from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Control as __control__



class ReferenceRect(__control__.Control):
  """
		A rectangular box that displays only a colored border around its rectangle (see `Control.get_rect`). It can be used to visualize the extents of a `Control` node, for testing purposes.
	"""

  @staticmethod
  def constructor()->ReferenceRect:pass



  @staticmethod
  def cast(other:__object__.Object)->ReferenceRect:pass


  @property
  def border_color(self)->__core__.Color:
    """"""
    pass
  @border_color.setter
  def border_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def border_width(self)->float:
    """"""
    pass
  @border_width.setter
  def border_width(self,  value:float)->None:
    """"""
    pass
  @property
  def editor_only(self)->bool:
    """"""
    pass
  @editor_only.setter
  def editor_only(self,  value:bool)->None:
    """"""
    pass
  def get_border_color(self)->__core__.Color:
    """"""
    pass

  def set_border_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_border_width(self)->float:
    """"""
    pass

  def set_border_width(self, width:float)->None:
    """"""
    pass

  def get_editor_only(self)->bool:
    """"""
    pass

  def set_editor_only(self, enabled:bool)->None:
    """"""
    pass


