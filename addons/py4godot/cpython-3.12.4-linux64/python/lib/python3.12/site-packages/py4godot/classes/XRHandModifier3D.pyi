from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__


class BoneUpdate:
  BONE_UPDATE_FULL:int = 0
  BONE_UPDATE_ROTATION_ONLY:int = 1
  BONE_UPDATE_MAX:int = 2


class XRHandModifier3D(__skeletonmodifier3d__.SkeletonModifier3D):
  """
		This node uses hand tracking data from an `XRHandTracker` to pose the skeleton of a hand mesh.
		Positioning of hands is performed by creating an `XRNode3D` ancestor of the hand mesh driven by the same `XRHandTracker`.
		The hand tracking position-data is scaled by `Skeleton3D.motion_scale` when applied to the skeleton, which can be used to adjust the tracked hand to match the scale of the hand model.
	"""

  @staticmethod
  def constructor()->XRHandModifier3D:pass



  @staticmethod
  def cast(other:__object__.Object)->XRHandModifier3D:pass


  @property
  def hand_tracker(self)->str:
    """"""
    pass
  @hand_tracker.setter
  def hand_tracker(self,  value:str)->None:
    """"""
    pass
  @property
  def bone_update(self)->int:
    """"""
    pass
  @bone_update.setter
  def bone_update(self,  value:int)->None:
    """"""
    pass
  def set_hand_tracker(self, tracker_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_hand_tracker(self)->__core__.StringName:
    """"""
    pass

  def set_bone_update(self, bone_update:int )->None:
    """"""
    pass

  def get_bone_update(self)->int:
    """"""
    pass


