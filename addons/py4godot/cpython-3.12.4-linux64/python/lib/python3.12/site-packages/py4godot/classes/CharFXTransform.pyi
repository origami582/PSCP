from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class CharFXTransform(__refcounted__.RefCounted):
  """
		By setting various properties on this object, you can control how individual characters will be displayed in a `RichTextEffect`.
	"""

  @staticmethod
  def constructor()->CharFXTransform:pass



  @staticmethod
  def cast(other:__object__.Object)->CharFXTransform:pass


  @property
  def transform(self)->__core__.Transform2D:
    """"""
    pass
  @transform.setter
  def transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def range(self)->__core__.Vector2i:
    """"""
    pass
  @range.setter
  def range(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def elapsed_time(self)->float:
    """"""
    pass
  @elapsed_time.setter
  def elapsed_time(self,  value:float)->None:
    """"""
    pass
  @property
  def visible(self)->bool:
    """"""
    pass
  @visible.setter
  def visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def outline(self)->bool:
    """"""
    pass
  @outline.setter
  def outline(self,  value:bool)->None:
    """"""
    pass
  @property
  def offset(self)->__core__.Vector2:
    """"""
    pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def color(self)->__core__.Color:
    """"""
    pass
  @color.setter
  def color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def env(self)->__core__.Dictionary:
    """"""
    pass
  @env.setter
  def env(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def glyph_index(self)->int:
    """"""
    pass
  @glyph_index.setter
  def glyph_index(self,  value:int)->None:
    """"""
    pass
  @property
  def glyph_count(self)->int:
    """"""
    pass
  @glyph_count.setter
  def glyph_count(self,  value:int)->None:
    """"""
    pass
  @property
  def glyph_flags(self)->int:
    """"""
    pass
  @glyph_flags.setter
  def glyph_flags(self,  value:int)->None:
    """"""
    pass
  @property
  def relative_index(self)->int:
    """"""
    pass
  @relative_index.setter
  def relative_index(self,  value:int)->None:
    """"""
    pass
  @property
  def font(self)->__core__.RID:
    """"""
    pass
  @font.setter
  def font(self,  value:__core__.RID)->None:
    """"""
    pass
  def get_transform(self)->__core__.Transform2D:
    """"""
    pass

  def set_transform(self, transform:__core__.Transform2D)->None:
    """"""
    pass

  def get_range(self)->__core__.Vector2i:
    """"""
    pass

  def set_range(self, range:__core__.Vector2i)->None:
    """"""
    pass

  def get_elapsed_time(self)->float:
    """"""
    pass

  def set_elapsed_time(self, time:float)->None:
    """"""
    pass

  def is_visible(self)->bool:
    """"""
    pass

  def set_visibility(self, visibility:bool)->None:
    """"""
    pass

  def is_outline(self)->bool:
    """"""
    pass

  def set_outline(self, outline:bool)->None:
    """"""
    pass

  def get_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_color(self)->__core__.Color:
    """"""
    pass

  def set_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_environment(self)->__core__.Dictionary:
    """"""
    pass

  def set_environment(self, environment:__core__.Dictionary)->None:
    """"""
    pass

  def get_glyph_index(self)->int:
    """"""
    pass

  def set_glyph_index(self, glyph_index:int)->None:
    """"""
    pass

  def get_relative_index(self)->int:
    """"""
    pass

  def set_relative_index(self, relative_index:int)->None:
    """"""
    pass

  def get_glyph_count(self)->int:
    """"""
    pass

  def set_glyph_count(self, glyph_count:int)->None:
    """"""
    pass

  def get_glyph_flags(self)->int:
    """"""
    pass

  def set_glyph_flags(self, glyph_flags:int)->None:
    """"""
    pass

  def get_font(self)->__core__.RID:
    """"""
    pass

  def set_font(self, font:__core__.RID)->None:
    """"""
    pass


