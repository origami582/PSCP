from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.OpenXRAction as __openxraction__



class OpenXRActionSet(__resource__.Resource):
  """"""

  @staticmethod
  def constructor()->OpenXRActionSet:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRActionSet:pass


  @property
  def localized_name(self)->str:
    """"""
    pass
  @localized_name.setter
  def localized_name(self,  value:str)->None:
    """"""
    pass
  @property
  def priority(self)->int:
    """"""
    pass
  @priority.setter
  def priority(self,  value:int)->None:
    """"""
    pass
  @property
  def actions(self)->__openxraction__.OpenXRAction:
    """"""
    pass
  @actions.setter
  def actions(self,  value:__openxraction__.OpenXRAction)->None:
    """"""
    pass
  def set_localized_name(self, localized_name:str)->None:
    """"""
    pass

  def get_localized_name(self)->str:
    """"""
    pass

  def set_priority(self, priority:int)->None:
    """"""
    pass

  def get_priority(self)->int:
    """"""
    pass

  def get_action_count(self)->int:
    """"""
    pass

  def set_actions(self, actions:__core__.Array)->None:
    """"""
    pass

  def get_actions(self)->__core__.Array:
    """"""
    pass

  def add_action(self, action:__openxraction__.OpenXRAction)->None:
    """"""
    pass

  def remove_action(self, action:__openxraction__.OpenXRAction)->None:
    """"""
    pass


