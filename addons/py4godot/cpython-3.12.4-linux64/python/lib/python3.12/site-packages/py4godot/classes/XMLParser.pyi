from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XMLParser as __xmlparser__
import py4godot.classes.RefCounted as __refcounted__


class NodeType:
  NODE_NONE:int = 0
  NODE_ELEMENT:int = 1
  NODE_ELEMENT_END:int = 2
  NODE_TEXT:int = 3
  NODE_COMMENT:int = 4
  NODE_CDATA:int = 5
  NODE_UNKNOWN:int = 6


class XMLParser(__refcounted__.RefCounted):
  """
		Provides a low-level interface for creating parsers for `url=https://en.wikipedia.org/wiki/XML`XML`/url` files. This class can serve as base to make custom XML parsers.
		To parse XML, you must open a file with the `open` method or a buffer with the `open_buffer` method. Then, the `read` method must be called to parse the next nodes. Most of the methods take into consideration the currently parsed node.
		Here is an example of using `XMLParser` to parse an SVG file (which is based on XML), printing each element and its attributes as a dictionary:
		
		```gdscript
		var parser = XMLParser.new()
		parser.open("path/to/file.svg")
		while parser.read() != ERR_FILE_EOF:
			if parser.get_node_type() == XMLParser.NODE_ELEMENT:
				var node_name = parser.get_node_name()
				var attributes_dict = {}
				for idx in range(parser.get_attribute_count()):
					attributes_dict`parser.get_attribute_name(idx)` = parser.get_attribute_value(idx)
				print("The ", node_name, " element has the following attributes: ", attributes_dict)
		```
		
		
	"""

  @staticmethod
  def constructor()->XMLParser:pass



  @staticmethod
  def cast(other:__object__.Object)->XMLParser:pass


  def read(self)->int:
    """
				Parses the next node in the file. This method returns an error code.
			"""
    pass

  def get_node_type(self)->int:
    """
				Returns the type of the current node. Compare with `enum NodeType` constants.
			"""
    pass

  def get_node_name(self)->str:
    """
				Returns the name of a node. This method will raise an error if the currently parsed node is a text node.
				**Note:** The content of a `constant NODE_CDATA` node and the comment string of a `constant NODE_COMMENT` node are also considered names.
			"""
    pass

  def get_node_data(self)->str:
    """
				Returns the contents of a text node. This method will raise an error if the current parsed node is of any other type.
			"""
    pass

  def get_node_offset(self)->int:
    """
				Returns the byte offset of the currently parsed node since the beginning of the file or buffer. This is usually equivalent to the number of characters before the read position.
			"""
    pass

  def get_attribute_count(self)->int:
    """
				Returns the number of attributes in the currently parsed element.
				**Note:** If this method is used while the currently parsed node is not `constant NODE_ELEMENT` or `constant NODE_ELEMENT_END`, this count will not be updated and will still reflect the last element.
			"""
    pass

  def get_attribute_name(self, idx:int)->str:
    """
				Returns the name of an attribute of the currently parsed element, specified by the `idx` index.
			"""
    pass

  def get_attribute_value(self, idx:int)->str:
    """
				Returns the value of an attribute of the currently parsed element, specified by the `idx` index.
			"""
    pass

  def has_attribute(self, name:str)->bool:
    """
				Returns `true` if the currently parsed element has an attribute with the `name`.
			"""
    pass

  def get_named_attribute_value(self, name:str)->str:
    """
				Returns the value of an attribute of the currently parsed element, specified by its `name`. This method will raise an error if the element has no such attribute.
			"""
    pass

  def get_named_attribute_value_safe(self, name:str)->str:
    """
				Returns the value of an attribute of the currently parsed element, specified by its `name`. This method will return an empty string if the element has no such attribute.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the currently parsed element is empty, e.g. `<element />`.
			"""
    pass

  def get_current_line(self)->int:
    """
				Returns the current line in the parsed file, counting from 0.
			"""
    pass

  def skip_section(self)->None:
    """
				Skips the current section. If the currently parsed node contains more inner nodes, they will be ignored and the cursor will go to the closing of the current element.
			"""
    pass

  def seek(self, position:int)->int:
    """
				Moves the buffer cursor to a certain offset (since the beginning) and reads the next node there. This method returns an error code.
			"""
    pass

  def open(self, file:str)->int:
    """
				Opens an XML `file` for parsing. This method returns an error code.
			"""
    pass

  def open_buffer(self, buffer:__core__.PackedByteArray)->int:
    """
				Opens an XML raw `buffer` for parsing. This method returns an error code.
			"""
    pass


