from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Light2D as __light2d__



class DirectionalLight2D(__light2d__.Light2D):
  """
		A directional light is a type of `Light2D` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene (for example: to model sunlight or moonlight).
		Light is emitted in the +Y direction of the node's global basis. For an unrotated light, this means that the light is emitted downwards. The position of the node is ignored; only the basis is used to determine light direction.
		**Note:** `DirectionalLight2D` does not support light cull masks (but it supports shadow cull masks). It will always light up 2D nodes, regardless of the 2D node's `CanvasItem.light_mask`.
	"""

  @staticmethod
  def constructor()->DirectionalLight2D:pass



  @staticmethod
  def cast(other:__object__.Object)->DirectionalLight2D:pass


  @property
  def height(self)->float:
    """"""
    pass
  @height.setter
  def height(self,  value:float)->None:
    """"""
    pass
  @property
  def max_distance(self)->float:
    """"""
    pass
  @max_distance.setter
  def max_distance(self,  value:float)->None:
    """"""
    pass
  def set_max_distance(self, pixels:float)->None:
    """"""
    pass

  def get_max_distance(self)->float:
    """"""
    pass


