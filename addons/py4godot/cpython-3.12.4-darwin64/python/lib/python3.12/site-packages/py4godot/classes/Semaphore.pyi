from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class Semaphore(__refcounted__.RefCounted):
  """
		A synchronization semaphore that can be used to synchronize multiple `Thread`s. Initialized to zero on creation. For a binary version, see `Mutex`.
		**Warning:** Semaphores must be used carefully to avoid deadlocks.
		**Warning:** To guarantee that the operating system is able to perform proper cleanup (no crashes, no deadlocks), these conditions must be met:
		- When a `Semaphore`'s reference count reaches zero and it is therefore destroyed, no threads must be waiting on it.
		- When a `Thread`'s reference count reaches zero and it is therefore destroyed, it must not be waiting on any semaphore.
	"""

  @staticmethod
  def constructor()->Semaphore:pass



  @staticmethod
  def cast(other:__object__.Object)->Semaphore:pass


  def wait(self)->None:
    """
				Waits for the `Semaphore`, if its value is zero, blocks until non-zero.
			"""
    pass

  def try_wait(self)->bool:
    """
				Like `wait`, but won't block, so if the value is zero, fails immediately and returns `false`. If non-zero, it returns `true` to report success.
			"""
    pass

  def post(self, count:int=1)->None:
    """
				Lowers the `Semaphore`, allowing one thread in, or more if `count` is specified.
			"""
    pass


