from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PackedScene as __packedscene__
import py4godot.classes.RefCounted as __refcounted__


class GenEditState:
  GEN_EDIT_STATE_DISABLED:int = 0
  GEN_EDIT_STATE_INSTANCE:int = 1
  GEN_EDIT_STATE_MAIN:int = 2
  GEN_EDIT_STATE_MAIN_INHERITED:int = 3


class SceneState(__refcounted__.RefCounted):
  """
		Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene. They cannot be modified from a `SceneState`, only accessed. Useful for peeking into what a `PackedScene` contains without instantiating it.
		This class cannot be instantiated directly, it is retrieved for a given scene as the result of `PackedScene.get_state`.
	"""

  @staticmethod
  def constructor()->SceneState:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneState:pass


  def get_node_count(self)->int:
    """
				Returns the number of nodes in the scene.
				The `idx` argument used to query node data in other `get_node_*` methods in the interval ``0, get_node_count() - 1``.
			"""
    pass

  def get_node_type(self, idx:int)->__core__.StringName:
    """
				Returns the type of the node at `idx`.
			"""
    pass

  def get_node_name(self, idx:int)->__core__.StringName:
    """
				Returns the name of the node at `idx`.
			"""
    pass

  def get_node_path(self, idx:int, for_parent:bool=False)->__core__.NodePath:
    """
				Returns the path to the node at `idx`.
				If `for_parent` is `true`, returns the path of the `idx` node's parent instead.
			"""
    pass

  def get_node_owner_path(self, idx:int)->__core__.NodePath:
    """
				Returns the path to the owner of the node at `idx`, relative to the root node.
			"""
    pass

  def is_node_instance_placeholder(self, idx:int)->bool:
    """
				Returns `true` if the node at `idx` is an `InstancePlaceholder`.
			"""
    pass

  def get_node_instance_placeholder(self, idx:int)->str:
    """
				Returns the path to the represented scene file if the node at `idx` is an `InstancePlaceholder`.
			"""
    pass

  def get_node_instance(self, idx:int)->__packedscene__.PackedScene:
    """
				Returns a `PackedScene` for the node at `idx` (i.e. the whole branch starting at this node, with its child nodes and resources), or `null` if the node is not an instance.
			"""
    pass

  def get_node_groups(self, idx:int)->__core__.PackedStringArray:
    """
				Returns the list of group names associated with the node at `idx`.
			"""
    pass

  def get_node_index(self, idx:int)->int:
    """
				Returns the node's index, which is its position relative to its siblings. This is only relevant and saved in scenes for cases where new nodes are added to an instantiated or inherited scene among siblings from the base scene. Despite the name, this index is not related to the `idx` argument used here and in other methods.
			"""
    pass

  def get_node_property_count(self, idx:int)->int:
    """
				Returns the number of exported or overridden properties for the node at `idx`.
				The `prop_idx` argument used to query node property data in other `get_node_property_*` methods in the interval ``0, get_node_property_count() - 1``.
			"""
    pass

  def get_node_property_name(self, idx:int, prop_idx:int)->__core__.StringName:
    """
				Returns the name of the property at `prop_idx` for the node at `idx`.
			"""
    pass

  def get_node_property_value(self, idx:int, prop_idx:int)->Any:
    """
				Returns the value of the property at `prop_idx` for the node at `idx`.
			"""
    pass

  def get_connection_count(self)->int:
    """
				Returns the number of signal connections in the scene.
				The `idx` argument used to query connection metadata in other `get_connection_*` methods in the interval ``0, get_connection_count() - 1``.
			"""
    pass

  def get_connection_source(self, idx:int)->__core__.NodePath:
    """
				Returns the path to the node that owns the signal at `idx`, relative to the root node.
			"""
    pass

  def get_connection_signal(self, idx:int)->__core__.StringName:
    """
				Returns the name of the signal at `idx`.
			"""
    pass

  def get_connection_target(self, idx:int)->__core__.NodePath:
    """
				Returns the path to the node that owns the method connected to the signal at `idx`, relative to the root node.
			"""
    pass

  def get_connection_method(self, idx:int)->__core__.StringName:
    """
				Returns the method connected to the signal at `idx`.
			"""
    pass

  def get_connection_flags(self, idx:int)->int:
    """
				Returns the connection flags for the signal at `idx`. See `enum Object.ConnectFlags` constants.
			"""
    pass

  def get_connection_binds(self, idx:int)->__core__.Array:
    """
				Returns the list of bound parameters for the signal at `idx`.
			"""
    pass

  def get_connection_unbinds(self, idx:int)->int:
    """
				Returns the number of unbound parameters for the signal at `idx`.
			"""
    pass


