from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.r as __r__
import py4godot.classes.i as __i__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.m as __m__
import py4godot.classes.a as __a__
import py4godot.classes.N as __n__
import py4godot.classes.p as __p__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.S as __s__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.Resource as __resource__
import py4godot.classes.T as __t__



class AnimationNodeStateMachinePlayback(__resource__.Resource):
  """
		Allows control of `AnimationTree` state machines created with `AnimationNodeStateMachine`. Retrieve with `$AnimationTree.get("parameters/playback")`.
		
		```gdscript
		var state_machine = $AnimationTree.get("parameters/playback")
		state_machine.travel("some_state")
		```
		
		
	"""

  @staticmethod
  def constructor()->AnimationNodeStateMachinePlayback:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeStateMachinePlayback:pass


  def travel(self, to_node:__core__.StringName|str, reset_on_teleport:bool=True)->None:
    """
				Transitions from the current state to another one, following the shortest path.
				If the path does not connect from the current state, the animation will play after the state teleports.
				If `reset_on_teleport` is `true`, the animation is played from the beginning when the travel cause a teleportation.
			"""
    pass

  def start(self, node:__core__.StringName|str, reset:bool=True)->None:
    """
				Starts playing the given animation.
				If `reset` is `true`, the animation is played from the beginning.
			"""
    pass

  def next(self)->None:
    """
				If there is a next path by travel or auto advance, immediately transitions from the current state to the next state.
			"""
    pass

  def stop(self)->None:
    """
				Stops the currently playing animation.
			"""
    pass

  def is_playing(self)->bool:
    """
				Returns `true` if an animation is playing.
			"""
    pass

  def get_current_node(self)->__core__.StringName:
    """
				Returns the currently playing animation state.
				**Note:** When using a cross-fade, the current state changes to the next state immediately after the cross-fade begins.
			"""
    pass

  def get_current_play_position(self)->float:
    """
				Returns the playback position within the current animation state.
			"""
    pass

  def get_current_length(self)->float:
    """
				Returns the current state length.
				**Note:** It is possible that any `AnimationRootNode` can be nodes as well as animations. This means that there can be multiple animations within a single state. Which animation length has priority depends on the nodes connected inside it. Also, if a transition does not reset, the remaining length at that point will be returned.
			"""
    pass

  def get_fading_from_node(self)->__core__.StringName:
    """
				Returns the starting state of currently fading animation.
			"""
    pass

  def get_travel_path(self)->typedarray::StringName:
    """
				Returns the current travel path as computed internally by the A* algorithm.
			"""
    pass


