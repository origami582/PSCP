from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class PackedDataContainerRef(__refcounted__.RefCounted):
  """
		When packing nested containers using `PackedDataContainer`, they are recursively packed into `PackedDataContainerRef` (only applies to `Array` and `Dictionary`). Their data can be retrieved the same way as from `PackedDataContainer`.
		```gdscript
		var packed = PackedDataContainer.new()
		packed.pack(`1, 2, 3, `"nested1", "nested2"`, 4, 5, 6`)

		for element in packed:
			if element is PackedDataContainerRef:
				for subelement in element:
					print("::", subelement)
			else:
				print(element)
		```
		Prints:
		`codeblock lang=text`
		1
		2
		3
		::nested1
		::nested2
		4
		5
		6
		```
	"""

  @staticmethod
  def constructor()->PackedDataContainerRef:pass



  @staticmethod
  def cast(other:__object__.Object)->PackedDataContainerRef:pass


  def size(self)->int:
    """
				Returns the size of the packed container (see `Array.size` and `Dictionary.size`).
			"""
    pass


