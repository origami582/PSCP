from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMesh as __navigationmesh__
import py4godot.classes.Node3D as __node3d__



class NavigationRegion3D(__node3d__.Node3D):
  """
		A traversable 3D region based on a `NavigationMesh` that `NavigationAgent3D`s can use for pathfinding.
		Two regions can be connected to each other if they share a similar edge. You can set the minimum distance between two vertices required to connect two edges by using `NavigationServer3D.map_set_edge_connection_margin`.
		**Note:** Overlapping two regions' navigation meshes is not enough for connecting two regions. They must share a similar edge.
		The cost of entering this region from another region can be controlled with the `enter_cost` value.
		**Note:** This value is not added to the path cost when the start position is already inside this region.
		The cost of traveling distances inside this region can be controlled with the `travel_cost` multiplier.
		**Note:** This node caches changes to its properties, so if you make changes to the underlying region `RID` in `NavigationServer3D`, they will not be reflected in this node's properties.
	"""
  navigation_mesh_changed: BuiltinSignal
  bake_finished: BuiltinSignal

  @staticmethod
  def constructor()->NavigationRegion3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationRegion3D:pass


  @property
  def navigation_mesh(self)->__navigationmesh__.NavigationMesh:
    """"""
    pass
  @navigation_mesh.setter
  def navigation_mesh(self,  value:__navigationmesh__.NavigationMesh)->None:
    """"""
    pass
  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_edge_connections(self)->bool:
    """"""
    pass
  @use_edge_connections.setter
  def use_edge_connections(self,  value:bool)->None:
    """"""
    pass
  @property
  def navigation_layers(self)->int:
    """"""
    pass
  @navigation_layers.setter
  def navigation_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def enter_cost(self)->float:
    """"""
    pass
  @enter_cost.setter
  def enter_cost(self,  value:float)->None:
    """"""
    pass
  @property
  def travel_cost(self)->float:
    """"""
    pass
  @travel_cost.setter
  def travel_cost(self,  value:float)->None:
    """"""
    pass
  def get_rid(self)->__core__.RID:
    """
				Returns the `RID` of this region on the `NavigationServer3D`. Combined with `NavigationServer3D.map_get_closest_point_owner` can be used to identify the `NavigationRegion3D` closest to a point on the merged navigation map.
			"""
    pass

  def set_navigation_mesh(self, navigation_mesh:__navigationmesh__.NavigationMesh)->None:
    """"""
    pass

  def get_navigation_mesh(self)->__navigationmesh__.NavigationMesh:
    """"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_enabled(self)->bool:
    """"""
    pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None:
    """
				Sets the `RID` of the navigation map this region should use. By default the region will automatically join the `World3D` default navigation map so this function is only required to override the default map.
			"""
    pass

  def get_navigation_map(self)->__core__.RID:
    """
				Returns the current navigation map `RID` used by this region.
			"""
    pass

  def set_use_edge_connections(self, enabled:bool)->None:
    """"""
    pass

  def get_use_edge_connections(self)->bool:
    """"""
    pass

  def set_navigation_layers(self, navigation_layers:int)->None:
    """"""
    pass

  def get_navigation_layers(self)->int:
    """"""
    pass

  def set_navigation_layer_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `navigation_layers` bitmask, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_navigation_layer_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `navigation_layers` bitmask is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_region_rid(self)->__core__.RID:
    """
				Returns the `RID` of this region on the `NavigationServer3D`.
			"""
    pass

  def set_enter_cost(self, enter_cost:float)->None:
    """"""
    pass

  def get_enter_cost(self)->float:
    """"""
    pass

  def set_travel_cost(self, travel_cost:float)->None:
    """"""
    pass

  def get_travel_cost(self)->float:
    """"""
    pass

  def bake_navigation_mesh(self, on_thread:bool=True)->None:
    """
				Bakes the `NavigationMesh`. If `on_thread` is set to `true` (default), the baking is done on a separate thread. Baking on separate thread is useful because navigation baking is not a cheap operation. When it is completed, it automatically sets the new `NavigationMesh`. Please note that baking on separate thread may be very slow if geometry is parsed from meshes as async access to each mesh involves heavy synchronization. Also, please note that baking on a separate thread is automatically disabled on operating systems that cannot use threads (such as Web with threads disabled).
			"""
    pass

  def is_baking(self)->bool:
    """
				Returns `true` when the `NavigationMesh` is being baked on a background thread.
			"""
    pass

  def get_bounds(self)->__core__.AABB:
    """
				Returns the axis-aligned bounding box for the region's transformed navigation mesh.
			"""
    pass


