from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__



class SkeletonModification2DCCDIK(__skeletonmodification2d__.SkeletonModification2D):
  """
		This `SkeletonModification2D` uses an algorithm called Cyclic Coordinate Descent Inverse Kinematics, or CCDIK, to manipulate a chain of bones in a `Skeleton2D` so it reaches a defined target.
		CCDIK works by rotating a set of bones, typically called a "bone chain", on a single axis. Each bone is rotated to face the target from the tip (by default), which over a chain of bones allow it to rotate properly to reach the target. Because the bones only rotate on a single axis, CCDIK _can_ look more robotic than other IK solvers.
		**Note:** The CCDIK modifier has `ccdik_joints`, which are the data objects that hold the data for each joint in the CCDIK chain. This is different from a bone! CCDIK joints hold the data needed for each bone in the bone chain used by CCDIK.
		CCDIK also fully supports angle constraints, allowing for more control over how a solution is met.
	"""

  @staticmethod
  def constructor()->SkeletonModification2DCCDIK:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DCCDIK:pass


  @property
  def target_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def tip_nodepath(self)->__core__.NodePath:
    """"""
    pass
  @tip_nodepath.setter
  def tip_nodepath(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def ccdik_data_chain_length(self)->int:
    """"""
    pass
  @ccdik_data_chain_length.setter
  def ccdik_data_chain_length(self,  value:int)->None:
    """"""
    pass
  def set_target_node(self, target_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_tip_node(self, tip_nodepath:__core__.NodePath|str)->None:
    """"""
    pass

  def get_tip_node(self)->__core__.NodePath:
    """"""
    pass

  def set_ccdik_data_chain_length(self, length:int)->None:
    """"""
    pass

  def get_ccdik_data_chain_length(self)->int:
    """"""
    pass

  def set_ccdik_joint_bone2d_node(self, joint_idx:int, bone2d_nodepath:__core__.NodePath|str)->None:
    """
				Sets the `Bone2D` node assigned to the CCDIK joint at `joint_idx`.
			"""
    pass

  def get_ccdik_joint_bone2d_node(self, joint_idx:int)->__core__.NodePath:
    """
				Returns the `Bone2D` node assigned to the CCDIK joint at `joint_idx`.
			"""
    pass

  def set_ccdik_joint_bone_index(self, joint_idx:int, bone_idx:int)->None:
    """
				Sets the bone index, `bone_idx`, of the CCDIK joint at `joint_idx`. When possible, this will also update the `bone2d_node` of the CCDIK joint based on data provided by the linked skeleton.
			"""
    pass

  def get_ccdik_joint_bone_index(self, joint_idx:int)->int:
    """
				Returns the index of the `Bone2D` node assigned to the CCDIK joint at `joint_idx`.
			"""
    pass

  def set_ccdik_joint_rotate_from_joint(self, joint_idx:int, rotate_from_joint:bool)->None:
    """
				Sets whether the joint at `joint_idx` is set to rotate from the joint, `true`, or to rotate from the tip, `false`.
			"""
    pass

  def get_ccdik_joint_rotate_from_joint(self, joint_idx:int)->bool:
    """
				Returns whether the joint at `joint_idx` is set to rotate from the joint, `true`, or to rotate from the tip, `false`. The default is to rotate from the tip.
			"""
    pass

  def set_ccdik_joint_enable_constraint(self, joint_idx:int, enable_constraint:bool)->None:
    """
				Determines whether angle constraints on the CCDIK joint at `joint_idx` are enabled. When `true`, constraints will be enabled and taken into account when solving.
			"""
    pass

  def get_ccdik_joint_enable_constraint(self, joint_idx:int)->bool:
    """
				Returns whether angle constraints on the CCDIK joint at `joint_idx` are enabled.
			"""
    pass

  def set_ccdik_joint_constraint_angle_min(self, joint_idx:int, angle_min:float)->None:
    """
				Sets the minimum angle constraint for the joint at `joint_idx`.
			"""
    pass

  def get_ccdik_joint_constraint_angle_min(self, joint_idx:int)->float:
    """
				Returns the minimum angle constraint for the joint at `joint_idx`.
			"""
    pass

  def set_ccdik_joint_constraint_angle_max(self, joint_idx:int, angle_max:float)->None:
    """
				Sets the maximum angle constraint for the joint at `joint_idx`.
			"""
    pass

  def get_ccdik_joint_constraint_angle_max(self, joint_idx:int)->float:
    """
				Returns the maximum angle constraint for the joint at `joint_idx`.
			"""
    pass

  def set_ccdik_joint_constraint_angle_invert(self, joint_idx:int, invert:bool)->None:
    """
				Sets whether the CCDIK joint at `joint_idx` uses an inverted joint constraint.
				An inverted joint constraint only constraints the CCDIK joint to the angles _outside of_ the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values.
			"""
    pass

  def get_ccdik_joint_constraint_angle_invert(self, joint_idx:int)->bool:
    """
				Returns whether the CCDIK joint at `joint_idx` uses an inverted joint constraint. See `set_ccdik_joint_constraint_angle_invert` for details.
			"""
    pass


