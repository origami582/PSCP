from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CanvasLayer as __canvaslayer__



class ParallaxBackground(__canvaslayer__.CanvasLayer):
  """
		A ParallaxBackground uses one or more `ParallaxLayer` child nodes to create a parallax effect. Each `ParallaxLayer` can move at a different speed using `ParallaxLayer.motion_offset`. This creates an illusion of depth in a 2D game. If not used with a `Camera2D`, you must manually calculate the `scroll_offset`.
		**Note:** Each `ParallaxBackground` is drawn on one specific `Viewport` and cannot be shared between multiple `Viewport`s, see `CanvasLayer.custom_viewport`. When using multiple `Viewport`s, for example in a split-screen game, you need create an individual `ParallaxBackground` for each `Viewport` you want it to be drawn on.
	"""

  @staticmethod
  def constructor()->ParallaxBackground:pass



  @staticmethod
  def cast(other:__object__.Object)->ParallaxBackground:pass


  @property
  def scroll_offset(self)->__core__.Vector2:
    """"""
    pass
  @scroll_offset.setter
  def scroll_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def scroll_base_offset(self)->__core__.Vector2:
    """"""
    pass
  @scroll_base_offset.setter
  def scroll_base_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def scroll_base_scale(self)->__core__.Vector2:
    """"""
    pass
  @scroll_base_scale.setter
  def scroll_base_scale(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def scroll_limit_begin(self)->__core__.Vector2:
    """"""
    pass
  @scroll_limit_begin.setter
  def scroll_limit_begin(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def scroll_limit_end(self)->__core__.Vector2:
    """"""
    pass
  @scroll_limit_end.setter
  def scroll_limit_end(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def scroll_ignore_camera_zoom(self)->bool:
    """"""
    pass
  @scroll_ignore_camera_zoom.setter
  def scroll_ignore_camera_zoom(self,  value:bool)->None:
    """"""
    pass
  def set_scroll_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_scroll_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_scroll_base_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_scroll_base_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_scroll_base_scale(self, scale:__core__.Vector2)->None:
    """"""
    pass

  def get_scroll_base_scale(self)->__core__.Vector2:
    """"""
    pass

  def set_limit_begin(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_limit_begin(self)->__core__.Vector2:
    """"""
    pass

  def set_limit_end(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_limit_end(self)->__core__.Vector2:
    """"""
    pass

  def set_ignore_camera_zoom(self, ignore:bool)->None:
    """"""
    pass

  def is_ignore_camera_zoom(self)->bool:
    """"""
    pass


