from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SpriteFrames as __spriteframes__
import py4godot.classes.Node2D as __node2d__



class AnimatedSprite2D(__node2d__.Node2D):
  """
		`AnimatedSprite2D` is similar to the `Sprite2D` node, except it carries multiple textures as animation frames. Animations are created using a `SpriteFrames` resource, which allows you to import image files (or a folder containing said files) to provide the animation frames for the sprite. The `SpriteFrames` resource can be configured in the editor via the SpriteFrames bottom panel.
	"""
  sprite_frames_changed: BuiltinSignal
  animation_changed: BuiltinSignal
  frame_changed: BuiltinSignal
  animation_looped: BuiltinSignal
  animation_finished: BuiltinSignal

  @staticmethod
  def constructor()->AnimatedSprite2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimatedSprite2D:pass


  @property
  def sprite_frames(self)->__spriteframes__.SpriteFrames:
    """"""
    pass
  @sprite_frames.setter
  def sprite_frames(self,  value:__spriteframes__.SpriteFrames)->None:
    """"""
    pass
  @property
  def animation(self)->__core__.StringName:
    """"""
    pass
  @animation.setter
  def animation(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def autoplay(self)->__core__.StringName:
    """"""
    pass
  @autoplay.setter
  def autoplay(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def frame(self)->int:
    """"""
    pass
  @frame.setter
  def frame(self,  value:int)->None:
    """"""
    pass
  @property
  def frame_progress(self)->float:
    """"""
    pass
  @frame_progress.setter
  def frame_progress(self,  value:float)->None:
    """"""
    pass
  @property
  def speed_scale(self)->float:
    """"""
    pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def centered(self)->bool:
    """"""
    pass
  @centered.setter
  def centered(self,  value:bool)->None:
    """"""
    pass
  @property
  def offset(self)->__core__.Vector2:
    """"""
    pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def flip_h(self)->bool:
    """"""
    pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None:
    """"""
    pass
  @property
  def flip_v(self)->bool:
    """"""
    pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None:
    """"""
    pass
  def set_sprite_frames(self, sprite_frames:__spriteframes__.SpriteFrames)->None:
    """"""
    pass

  def get_sprite_frames(self)->__spriteframes__.SpriteFrames:
    """"""
    pass

  def set_animation(self, name:__core__.StringName|str)->None:
    """"""
    pass

  def get_animation(self)->__core__.StringName:
    """"""
    pass

  def set_autoplay(self, name:str)->None:
    """"""
    pass

  def get_autoplay(self)->str:
    """"""
    pass

  def is_playing(self)->bool:
    """
				Returns `true` if an animation is currently playing (even if `speed_scale` and/or `custom_speed` are `0`).
			"""
    pass

  def play(self, name:__core__.StringName|str= __core__.StringName.new0(), custom_speed:float=1.0, from_end:bool=False)->None:
    """
				Plays the animation with key `name`. If `custom_speed` is negative and `from_end` is `true`, the animation will play backwards (which is equivalent to calling `play_backwards`).
				If this method is called with that same animation `name`, or with no `name` parameter, the assigned animation will resume playing if it was paused.
			"""
    pass

  def play_backwards(self, name:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Plays the animation with key `name` in reverse.
				This method is a shorthand for `play` with `custom_speed = -1.0` and `from_end = true`, so see its description for more information.
			"""
    pass

  def pause(self)->None:
    """
				Pauses the currently playing animation. The `frame` and `frame_progress` will be kept and calling `play` or `play_backwards` without arguments will resume the animation from the current playback position.
				See also `stop`.
			"""
    pass

  def stop(self)->None:
    """
				Stops the currently playing animation. The animation position is reset to `0` and the `custom_speed` is reset to `1.0`. See also `pause`.
			"""
    pass

  def set_centered(self, centered:bool)->None:
    """"""
    pass

  def is_centered(self)->bool:
    """"""
    pass

  def set_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_flip_h(self, flip_h:bool)->None:
    """"""
    pass

  def is_flipped_h(self)->bool:
    """"""
    pass

  def set_flip_v(self, flip_v:bool)->None:
    """"""
    pass

  def is_flipped_v(self)->bool:
    """"""
    pass

  def set_frame(self, frame:int)->None:
    """"""
    pass

  def get_frame(self)->int:
    """"""
    pass

  def set_frame_progress(self, progress:float)->None:
    """"""
    pass

  def get_frame_progress(self)->float:
    """"""
    pass

  def set_frame_and_progress(self, frame:int, progress:float)->None:
    """
				Sets `frame` and `frame_progress` to the given values. Unlike setting `frame`, this method does not reset the `frame_progress` to `0.0` implicitly.
				**Example:** Change the animation while keeping the same `frame` and `frame_progress`:
				
				```gdscript
				var current_frame = animated_sprite.get_frame()
				var current_progress = animated_sprite.get_frame_progress()
				animated_sprite.play("walk_another_skin")
				animated_sprite.set_frame_and_progress(current_frame, current_progress)
				```
				
			"""
    pass

  def set_speed_scale(self, speed_scale:float)->None:
    """"""
    pass

  def get_speed_scale(self)->float:
    """"""
    pass

  def get_playing_speed(self)->float:
    """
				Returns the actual playing speed of current animation or `0` if not playing. This speed is the `speed_scale` property multiplied by `custom_speed` argument specified when calling the `play` method.
				Returns a negative value if the current animation is playing backwards.
			"""
    pass


