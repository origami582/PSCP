from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.a as __a__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.p as __p__
import py4godot.classes.CameraAttributesPractical as __cameraattributespractical__
import py4godot.classes.e as __e__
import py4godot.classes.P as __p__
import py4godot.classes.T as __t__
import py4godot.classes.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.r as __r__
import py4godot.classes.l as __l__
import py4godot.classes.CameraAttributes as __cameraattributes__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Environment as __environment__
import py4godot.classes.Compositor as __compositor__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.y as __y__


class ProjectionType:
  PROJECTION_PERSPECTIVE:int = 0
  PROJECTION_ORTHOGONAL:int = 1
  PROJECTION_FRUSTUM:int = 2
class KeepAspect:
  KEEP_WIDTH:int = 0
  KEEP_HEIGHT:int = 1
class DopplerTracking:
  DOPPLER_TRACKING_DISABLED:int = 0
  DOPPLER_TRACKING_IDLE_STEP:int = 1
  DOPPLER_TRACKING_PHYSICS_STEP:int = 2


class Camera3D(__node3d__.Node3D):
  """
		`Camera3D` is a special node that displays what is visible from its current location. Cameras register themselves in the nearest `Viewport` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a `Viewport`, and, without one, a scene registered in that `Viewport` (or higher viewports) can't be displayed.
	"""

  @staticmethod
  def constructor()->Camera3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Camera3D:pass


  @property
  def keep_aspect(self)->int:
    """"""
    pass
  @keep_aspect.setter
  def keep_aspect(self,  value:int)->None:
    """"""
    pass
  @property
  def cull_mask(self)->int:
    """"""
    pass
  @cull_mask.setter
  def cull_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def environment(self)->__environment__.Environment:
    """"""
    pass
  @environment.setter
  def environment(self,  value:__environment__.Environment)->None:
    """"""
    pass
  @property
  def attributes(self)->CameraAttributesPractical,CameraAttributesPhysical:
    """"""
    pass
  @attributes.setter
  def attributes(self,  value:__cameraattributespractical__.CameraAttributesPractical)->None:
    """"""
    pass
  @property
  def compositor(self)->__compositor__.Compositor:
    """"""
    pass
  @compositor.setter
  def compositor(self,  value:__compositor__.Compositor)->None:
    """"""
    pass
  @property
  def h_offset(self)->float:
    """"""
    pass
  @h_offset.setter
  def h_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def v_offset(self)->float:
    """"""
    pass
  @v_offset.setter
  def v_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def doppler_tracking(self)->int:
    """"""
    pass
  @doppler_tracking.setter
  def doppler_tracking(self,  value:int)->None:
    """"""
    pass
  @property
  def projection(self)->int:
    """"""
    pass
  @projection.setter
  def projection(self,  value:int)->None:
    """"""
    pass
  @property
  def current(self)->bool:
    """"""
    pass
  @current.setter
  def current(self,  value:bool)->None:
    """"""
    pass
  @property
  def fov(self)->float:
    """"""
    pass
  @fov.setter
  def fov(self,  value:float)->None:
    """"""
    pass
  @property
  def size(self)->float:
    """"""
    pass
  @size.setter
  def size(self,  value:float)->None:
    """"""
    pass
  @property
  def frustum_offset(self)->__core__.Vector2:
    """"""
    pass
  @frustum_offset.setter
  def frustum_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def near(self)->float:
    """"""
    pass
  @near.setter
  def near(self,  value:float)->None:
    """"""
    pass
  @property
  def far(self)->float:
    """"""
    pass
  @far.setter
  def far(self,  value:float)->None:
    """"""
    pass
  def project_ray_normal(self, screen_point:__core__.Vector2)->__core__.Vector3:
    """
				Returns a normal vector in world space, that is the result of projecting a point on the `Viewport` rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
			"""
    pass

  def project_local_ray_normal(self, screen_point:__core__.Vector2)->__core__.Vector3:
    """
				Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.
			"""
    pass

  def project_ray_origin(self, screen_point:__core__.Vector2)->__core__.Vector3:
    """
				Returns a 3D position in world space, that is the result of projecting a point on the `Viewport` rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
			"""
    pass

  def unproject_position(self, world_point:__core__.Vector3)->__core__.Vector2:
    """
				Returns the 2D coordinate in the `Viewport` rectangle that maps to the given 3D point in world space.
				**Note:** When using this to position GUI elements over a 3D viewport, use `is_position_behind` to prevent them from appearing if the 3D point is behind the camera:
				```gdscript
				# This code block is part of a script that inherits from Node3D.
				# `control` is a reference to a node inheriting from Control.
				control.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
				control.position = get_viewport().get_camera_3d().unproject_position(global_transform.origin)
				```
			"""
    pass

  def is_position_behind(self, world_point:__core__.Vector3)->bool:
    """
				Returns `true` if the given position is behind the camera (the blue part of the linked diagram). `url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png`See this diagram`/url` for an overview of position query methods.
				**Note:** A position which returns `false` may still be outside the camera's field of view.
			"""
    pass

  def project_position(self, screen_point:__core__.Vector2, z_depth:float)->__core__.Vector3:
    """
				Returns the 3D point in world space that maps to the given 2D coordinate in the `Viewport` rectangle on a plane that is the given `z_depth` distance into the scene away from the camera.
			"""
    pass

  def set_perspective(self, fov:float, z_near:float, z_far:float)->None:
    """
				Sets the camera projection to perspective mode (see `constant PROJECTION_PERSPECTIVE`), by specifying a `fov` (field of view) angle in degrees, and the `z_near` and `z_far` clip planes in world space units.
			"""
    pass

  def set_orthogonal(self, size:float, z_near:float, z_far:float)->None:
    """
				Sets the camera projection to orthogonal mode (see `constant PROJECTION_ORTHOGONAL`), by specifying a `size`, and the `z_near` and `z_far` clip planes in world space units.
				As a hint, 3D games that look 2D often use this projection, with `size` specified in pixels.
			"""
    pass

  def set_frustum(self, size:float, offset:__core__.Vector2, z_near:float, z_far:float)->None:
    """
				Sets the camera projection to frustum mode (see `constant PROJECTION_FRUSTUM`), by specifying a `size`, an `offset`, and the `z_near` and `z_far` clip planes in world space units. See also `frustum_offset`.
			"""
    pass

  def make_current(self)->None:
    """
				Makes this camera the current camera for the `Viewport` (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added.
			"""
    pass

  def clear_current(self, enable_next:bool=True)->None:
    """
				If this is the current camera, remove it from being current. If `enable_next` is `true`, request to make the next camera current, if any.
			"""
    pass

  def set_current(self, enabled:bool)->None:
    """"""
    pass

  def is_current(self)->bool:
    """"""
    pass

  def get_camera_transform(self)->__core__.Transform3D:
    """
				Returns the transform of the camera plus the vertical (`v_offset`) and horizontal (`h_offset`) offsets; and any other adjustments made to the position and orientation of the camera by subclassed cameras such as `XRCamera3D`.
			"""
    pass

  def get_camera_projection(self)->__core__.Projection:
    """
				Returns the projection matrix that this camera uses to render to its associated viewport. The camera must be part of the scene tree to function.
			"""
    pass

  def get_fov(self)->float:
    """"""
    pass

  def get_frustum_offset(self)->__core__.Vector2:
    """"""
    pass

  def get_size(self)->float:
    """"""
    pass

  def get_far(self)->float:
    """"""
    pass

  def get_near(self)->float:
    """"""
    pass

  def set_fov(self, fov:float)->None:
    """"""
    pass

  def set_frustum_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def set_size(self, size:float)->None:
    """"""
    pass

  def set_far(self, far:float)->None:
    """"""
    pass

  def set_near(self, near:float)->None:
    """"""
    pass

  def get_projection(self)->int:
    """"""
    pass

  def set_projection(self, mode:int )->None:
    """"""
    pass

  def set_h_offset(self, offset:float)->None:
    """"""
    pass

  def get_h_offset(self)->float:
    """"""
    pass

  def set_v_offset(self, offset:float)->None:
    """"""
    pass

  def get_v_offset(self)->float:
    """"""
    pass

  def set_cull_mask(self, mask:int)->None:
    """"""
    pass

  def get_cull_mask(self)->int:
    """"""
    pass

  def set_environment(self, env:__environment__.Environment)->None:
    """"""
    pass

  def get_environment(self)->__environment__.Environment:
    """"""
    pass

  def set_attributes(self, env:__cameraattributes__.CameraAttributes)->None:
    """"""
    pass

  def get_attributes(self)->__cameraattributesphysical__.CameraAttributesPhysical|__cameraattributes__.CameraAttributes|__cameraattributespractical__.CameraAttributesPractical:
    """"""
    pass

  def set_compositor(self, compositor:__compositor__.Compositor)->None:
    """"""
    pass

  def get_compositor(self)->__compositor__.Compositor:
    """"""
    pass

  def set_keep_aspect_mode(self, mode:int )->None:
    """"""
    pass

  def get_keep_aspect_mode(self)->int:
    """"""
    pass

  def set_doppler_tracking(self, mode:int )->None:
    """"""
    pass

  def get_doppler_tracking(self)->int:
    """"""
    pass

  def get_frustum(self)->typedarray::Plane:
    """
				Returns the camera's frustum planes in world space units as an array of `Plane`s in the following order: near, far, left, top, right, bottom. Not to be confused with `frustum_offset`.
			"""
    pass

  def is_position_in_frustum(self, world_point:__core__.Vector3)->bool:
    """
				Returns `true` if the given position is inside the camera's frustum (the green part of the linked diagram). `url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png`See this diagram`/url` for an overview of position query methods.
			"""
    pass

  def get_camera_rid(self)->__core__.RID:
    """
				Returns the camera's RID from the `RenderingServer`.
			"""
    pass

  def get_pyramid_shape_rid(self)->__core__.RID:
    """
				Returns the RID of a pyramid shape encompassing the camera's view frustum, ignoring the camera's near plane. The tip of the pyramid represents the position of the camera.
			"""
    pass

  def set_cull_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `cull_mask`, given a `layer_number` between 1 and 20.
			"""
    pass

  def get_cull_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `cull_mask` is enabled, given a `layer_number` between 1 and 20.
			"""
    pass


