from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TreeItem as __treeitem__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.Container as __container__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.Label as __label__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.Slider as __slider__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.GridContainer as __gridcontainer__


class SelectMode:
  SELECT_SINGLE:int = 0
  SELECT_ROW:int = 1
  SELECT_MULTI:int = 2
class DropModeFlags:
  DROPERATOR_MODE_DISABLED:int = 0
  DROPERATOR_MODE_ON_ITEM:int = 1
  DROPERATOR_MODE_INBETWEEN:int = 2


class Tree(__control__.Control):
  """
		A control used to show a set of internal `TreeItem`s in a hierarchical structure. The tree items can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like `LineEdit`s, buttons and popups. It can be useful for structured displays and interactions.
		Trees are built via code, using `TreeItem` objects to create the structure. They have a single root, but multiple roots can be simulated with `hide_root`:
		
		```gdscript
		func _ready():
			var tree = Tree.new()
			var root = tree.create_item()
			tree.hide_root = true
			var child1 = tree.create_item(root)
			var child2 = tree.create_item(root)
			var subchild1 = tree.create_item(child1)
			subchild1.set_text(0, "Subchild1")
		```
		
		
		To iterate over all the `TreeItem` objects in a `Tree` object, use `TreeItem.get_next` and `TreeItem.get_first_child` after getting the root through `get_root`. You can use `Object.free` on a `TreeItem` to remove it from the `Tree`.
		**Incremental search:** Like `ItemList` and `PopupMenu`, `Tree` supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing `ProjectSettings.gui/timers/incremental_search_max_interval_msec`.
	"""
  item_selected: BuiltinSignal
  cell_selected: BuiltinSignal
  multi_selected: BuiltinSignal
  item_mouse_selected: BuiltinSignal
  empty_clicked: BuiltinSignal
  item_edited: BuiltinSignal
  custom_item_clicked: BuiltinSignal
  item_icon_double_clicked: BuiltinSignal
  item_collapsed: BuiltinSignal
  check_propagated_to_item: BuiltinSignal
  button_clicked: BuiltinSignal
  custom_popup_edited: BuiltinSignal
  item_activated: BuiltinSignal
  column_title_clicked: BuiltinSignal
  nothing_selected: BuiltinSignal

  @staticmethod
  def constructor()->Tree:pass



  @staticmethod
  def cast(other:__object__.Object)->Tree:pass


  @property
  def columns(self)->int:
    """"""
    pass
  @columns.setter
  def columns(self,  value:int)->None:
    """"""
    pass
  @property
  def column_titles_visible(self)->bool:
    """"""
    pass
  @column_titles_visible.setter
  def column_titles_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_reselect(self)->bool:
    """"""
    pass
  @allow_reselect.setter
  def allow_reselect(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_rmb_select(self)->bool:
    """"""
    pass
  @allow_rmb_select.setter
  def allow_rmb_select(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_search(self)->bool:
    """"""
    pass
  @allow_search.setter
  def allow_search(self,  value:bool)->None:
    """"""
    pass
  @property
  def hide_folding(self)->bool:
    """"""
    pass
  @hide_folding.setter
  def hide_folding(self,  value:bool)->None:
    """"""
    pass
  @property
  def enable_recursive_folding(self)->bool:
    """"""
    pass
  @enable_recursive_folding.setter
  def enable_recursive_folding(self,  value:bool)->None:
    """"""
    pass
  @property
  def hide_root(self)->bool:
    """"""
    pass
  @hide_root.setter
  def hide_root(self,  value:bool)->None:
    """"""
    pass
  @property
  def drop_mode_flags(self)->int:
    """"""
    pass
  @drop_mode_flags.setter
  def drop_mode_flags(self,  value:int)->None:
    """"""
    pass
  @property
  def select_mode(self)->int:
    """"""
    pass
  @select_mode.setter
  def select_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def scroll_horizontal_enabled(self)->bool:
    """"""
    pass
  @scroll_horizontal_enabled.setter
  def scroll_horizontal_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_vertical_enabled(self)->bool:
    """"""
    pass
  @scroll_vertical_enabled.setter
  def scroll_vertical_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def auto_tooltip(self)->bool:
    """"""
    pass
  @auto_tooltip.setter
  def auto_tooltip(self,  value:bool)->None:
    """"""
    pass
  def clear(self)->None:
    """
				Clears the tree. This removes all items.
			"""
    pass

  def create_item(self, parent:__treeitem__.TreeItem= __treeitem__.TreeItem.constructor(), index:int=-1)->__treeitem__.TreeItem:
    """
				Creates an item in the tree and adds it as a child of `parent`, which can be either a valid `TreeItem` or `null`.
				If `parent` is `null`, the root item will be the parent, or the new item will be the root itself if the tree is empty.
				The new item will be the `index`-th child of parent, or it will be the last child if there are not enough siblings.
			"""
    pass

  def get_root(self)->__treeitem__.TreeItem:
    """
				Returns the tree's root item, or `null` if the tree is empty.
			"""
    pass

  def set_column_custom_minimum_width(self, column:int, min_width:int)->None:
    """
				Overrides the calculated minimum width of a column. It can be set to `0` to restore the default behavior. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to `Control.size_flags_stretch_ratio`.
			"""
    pass

  def set_column_expand(self, column:int, expand:bool)->None:
    """
				If `true`, the column will have the "Expand" flag of `Control`. Columns that have the "Expand" flag will use their expand ratio in a similar fashion to `Control.size_flags_stretch_ratio` (see `set_column_expand_ratio`).
			"""
    pass

  def set_column_expand_ratio(self, column:int, ratio:int)->None:
    """
				Sets the relative expand ratio for a column. See `set_column_expand`.
			"""
    pass

  def set_column_clip_content(self, column:int, enable:bool)->None:
    """
				Allows to enable clipping for column's content, making the content size ignored.
			"""
    pass

  def is_column_expanding(self, column:int)->bool:
    """
				Returns `true` if the column has enabled expanding (see `set_column_expand`).
			"""
    pass

  def is_column_clipping_content(self, column:int)->bool:
    """
				Returns `true` if the column has enabled clipping (see `set_column_clip_content`).
			"""
    pass

  def get_column_expand_ratio(self, column:int)->int:
    """
				Returns the expand ratio assigned to the column.
			"""
    pass

  def get_column_width(self, column:int)->int:
    """
				Returns the column's width in pixels.
			"""
    pass

  def set_hide_root(self, enable:bool)->None:
    """"""
    pass

  def is_root_hidden(self)->bool:
    """"""
    pass

  def get_next_selected(self, from_:__treeitem__.TreeItem)->__treeitem__.TreeItem:
    """
				Returns the next selected `TreeItem` after the given one, or `null` if the end is reached.
				If `from` is `null`, this returns the first selected item.
			"""
    pass

  def get_selected(self)->__treeitem__.TreeItem:
    """
				Returns the currently focused item, or `null` if no item is focused.
				In `constant SELECT_ROW` and `constant SELECT_SINGLE` modes, the focused item is same as the selected item. In `constant SELECT_MULTI` mode, the focused item is the item under the focus cursor, not necessarily selected.
				To get the currently selected item(s), use `get_next_selected`.
			"""
    pass

  def set_selected(self, item:__treeitem__.TreeItem, column:int)->None:
    """
				Selects the specified `TreeItem` and column.
			"""
    pass

  def get_selected_column(self)->int:
    """
				Returns the currently focused column, or -1 if no column is focused.
				In `constant SELECT_SINGLE` mode, the focused column is the selected column. In `constant SELECT_ROW` mode, the focused column is always 0 if any item is selected. In `constant SELECT_MULTI` mode, the focused column is the column under the focus cursor, and there are not necessarily any column selected.
				To tell whether a column of an item is selected, use `TreeItem.is_selected`.
			"""
    pass

  def get_pressed_button(self)->int:
    """
				Returns the last pressed button's index.
			"""
    pass

  def set_select_mode(self, mode:int )->None:
    """"""
    pass

  def get_select_mode(self)->int:
    """"""
    pass

  def deselect_all(self)->None:
    """
				Deselects all tree items (rows and columns). In `constant SELECT_MULTI` mode also removes selection cursor.
			"""
    pass

  def set_columns(self, amount:int)->None:
    """"""
    pass

  def get_columns(self)->int:
    """"""
    pass

  def get_edited(self)->__treeitem__.TreeItem:
    """
				Returns the currently edited item. Can be used with `signal item_edited` to get the item that was modified.
				
				```gdscript
				func _ready():
					$Tree.item_edited.connect(on_Tree_item_edited)

				func on_Tree_item_edited():
					print($Tree.get_edited()) # This item just got edited (e.g. checked).
				```
				
				
			"""
    pass

  def get_edited_column(self)->int:
    """
				Returns the column for the currently edited item.
			"""
    pass

  def edit_selected(self, force_edit:bool=False)->bool:
    """
				Edits the selected tree item as if it was clicked.
				Either the item must be set editable with `TreeItem.set_editable` or `force_edit` must be `true`.
				Returns `true` if the item could be edited. Fails if no item is selected.
			"""
    pass

  def get_custom_popup_rect(self)->__core__.Rect2:
    """
				Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See `TreeItem.set_cell_mode`.
			"""
    pass

  def get_item_area_rect(self, item:__treeitem__.TreeItem, column:int=-1, button_index:int=-1)->__core__.Rect2:
    """
				Returns the rectangle area for the specified `TreeItem`. If `column` is specified, only get the position and size of that column, otherwise get the rectangle containing all columns. If a button index is specified, the rectangle of that button will be returned.
			"""
    pass

  def get_item_at_position(self, position:__core__.Vector2)->__treeitem__.TreeItem:
    """
				Returns the tree item at the specified position (relative to the tree origin position).
			"""
    pass

  def get_column_at_position(self, position:__core__.Vector2)->int:
    """
				Returns the column index at `position`, or -1 if no item is there.
			"""
    pass

  def get_drop_section_at_position(self, position:__core__.Vector2)->int:
    """
				Returns the drop section at `position`, or -100 if no item is there.
				Values -1, 0, or 1 will be returned for the "above item", "on item", and "below item" drop sections, respectively. See `enum DropModeFlags` for a description of each drop section.
				To get the item which the returned drop section is relative to, use `get_item_at_position`.
			"""
    pass

  def get_button_id_at_position(self, position:__core__.Vector2)->int:
    """
				Returns the button ID at `position`, or -1 if no button is there.
			"""
    pass

  def ensure_cursor_is_visible(self)->None:
    """
				Makes the currently focused cell visible.
				This will scroll the tree if necessary. In `constant SELECT_ROW` mode, this will not do horizontal scrolling, as all the cells in the selected row is focused logically.
				**Note:** Despite the name of this method, the focus cursor itself is only visible in `constant SELECT_MULTI` mode.
			"""
    pass

  def set_column_titles_visible(self, visible:bool)->None:
    """"""
    pass

  def are_column_titles_visible(self)->bool:
    """"""
    pass

  def set_column_title(self, column:int, title:str)->None:
    """
				Sets the title of a column.
			"""
    pass

  def get_column_title(self, column:int)->str:
    """
				Returns the column's title.
			"""
    pass

  def set_column_title_alignment(self, column:int, title_alignment:int )->None:
    """
				Sets the column title alignment. Note that `constant @GlobalScope.HORIZONTAL_ALIGNMENT_FILL` is not supported for column titles.
			"""
    pass

  def get_column_title_alignment(self, column:int)->int:
    """
				Returns the column title alignment.
			"""
    pass

  def set_column_title_direction(self, column:int, direction:int )->None:
    """
				Sets column title base writing direction.
			"""
    pass

  def get_column_title_direction(self, column:int)->int:
    """
				Returns column title base writing direction.
			"""
    pass

  def set_column_title_language(self, column:int, language:str)->None:
    """
				Sets language code of column title used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
			"""
    pass

  def get_column_title_language(self, column:int)->str:
    """
				Returns column title language code.
			"""
    pass

  def get_scroll(self)->__core__.Vector2:
    """
				Returns the current scrolling position.
			"""
    pass

  def scroll_to_item(self, item:__treeitem__.TreeItem, center_on_item:bool=False)->None:
    """
				Causes the `Tree` to jump to the specified `TreeItem`.
			"""
    pass

  def set_h_scroll_enabled(self, h_scroll:bool)->None:
    """"""
    pass

  def is_h_scroll_enabled(self)->bool:
    """"""
    pass

  def set_v_scroll_enabled(self, h_scroll:bool)->None:
    """"""
    pass

  def is_v_scroll_enabled(self)->bool:
    """"""
    pass

  def set_hide_folding(self, hide:bool)->None:
    """"""
    pass

  def is_folding_hidden(self)->bool:
    """"""
    pass

  def set_enable_recursive_folding(self, enable:bool)->None:
    """"""
    pass

  def is_recursive_folding_enabled(self)->bool:
    """"""
    pass

  def set_drop_mode_flags(self, flags:int)->None:
    """"""
    pass

  def get_drop_mode_flags(self)->int:
    """"""
    pass

  def set_allow_rmb_select(self, allow:bool)->None:
    """"""
    pass

  def get_allow_rmb_select(self)->bool:
    """"""
    pass

  def set_allow_reselect(self, allow:bool)->None:
    """"""
    pass

  def get_allow_reselect(self)->bool:
    """"""
    pass

  def set_allow_search(self, allow:bool)->None:
    """"""
    pass

  def get_allow_search(self)->bool:
    """"""
    pass

  def set_auto_tooltip(self, enable:bool)->None:
    """"""
    pass

  def is_auto_tooltip_enabled(self)->bool:
    """"""
    pass


