from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.VisualShaderNodeParticleEmitter as __visualshadernodeparticleemitter__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.PointMesh as __pointmesh__



class VisualShaderNodeParticleMeshEmitter(__visualshadernodeparticleemitter__.VisualShaderNodeParticleEmitter):
  """
		`VisualShaderNodeParticleEmitter` that makes the particles emitted in a shape of the assigned `mesh`. It will emit from the mesh's surfaces, either all or only the specified one.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeParticleMeshEmitter:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeParticleMeshEmitter:pass


  @property
  def mesh(self)->__immediatemesh__.ImmediateMesh|__primitivemesh__.PrimitiveMesh|__torusmesh__.TorusMesh|__capsulemesh__.CapsuleMesh|__textmesh__.TextMesh|__planemesh__.PlaneMesh|__tubetrailmesh__.TubeTrailMesh|__quadmesh__.QuadMesh|__boxmesh__.BoxMesh|__prismmesh__.PrismMesh|__arraymesh__.ArrayMesh|__cylindermesh__.CylinderMesh|__ribbontrailmesh__.RibbonTrailMesh|__mesh__.Mesh|__placeholdermesh__.PlaceholderMesh|__spheremesh__.SphereMesh|__pointmesh__.PointMesh:
    """"""
    pass
  @mesh.setter
  def mesh(self,  value:__mesh__.Mesh)->None:
    """"""
    pass
  @property
  def use_all_surfaces(self)->bool:
    """"""
    pass
  @use_all_surfaces.setter
  def use_all_surfaces(self,  value:bool)->None:
    """"""
    pass
  @property
  def surface_index(self)->int:
    """"""
    pass
  @surface_index.setter
  def surface_index(self,  value:int)->None:
    """"""
    pass
  def set_mesh(self, mesh:__mesh__.Mesh)->None:
    """"""
    pass

  def get_mesh(self)->__immediatemesh__.ImmediateMesh|__primitivemesh__.PrimitiveMesh|__torusmesh__.TorusMesh|__capsulemesh__.CapsuleMesh|__textmesh__.TextMesh|__planemesh__.PlaneMesh|__tubetrailmesh__.TubeTrailMesh|__quadmesh__.QuadMesh|__boxmesh__.BoxMesh|__prismmesh__.PrismMesh|__arraymesh__.ArrayMesh|__cylindermesh__.CylinderMesh|__ribbontrailmesh__.RibbonTrailMesh|__mesh__.Mesh|__placeholdermesh__.PlaceholderMesh|__spheremesh__.SphereMesh|__pointmesh__.PointMesh:
    """"""
    pass

  def set_use_all_surfaces(self, enabled:bool)->None:
    """"""
    pass

  def is_use_all_surfaces(self)->bool:
    """"""
    pass

  def set_surface_index(self, surface_index:int)->None:
    """"""
    pass

  def get_surface_index(self)->int:
    """"""
    pass


