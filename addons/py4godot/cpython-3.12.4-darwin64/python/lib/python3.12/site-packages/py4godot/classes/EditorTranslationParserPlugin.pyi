from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.e as __e__
import py4godot.classes.t as __t__
import py4godot.classes.i as __i__
import py4godot.classes.a as __a__
import py4godot.classes.g as __g__
import py4godot.classes.p as __p__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.S as __s__
import py4godot.classes.k as __k__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.P as __p__
import py4godot.classes.T as __t__



class EditorTranslationParserPlugin(__refcounted__.RefCounted):
  """
		`EditorTranslationParserPlugin` is invoked when a file is being parsed to extract strings that require translation. To define the parsing and string extraction logic, override the `_parse_file` method in script.
		The return value should be an `Array` of `PackedStringArray`s, one for each extracted translatable string. Each entry should contain ``msgid, msgctxt, msgid_plural, comment``, where all except `msgid` are optional. Empty strings will be ignored.
		The extracted strings will be written into a POT file selected by user under "POT Generation" in "Localization" tab in "Project Settings" menu.
		Below shows an example of a custom parser that extracts strings from a CSV file to write into a POT.
		
		```gdscript
		@tool
		extends EditorTranslationParserPlugin

		func _parse_file(path):
			var ret: Array`PackedStringArray` = ``
			var file = FileAccess.open(path, FileAccess.READ)
			var text = file.get_as_text()
			var split_strs = text.split(",", false)
			for s in split_strs:
				ret.append(PackedStringArray(`s`))
				#print("Extracted string: " + s)

			return ret

		func _get_recognized_extensions():
			return `"csv"`
		```
		
		
		To add a translatable string associated with a context, plural, or comment:
		
		```gdscript
		# This will add a message with msgid "Test 1", msgctxt "context", msgid_plural "test 1 plurals", and comment "test 1 comment".
		ret.append(PackedStringArray(`"Test 1", "context", "test 1 plurals", "test 1 comment"`))
		# This will add a message with msgid "A test without context" and msgid_plural "plurals".
		ret.append(PackedStringArray(`"A test without context", "", "plurals"`))
		# This will add a message with msgid "Only with context" and msgctxt "a friendly context".
		ret.append(PackedStringArray(`"Only with context", "a friendly context"`))
		```
		
		
		**Note:** If you override parsing logic for standard script types (GDScript, C#, etc.), it would be better to load the `path` argument using `ResourceLoader.load`. This is because built-in scripts are loaded as `Resource` type, not `FileAccess` type. For example:
		
		```gdscript
		func _parse_file(path):
			var res = ResourceLoader.load(path, "Script")
			var text = res.source_code
			# Parsing logic.

		func _get_recognized_extensions():
			return `"gd"`
		```
		
		
		To use `EditorTranslationParserPlugin`, register it using the `EditorPlugin.add_translation_parser_plugin` method first.
	"""

  @staticmethod
  def constructor()->EditorTranslationParserPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorTranslationParserPlugin:pass


  def _parse_file(self, path:str)->typedarray::PackedStringArray:
    """
				Override this method to define a custom parsing logic to extract the translatable strings.
			"""
    pass

  def _get_recognized_extensions(self)->__core__.PackedStringArray:
    """
				Gets the list of file extensions to associate with this parser, e.g. ``"csv"``.
			"""
    pass


