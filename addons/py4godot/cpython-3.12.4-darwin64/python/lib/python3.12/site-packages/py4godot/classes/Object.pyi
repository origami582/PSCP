from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.i as __i__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.m as __m__
import py4godot.classes.a as __a__
import py4godot.classes.N as __n__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.S as __s__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__


class ConnectFlags:
  CONNECT_DEFERRED:int = 1
  CONNECT_PERSIST:int = 2
  CONNECT_ONE_SHOT:int = 4
  CONNECT_REFERENCE_COUNTED:int = 8


class Object():
  """
		An advanced `Variant` type. All classes in the engine inherit from Object. Each class may define new properties, methods or signals, which are available to all inheriting classes. For example, a `Sprite2D` instance is able to call `Node.add_child` because it inherits from `Node`.
		You can create new instances, using `Object.new()` in GDScript, or `new GodotObject` in C#.
		To delete an Object instance, call `free`. This is necessary for most classes inheriting Object, because they do not manage memory on their own, and will otherwise cause memory leaks when no longer in use. There are a few classes that perform memory management. For example, `RefCounted` (and by extension `Resource`) deletes itself when no longer referenced, and `Node` deletes its children when freed.
		Objects can have a `Script` attached to them. Once the `Script` is instantiated, it effectively acts as an extension to the base class, allowing it to define and inherit new properties, methods and signals.
		Inside a `Script`, `_get_property_list` may be overridden to customize properties in several ways. This allows them to be available to the editor, display as lists of options, sub-divide into groups, save on disk, etc. Scripting languages offer easier ways to customize properties, such as with the `annotation @GDScript.@export` annotation.
		Godot is very dynamic. An object's script, and therefore its properties, methods and signals, can be changed at run-time. Because of this, there can be occasions where, for example, a property required by a method may not exist. To prevent run-time errors, see methods such as `set`, `get`, `call`, `has_method`, `has_signal`, etc. Note that these methods are **much** slower than direct references.
		In GDScript, you can also check if a given property, method, or signal name exists in an object with the `in` operator:
		```gdscript
		var node = Node.new()
		print("name" in node)         # Prints true
		print("get_parent" in node)   # Prints true
		print("tree_entered" in node) # Prints true
		print("unknown" in node)      # Prints false
		```
		Notifications are `int` constants commonly sent and received by objects. For example, on every rendered frame, the `SceneTree` notifies nodes inside the tree with a `constant Node.NOTIFICATION_PROCESS`. The nodes receive it and may call `Node._process` to update. To make use of notifications, see `notification` and `_notification`.
		Lastly, every object can also contain metadata (data about data). `set_meta` can be useful to store information that the object itself does not depend on. To keep your code clean, making excessive use of metadata is discouraged.
		**Note:** Unlike references to a `RefCounted`, references to an object stored in a variable can become invalid without being set to `null`. To check if an object has been deleted, do _not_ compare it against `null`. Instead, use `@GlobalScope.is_instance_valid`. It's also recommended to inherit from `RefCounted` for classes storing data instead of `Object`.
		**Note:** The `script` is not exposed like most properties. To set or get an object's `Script` in code, use `set_script` and `get_script`, respectively.
		**Note:** In a boolean context, an `Object` will evaluate to `false` if it is equal to `null` or it has been freed. Otherwise, an `Object` will always evaluate to `true`. See also `@GlobalScope.is_instance_valid`.
	"""
  script_changed: BuiltinSignal
  property_list_changed: BuiltinSignal

  @staticmethod
  def constructor()->Object:pass



  def get_pyscript(self)->Object:pass
  @staticmethod
  def cast(other:__object__.Object)->Object:pass


  def get_class(self)->str:
    """
				Returns the object's built-in class name, as a `String`. See also `is_class`.
				**Note:** This method ignores `class_name` declarations. If this object's script has defined a `class_name`, the base, built-in class name is returned instead.
			"""
    pass

  def is_class(self, class_:str)->bool:
    """
				Returns `true` if the object inherits from the given `class`. See also `get_class`.
				
				```gdscript
				var sprite2d = Sprite2D.new()
				sprite2d.is_class("Sprite2D") # Returns true
				sprite2d.is_class("Node")     # Returns true
				sprite2d.is_class("Node3D")   # Returns false
				```
				
				
				**Note:** This method ignores `class_name` declarations in the object's script.
			"""
    pass

  def set(self, property:__core__.StringName|str, value:Any)->None:
    """
				Assigns `value` to the given `property`. If the property does not exist or the given `value`'s type doesn't match, nothing happens.
				
				```gdscript
				var node = Node2D.new()
				node.set("global_scale", Vector2(8, 2.5))
				print(node.global_scale) # Prints (8.0, 2.5)
				```
				
				
				**Note:** In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def get(self, property:__core__.StringName|str)->Any:
    """
				Returns the `Variant` value of the given `property`. If the `property` does not exist, this method returns `null`.
				
				```gdscript
				var node = Node2D.new()
				node.rotation = 1.5
				var a = node.get("rotation") # a is 1.5
				```
				
				
				**Note:** In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def set_indexed(self, property_path:__core__.NodePath|str, value:Any)->None:
    """
				Assigns a new `value` to the property identified by the `property_path`. The path should be a `NodePath` relative to this object, and can use the colon character (`:`) to access nested properties.
				
				```gdscript
				var node = Node2D.new()
				node.set_indexed("position", Vector2(42, 0))
				node.set_indexed("position:y", -10)
				print(node.position) # Prints (42.0, -10.0)
				```
				
				
				**Note:** In C#, `property_path` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def get_indexed(self, property_path:__core__.NodePath|str)->Any:
    """
				Gets the object's property indexed by the given `property_path`. The path should be a `NodePath` relative to the current object and can use the colon character (`:`) to access nested properties.
				**Examples:** `"position:x"` or `"material:next_pass:blend_mode"`.
				
				```gdscript
				var node = Node2D.new()
				node.position = Vector2(5, -10)
				var a = node.get_indexed("position")   # a is Vector2(5, -10)
				var b = node.get_indexed("position:y") # b is -10
				```
				
				
				**Note:** In C#, `property_path` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new `StringName` on each call.
				**Note:** This method does not support actual paths to nodes in the `SceneTree`, only sub-property paths. In the context of nodes, use `Node.get_node_and_resource` instead.
			"""
    pass

  def get_property_list(self)->typedarray::Dictionary:
    """
				Returns the object's property list as an `Array` of dictionaries. Each `Dictionary` contains the following entries:
				- `name` is the property's name, as a `String`;
				- `class_name` is an empty `StringName`, unless the property is `constant TYPE_OBJECT` and it inherits from a class;
				- `type` is the property's type, as an `int` (see `enum Variant.Type`);
				- `hint` is _how_ the property is meant to be edited (see `enum PropertyHint`);
				- `hint_string` depends on the hint (see `enum PropertyHint`);
				- `usage` is a combination of `enum PropertyUsageFlags`.
				**Note:** In GDScript, all class members are treated as properties. In C# and GDExtension, it may be necessary to explicitly mark class members as Godot properties using decorators or attributes.
			"""
    pass

  def get_method_list(self)->typedarray::Dictionary:
    """
				Returns this object's methods and their signatures as an `Array` of dictionaries. Each `Dictionary` contains the following entries:
				- `name` is the name of the method, as a `String`;
				- `args` is an `Array` of dictionaries representing the arguments;
				- `default_args` is the default arguments as an `Array` of variants;
				- `flags` is a combination of `enum MethodFlags`;
				- `id` is the method's internal identifier `int`;
				- `return` is the returned value, as a `Dictionary`;
				**Note:** The dictionaries of `args` and `return` are formatted identically to the results of `get_property_list`, although not all entries are used.
			"""
    pass

  def property_can_revert(self, property:__core__.StringName|str)->bool:
    """
				Returns `true` if the given `property` has a custom default value. Use `property_get_revert` to get the `property`'s default value.
				**Note:** This method is used by the Inspector dock to display a revert icon. The object must implement `_property_can_revert` to customize the default value. If `_property_can_revert` is not implemented, this method returns `false`.
			"""
    pass

  def property_get_revert(self, property:__core__.StringName|str)->Any:
    """
				Returns the custom default value of the given `property`. Use `property_can_revert` to check if the `property` has a custom default value.
				**Note:** This method is used by the Inspector dock to display a revert icon. The object must implement `_property_get_revert` to customize the default value. If `_property_get_revert` is not implemented, this method returns `null`.
			"""
    pass

  def notification(self, what:int, reversed:bool=False)->None:
    """
				Sends the given `what` notification to all classes inherited by the object, triggering calls to `_notification`, starting from the highest ancestor (the `Object` class) and going down to the object's script.
				If `reversed` is `true`, the call order is reversed.
				
				```gdscript
				var player = Node2D.new()
				player.set_script(load("res://player.gd"))

				player.notification(NOTIFICATION_ENTER_TREE)
				# The call order is Object -> Node -> Node2D -> player.gd.

				player.notification(NOTIFICATION_ENTER_TREE, true)
				# The call order is player.gd -> Node2D -> Node -> Object.
				```
				
				
			"""
    pass

  def to_string(self)->str:
    """
				Returns a `String` representing the object. Defaults to `"<ClassName#RID>"`. Override `_to_string` to customize the string representation of the object.
			"""
    pass

  def get_instance_id(self)->int:
    """
				Returns the object's unique instance ID. This ID can be saved in `EncodedObjectAsID`, and can be used to retrieve this object instance with `@GlobalScope.instance_from_id`.
				**Note:** This ID is only useful during the current session. It won't correspond to a similar object if the ID is sent over a network, or loaded from a file at a later time.
			"""
    pass

  def set_script(self, script:Any)->None:
    """
				Attaches `script` to the object, and instantiates it. As a result, the script's `_init` is called. A `Script` is used to extend the object's functionality.
				If a script already exists, its instance is detached, and its property values and state are lost. Built-in property values are still kept.
			"""
    pass

  def get_script(self)->Any:
    """
				Returns the object's `Script` instance, or `null` if no script is attached.
			"""
    pass

  def set_meta(self, name:__core__.StringName|str, value:Any)->None:
    """
				Adds or changes the entry `name` inside the object's metadata. The metadata `value` can be any `Variant`, although some types cannot be serialized correctly.
				If `value` is `null`, the entry is removed. This is the equivalent of using `remove_meta`. See also `has_meta` and `get_meta`.
				**Note:** A metadata's name must be a valid identifier as per `StringName.is_valid_identifier` method.
				**Note:** Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
			"""
    pass

  def remove_meta(self, name:__core__.StringName|str)->None:
    """
				Removes the given entry `name` from the object's metadata. See also `has_meta`, `get_meta` and `set_meta`.
				**Note:** A metadata's name must be a valid identifier as per `StringName.is_valid_identifier` method.
				**Note:** Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
			"""
    pass

  def get_meta(self, name:__core__.StringName|str, default:Any=None)->Any:
    """
				Returns the object's metadata value for the given entry `name`. If the entry does not exist, returns `default`. If `default` is `null`, an error is also generated.
				**Note:** A metadata's name must be a valid identifier as per `StringName.is_valid_identifier` method.
				**Note:** Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
			"""
    pass

  def has_meta(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if a metadata entry is found with the given `name`. See also `get_meta`, `set_meta` and `remove_meta`.
				**Note:** A metadata's name must be a valid identifier as per `StringName.is_valid_identifier` method.
				**Note:** Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
			"""
    pass

  def get_meta_list(self)->typedarray::StringName:
    """
				Returns the object's metadata entry names as an `Array` of `StringName`s.
			"""
    pass

  def add_user_signal(self, signal:str, arguments:__core__.Array= __core__.Array.new0())->None:
    """
				Adds a user-defined signal named `signal`. Optional arguments for the signal can be added as an `Array` of dictionaries, each defining a `name` `String` and a `type` `int` (see `enum Variant.Type`). See also `has_user_signal` and `remove_user_signal`.
				
				```gdscript
				add_user_signal("hurt", `
					{ "name": "damage", "type": TYPE_INT },
					{ "name": "source", "type": TYPE_OBJECT }
				`)
				```
				
				
			"""
    pass

  def has_user_signal(self, signal:__core__.StringName|str)->bool:
    """
				Returns `true` if the given user-defined `signal` name exists. Only signals added with `add_user_signal` are included. See also `remove_user_signal`.
			"""
    pass

  def remove_user_signal(self, signal:__core__.StringName|str)->None:
    """
				Removes the given user signal `signal` from the object. See also `add_user_signal` and `has_user_signal`.
			"""
    pass

  def emit_signal(self, signal:__core__.StringName|str)->int:
    """
				Emits the given `signal` by name. The signal must exist, so it should be a built-in signal of this class or one of its inherited classes, or a user-defined signal (see `add_user_signal`). This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
				Returns `constant ERR_UNAVAILABLE` if `signal` does not exist or the parameters are invalid.
				
				```gdscript
				emit_signal("hit", "sword", 100)
				emit_signal("game_over")
				```
				
				
				**Note:** In C#, `signal` must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the `SignalName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def call(self, method:__core__.StringName|str)->Any:
    """
				Calls the `method` on the object and returns the result. This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
				
				```gdscript
				var node = Node3D.new()
				node.call("rotate", Vector3(1.0, 0.0, 0.0), 1.571)
				```
				
				
				**Note:** In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def call_deferred(self, method:__core__.StringName|str)->Any:
    """
				Calls the `method` on the object during idle time. Always returns `null`, **not** the method's result.
				Idle time happens mainly at the end of process and physics frames. In it, deferred calls will be run until there are none left, which means you can defer calls from other deferred calls and they'll still be run in the current idle time cycle. This means you should not call a method deferred from itself (or from a method called by it), as this causes infinite recursion the same way as if you had called the method directly.
				This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
				
				```gdscript
				var node = Node3D.new()
				node.call_deferred("rotate", Vector3(1.0, 0.0, 0.0), 1.571)
				```
				
				
				See also `Callable.call_deferred`.
				**Note:** In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new `StringName` on each call.
				**Note:** If you're looking to delay the function call by a frame, refer to the `signal SceneTree.process_frame` and `signal SceneTree.physics_frame` signals.
				```gdscript
				var node = Node3D.new()
				# Make a Callable and bind the arguments to the node's rotate() call.
				var callable = node.rotate.bind(Vector3(1.0, 0.0, 0.0), 1.571)
				# Connect the callable to the process_frame signal, so it gets called in the next process frame.
				# CONNECT_ONE_SHOT makes sure it only gets called once instead of every frame.
				get_tree().process_frame.connect(callable, CONNECT_ONE_SHOT)
				```
			"""
    pass

  def set_deferred(self, property:__core__.StringName|str, value:Any)->None:
    """
				Assigns `value` to the given `property`, at the end of the current frame. This is equivalent to calling `set` through `call_deferred`.
				
				```gdscript
				var node = Node2D.new()
				add_child(node)

				node.rotation = 1.5
				node.set_deferred("rotation", 3.0)
				print(node.rotation) # Prints 1.5

				await get_tree().process_frame
				print(node.rotation) # Prints 3.0
				```
				
				
				**Note:** In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def callv(self, method:__core__.StringName|str, arg_array:__core__.Array)->Any:
    """
				Calls the `method` on the object and returns the result. Unlike `call`, this method expects all parameters to be contained inside `arg_array`.
				
				```gdscript
				var node = Node3D.new()
				node.callv("rotate", `Vector3(1.0, 0.0, 0.0), 1.571`)
				```
				
				
				**Note:** In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def has_method(self, method:__core__.StringName|str)->bool:
    """
				Returns `true` if the given `method` name exists in the object.
				**Note:** In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def get_method_argument_count(self, method:__core__.StringName|str)->int:
    """
				Returns the number of arguments of the given `method` by name.
				**Note:** In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def has_signal(self, signal:__core__.StringName|str)->bool:
    """
				Returns `true` if the given `signal` name exists in the object.
				**Note:** In C#, `signal` must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the `SignalName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def get_signal_list(self)->typedarray::Dictionary:
    """
				Returns the list of existing signals as an `Array` of dictionaries.
				**Note:** Due of the implementation, each `Dictionary` is formatted very similarly to the returned values of `get_method_list`.
			"""
    pass

  def get_signal_connection_list(self, signal:__core__.StringName|str)->typedarray::Dictionary:
    """
				Returns an `Array` of connections for the given `signal` name. Each connection is represented as a `Dictionary` that contains three entries:
				- `code skip-lint`signal` is a reference to the `Signal`;
				- `callable` is a reference to the connected `Callable`;
				- `flags` is a combination of `enum ConnectFlags`.
			"""
    pass

  def get_incoming_connections(self)->typedarray::Dictionary:
    """
				Returns an `Array` of signal connections received by this object. Each connection is represented as a `Dictionary` that contains three entries:
				- `signal` is a reference to the `Signal`;
				- `callable` is a reference to the `Callable`;
				- `flags` is a combination of `enum ConnectFlags`.
			"""
    pass

  def connect(self, signal:__core__.StringName|str, callable:__core__.Callable, flags:int=0)->int:
    """
				Connects a `signal` by name to a `callable`. Optional `flags` can be also added to configure the connection's behavior (see `enum ConnectFlags` constants).
				A signal can only be connected once to the same `Callable`. If the signal is already connected, this method returns `constant ERR_INVALID_PARAMETER` and generates an error, unless the signal is connected with `constant CONNECT_REFERENCE_COUNTED`. To prevent this, use `is_connected` first to check for existing connections.
				**Note:** If the `callable`'s object is freed, the connection will be lost.
				**Note:** In GDScript, it is generally recommended to connect signals with `Signal.connect` instead.
				**Note:** This operation (and all other signal related operations) is thread-safe.
			"""
    pass

  def disconnect(self, signal:__core__.StringName|str, callable:__core__.Callable)->None:
    """
				Disconnects a `signal` by name from a given `callable`. If the connection does not exist, generates an error. Use `is_connected` to make sure that the connection exists.
			"""
    pass

  def is_connected(self, signal:__core__.StringName|str, callable:__core__.Callable)->bool:
    """
				Returns `true` if a connection exists between the given `signal` name and `callable`.
				**Note:** In C#, `signal` must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the `SignalName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def has_connections(self, signal:__core__.StringName|str)->bool:
    """
				Returns `true` if any connection exists on the given `signal` name.
				**Note:** In C#, `signal` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `SignalName` class to avoid allocating a new `StringName` on each call.
			"""
    pass

  def set_block_signals(self, enable:bool)->None:
    """
				If set to `true`, the object becomes unable to emit signals. As such, `emit_signal` and signal connections will not work, until it is set to `false`.
			"""
    pass

  def is_blocking_signals(self)->bool:
    """
				Returns `true` if the object is blocking its signals from being emitted. See `set_block_signals`.
			"""
    pass

  def notify_property_list_changed(self)->None:
    """
				Emits the `signal property_list_changed` signal. This is mainly used to refresh the editor, so that the Inspector and editor plugins are properly updated.
			"""
    pass

  def set_message_translation(self, enable:bool)->None:
    """
				If set to `true`, allows the object to translate messages with `tr` and `tr_n`. Enabled by default. See also `can_translate_messages`.
			"""
    pass

  def can_translate_messages(self)->bool:
    """
				Returns `true` if the object is allowed to translate messages with `tr` and `tr_n`. See also `set_message_translation`.
			"""
    pass

  def tr(self, message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->str:
    """
				Translates a `message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation. Note that most `Control` nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.
				If `can_translate_messages` is `false`, or no translation is available, this method returns the `message` without changes. See `set_message_translation`.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/internationalizing_games.html`Internationalizing games`/url`.
				**Note:** This method can't be used without an `Object` instance, as it requires the `can_translate_messages` method. To translate strings in a static context, use `TranslationServer.translate`.
			"""
    pass

  def tr_n(self, message:__core__.StringName|str, plural_message:__core__.StringName|str, n:int, context:__core__.StringName|str= __core__.StringName.new0())->str:
    """
				Translates a `message` or `plural_message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation.
				If `can_translate_messages` is `false`, or no translation is available, this method returns `message` or `plural_message`, without changes. See `set_message_translation`.
				The `n` is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/localization_using_gettext.html`Localization using gettext`/url`.
				**Note:** Negative and `float` numbers may not properly apply to some countable subjects. It's recommended to handle these cases with `tr`.
				**Note:** This method can't be used without an `Object` instance, as it requires the `can_translate_messages` method. To translate strings in a static context, use `TranslationServer.translate_plural`.
			"""
    pass

  def get_translation_domain(self)->__core__.StringName:
    """
				Returns the name of the translation domain used by `tr` and `tr_n`. See also `TranslationServer`.
			"""
    pass

  def set_translation_domain(self, domain:__core__.StringName|str)->None:
    """
				Sets the name of the translation domain used by `tr` and `tr_n`. See also `TranslationServer`.
			"""
    pass

  def is_queued_for_deletion(self)->bool:
    """
				Returns `true` if the `Node.queue_free` method was called for the object.
			"""
    pass

  def cancel_free(self)->None:
    """
				If this method is called during `constant NOTIFICATION_PREDELETE`, this object will reject being freed and will remain allocated. This is mostly an internal function used for error handling to avoid the user from freeing objects when they are not intended to.
			"""
    pass


