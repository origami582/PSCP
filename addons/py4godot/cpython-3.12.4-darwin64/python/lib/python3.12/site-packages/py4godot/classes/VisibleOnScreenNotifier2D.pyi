from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__



class VisibleOnScreenNotifier2D(__node2d__.Node2D):
  """
		`VisibleOnScreenNotifier2D` represents a rectangular region of 2D space. When any part of this region becomes visible on screen or in a viewport, it will emit a `signal screen_entered` signal, and likewise it will emit a `signal screen_exited` signal when no part of it remains visible.
		If you want a node to be enabled automatically when this region is visible on screen, use `VisibleOnScreenEnabler2D`.
		**Note:** `VisibleOnScreenNotifier2D` uses the render culling code to determine whether it's visible on screen, so it won't function unless `CanvasItem.visible` is set to `true`.
	"""
  screen_entered: BuiltinSignal
  screen_exited: BuiltinSignal

  @staticmethod
  def constructor()->VisibleOnScreenNotifier2D:pass



  @staticmethod
  def cast(other:__object__.Object)->VisibleOnScreenNotifier2D:pass


  @property
  def rect(self)->__core__.Rect2:
    """"""
    pass
  @rect.setter
  def rect(self,  value:__core__.Rect2)->None:
    """"""
    pass
  def set_rect(self, rect:__core__.Rect2)->None:
    """"""
    pass

  def get_rect(self)->__core__.Rect2:
    """"""
    pass

  def is_on_screen(self)->bool:
    """
				If `true`, the bounding rectangle is on the screen.
				**Note:** It takes one frame for the `VisibleOnScreenNotifier2D`'s visibility to be determined once added to the scene tree, so this method will always return `false` right after it is instantiated, before the draw pass.
			"""
    pass


