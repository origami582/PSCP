from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventWithModifiers as __inputeventwithmodifiers__



class InputEventKey(__inputeventwithmodifiers__.InputEventWithModifiers):
  """
		An input event for keys on a keyboard. Supports key presses, key releases and `echo` events. It can also be received in `Node._unhandled_key_input`.
		**Note:** Events received from the keyboard usually have all properties set. Event mappings should have only one of the `keycode`, `physical_keycode` or `unicode` set.
		When events are compared, properties are checked in the following priority - `keycode`, `physical_keycode` and `unicode`. Events with the first matching value will be considered equal.
	"""

  @staticmethod
  def constructor()->InputEventKey:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventKey:pass


  @property
  def pressed(self)->bool:
    """"""
    pass
  @pressed.setter
  def pressed(self,  value:bool)->None:
    """"""
    pass
  @property
  def keycode(self)->int:
    """"""
    pass
  @keycode.setter
  def keycode(self,  value:int)->None:
    """"""
    pass
  @property
  def physical_keycode(self)->int:
    """"""
    pass
  @physical_keycode.setter
  def physical_keycode(self,  value:int)->None:
    """"""
    pass
  @property
  def key_label(self)->int:
    """"""
    pass
  @key_label.setter
  def key_label(self,  value:int)->None:
    """"""
    pass
  @property
  def unicode(self)->int:
    """"""
    pass
  @unicode.setter
  def unicode(self,  value:int)->None:
    """"""
    pass
  @property
  def location(self)->int:
    """"""
    pass
  @location.setter
  def location(self,  value:int)->None:
    """"""
    pass
  @property
  def echo(self)->bool:
    """"""
    pass
  @echo.setter
  def echo(self,  value:bool)->None:
    """"""
    pass
  def set_pressed(self, pressed:bool)->None:
    """"""
    pass

  def set_keycode(self, keycode:int )->None:
    """"""
    pass

  def get_keycode(self)->int:
    """"""
    pass

  def set_physical_keycode(self, physical_keycode:int )->None:
    """"""
    pass

  def get_physical_keycode(self)->int:
    """"""
    pass

  def set_key_label(self, key_label:int )->None:
    """"""
    pass

  def get_key_label(self)->int:
    """"""
    pass

  def set_unicode(self, unicode:int)->None:
    """"""
    pass

  def get_unicode(self)->int:
    """"""
    pass

  def set_location(self, location:int )->None:
    """"""
    pass

  def get_location(self)->int:
    """"""
    pass

  def set_echo(self, echo:bool)->None:
    """"""
    pass

  def get_keycode_with_modifiers(self)->int:
    """
				Returns the Latin keycode combined with modifier keys such as `kbd`Shift`/kbd` or `kbd`Alt`/kbd`. See also `InputEventWithModifiers`.
				To get a human-readable representation of the `InputEventKey` with modifiers, use `OS.get_keycode_string(event.get_keycode_with_modifiers())` where `event` is the `InputEventKey`.
			"""
    pass

  def get_physical_keycode_with_modifiers(self)->int:
    """
				Returns the physical keycode combined with modifier keys such as `kbd`Shift`/kbd` or `kbd`Alt`/kbd`. See also `InputEventWithModifiers`.
				To get a human-readable representation of the `InputEventKey` with modifiers, use `OS.get_keycode_string(event.get_physical_keycode_with_modifiers())` where `event` is the `InputEventKey`.
			"""
    pass

  def get_key_label_with_modifiers(self)->int:
    """
				Returns the localized key label combined with modifier keys such as `kbd`Shift`/kbd` or `kbd`Alt`/kbd`. See also `InputEventWithModifiers`.
				To get a human-readable representation of the `InputEventKey` with modifiers, use `OS.get_keycode_string(event.get_key_label_with_modifiers())` where `event` is the `InputEventKey`.
			"""
    pass

  def as_text_keycode(self)->str:
    """
				Returns a `String` representation of the event's `keycode` and modifiers.
			"""
    pass

  def as_text_physical_keycode(self)->str:
    """
				Returns a `String` representation of the event's `physical_keycode` and modifiers.
			"""
    pass

  def as_text_key_label(self)->str:
    """
				Returns a `String` representation of the event's `key_label` and modifiers.
			"""
    pass

  def as_text_location(self)->str:
    """
				Returns a `String` representation of the event's `location`. This will be a blank string if the event is not specific to a location.
			"""
    pass


