from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.CodeEdit as __codeedit__



class SyntaxHighlighter(__resource__.Resource):
  """
		Base class for syntax highlighters. Provides syntax highlighting data to a `TextEdit`. The associated `TextEdit` will call into the `SyntaxHighlighter` on an as-needed basis.
		**Note:** A `SyntaxHighlighter` instance should not be used across multiple `TextEdit` nodes.
	"""

  @staticmethod
  def constructor()->SyntaxHighlighter:pass



  @staticmethod
  def cast(other:__object__.Object)->SyntaxHighlighter:pass


  def _get_line_syntax_highlighting(self, line:int)->__core__.Dictionary:
    """
				Virtual method which can be overridden to return syntax highlighting data.
				See `get_line_syntax_highlighting` for more details.
			"""
    pass

  def _clear_highlighting_cache(self)->None:
    """
				Virtual method which can be overridden to clear any local caches.
			"""
    pass

  def _update_cache(self)->None:
    """
				Virtual method which can be overridden to update any local caches.
			"""
    pass

  def get_line_syntax_highlighting(self, line:int)->__core__.Dictionary:
    """
				Returns the syntax highlighting data for the line at index `line`. If the line is not cached, calls `_get_line_syntax_highlighting` first to calculate the data.
				Each entry is a column number containing a nested `Dictionary`. The column number denotes the start of a region, the region will end if another region is found, or at the end of the line. The nested `Dictionary` contains the data for that region. Currently only the key `"color"` is supported.
				**Example:** Possible return value. This means columns `0` to `4` should be red, and columns `5` to the end of the line should be green:
				```gdscript
				{
					0: {
						"color": Color(1, 0, 0)
					},
					5: {
						"color": Color(0, 1, 0)
					}
				}
				```
			"""
    pass

  def update_cache(self)->None:
    """
				Clears then updates the `SyntaxHighlighter` caches. Override `_update_cache` for a callback.
				**Note:** This is called automatically when the associated `TextEdit` node, updates its own cache.
			"""
    pass

  def clear_highlighting_cache(self)->None:
    """
				Clears all cached syntax highlighting data.
				Then calls overridable method `_clear_highlighting_cache`.
			"""
    pass

  def get_text_edit(self)->__textedit__.TextEdit|__codeedit__.CodeEdit:
    """
				Returns the associated `TextEdit` node.
			"""
    pass


