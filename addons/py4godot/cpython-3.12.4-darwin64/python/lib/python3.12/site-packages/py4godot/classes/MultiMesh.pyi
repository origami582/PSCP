from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.MultiMesh as __multimesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.Resource as __resource__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.PointMesh as __pointmesh__


class TransformFormat:
  TRANSFORM_2D:int = 0
  TRANSFORM_3D:int = 1
class PhysicsInterpolationQuality:
  INTERP_QUALITY_FAST:int = 0
  INTERP_QUALITY_HIGH:int = 1


class MultiMesh(__resource__.Resource):
  """
		MultiMesh provides low-level mesh instancing. Drawing thousands of `MeshInstance3D` nodes can be slow, since each object is submitted to the GPU then drawn individually.
		MultiMesh is much faster as it can draw thousands of instances with a single draw call, resulting in less API overhead.
		As a drawback, if the instances are too far away from each other, performance may be reduced as every single instance will always render (they are spatially indexed as one, for the whole object).
		Since instances may have any behavior, the AABB used for visibility must be provided by the user.
		**Note:** A MultiMesh is a single object, therefore the same maximum lights per object restriction applies. This means, that once the maximum lights are consumed by one or more instances, the rest of the MultiMesh instances will **not** receive any lighting.
		**Note:** Blend Shapes will be ignored if used in a MultiMesh.
	"""

  @staticmethod
  def constructor()->MultiMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiMesh:pass


  @property
  def transform_format(self)->int:
    """"""
    pass
  @transform_format.setter
  def transform_format(self,  value:int)->None:
    """"""
    pass
  @property
  def use_colors(self)->bool:
    """"""
    pass
  @use_colors.setter
  def use_colors(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_custom_data(self)->bool:
    """"""
    pass
  @use_custom_data.setter
  def use_custom_data(self,  value:bool)->None:
    """"""
    pass
  @property
  def custom_aabb(self)->__core__.AABB:
    """"""
    pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  @property
  def instance_count(self)->int:
    """"""
    pass
  @instance_count.setter
  def instance_count(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_instance_count(self)->int:
    """"""
    pass
  @visible_instance_count.setter
  def visible_instance_count(self,  value:int)->None:
    """"""
    pass
  @property
  def mesh(self)->__immediatemesh__.ImmediateMesh|__primitivemesh__.PrimitiveMesh|__torusmesh__.TorusMesh|__capsulemesh__.CapsuleMesh|__textmesh__.TextMesh|__planemesh__.PlaneMesh|__tubetrailmesh__.TubeTrailMesh|__quadmesh__.QuadMesh|__boxmesh__.BoxMesh|__prismmesh__.PrismMesh|__arraymesh__.ArrayMesh|__cylindermesh__.CylinderMesh|__ribbontrailmesh__.RibbonTrailMesh|__mesh__.Mesh|__placeholdermesh__.PlaceholderMesh|__spheremesh__.SphereMesh|__pointmesh__.PointMesh:
    """"""
    pass
  @mesh.setter
  def mesh(self,  value:__mesh__.Mesh)->None:
    """"""
    pass
  @property
  def buffer(self)->__core__.PackedFloat32Array:
    """"""
    pass
  @buffer.setter
  def buffer(self,  value:__core__.PackedFloat32Array)->None:
    """"""
    pass
  @property
  def transform_array(self)->__core__.PackedVector3Array:
    """"""
    pass
  @transform_array.setter
  def transform_array(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def transform_2d_array(self)->__core__.PackedVector2Array:
    """"""
    pass
  @transform_2d_array.setter
  def transform_2d_array(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def color_array(self)->__core__.PackedColorArray:
    """"""
    pass
  @color_array.setter
  def color_array(self,  value:__core__.PackedColorArray)->None:
    """"""
    pass
  @property
  def custom_data_array(self)->__core__.PackedColorArray:
    """"""
    pass
  @custom_data_array.setter
  def custom_data_array(self,  value:__core__.PackedColorArray)->None:
    """"""
    pass
  @property
  def physics_interpolation_quality(self)->int:
    """"""
    pass
  @physics_interpolation_quality.setter
  def physics_interpolation_quality(self,  value:int)->None:
    """"""
    pass
  def set_mesh(self, mesh:__mesh__.Mesh)->None:
    """"""
    pass

  def get_mesh(self)->__immediatemesh__.ImmediateMesh|__primitivemesh__.PrimitiveMesh|__torusmesh__.TorusMesh|__capsulemesh__.CapsuleMesh|__textmesh__.TextMesh|__planemesh__.PlaneMesh|__tubetrailmesh__.TubeTrailMesh|__quadmesh__.QuadMesh|__boxmesh__.BoxMesh|__prismmesh__.PrismMesh|__arraymesh__.ArrayMesh|__cylindermesh__.CylinderMesh|__ribbontrailmesh__.RibbonTrailMesh|__mesh__.Mesh|__placeholdermesh__.PlaceholderMesh|__spheremesh__.SphereMesh|__pointmesh__.PointMesh:
    """"""
    pass

  def set_use_colors(self, enable:bool)->None:
    """"""
    pass

  def is_using_colors(self)->bool:
    """"""
    pass

  def set_use_custom_data(self, enable:bool)->None:
    """"""
    pass

  def is_using_custom_data(self)->bool:
    """"""
    pass

  def set_transform_format(self, format:int )->None:
    """"""
    pass

  def get_transform_format(self)->int:
    """"""
    pass

  def set_instance_count(self, count:int)->None:
    """"""
    pass

  def get_instance_count(self)->int:
    """"""
    pass

  def set_visible_instance_count(self, count:int)->None:
    """"""
    pass

  def get_visible_instance_count(self)->int:
    """"""
    pass

  def set_physics_interpolation_quality(self, quality:int )->None:
    """"""
    pass

  def get_physics_interpolation_quality(self)->int:
    """"""
    pass

  def set_instance_transform(self, instance:int, transform:__core__.Transform3D)->None:
    """
				Sets the `Transform3D` for a specific instance.
			"""
    pass

  def set_instance_transform_2d(self, instance:int, transform:__core__.Transform2D)->None:
    """
				Sets the `Transform2D` for a specific instance.
			"""
    pass

  def get_instance_transform(self, instance:int)->__core__.Transform3D:
    """
				Returns the `Transform3D` of a specific instance.
			"""
    pass

  def get_instance_transform_2d(self, instance:int)->__core__.Transform2D:
    """
				Returns the `Transform2D` of a specific instance.
			"""
    pass

  def set_instance_color(self, instance:int, color:__core__.Color)->None:
    """
				Sets the color of a specific instance by _multiplying_ the mesh's existing vertex colors. This allows for different color tinting per instance.
				**Note:** Each component is stored in 32 bits in the Forward+ and Mobile rendering methods, but is packed into 16 bits in the Compatibility rendering method.
				For the color to take effect, ensure that `use_colors` is `true` on the `MultiMesh` and `BaseMaterial3D.vertex_color_use_as_albedo` is `true` on the material. If you intend to set an absolute color instead of tinting, make sure the material's albedo color is set to pure white (`Color(1, 1, 1)`).
			"""
    pass

  def get_instance_color(self, instance:int)->__core__.Color:
    """
				Gets a specific instance's color multiplier.
			"""
    pass

  def set_instance_custom_data(self, instance:int, custom_data:__core__.Color)->None:
    """
				Sets custom data for a specific instance. `custom_data` is a `Color` type only to contain 4 floating-point numbers.
				**Note:** Each number is stored in 32 bits in the Forward+ and Mobile rendering methods, but is packed into 16 bits in the Compatibility rendering method.
				For the custom data to be used, ensure that `use_custom_data` is `true`.
				This custom instance data has to be manually accessed in your custom shader using `INSTANCE_CUSTOM`.
			"""
    pass

  def get_instance_custom_data(self, instance:int)->__core__.Color:
    """
				Returns the custom data that has been set for a specific instance.
			"""
    pass

  def reset_instance_physics_interpolation(self, instance:int)->None:
    """
				When using _physics interpolation_, this function allows you to prevent interpolation on an instance in the current physics tick.
				This allows you to move instances instantaneously, and should usually be used when initially placing an instance such as a bullet to prevent graphical glitches.
			"""
    pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None:
    """"""
    pass

  def get_custom_aabb(self)->__core__.AABB:
    """"""
    pass

  def get_aabb(self)->__core__.AABB:
    """
				Returns the visibility axis-aligned bounding box in local space.
			"""
    pass

  def get_buffer(self)->__core__.PackedFloat32Array:
    """"""
    pass

  def set_buffer(self, buffer:__core__.PackedFloat32Array)->None:
    """"""
    pass

  def set_buffer_interpolated(self, buffer_curr:__core__.PackedFloat32Array, buffer_prev:__core__.PackedFloat32Array)->None:
    """
				An alternative to setting the `buffer` property, which can be used with _physics interpolation_. This method takes two arrays, and can set the data for the current and previous tick in one go. The renderer will automatically interpolate the data at each frame.
				This is useful for situations where the order of instances may change from physics tick to tick, such as particle systems.
				When the order of instances is coherent, the simpler alternative of setting `buffer` can still be used with interpolation.
			"""
    pass


