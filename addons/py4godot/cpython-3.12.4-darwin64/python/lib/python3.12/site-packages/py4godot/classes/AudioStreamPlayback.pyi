from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioSamplePlayback as __audiosampleplayback__
import py4godot.classes.RefCounted as __refcounted__



class AudioStreamPlayback(__refcounted__.RefCounted):
  """
		Can play, loop, pause a scroll through audio. See `AudioStream` and `AudioStreamOggVorbis` for usage.
	"""

  @staticmethod
  def constructor()->AudioStreamPlayback:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamPlayback:pass


  def _start(self, from_pos:float)->None:
    """
				Override this method to customize what happens when the playback starts at the given position, such as by calling `AudioStreamPlayer.play`.
			"""
    pass

  def _stop(self)->None:
    """
				Override this method to customize what happens when the playback is stopped, such as by calling `AudioStreamPlayer.stop`.
			"""
    pass

  def _is_playing(self)->bool:
    """
				Overridable method. Should return `true` if this playback is active and playing its audio stream.
			"""
    pass

  def _get_loop_count(self)->int:
    """
				Overridable method. Should return how many times this audio stream has looped. Most built-in playbacks always return `0`.
			"""
    pass

  def _get_playback_position(self)->float:
    """
				Overridable method. Should return the current progress along the audio stream, in seconds.
			"""
    pass

  def _seek(self, position:float)->None:
    """
				Override this method to customize what happens when seeking this audio stream at the given `position`, such as by calling `AudioStreamPlayer.seek`.
			"""
    pass

  def _tag_used_streams(self)->None:
    """
				Overridable method. Called whenever the audio stream is mixed if the playback is active and `AudioServer.set_enable_tagging_used_audio_streams` has been set to `true`. Editor plugins may use this method to "tag" the current position along the audio stream and display it in a preview.
			"""
    pass

  def _set_parameter(self, name:__core__.StringName|str, value:Any)->None:
    """
				Set the current value of a playback parameter by name (see `AudioStream._get_parameter_list`).
			"""
    pass

  def _get_parameter(self, name:__core__.StringName|str)->Any:
    """
				Return the current value of a playback parameter by name (see `AudioStream._get_parameter_list`).
			"""
    pass

  def set_sample_playback(self, playback_sample:__audiosampleplayback__.AudioSamplePlayback)->None:
    """
				Associates `AudioSamplePlayback` to this `AudioStreamPlayback` for playing back the audio sample of this stream.
			"""
    pass

  def get_sample_playback(self)->__audiosampleplayback__.AudioSamplePlayback:
    """
				Returns the `AudioSamplePlayback` associated with this `AudioStreamPlayback` for playing back the audio sample of this stream.
			"""
    pass

  def mix_audio(self, rate_scale:float, frames:int)->__core__.PackedVector2Array:
    """
				Mixes up to `frames` of audio from the stream from the current position, at a rate of `rate_scale`, advancing the stream.
				Returns a `PackedVector2Array` where each element holds the left and right channel volume levels of each frame.
				**Note:** Can return fewer frames than requested, make sure to use the size of the return value.
			"""
    pass

  def start(self, from_pos:float=0.0)->None:
    """
				Starts the stream from the given `from_pos`, in seconds.
			"""
    pass

  def seek(self, time:float=0.0)->None:
    """
				Seeks the stream at the given `time`, in seconds.
			"""
    pass

  def stop(self)->None:
    """
				Stops the stream.
			"""
    pass

  def get_loop_count(self)->int:
    """
				Returns the number of times the stream has looped.
			"""
    pass

  def get_playback_position(self)->float:
    """
				Returns the current position in the stream, in seconds.
			"""
    pass

  def is_playing(self)->bool:
    """
				Returns `true` if the stream is playing.
			"""
    pass


