from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CryptoKey as __cryptokey__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.X509Certificate as __x509certificate__



class TLSOptions(__refcounted__.RefCounted):
  """
		TLSOptions abstracts the configuration options for the `StreamPeerTLS` and `PacketPeerDTLS` classes.
		Objects of this class cannot be instantiated directly, and one of the static methods `client`, `client_unsafe`, or `server` should be used instead.
		
		```gdscript
		# Create a TLS client configuration which uses our custom trusted CA chain.
		var client_trusted_cas = load("res://my_trusted_cas.crt")
		var client_tls_options = TLSOptions.client(client_trusted_cas)

		# Create a TLS server configuration.
		var server_certs = load("res://my_server_cas.crt")
		var server_key = load("res://my_server_key.key")
		var server_tls_options = TLSOptions.server(server_key, server_certs)
		```
		
	"""

  @staticmethod
  def constructor()->TLSOptions:pass



  @staticmethod
  def cast(other:__object__.Object)->TLSOptions:pass


  @staticmethod
  def client(trusted_chain:__x509certificate__.X509Certificate= __x509certificate__.X509Certificate.constructor(), common_name_override:str= __core__.String.new0())->__tlsoptions__.TLSOptions:
    """
				Creates a TLS client configuration which validates certificates and their common names (fully qualified domain names).
				You can specify a custom `trusted_chain` of certification authorities (the default CA list will be used if `null`), and optionally provide a `common_name_override` if you expect the certificate to have a common name other than the server FQDN.
				**Note:** On the Web platform, TLS verification is always enforced against the CA list of the web browser. This is considered a security feature.
			"""
    pass

  @staticmethod
  def client_unsafe(trusted_chain:__x509certificate__.X509Certificate= __x509certificate__.X509Certificate.constructor())->__tlsoptions__.TLSOptions:
    """
				Creates an **unsafe** TLS client configuration where certificate validation is optional. You can optionally provide a valid `trusted_chain`, but the common name of the certificates will never be checked. Using this configuration for purposes other than testing **is not recommended**.
				**Note:** On the Web platform, TLS verification is always enforced against the CA list of the web browser. This is considered a security feature.
			"""
    pass

  @staticmethod
  def server(key:__cryptokey__.CryptoKey, certificate:__x509certificate__.X509Certificate)->__tlsoptions__.TLSOptions:
    """
				Creates a TLS server configuration using the provided `key` and `certificate`.
				**Note:** The `certificate` should include the full certificate chain up to the signing CA (certificates file can be concatenated using a general purpose text editor).
			"""
    pass

  def is_server(self)->bool:
    """
				Returns `true` if created with `TLSOptions.server`, `false` otherwise.
			"""
    pass

  def is_unsafe_client(self)->bool:
    """
				Returns `true` if created with `TLSOptions.client_unsafe`, `false` otherwise.
			"""
    pass

  def get_common_name_override(self)->str:
    """
				Returns the common name (domain name) override specified when creating with `TLSOptions.client`.
			"""
    pass

  def get_trusted_ca_chain(self)->__x509certificate__.X509Certificate:
    """
				Returns the CA `X509Certificate` chain specified when creating with `TLSOptions.client` or `TLSOptions.client_unsafe`.
			"""
    pass

  def get_private_key(self)->__cryptokey__.CryptoKey:
    """
				Returns the `CryptoKey` specified when creating with `TLSOptions.server`.
			"""
    pass

  def get_own_certificate(self)->__x509certificate__.X509Certificate:
    """
				Returns the `X509Certificate` specified when creating with `TLSOptions.server`.
			"""
    pass


