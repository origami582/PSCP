from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.HBoxContainer as __hboxcontainer__



class GraphFrame(__graphelement__.GraphElement):
  """
		GraphFrame is a special `GraphElement` to which other `GraphElement`s can be attached. It can be configured to automatically resize to enclose all attached `GraphElement`s. If the frame is moved, all the attached `GraphElement`s inside it will be moved as well.
		A GraphFrame is always kept behind the connection layer and other `GraphElement`s inside a `GraphEdit`.
	"""
  autoshrink_changed: BuiltinSignal

  @staticmethod
  def constructor()->GraphFrame:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphFrame:pass


  @property
  def title(self)->str:
    """"""
    pass
  @title.setter
  def title(self,  value:str)->None:
    """"""
    pass
  @property
  def autoshrink_enabled(self)->bool:
    """"""
    pass
  @autoshrink_enabled.setter
  def autoshrink_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def autoshrink_margin(self)->int:
    """"""
    pass
  @autoshrink_margin.setter
  def autoshrink_margin(self,  value:int)->None:
    """"""
    pass
  @property
  def drag_margin(self)->int:
    """"""
    pass
  @drag_margin.setter
  def drag_margin(self,  value:int)->None:
    """"""
    pass
  @property
  def tint_color_enabled(self)->bool:
    """"""
    pass
  @tint_color_enabled.setter
  def tint_color_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def tint_color(self)->__core__.Color:
    """"""
    pass
  @tint_color.setter
  def tint_color(self,  value:__core__.Color)->None:
    """"""
    pass
  def set_title(self, title:str)->None:
    """"""
    pass

  def get_title(self)->str:
    """"""
    pass

  def get_titlebar_hbox(self)->__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorresourcepicker__.EditorResourcePicker|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__editorscriptpicker__.EditorScriptPicker|__editortoaster__.EditorToaster|__hboxcontainer__.HBoxContainer:
    """
				Returns the `HBoxContainer` used for the title bar, only containing a `Label` for displaying the title by default.
				This can be used to add custom controls to the title bar such as option or close buttons.
			"""
    pass

  def set_autoshrink_enabled(self, shrink:bool)->None:
    """"""
    pass

  def is_autoshrink_enabled(self)->bool:
    """"""
    pass

  def set_autoshrink_margin(self, autoshrink_margin:int)->None:
    """"""
    pass

  def get_autoshrink_margin(self)->int:
    """"""
    pass

  def set_drag_margin(self, drag_margin:int)->None:
    """"""
    pass

  def get_drag_margin(self)->int:
    """"""
    pass

  def set_tint_color_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_tint_color_enabled(self)->bool:
    """"""
    pass

  def set_tint_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_tint_color(self)->__core__.Color:
    """"""
    pass


