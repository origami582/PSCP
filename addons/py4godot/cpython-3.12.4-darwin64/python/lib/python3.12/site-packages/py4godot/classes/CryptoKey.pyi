from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class CryptoKey(__resource__.Resource):
  """
		The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other `Resource`.
		They can be used to generate a self-signed `X509Certificate` via `Crypto.generate_self_signed_certificate` and as private key in `StreamPeerTLS.accept_stream` along with the appropriate certificate.
	"""

  @staticmethod
  def constructor()->CryptoKey:pass



  @staticmethod
  def cast(other:__object__.Object)->CryptoKey:pass


  def save(self, path:str, public_only:bool=False)->int:
    """
				Saves a key to the given `path`. If `public_only` is `true`, only the public key will be saved.
				**Note:** `path` should be a "*.pub" file if `public_only` is `true`, a "*.key" file otherwise.
			"""
    pass

  def load(self, path:str, public_only:bool=False)->int:
    """
				Loads a key from `path`. If `public_only` is `true`, only the public key will be loaded.
				**Note:** `path` should be a "*.pub" file if `public_only` is `true`, a "*.key" file otherwise.
			"""
    pass

  def is_public_only(self)->bool:
    """
				Returns `true` if this CryptoKey only has the public part, and not the private one.
			"""
    pass

  def save_to_string(self, public_only:bool=False)->str:
    """
				Returns a string containing the key in PEM format. If `public_only` is `true`, only the public key will be included.
			"""
    pass

  def load_from_string(self, string_key:str, public_only:bool=False)->int:
    """
				Loads a key from the given `string_key`. If `public_only` is `true`, only the public key will be loaded.
			"""
    pass


