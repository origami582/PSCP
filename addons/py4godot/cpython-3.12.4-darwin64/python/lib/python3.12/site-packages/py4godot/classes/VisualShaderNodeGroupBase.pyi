from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeResizableBase as __visualshadernoderesizablebase__



class VisualShaderNodeGroupBase(__visualshadernoderesizablebase__.VisualShaderNodeResizableBase):
  """
		Currently, has no direct usage, use the derived classes instead.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeGroupBase:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeGroupBase:pass


  def set_inputs(self, inputs:str)->None:
    """
				Defines all input ports using a `String` formatted as a colon-separated list: `id,type,name;` (see `add_input_port`).
			"""
    pass

  def get_inputs(self)->str:
    """
				Returns a `String` description of the input ports as a colon-separated list using the format `id,type,name;` (see `add_input_port`).
			"""
    pass

  def set_outputs(self, outputs:str)->None:
    """
				Defines all output ports using a `String` formatted as a colon-separated list: `id,type,name;` (see `add_output_port`).
			"""
    pass

  def get_outputs(self)->str:
    """
				Returns a `String` description of the output ports as a colon-separated list using the format `id,type,name;` (see `add_output_port`).
			"""
    pass

  def is_valid_port_name(self, name:str)->bool:
    """
				Returns `true` if the specified port name does not override an existed port name and is valid within the shader.
			"""
    pass

  def add_input_port(self, id:int, type:int, name:str)->None:
    """
				Adds an input port with the specified `type` (see `enum VisualShaderNode.PortType`) and `name`.
			"""
    pass

  def remove_input_port(self, id:int)->None:
    """
				Removes the specified input port.
			"""
    pass

  def get_input_port_count(self)->int:
    """
				Returns the number of input ports in use. Alternative for `get_free_input_port_id`.
			"""
    pass

  def has_input_port(self, id:int)->bool:
    """
				Returns `true` if the specified input port exists.
			"""
    pass

  def clear_input_ports(self)->None:
    """
				Removes all previously specified input ports.
			"""
    pass

  def add_output_port(self, id:int, type:int, name:str)->None:
    """
				Adds an output port with the specified `type` (see `enum VisualShaderNode.PortType`) and `name`.
			"""
    pass

  def remove_output_port(self, id:int)->None:
    """
				Removes the specified output port.
			"""
    pass

  def get_output_port_count(self)->int:
    """
				Returns the number of output ports in use. Alternative for `get_free_output_port_id`.
			"""
    pass

  def has_output_port(self, id:int)->bool:
    """
				Returns `true` if the specified output port exists.
			"""
    pass

  def clear_output_ports(self)->None:
    """
				Removes all previously specified output ports.
			"""
    pass

  def set_input_port_name(self, id:int, name:str)->None:
    """
				Renames the specified input port.
			"""
    pass

  def set_input_port_type(self, id:int, type:int)->None:
    """
				Sets the specified input port's type (see `enum VisualShaderNode.PortType`).
			"""
    pass

  def set_output_port_name(self, id:int, name:str)->None:
    """
				Renames the specified output port.
			"""
    pass

  def set_output_port_type(self, id:int, type:int)->None:
    """
				Sets the specified output port's type (see `enum VisualShaderNode.PortType`).
			"""
    pass

  def get_free_input_port_id(self)->int:
    """
				Returns a free input port ID which can be used in `add_input_port`.
			"""
    pass

  def get_free_output_port_id(self)->int:
    """
				Returns a free output port ID which can be used in `add_output_port`.
			"""
    pass


