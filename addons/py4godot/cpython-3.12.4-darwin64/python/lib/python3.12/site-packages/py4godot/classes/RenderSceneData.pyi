from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__



class RenderSceneData(__object__.Object):
  """
		Abstract scene data object, exists for the duration of rendering a single viewport.
		**Note:** This is an internal rendering server object, do not instantiate this from script.
	"""

  @staticmethod
  def constructor()->RenderSceneData:pass



  @staticmethod
  def cast(other:__object__.Object)->RenderSceneData:pass


  def get_cam_transform(self)->__core__.Transform3D:
    """
				Returns the camera transform used to render this frame.
				**Note:** If more than one view is rendered, this will return a centered transform.
			"""
    pass

  def get_cam_projection(self)->__core__.Projection:
    """
				Returns the camera projection used to render this frame.
				**Note:** If more than one view is rendered, this will return a combined projection.
			"""
    pass

  def get_view_count(self)->int:
    """
				Returns the number of views being rendered.
			"""
    pass

  def get_view_eye_offset(self, view:int)->__core__.Vector3:
    """
				Returns the eye offset per view used to render this frame. This is the offset between our camera transform and the eye transform.
			"""
    pass

  def get_view_projection(self, view:int)->__core__.Projection:
    """
				Returns the view projection per view used to render this frame.
				**Note:** If a single view is rendered, this returns the camera projection. If more than one view is rendered, this will return a projection for the given view including the eye offset.
			"""
    pass

  def get_uniform_buffer(self)->__core__.RID:
    """
				Return the `RID` of the uniform buffer containing the scene data as a UBO.
			"""
    pass


