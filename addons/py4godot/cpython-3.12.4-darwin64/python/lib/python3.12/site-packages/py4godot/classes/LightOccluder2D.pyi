from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.OccluderPolygon2D as __occluderpolygon2d__



class LightOccluder2D(__node2d__.Node2D):
  """
		Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an `OccluderPolygon2D` in order for the shadow to be computed.
	"""

  @staticmethod
  def constructor()->LightOccluder2D:pass



  @staticmethod
  def cast(other:__object__.Object)->LightOccluder2D:pass


  @property
  def occluder(self)->__occluderpolygon2d__.OccluderPolygon2D:
    """"""
    pass
  @occluder.setter
  def occluder(self,  value:__occluderpolygon2d__.OccluderPolygon2D)->None:
    """"""
    pass
  @property
  def sdf_collision(self)->bool:
    """"""
    pass
  @sdf_collision.setter
  def sdf_collision(self,  value:bool)->None:
    """"""
    pass
  @property
  def occluder_light_mask(self)->int:
    """"""
    pass
  @occluder_light_mask.setter
  def occluder_light_mask(self,  value:int)->None:
    """"""
    pass
  def set_occluder_polygon(self, polygon:__occluderpolygon2d__.OccluderPolygon2D)->None:
    """"""
    pass

  def get_occluder_polygon(self)->__occluderpolygon2d__.OccluderPolygon2D:
    """"""
    pass

  def set_occluder_light_mask(self, mask:int)->None:
    """"""
    pass

  def get_occluder_light_mask(self)->int:
    """"""
    pass

  def set_as_sdf_collision(self, enable:bool)->None:
    """"""
    pass

  def is_set_as_sdf_collision(self)->bool:
    """"""
    pass


