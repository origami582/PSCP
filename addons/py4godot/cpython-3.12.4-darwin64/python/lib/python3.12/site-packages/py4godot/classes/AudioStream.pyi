from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.AudioStreamPlaybackOggVorbis as __audiostreamplaybackoggvorbis__
import py4godot.classes.a as __a__
import py4godot.classes.AudioStreamPlaybackPolyphonic as __audiostreamplaybackpolyphonic__
import py4godot.classes.AudioStreamPlaybackResampled as __audiostreamplaybackresampled__
import py4godot.classes.AudioStreamGeneratorPlayback as __audiostreamgeneratorplayback__
import py4godot.classes.i as __i__
import py4godot.classes.AudioStreamPlaybackInteractive as __audiostreamplaybackinteractive__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.AudioSample as __audiosample__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.AudioStreamPlaybackSynchronized as __audiostreamplaybacksynchronized__
import py4godot.classes.AudioStreamPlayback as __audiostreamplayback__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.y as __y__
import py4godot.classes.AudioStreamPlaybackPlaylist as __audiostreamplaybackplaylist__



class AudioStream(__resource__.Resource):
  """
		Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via `AudioStreamWAV`) and Ogg (via `AudioStreamOggVorbis`) file formats.
	"""
  parameter_list_changed: BuiltinSignal

  @staticmethod
  def constructor()->AudioStream:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStream:pass


  def _instantiate_playback(self)->__audiostreamplayback__.AudioStreamPlayback|__audiostreamgeneratorplayback__.AudioStreamGeneratorPlayback|__audiostreamplaybackinteractive__.AudioStreamPlaybackInteractive|__audiostreamplaybackoggvorbis__.AudioStreamPlaybackOggVorbis|__audiostreamplaybackpolyphonic__.AudioStreamPlaybackPolyphonic|__audiostreamplaybackplaylist__.AudioStreamPlaybackPlaylist|__audiostreamplaybackresampled__.AudioStreamPlaybackResampled|__audiostreamplaybacksynchronized__.AudioStreamPlaybackSynchronized:
    """
				Override this method to customize the returned value of `instantiate_playback`. Should return a new `AudioStreamPlayback` created when the stream is played (such as by an `AudioStreamPlayer`).
			"""
    pass

  def _get_stream_name(self)->str:
    """
				Override this method to customize the name assigned to this audio stream. Unused by the engine.
			"""
    pass

  def _get_length(self)->float:
    """
				Override this method to customize the returned value of `get_length`. Should return the length of this audio stream, in seconds.
			"""
    pass

  def _is_monophonic(self)->bool:
    """
				Override this method to customize the returned value of `is_monophonic`. Should return `true` if this audio stream only supports one channel.
			"""
    pass

  def _get_bpm(self)->float:
    """
				Overridable method. Should return the tempo of this audio stream, in beats per minute (BPM). Used by the engine to determine the position of every beat.
				Ideally, the returned value should be based off the stream's sample rate (`AudioStreamWAV.mix_rate`, for example).
			"""
    pass

  def _get_beat_count(self)->int:
    """
				Overridable method. Should return the total number of beats of this audio stream. Used by the engine to determine the position of every beat.
				Ideally, the returned value should be based off the stream's sample rate (`AudioStreamWAV.mix_rate`, for example).
			"""
    pass

  def _get_parameter_list(self)->typedarray::Dictionary:
    """
				Return the controllable parameters of this stream. This array contains dictionaries with a property info description format (see `Object.get_property_list`). Additionally, the default value for this parameter must be added tho each dictionary in "default_value" field.
			"""
    pass

  def _has_loop(self)->bool:
    """
				Override this method to return `true` if this stream has a loop.
			"""
    pass

  def _get_bar_beats(self)->int:
    """
				Override this method to return the bar beats of this stream.
			"""
    pass

  def get_length(self)->float:
    """
				Returns the length of the audio stream in seconds. If this stream is an `AudioStreamRandomizer`, returns the length of the last played stream. If this stream has an indefinite length (such as for `AudioStreamGenerator` and `AudioStreamMicrophone`), returns `0.0`.
			"""
    pass

  def is_monophonic(self)->bool:
    """
				Returns `true` if this audio stream only supports one channel (_monophony_), or `false` if the audio stream supports two or more channels (_polyphony_).
			"""
    pass

  def instantiate_playback(self)->__audiostreamplayback__.AudioStreamPlayback|__audiostreamgeneratorplayback__.AudioStreamGeneratorPlayback|__audiostreamplaybackinteractive__.AudioStreamPlaybackInteractive|__audiostreamplaybackoggvorbis__.AudioStreamPlaybackOggVorbis|__audiostreamplaybackpolyphonic__.AudioStreamPlaybackPolyphonic|__audiostreamplaybackplaylist__.AudioStreamPlaybackPlaylist|__audiostreamplaybackresampled__.AudioStreamPlaybackResampled|__audiostreamplaybacksynchronized__.AudioStreamPlaybackSynchronized:
    """
				Returns a newly created `AudioStreamPlayback` intended to play this audio stream. Useful for when you want to extend `_instantiate_playback` but call `instantiate_playback` from an internally held AudioStream subresource. An example of this can be found in the source code for `AudioStreamRandomPitch::instantiate_playback`.
			"""
    pass

  def can_be_sampled(self)->bool:
    """
				Returns if the current `AudioStream` can be used as a sample. Only static streams can be sampled.
			"""
    pass

  def generate_sample(self)->__audiosample__.AudioSample:
    """
				Generates an `AudioSample` based on the current stream.
			"""
    pass

  def is_meta_stream(self)->bool:
    """
				Returns `true` if the stream is a collection of other streams, `false` otherwise.
			"""
    pass


