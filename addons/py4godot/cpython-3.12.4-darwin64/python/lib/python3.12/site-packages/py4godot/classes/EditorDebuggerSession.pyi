from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.Control as __control__



class EditorDebuggerSession(__refcounted__.RefCounted):
  """
		This class cannot be directly instantiated and must be retrieved via an `EditorDebuggerPlugin`.
		You can add tabs to the session UI via `add_session_tab`, send messages via `send_message`, and toggle `EngineProfiler`s via `toggle_profiler`.
	"""
  started: BuiltinSignal
  stopped: BuiltinSignal
  breaked: BuiltinSignal
  continued: BuiltinSignal

  @staticmethod
  def constructor()->EditorDebuggerSession:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorDebuggerSession:pass


  def send_message(self, message:str, data:__core__.Array= __core__.Array.new0())->None:
    """
				Sends the given `message` to the attached remote instance, optionally passing additionally `data`. See `EngineDebugger` for how to retrieve those messages.
			"""
    pass

  def toggle_profiler(self, profiler:str, enable:bool, data:__core__.Array= __core__.Array.new0())->None:
    """
				Toggle the given `profiler` on the attached remote instance, optionally passing additionally `data`. See `EngineProfiler` for more details.
			"""
    pass

  def is_breaked(self)->bool:
    """
				Returns `true` if the attached remote instance is currently in the debug loop.
			"""
    pass

  def is_debuggable(self)->bool:
    """
				Returns `true` if the attached remote instance can be debugged.
			"""
    pass

  def is_active(self)->bool:
    """
				Returns `true` if the debug session is currently attached to a remote instance.
			"""
    pass

  def add_session_tab(self, control:__control__.Control)->None:
    """
				Adds the given `control` to the debug session UI in the debugger bottom panel. The `control`'s node name will be used as the tab title.
			"""
    pass

  def remove_session_tab(self, control:__control__.Control)->None:
    """
				Removes the given `control` from the debug session UI in the debugger bottom panel.
			"""
    pass

  def set_breakpoint(self, path:str, line:int, enabled:bool)->None:
    """
				Enables or disables a specific breakpoint based on `enabled`, updating the Editor Breakpoint Panel accordingly.
			"""
    pass


