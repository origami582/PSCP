from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.u as __u__
import py4godot.classes.a as __a__
import py4godot.classes.v as __v__
import py4godot.classes.S as __s__
import py4godot.classes.Object as __object__
import py4godot.classes.m as __m__
import py4godot.classes.i as __i__
import py4godot.classes.p as __p__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.I as __i__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.E as __e__
import py4godot.classes.N as __n__
import py4godot.classes.y as __y__



class InputMap(__object__.Object):
  """
		Manages all `InputEventAction` which can be created/modified from the project settings menu **Project > Project Settings > Input Map** or in code with `add_action` and `action_add_event`. See `Node._input`.
	"""



  @staticmethod
  def cast(other:__object__.Object)->InputMap:pass

  @staticmethod
  def instance()->InputMap:pass

  def has_action(self, action:__core__.StringName|str)->bool:
    """
				Returns `true` if the `InputMap` has a registered action with the given name.
			"""
    pass

  def get_actions(self)->typedarray::StringName:
    """
				Returns an array of all actions in the `InputMap`.
			"""
    pass

  def add_action(self, action:__core__.StringName|str, deadzone:float=0.2)->None:
    """
				Adds an empty action to the `InputMap` with a configurable `deadzone`.
				An `InputEvent` can then be added to this action with `action_add_event`.
			"""
    pass

  def erase_action(self, action:__core__.StringName|str)->None:
    """
				Removes an action from the `InputMap`.
			"""
    pass

  def action_set_deadzone(self, action:__core__.StringName|str, deadzone:float)->None:
    """
				Sets a deadzone value for the action.
			"""
    pass

  def action_get_deadzone(self, action:__core__.StringName|str)->float:
    """
				Returns a deadzone value for the action.
			"""
    pass

  def action_add_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->None:
    """
				Adds an `InputEvent` to an action. This `InputEvent` will trigger the action.
			"""
    pass

  def action_has_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->bool:
    """
				Returns `true` if the action has the given `InputEvent` associated with it.
			"""
    pass

  def action_erase_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->None:
    """
				Removes an `InputEvent` from an action.
			"""
    pass

  def action_erase_events(self, action:__core__.StringName|str)->None:
    """
				Removes all events from an action.
			"""
    pass

  def action_get_events(self, action:__core__.StringName|str)->typedarray::InputEvent:
    """
				Returns an array of `InputEvent`s associated with a given action.
				**Note:** When used in the editor (e.g. a tool script or `EditorPlugin`), this method will return events for the editor action. If you want to access your project's input binds from the editor, read the `input/*` settings from `ProjectSettings`.
			"""
    pass

  def event_is_action(self, event:__inputevent__.InputEvent, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` if the given event is part of an existing action. This method ignores keyboard modifiers if the given `InputEvent` is not pressed (for proper release detection). See `action_has_event` if you don't want this behavior.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def load_from_project_settings(self)->None:
    """
				Clears all `InputEventAction` in the `InputMap` and load it anew from `ProjectSettings`.
			"""
    pass


