from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.XRControllerTracker as __xrcontrollertracker__
import py4godot.classes.XRHandTracker as __xrhandtracker__
import py4godot.classes.XRPositionalTracker as __xrpositionaltracker__
import py4godot.classes.XRBodyTracker as __xrbodytracker__



class XRController3D(__xrnode3d__.XRNode3D):
  """
		This is a helper 3D node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.
		Controllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add XRController3D nodes to your scene.
		The position of the controller node is automatically updated by the `XRServer`. This makes this node ideal to add child nodes to visualize the controller.
		The current `XRInterface` defines the names of inputs. In the case of OpenXR, these are the names of actions in the current action set from the OpenXR action map.
	"""
  button_pressed: BuiltinSignal
  button_released: BuiltinSignal
  input_float_changed: BuiltinSignal
  input_vector2_changed: BuiltinSignal
  profile_changed: BuiltinSignal

  @staticmethod
  def constructor()->XRController3D:pass



  @staticmethod
  def cast(other:__object__.Object)->XRController3D:pass


  def is_button_pressed(self, name:__core__.StringName|str)->bool:
    """
				Returns `true` if the button with the given `name` is pressed.
				**Note:** The current `XRInterface` defines the `name` for each input. In the case of OpenXR, these are the names of actions in the current action set.
			"""
    pass

  def get_input(self, name:__core__.StringName|str)->Any:
    """
				Returns a `Variant` for the input with the given `name`. This works for any input type, the variant will be typed according to the actions configuration.
				**Note:** The current `XRInterface` defines the `name` for each input. In the case of OpenXR, these are the names of actions in the current action set.
			"""
    pass

  def get_float(self, name:__core__.StringName|str)->float:
    """
				Returns a numeric value for the input with the given `name`. This is used for triggers and grip sensors.
				**Note:** The current `XRInterface` defines the `name` for each input. In the case of OpenXR, these are the names of actions in the current action set.
			"""
    pass

  def get_vector2(self, name:__core__.StringName|str)->__core__.Vector2:
    """
				Returns a `Vector2` for the input with the given `name`. This is used for thumbsticks and thumbpads found on many controllers.
				**Note:** The current `XRInterface` defines the `name` for each input. In the case of OpenXR, these are the names of actions in the current action set.
			"""
    pass

  def get_tracker_hand(self)->int:
    """
				Returns the hand holding this controller, if known.
			"""
    pass


