from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.NativeMenu as __nativemenu__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.Object as __object__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__


class Feature:
  FEATURE_GLOBAL_MENU:int = 0
  FEATURE_POPUP_MENU:int = 1
  FEATURE_OPEN_CLOSE_CALLBACK:int = 2
  FEATURE_HOVER_CALLBACK:int = 3
  FEATURE_KEY_CALLBACK:int = 4
class SystemMenus:
  INVALID_MENU_ID:int = 0
  MAIN_MENU_ID:int = 1
  APPLICATION_MENU_ID:int = 2
  WINDOW_MENU_ID:int = 3
  HELP_MENU_ID:int = 4
  DOCK_MENU_ID:int = 5


class NativeMenu(__object__.Object):
  """
		`NativeMenu` handles low-level access to the OS native global menu bar and popup menus.
		**Note:** This is low-level API, consider using `MenuBar` with `MenuBar.prefer_global_menu` set to `true`, and `PopupMenu` with `PopupMenu.prefer_native_menu` set to `true`.
		To create a menu, use `create_menu`, add menu items using `add_*_item` methods. To remove a menu, use `free_menu`.
		```gdscript
		var menu

		func _menu_callback(item_id):
			if item_id == "ITEM_CUT":
				cut()
			elif item_id == "ITEM_COPY":
				copy()
			elif item_id == "ITEM_PASTE":
				paste()

		func _enter_tree():
			# Create new menu and add items:
			menu = NativeMenu.create_menu()
			NativeMenu.add_item(menu, "Cut", _menu_callback, Callable(), "ITEM_CUT")
			NativeMenu.add_item(menu, "Copy", _menu_callback, Callable(), "ITEM_COPY")
			NativeMenu.add_separator(menu)
			NativeMenu.add_item(menu, "Paste", _menu_callback, Callable(), "ITEM_PASTE")

		func _on_button_pressed():
			# Show popup menu at mouse position:
			NativeMenu.popup(menu, DisplayServer.mouse_get_position())

		func _exit_tree():
			# Remove menu when it's no longer needed:
			NativeMenu.free_menu(menu)
		```
	"""



  @staticmethod
  def cast(other:__object__.Object)->NativeMenu:pass

  @staticmethod
  def instance()->NativeMenu:pass

  def has_feature(self, feature:int )->bool:
    """
				Returns `true` if the specified `feature` is supported by the current `NativeMenu`, `false` otherwise.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def has_system_menu(self, menu_id:int )->bool:
    """
				Returns `true` if a special system menu is supported.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_system_menu(self, menu_id:int )->__core__.RID:
    """
				Returns RID of a special system menu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_system_menu_name(self, menu_id:int )->str:
    """
				Returns readable name of a special system menu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def create_menu(self)->__core__.RID:
    """
				Creates a new global menu object.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def has_menu(self, rid:__core__.RID)->bool:
    """
				Returns `true` if `rid` is valid global menu.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def free_menu(self, rid:__core__.RID)->None:
    """
				Frees a global menu object created by this `NativeMenu`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_size(self, rid:__core__.RID)->__core__.Vector2:
    """
				Returns global menu size.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def popup(self, rid:__core__.RID, position:__core__.Vector2i)->None:
    """
				Shows the global menu at `position` in the screen coordinates.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_interface_direction(self, rid:__core__.RID, is_rtl:bool)->None:
    """
				Sets the menu text layout direction from right-to-left if `is_rtl` is `true`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_popup_open_callback(self, rid:__core__.RID, callback:__core__.Callable)->None:
    """
				Registers callable to emit after the menu is closed.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_popup_open_callback(self, rid:__core__.RID)->__core__.Callable:
    """
				Returns global menu open callback.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_popup_close_callback(self, rid:__core__.RID, callback:__core__.Callable)->None:
    """
				Registers callable to emit when the menu is about to show.
				**Note:** The OS can simulate menu opening to track menu item changes and global shortcuts, in which case the corresponding close callback is not triggered. Use `is_opened` to check if the menu is currently opened.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_popup_close_callback(self, rid:__core__.RID)->__core__.Callable:
    """
				Returns global menu close callback.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_minimum_width(self, rid:__core__.RID, width:float)->None:
    """
				Sets the minimum width of the global menu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_minimum_width(self, rid:__core__.RID)->float:
    """
				Returns global menu minimum width.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def is_opened(self, rid:__core__.RID)->bool:
    """
				Returns `true` if the menu is currently opened.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def add_submenu_item(self, rid:__core__.RID, label:str, submenu_rid:__core__.RID, tag:Any=None, index:int=-1)->int:
    """
				Adds an item that will act as a submenu of the global menu `rid`. The `submenu_rid` argument is the RID of the global menu that will be shown when the item is clicked.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def add_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_check_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new checkable item with text `label` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_icon_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` and icon `icon` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_icon_check_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new checkable item with text `label` and icon `icon` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_radio_check_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new radio-checkable item with text `label` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_icon_radio_check_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new radio-checkable item with text `label` and icon `icon` to the global menu `rid`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** Radio-checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_multistate_item(self, rid:__core__.RID, label:str, max_states:int, default_state:int, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:Any=None, accelerator:int =0, index:int=-1)->int:
    """
				Adds a new item with text `label` to the global menu `rid`.
				Contrarily to normal binary items, multistate items can have more than two states, as defined by `max_states`. Each press or activate of the item will increase the state by one. The default value is defined by `default_state`.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				An `accelerator` can optionally be defined, which is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The `accelerator` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** By default, there's no indication of the current item state, it should be changed manually.
				**Note:** The `callback` and `key_callback` Callables need to accept exactly one Variant parameter, the parameter passed to the Callables will be the value passed to `tag`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** On Windows, `accelerator` and `key_callback` are ignored.
			"""
    pass

  def add_separator(self, rid:__core__.RID, index:int=-1)->int:
    """
				Adds a separator between items to the global menu `rid`. Separators also occupy an index.
				Returns index of the inserted item, it's not guaranteed to be the same as `index` value.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def find_item_index_with_text(self, rid:__core__.RID, text:str)->int:
    """
				Returns the index of the item with the specified `text`. Indices are automatically assigned to each item by the engine, and cannot be set manually.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def find_item_index_with_tag(self, rid:__core__.RID, tag:Any)->int:
    """
				Returns the index of the item with the specified `tag`. Indices are automatically assigned to each item by the engine, and cannot be set manually.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def find_item_index_with_submenu(self, rid:__core__.RID, submenu_rid:__core__.RID)->int:
    """
				Returns the index of the item with the submenu specified by `submenu_rid`. Indices are automatically assigned to each item by the engine, and cannot be set manually.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def is_item_checked(self, rid:__core__.RID, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is checked.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def is_item_checkable(self, rid:__core__.RID, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is checkable in some way, i.e. if it has a checkbox or radio button.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def is_item_radio_checkable(self, rid:__core__.RID, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` has radio button-style checkability.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_callback(self, rid:__core__.RID, idx:int)->__core__.Callable:
    """
				Returns the callback of the item at index `idx`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_key_callback(self, rid:__core__.RID, idx:int)->__core__.Callable:
    """
				Returns the callback of the item accelerator at index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_item_tag(self, rid:__core__.RID, idx:int)->Any:
    """
				Returns the metadata of the specified item, which might be of any type. You can set it with `set_item_tag`, which provides a simple way of assigning context data to items.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_text(self, rid:__core__.RID, idx:int)->str:
    """
				Returns the text of the item at index `idx`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_submenu(self, rid:__core__.RID, idx:int)->__core__.RID:
    """
				Returns the submenu ID of the item at index `idx`. See `add_submenu_item` for more info on how to add a submenu.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_accelerator(self, rid:__core__.RID, idx:int)->int:
    """
				Returns the accelerator of the item at index `idx`. Accelerators are special combinations of keys that activate the item, no matter which control is focused.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def is_item_disabled(self, rid:__core__.RID, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is disabled. When it is disabled it can't be selected, or its action invoked.
				See `set_item_disabled` for more info on how to disable an item.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def is_item_hidden(self, rid:__core__.RID, idx:int)->bool:
    """
				Returns `true` if the item at index `idx` is hidden.
				See `set_item_hidden` for more info on how to hide an item.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_item_tooltip(self, rid:__core__.RID, idx:int)->str:
    """
				Returns the tooltip associated with the specified index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_item_state(self, rid:__core__.RID, idx:int)->int:
    """
				Returns the state of a multistate item. See `add_multistate_item` for details.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_max_states(self, rid:__core__.RID, idx:int)->int:
    """
				Returns number of states of a multistate item. See `add_multistate_item` for details.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_icon(self, rid:__core__.RID, idx:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the icon of the item at index `idx`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def get_item_indentation_level(self, rid:__core__.RID, idx:int)->int:
    """
				Returns the horizontal offset of the item at the given `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_checked(self, rid:__core__.RID, idx:int, checked:bool)->None:
    """
				Sets the checkstate status of the item at index `idx`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_checkable(self, rid:__core__.RID, idx:int, checkable:bool)->None:
    """
				Sets whether the item at index `idx` has a checkbox. If `false`, sets the type of the item to plain text.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_radio_checkable(self, rid:__core__.RID, idx:int, checkable:bool)->None:
    """
				Sets the type of the item at the specified index `idx` to radio button. If `false`, sets the type of the item to plain text.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_callback(self, rid:__core__.RID, idx:int, callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. Callback is emitted when an item is pressed.
				**Note:** The `callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_hover_callbacks(self, rid:__core__.RID, idx:int, callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. The callback is emitted when an item is hovered.
				**Note:** The `callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_key_callback(self, rid:__core__.RID, idx:int, key_callback:__core__.Callable)->None:
    """
				Sets the callback of the item at index `idx`. Callback is emitted when its accelerator is activated.
				**Note:** The `key_callback` Callable needs to accept exactly one Variant parameter, the parameter passed to the Callable will be the value passed to the `tag` parameter when the menu item was created.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_tag(self, rid:__core__.RID, idx:int, tag:Any)->None:
    """
				Sets the metadata of an item, which may be of any type. You can later get it with `get_item_tag`, which provides a simple way of assigning context data to items.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_text(self, rid:__core__.RID, idx:int, text:str)->None:
    """
				Sets the text of the item at index `idx`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_submenu(self, rid:__core__.RID, idx:int, submenu_rid:__core__.RID)->None:
    """
				Sets the submenu RID of the item at index `idx`. The submenu is a global menu that would be shown when the item is clicked.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_accelerator(self, rid:__core__.RID, idx:int, keycode:int )->None:
    """
				Sets the accelerator of the item at index `idx`. `keycode` can be a single `enum Key`, or a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_disabled(self, rid:__core__.RID, idx:int, disabled:bool)->None:
    """
				Enables/disables the item at index `idx`. When it is disabled, it can't be selected and its action can't be invoked.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_hidden(self, rid:__core__.RID, idx:int, hidden:bool)->None:
    """
				Hides/shows the item at index `idx`. When it is hidden, an item does not appear in a menu and its action cannot be invoked.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_tooltip(self, rid:__core__.RID, idx:int, tooltip:str)->None:
    """
				Sets the `String` tooltip of the item at the specified index `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def set_item_state(self, rid:__core__.RID, idx:int, state:int)->None:
    """
				Sets the state of a multistate item. See `add_multistate_item` for details.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_max_states(self, rid:__core__.RID, idx:int, max_states:int)->None:
    """
				Sets number of state of a multistate item. See `add_multistate_item` for details.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def set_item_icon(self, rid:__core__.RID, idx:int, icon:__texture2d__.Texture2D)->None:
    """
				Replaces the `Texture2D` icon of the specified `idx`.
				**Note:** This method is implemented on macOS and Windows.
				**Note:** This method is not supported by macOS Dock menu items.
			"""
    pass

  def set_item_indentation_level(self, rid:__core__.RID, idx:int, level:int)->None:
    """
				Sets the horizontal offset of the item at the given `idx`.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def get_item_count(self, rid:__core__.RID)->int:
    """
				Returns number of items in the global menu `rid`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def is_system_menu(self, rid:__core__.RID)->bool:
    """
				Return `true` is global menu is a special system menu.
				**Note:** This method is implemented only on macOS.
			"""
    pass

  def remove_item(self, rid:__core__.RID, idx:int)->None:
    """
				Removes the item at index `idx` from the global menu `rid`.
				**Note:** The indices of items after the removed item will be shifted by one.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass

  def clear(self, rid:__core__.RID)->None:
    """
				Removes all items from the global menu `rid`.
				**Note:** This method is implemented on macOS and Windows.
			"""
    pass


