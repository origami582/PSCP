from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.Joint3D as __joint3d__


class Param:
  PARAM_SWING_SPAN:int = 0
  PARAM_TWIST_SPAN:int = 1
  PARAM_BIAS:int = 2
  PARAM_SOFTNESS:int = 3
  PARAM_RELAXATION:int = 4
  PARAM_MAX:int = 5


class ConeTwistJoint3D(__joint3d__.Joint3D):
  """
		A physics joint that connects two 3D physics bodies in a way that simulates a ball-and-socket joint. The twist axis is initiated as the X axis of the `ConeTwistJoint3D`. Once the physics bodies swing, the twist axis is calculated as the middle of the X axes of the joint in the local space of the two physics bodies. Useful for limbs like shoulders and hips, lamps hanging off a ceiling, etc.
	"""

  @staticmethod
  def constructor()->ConeTwistJoint3D:pass



  @staticmethod
  def cast(other:__object__.Object)->ConeTwistJoint3D:pass


  @property
  def swing_span(self)->float:
    """"""
    pass
  @swing_span.setter
  def swing_span(self,  value:float)->None:
    """"""
    pass
  @property
  def twist_span(self)->float:
    """"""
    pass
  @twist_span.setter
  def twist_span(self,  value:float)->None:
    """"""
    pass
  @property
  def bias(self)->float:
    """"""
    pass
  @bias.setter
  def bias(self,  value:float)->None:
    """"""
    pass
  @property
  def softness(self)->float:
    """"""
    pass
  @softness.setter
  def softness(self,  value:float)->None:
    """"""
    pass
  @property
  def relaxation(self)->float:
    """"""
    pass
  @relaxation.setter
  def relaxation(self,  value:float)->None:
    """"""
    pass
  def set_param(self, param:int , value:float)->None:
    """
				Sets the value of the specified parameter.
			"""
    pass

  def get_param(self, param:int )->float:
    """
				Returns the value of the specified parameter.
			"""
    pass


