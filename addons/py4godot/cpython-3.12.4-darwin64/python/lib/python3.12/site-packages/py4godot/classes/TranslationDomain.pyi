from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OptimizedTranslation as __optimizedtranslation__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.Translation as __translation__



class TranslationDomain(__refcounted__.RefCounted):
  """
		`TranslationDomain` is a self-contained collection of `Translation` resources. Translations can be added to or removed from it.
		If you're working with the main translation domain, it is more convenient to use the wrap methods on `TranslationServer`.
	"""

  @staticmethod
  def constructor()->TranslationDomain:pass



  @staticmethod
  def cast(other:__object__.Object)->TranslationDomain:pass


  @property
  def pseudolocalization_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_enabled.setter
  def pseudolocalization_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_accents_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_accents_enabled.setter
  def pseudolocalization_accents_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_double_vowels_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_double_vowels_enabled.setter
  def pseudolocalization_double_vowels_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_fake_bidi_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_fake_bidi_enabled.setter
  def pseudolocalization_fake_bidi_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_override_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_override_enabled.setter
  def pseudolocalization_override_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_skip_placeholders_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_skip_placeholders_enabled.setter
  def pseudolocalization_skip_placeholders_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def pseudolocalization_expansion_ratio(self)->float:
    """"""
    pass
  @pseudolocalization_expansion_ratio.setter
  def pseudolocalization_expansion_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def pseudolocalization_prefix(self)->str:
    """"""
    pass
  @pseudolocalization_prefix.setter
  def pseudolocalization_prefix(self,  value:str)->None:
    """"""
    pass
  @property
  def pseudolocalization_suffix(self)->str:
    """"""
    pass
  @pseudolocalization_suffix.setter
  def pseudolocalization_suffix(self,  value:str)->None:
    """"""
    pass
  def get_translation_object(self, locale:str)->__optimizedtranslation__.OptimizedTranslation|__translation__.Translation:
    """
				Returns the `Translation` instance that best matches `locale`. Returns `null` if there are no matches.
			"""
    pass

  def add_translation(self, translation:__translation__.Translation)->None:
    """
				Adds a translation.
			"""
    pass

  def remove_translation(self, translation:__translation__.Translation)->None:
    """
				Removes the given translation.
			"""
    pass

  def clear(self)->None:
    """
				Removes all translations.
			"""
    pass

  def translate(self, message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns the current locale's translation for the given message and context.
			"""
    pass

  def translate_plural(self, message:__core__.StringName|str, message_plural:__core__.StringName|str, n:int, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns the current locale's translation for the given message, plural message and context.
				The number `n` is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
			"""
    pass

  def is_pseudolocalization_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_pseudolocalization_accents_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_accents_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_pseudolocalization_double_vowels_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_double_vowels_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_pseudolocalization_fake_bidi_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_fake_bidi_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_pseudolocalization_override_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_override_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_pseudolocalization_skip_placeholders_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_skip_placeholders_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_pseudolocalization_expansion_ratio(self)->float:
    """"""
    pass

  def set_pseudolocalization_expansion_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_pseudolocalization_prefix(self)->str:
    """"""
    pass

  def set_pseudolocalization_prefix(self, prefix:str)->None:
    """"""
    pass

  def get_pseudolocalization_suffix(self)->str:
    """"""
    pass

  def set_pseudolocalization_suffix(self, suffix:str)->None:
    """"""
    pass

  def pseudolocalize(self, message:__core__.StringName|str)->__core__.StringName:
    """
				Returns the pseudolocalized string based on the `message` passed in.
			"""
    pass


