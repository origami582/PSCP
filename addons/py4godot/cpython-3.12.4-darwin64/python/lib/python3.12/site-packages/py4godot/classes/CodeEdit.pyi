from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.D as __d__
import py4godot.classes.c as __c__
import py4godot.classes.a as __a__
import py4godot.classes.S as __s__
import py4godot.classes.i as __i__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.y as __y__
import py4godot.classes.TextEdit as __textedit__


class CodeCompletionKind:
  KIND_CLASS:int = 0
  KIND_FUNCTION:int = 1
  KIND_SIGNAL:int = 2
  KIND_VARIABLE:int = 3
  KIND_MEMBER:int = 4
  KIND_ENUM:int = 5
  KIND_CONSTANT:int = 6
  KIND_NODE_PATH:int = 7
  KIND_FILE_PATH:int = 8
  KIND_PLAIN_TEXT:int = 9
class CodeCompletionLocation:
  LOCATION_LOCAL:int = 0
  LOCATION_PARENT_MASK:int = 256
  LOCATION_OTHER_USER_CODE:int = 512
  LOCATION_OTHER:int = 1024


class CodeEdit(__textedit__.TextEdit):
  """
		CodeEdit is a specialized `TextEdit` designed for editing plain text code files. It has many features commonly found in code editors such as line numbers, line folding, code completion, indent management, and string/comment management.
		**Note:** Regardless of locale, `CodeEdit` will by default always use left-to-right text direction to correctly display source code.
	"""
  breakpoint_toggled: BuiltinSignal
  code_completion_requested: BuiltinSignal
  symbol_lookup: BuiltinSignal
  symbol_validate: BuiltinSignal
  symbol_hovered: BuiltinSignal

  @staticmethod
  def constructor()->CodeEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->CodeEdit:pass


  @property
  def symbol_lookup_on_click(self)->bool:
    """"""
    pass
  @symbol_lookup_on_click.setter
  def symbol_lookup_on_click(self,  value:bool)->None:
    """"""
    pass
  @property
  def symbol_tooltip_on_hover(self)->bool:
    """"""
    pass
  @symbol_tooltip_on_hover.setter
  def symbol_tooltip_on_hover(self,  value:bool)->None:
    """"""
    pass
  @property
  def line_folding(self)->bool:
    """"""
    pass
  @line_folding.setter
  def line_folding(self,  value:bool)->None:
    """"""
    pass
  @property
  def line_length_guidelines(self)->__core__.PackedInt32Array:
    """"""
    pass
  @line_length_guidelines.setter
  def line_length_guidelines(self,  value:__core__.PackedInt32Array)->None:
    """"""
    pass
  @property
  def gutters_draw_breakpoints_gutter(self)->bool:
    """"""
    pass
  @gutters_draw_breakpoints_gutter.setter
  def gutters_draw_breakpoints_gutter(self,  value:bool)->None:
    """"""
    pass
  @property
  def gutters_draw_bookmarks(self)->bool:
    """"""
    pass
  @gutters_draw_bookmarks.setter
  def gutters_draw_bookmarks(self,  value:bool)->None:
    """"""
    pass
  @property
  def gutters_draw_executing_lines(self)->bool:
    """"""
    pass
  @gutters_draw_executing_lines.setter
  def gutters_draw_executing_lines(self,  value:bool)->None:
    """"""
    pass
  @property
  def gutters_draw_line_numbers(self)->bool:
    """"""
    pass
  @gutters_draw_line_numbers.setter
  def gutters_draw_line_numbers(self,  value:bool)->None:
    """"""
    pass
  @property
  def gutters_zero_pad_line_numbers(self)->bool:
    """"""
    pass
  @gutters_zero_pad_line_numbers.setter
  def gutters_zero_pad_line_numbers(self,  value:bool)->None:
    """"""
    pass
  @property
  def gutters_draw_fold_gutter(self)->bool:
    """"""
    pass
  @gutters_draw_fold_gutter.setter
  def gutters_draw_fold_gutter(self,  value:bool)->None:
    """"""
    pass
  @property
  def delimiter_strings(self)->__core__.PackedStringArray:
    """"""
    pass
  @delimiter_strings.setter
  def delimiter_strings(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def delimiter_comments(self)->__core__.PackedStringArray:
    """"""
    pass
  @delimiter_comments.setter
  def delimiter_comments(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def code_completion_enabled(self)->bool:
    """"""
    pass
  @code_completion_enabled.setter
  def code_completion_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def code_completion_prefixes(self)->__core__.PackedStringArray:
    """"""
    pass
  @code_completion_prefixes.setter
  def code_completion_prefixes(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def indent_size(self)->int:
    """"""
    pass
  @indent_size.setter
  def indent_size(self,  value:int)->None:
    """"""
    pass
  @property
  def indent_use_spaces(self)->bool:
    """"""
    pass
  @indent_use_spaces.setter
  def indent_use_spaces(self,  value:bool)->None:
    """"""
    pass
  @property
  def indent_automatic(self)->bool:
    """"""
    pass
  @indent_automatic.setter
  def indent_automatic(self,  value:bool)->None:
    """"""
    pass
  @property
  def indent_automatic_prefixes(self)->__core__.PackedStringArray:
    """"""
    pass
  @indent_automatic_prefixes.setter
  def indent_automatic_prefixes(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def auto_brace_completion_enabled(self)->bool:
    """"""
    pass
  @auto_brace_completion_enabled.setter
  def auto_brace_completion_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def auto_brace_completion_highlight_matching(self)->bool:
    """"""
    pass
  @auto_brace_completion_highlight_matching.setter
  def auto_brace_completion_highlight_matching(self,  value:bool)->None:
    """"""
    pass
  @property
  def auto_brace_completion_pairs(self)->__core__.Dictionary:
    """"""
    pass
  @auto_brace_completion_pairs.setter
  def auto_brace_completion_pairs(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def _confirm_code_completion(self, replace:bool)->None:
    """
				Override this method to define how the selected entry should be inserted. If `replace` is `true`, any existing text should be replaced.
			"""
    pass

  def _request_code_completion(self, force:bool)->None:
    """
				Override this method to define what happens when the user requests code completion. If `force` is `true`, any checks should be bypassed.
			"""
    pass

  def _filter_code_completion_candidates(self, candidates:__core__.Array)->typedarray::Dictionary:
    """
				Override this method to define what items in `candidates` should be displayed.
				Both `candidates` and the return is an `Array` of `Dictionary`, see `get_code_completion_option` for `Dictionary` content.
			"""
    pass

  def set_indent_size(self, size:int)->None:
    """"""
    pass

  def get_indent_size(self)->int:
    """"""
    pass

  def set_indent_using_spaces(self, use_spaces:bool)->None:
    """"""
    pass

  def is_indent_using_spaces(self)->bool:
    """"""
    pass

  def set_auto_indent_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_auto_indent_enabled(self)->bool:
    """"""
    pass

  def set_auto_indent_prefixes(self, prefixes:__core__.Array)->None:
    """"""
    pass

  def get_auto_indent_prefixes(self)->typedarray::String:
    """"""
    pass

  def do_indent(self)->None:
    """
				If there is no selection, indentation is inserted at the caret. Otherwise, the selected lines are indented like `indent_lines`. Equivalent to the `ProjectSettings.input/ui_text_indent` action. The indentation characters used depend on `indent_use_spaces` and `indent_size`.
			"""
    pass

  def indent_lines(self)->None:
    """
				Indents all lines that are selected or have a caret on them. Uses spaces or a tab depending on `indent_use_spaces`. See `unindent_lines`.
			"""
    pass

  def unindent_lines(self)->None:
    """
				Unindents all lines that are selected or have a caret on them. Uses spaces or a tab depending on `indent_use_spaces`. Equivalent to the `ProjectSettings.input/ui_text_dedent` action. See `indent_lines`.
			"""
    pass

  def convert_indent(self, from_line:int=-1, to_line:int=-1)->None:
    """
				Converts the indents of lines between `from_line` and `to_line` to tabs or spaces as set by `indent_use_spaces`.
				Values of `-1` convert the entire text.
			"""
    pass

  def set_auto_brace_completion_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_auto_brace_completion_enabled(self)->bool:
    """"""
    pass

  def set_highlight_matching_braces_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_highlight_matching_braces_enabled(self)->bool:
    """"""
    pass

  def add_auto_brace_completion_pair(self, start_key:str, end_key:str)->None:
    """
				Adds a brace pair.
				Both the start and end keys must be symbols. Only the start key has to be unique.
			"""
    pass

  def set_auto_brace_completion_pairs(self, pairs:__core__.Dictionary)->None:
    """"""
    pass

  def get_auto_brace_completion_pairs(self)->__core__.Dictionary:
    """"""
    pass

  def has_auto_brace_completion_open_key(self, open_key:str)->bool:
    """
				Returns `true` if open key `open_key` exists.
			"""
    pass

  def has_auto_brace_completion_close_key(self, close_key:str)->bool:
    """
				Returns `true` if close key `close_key` exists.
			"""
    pass

  def get_auto_brace_completion_close_key(self, open_key:str)->str:
    """
				Gets the matching auto brace close key for `open_key`.
			"""
    pass

  def set_draw_breakpoints_gutter(self, enable:bool)->None:
    """"""
    pass

  def is_drawing_breakpoints_gutter(self)->bool:
    """"""
    pass

  def set_draw_bookmarks_gutter(self, enable:bool)->None:
    """"""
    pass

  def is_drawing_bookmarks_gutter(self)->bool:
    """"""
    pass

  def set_draw_executing_lines_gutter(self, enable:bool)->None:
    """"""
    pass

  def is_drawing_executing_lines_gutter(self)->bool:
    """"""
    pass

  def set_line_as_breakpoint(self, line:int, breakpointed:bool)->None:
    """
				Sets the given line as a breakpoint. If `true` and `gutters_draw_breakpoints_gutter` is `true`, draws the `theme_item breakpoint` icon in the gutter for this line. See `get_breakpointed_lines` and `is_line_breakpointed`.
			"""
    pass

  def is_line_breakpointed(self, line:int)->bool:
    """
				Returns `true` if the given line is breakpointed. See `set_line_as_breakpoint`.
			"""
    pass

  def clear_breakpointed_lines(self)->None:
    """
				Clears all breakpointed lines.
			"""
    pass

  def get_breakpointed_lines(self)->__core__.PackedInt32Array:
    """
				Gets all breakpointed lines.
			"""
    pass

  def set_line_as_bookmarked(self, line:int, bookmarked:bool)->None:
    """
				Sets the given line as bookmarked. If `true` and `gutters_draw_bookmarks` is `true`, draws the `theme_item bookmark` icon in the gutter for this line. See `get_bookmarked_lines` and `is_line_bookmarked`.
			"""
    pass

  def is_line_bookmarked(self, line:int)->bool:
    """
				Returns `true` if the given line is bookmarked. See `set_line_as_bookmarked`.
			"""
    pass

  def clear_bookmarked_lines(self)->None:
    """
				Clears all bookmarked lines.
			"""
    pass

  def get_bookmarked_lines(self)->__core__.PackedInt32Array:
    """
				Gets all bookmarked lines.
			"""
    pass

  def set_line_as_executing(self, line:int, executing:bool)->None:
    """
				Sets the given line as executing. If `true` and `gutters_draw_executing_lines` is `true`, draws the `theme_item executing_line` icon in the gutter for this line. See `get_executing_lines` and `is_line_executing`.
			"""
    pass

  def is_line_executing(self, line:int)->bool:
    """
				Returns `true` if the given line is marked as executing. See `set_line_as_executing`.
			"""
    pass

  def clear_executing_lines(self)->None:
    """
				Clears all executed lines.
			"""
    pass

  def get_executing_lines(self)->__core__.PackedInt32Array:
    """
				Gets all executing lines.
			"""
    pass

  def set_draw_line_numbers(self, enable:bool)->None:
    """"""
    pass

  def is_draw_line_numbers_enabled(self)->bool:
    """"""
    pass

  def set_line_numbers_zero_padded(self, enable:bool)->None:
    """"""
    pass

  def is_line_numbers_zero_padded(self)->bool:
    """"""
    pass

  def set_draw_fold_gutter(self, enable:bool)->None:
    """"""
    pass

  def is_drawing_fold_gutter(self)->bool:
    """"""
    pass

  def set_line_folding_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_line_folding_enabled(self)->bool:
    """"""
    pass

  def can_fold_line(self, line:int)->bool:
    """
				Returns `true` if the given line is foldable. A line is foldable if it is the start of a valid code region (see `get_code_region_start_tag`), if it is the start of a comment or string block, or if the next non-empty line is more indented (see `TextEdit.get_indent_level`).
			"""
    pass

  def fold_line(self, line:int)->None:
    """
				Folds the given line, if possible (see `can_fold_line`).
			"""
    pass

  def unfold_line(self, line:int)->None:
    """
				Unfolds the given line if it is folded or if it is hidden under a folded line.
			"""
    pass

  def fold_all_lines(self)->None:
    """
				Folds all lines that are possible to be folded (see `can_fold_line`).
			"""
    pass

  def unfold_all_lines(self)->None:
    """
				Unfolds all lines that are folded.
			"""
    pass

  def toggle_foldable_line(self, line:int)->None:
    """
				Toggle the folding of the code block at the given line.
			"""
    pass

  def toggle_foldable_lines_at_carets(self)->None:
    """
				Toggle the folding of the code block on all lines with a caret on them.
			"""
    pass

  def is_line_folded(self, line:int)->bool:
    """
				Returns `true` if the given line is folded. See `fold_line`.
			"""
    pass

  def get_folded_lines(self)->typedarray::int:
    """
				Returns all lines that are currently folded.
			"""
    pass

  def create_code_region(self)->None:
    """
				Creates a new code region with the selection. At least one single line comment delimiter have to be defined (see `add_comment_delimiter`).
				A code region is a part of code that is highlighted when folded and can help organize your script.
				Code region start and end tags can be customized (see `set_code_region_tags`).
				Code regions are delimited using start and end tags (respectively `region` and `endregion` by default) preceded by one line comment delimiter. (eg. `#region` and `#endregion`)
			"""
    pass

  def get_code_region_start_tag(self)->str:
    """
				Returns the code region start tag (without comment delimiter).
			"""
    pass

  def get_code_region_end_tag(self)->str:
    """
				Returns the code region end tag (without comment delimiter).
			"""
    pass

  def set_code_region_tags(self, start:str= __core__.String.new0(), end:str= __core__.String.new0())->None:
    """
				Sets the code region start and end tags (without comment delimiter).
			"""
    pass

  def is_line_code_region_start(self, line:int)->bool:
    """
				Returns `true` if the given line is a code region start. See `set_code_region_tags`.
			"""
    pass

  def is_line_code_region_end(self, line:int)->bool:
    """
				Returns `true` if the given line is a code region end. See `set_code_region_tags`.
			"""
    pass

  def add_string_delimiter(self, start_key:str, end_key:str, line_only:bool=False)->None:
    """
				Defines a string delimiter from `start_key` to `end_key`. Both keys should be symbols, and `start_key` must not be shared with other delimiters.
				If `line_only` is `true` or `end_key` is an empty `String`, the region does not carry over to the next line.
			"""
    pass

  def remove_string_delimiter(self, start_key:str)->None:
    """
				Removes the string delimiter with `start_key`.
			"""
    pass

  def has_string_delimiter(self, start_key:str)->bool:
    """
				Returns `true` if string `start_key` exists.
			"""
    pass

  def set_string_delimiters(self, string_delimiters:__core__.Array)->None:
    """"""
    pass

  def clear_string_delimiters(self)->None:
    """
				Removes all string delimiters.
			"""
    pass

  def get_string_delimiters(self)->typedarray::String:
    """"""
    pass

  def is_in_string(self, line:int, column:int=-1)->int:
    """
				Returns the delimiter index if `line` `column` is in a string. If `column` is not provided, will return the delimiter index if the entire `line` is a string. Otherwise `-1`.
			"""
    pass

  def add_comment_delimiter(self, start_key:str, end_key:str, line_only:bool=False)->None:
    """
				Adds a comment delimiter from `start_key` to `end_key`. Both keys should be symbols, and `start_key` must not be shared with other delimiters.
				If `line_only` is `true` or `end_key` is an empty `String`, the region does not carry over to the next line.
			"""
    pass

  def remove_comment_delimiter(self, start_key:str)->None:
    """
				Removes the comment delimiter with `start_key`.
			"""
    pass

  def has_comment_delimiter(self, start_key:str)->bool:
    """
				Returns `true` if comment `start_key` exists.
			"""
    pass

  def set_comment_delimiters(self, comment_delimiters:__core__.Array)->None:
    """"""
    pass

  def clear_comment_delimiters(self)->None:
    """
				Removes all comment delimiters.
			"""
    pass

  def get_comment_delimiters(self)->typedarray::String:
    """"""
    pass

  def is_in_comment(self, line:int, column:int=-1)->int:
    """
				Returns delimiter index if `line` `column` is in a comment. If `column` is not provided, will return delimiter index if the entire `line` is a comment. Otherwise `-1`.
			"""
    pass

  def get_delimiter_start_key(self, delimiter_index:int)->str:
    """
				Gets the start key for a string or comment region index.
			"""
    pass

  def get_delimiter_end_key(self, delimiter_index:int)->str:
    """
				Gets the end key for a string or comment region index.
			"""
    pass

  def get_delimiter_start_position(self, line:int, column:int)->__core__.Vector2:
    """
				If `line` `column` is in a string or comment, returns the start position of the region. If not or no start could be found, both `Vector2` values will be `-1`.
			"""
    pass

  def get_delimiter_end_position(self, line:int, column:int)->__core__.Vector2:
    """
				If `line` `column` is in a string or comment, returns the end position of the region. If not or no end could be found, both `Vector2` values will be `-1`.
			"""
    pass

  def set_code_hint(self, code_hint:str)->None:
    """
				Sets the code hint text. Pass an empty string to clear.
			"""
    pass

  def set_code_hint_draw_below(self, draw_below:bool)->None:
    """
				If `true`, the code hint will draw below the main caret. If `false`, the code hint will draw above the main caret. See `set_code_hint`.
			"""
    pass

  def get_text_for_code_completion(self)->str:
    """
				Returns the full text with char `0xFFFF` at the caret location.
			"""
    pass

  def request_code_completion(self, force:bool=False)->None:
    """
				Emits `signal code_completion_requested`, if `force` is `true` will bypass all checks. Otherwise will check that the caret is in a word or in front of a prefix. Will ignore the request if all current options are of type file path, node path, or signal.
			"""
    pass

  def add_code_completion_option(self, type:int , display_text:str, insert_text:str, text_color:__core__.Color= __core__.Color.new0(), icon:__resource__.Resource= __resource__.Resource.constructor(), value:Any=None, location:int=1024)->None:
    """
				Submits an item to the queue of potential candidates for the autocomplete menu. Call `update_code_completion_options` to update the list.
				`location` indicates location of the option relative to the location of the code completion query. See `enum CodeEdit.CodeCompletionLocation` for how to set this value.
				**Note:** This list will replace all current candidates.
			"""
    pass

  def update_code_completion_options(self, force:bool)->None:
    """
				Submits all completion options added with `add_code_completion_option`. Will try to force the autocomplete menu to popup, if `force` is `true`.
				**Note:** This will replace all current candidates.
			"""
    pass

  def get_code_completion_options(self)->typedarray::Dictionary:
    """
				Gets all completion options, see `get_code_completion_option` for return content.
			"""
    pass

  def get_code_completion_option(self, index:int)->__core__.Dictionary:
    """
				Gets the completion option at `index`. The return `Dictionary` has the following key-values:
				`kind`: `enum CodeCompletionKind`
				`display_text`: Text that is shown on the autocomplete menu.
				`insert_text`: Text that is to be inserted when this item is selected.
				`font_color`: Color of the text on the autocomplete menu.
				`icon`: Icon to draw on the autocomplete menu.
				`default_value`: Value of the symbol.
			"""
    pass

  def get_code_completion_selected_index(self)->int:
    """
				Gets the index of the current selected completion option.
			"""
    pass

  def set_code_completion_selected_index(self, index:int)->None:
    """
				Sets the current selected completion option.
			"""
    pass

  def confirm_code_completion(self, replace:bool=False)->None:
    """
				Inserts the selected entry into the text. If `replace` is `true`, any existing text is replaced rather than merged.
			"""
    pass

  def cancel_code_completion(self)->None:
    """
				Cancels the autocomplete menu.
			"""
    pass

  def set_code_completion_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_code_completion_enabled(self)->bool:
    """"""
    pass

  def set_code_completion_prefixes(self, prefixes:__core__.Array)->None:
    """"""
    pass

  def get_code_completion_prefixes(self)->typedarray::String:
    """"""
    pass

  def set_line_length_guidelines(self, guideline_columns:__core__.Array)->None:
    """"""
    pass

  def get_line_length_guidelines(self)->typedarray::int:
    """"""
    pass

  def set_symbol_lookup_on_click_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_symbol_lookup_on_click_enabled(self)->bool:
    """"""
    pass

  def get_text_for_symbol_lookup(self)->str:
    """
				Returns the full text with char `0xFFFF` at the cursor location.
			"""
    pass

  def get_text_with_cursor_char(self, line:int, column:int)->str:
    """
				Returns the full text with char `0xFFFF` at the specified location.
			"""
    pass

  def set_symbol_lookup_word_as_valid(self, valid:bool)->None:
    """
				Sets the symbol emitted by `signal symbol_validate` as a valid lookup.
			"""
    pass

  def set_symbol_tooltip_on_hover_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_symbol_tooltip_on_hover_enabled(self)->bool:
    """"""
    pass

  def move_lines_up(self)->None:
    """
				Moves all lines up that are selected or have a caret on them.
			"""
    pass

  def move_lines_down(self)->None:
    """
				Moves all lines down that are selected or have a caret on them.
			"""
    pass

  def delete_lines(self)->None:
    """
				Deletes all lines that are selected or have a caret on them.
			"""
    pass

  def duplicate_selection(self)->None:
    """
				Duplicates all selected text and duplicates all lines with a caret on them.
			"""
    pass

  def duplicate_lines(self)->None:
    """
				Duplicates all lines currently selected with any caret. Duplicates the entire line beneath the current one no matter where the caret is within the line.
			"""
    pass


