from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.Node3D as __node3d__


class RotationMode:
  ROTATION_NONE:int = 0
  ROTATION_Y:int = 1
  ROTATION_XY:int = 2
  ROTATION_XYZ:int = 3
  ROTATION_ORIENTED:int = 4


class PathFollow3D(__node3d__.Node3D):
  """
		This node takes its parent `Path3D`, and returns the coordinates of a point within it, given a distance from the first vertex.
		It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting the `progress` in this node.
	"""

  @staticmethod
  def constructor()->PathFollow3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PathFollow3D:pass


  @property
  def progress(self)->float:
    """"""
    pass
  @progress.setter
  def progress(self,  value:float)->None:
    """"""
    pass
  @property
  def progress_ratio(self)->float:
    """"""
    pass
  @progress_ratio.setter
  def progress_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def h_offset(self)->float:
    """"""
    pass
  @h_offset.setter
  def h_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def v_offset(self)->float:
    """"""
    pass
  @v_offset.setter
  def v_offset(self,  value:float)->None:
    """"""
    pass
  @property
  def rotation_mode(self)->int:
    """"""
    pass
  @rotation_mode.setter
  def rotation_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def use_model_front(self)->bool:
    """"""
    pass
  @use_model_front.setter
  def use_model_front(self,  value:bool)->None:
    """"""
    pass
  @property
  def cubic_interp(self)->bool:
    """"""
    pass
  @cubic_interp.setter
  def cubic_interp(self,  value:bool)->None:
    """"""
    pass
  @property
  def loop(self)->bool:
    """"""
    pass
  @loop.setter
  def loop(self,  value:bool)->None:
    """"""
    pass
  @property
  def tilt_enabled(self)->bool:
    """"""
    pass
  @tilt_enabled.setter
  def tilt_enabled(self,  value:bool)->None:
    """"""
    pass
  def set_progress(self, progress:float)->None:
    """"""
    pass

  def get_progress(self)->float:
    """"""
    pass

  def set_h_offset(self, h_offset:float)->None:
    """"""
    pass

  def get_h_offset(self)->float:
    """"""
    pass

  def set_v_offset(self, v_offset:float)->None:
    """"""
    pass

  def get_v_offset(self)->float:
    """"""
    pass

  def set_progress_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_progress_ratio(self)->float:
    """"""
    pass

  def set_rotation_mode(self, rotation_mode:int )->None:
    """"""
    pass

  def get_rotation_mode(self)->int:
    """"""
    pass

  def set_cubic_interpolation(self, enabled:bool)->None:
    """"""
    pass

  def get_cubic_interpolation(self)->bool:
    """"""
    pass

  def set_use_model_front(self, enabled:bool)->None:
    """"""
    pass

  def is_using_model_front(self)->bool:
    """"""
    pass

  def set_loop(self, loop:bool)->None:
    """"""
    pass

  def has_loop(self)->bool:
    """"""
    pass

  def set_tilt_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_tilt_enabled(self)->bool:
    """"""
    pass

  @staticmethod
  def correct_posture(transform:__core__.Transform3D, rotation_mode:int )->__core__.Transform3D:
    """
				Correct the `transform`. `rotation_mode` implicitly specifies how posture (forward, up and sideway direction) is calculated.
			"""
    pass


