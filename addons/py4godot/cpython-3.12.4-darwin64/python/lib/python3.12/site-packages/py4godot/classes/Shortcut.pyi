from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.Resource as __resource__



class Shortcut(__resource__.Resource):
  """
		Shortcuts (also known as hotkeys) are containers of `InputEvent` resources. They are commonly used to interact with a `Control` element from an `InputEvent`.
		One shortcut can contain multiple `InputEvent` resources, making it possible to trigger one action with multiple different inputs.
		**Example:** Capture the `kbd`Ctrl + S`/kbd` shortcut using a `Shortcut` resource:
		
		```gdscript
		extends Node

		var save_shortcut = Shortcut.new()
		func _ready():
			var key_event = InputEventKey.new()
			key_event.keycode = KEY_S
			key_event.ctrl_pressed = true
			key_event.command_or_control_autoremap = true # Swaps Ctrl for Command on Mac.
			save_shortcut.events = `key_event`

		func _input(event):
			if save_shortcut.matches_event(event) and event.is_pressed() and not event.is_echo():
				print("Save shortcut pressed!")
				get_viewport().set_input_as_handled()
		```
		
		
	"""

  @staticmethod
  def constructor()->Shortcut:pass



  @staticmethod
  def cast(other:__object__.Object)->Shortcut:pass


  @property
  def events(self)->typedarray::24/17:InputEvent:
    """"""
    pass
  @events.setter
  def events(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_events(self, events:__core__.Array)->None:
    """"""
    pass

  def get_events(self)->__core__.Array:
    """"""
    pass

  def has_valid_event(self)->bool:
    """
				Returns whether `events` contains an `InputEvent` which is valid.
			"""
    pass

  def matches_event(self, event:__inputevent__.InputEvent)->bool:
    """
				Returns whether any `InputEvent` in `events` equals `event`. This uses `InputEvent.is_match` to compare events.
			"""
    pass

  def get_as_text(self)->str:
    """
				Returns the shortcut's first valid `InputEvent` as a `String`.
			"""
    pass


