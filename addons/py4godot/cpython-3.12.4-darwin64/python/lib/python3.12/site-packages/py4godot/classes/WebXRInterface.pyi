from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRControllerTracker as __xrcontrollertracker__
import py4godot.classes.XRInterface as __xrinterface__
import py4godot.classes.WebXRInterface as __webxrinterface__


class TargetRayMode:
  TARGET_RAY_MODE_UNKNOWN:int = 0
  TARGET_RAY_MODE_GAZE:int = 1
  TARGET_RAY_MODE_TRACKED_POINTER:int = 2
  TARGET_RAY_MODE_SCREEN:int = 3


class WebXRInterface(__xrinterface__.XRInterface):
  """"""
  session_supported: BuiltinSignal
  session_started: BuiltinSignal
  session_ended: BuiltinSignal
  session_failed: BuiltinSignal
  selectstart: BuiltinSignal
  select: BuiltinSignal
  selectend: BuiltinSignal
  squeezestart: BuiltinSignal
  squeeze: BuiltinSignal
  squeezeend: BuiltinSignal
  visibility_state_changed: BuiltinSignal
  reference_space_reset: BuiltinSignal
  display_refresh_rate_changed: BuiltinSignal

  @staticmethod
  def constructor()->WebXRInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->WebXRInterface:pass


  @property
  def session_mode(self)->str:
    """"""
    pass
  @session_mode.setter
  def session_mode(self,  value:str)->None:
    """"""
    pass
  @property
  def required_features(self)->str:
    """"""
    pass
  @required_features.setter
  def required_features(self,  value:str)->None:
    """"""
    pass
  @property
  def optional_features(self)->str:
    """"""
    pass
  @optional_features.setter
  def optional_features(self,  value:str)->None:
    """"""
    pass
  @property
  def requested_reference_space_types(self)->str:
    """"""
    pass
  @requested_reference_space_types.setter
  def requested_reference_space_types(self,  value:str)->None:
    """"""
    pass
  @property
  def reference_space_type(self)->str:
    """"""
    pass
  @property
  def enabled_features(self)->str:
    """"""
    pass
  @property
  def visibility_state(self)->str:
    """"""
    pass
  def is_session_supported(self, session_mode:str)->None:
    """"""
    pass

  def set_session_mode(self, session_mode:str)->None:
    """"""
    pass

  def get_session_mode(self)->str:
    """"""
    pass

  def set_required_features(self, required_features:str)->None:
    """"""
    pass

  def get_required_features(self)->str:
    """"""
    pass

  def set_optional_features(self, optional_features:str)->None:
    """"""
    pass

  def get_optional_features(self)->str:
    """"""
    pass

  def get_reference_space_type(self)->str:
    """"""
    pass

  def get_enabled_features(self)->str:
    """"""
    pass

  def set_requested_reference_space_types(self, requested_reference_space_types:str)->None:
    """"""
    pass

  def get_requested_reference_space_types(self)->str:
    """"""
    pass

  def is_input_source_active(self, input_source_id:int)->bool:
    """"""
    pass

  def get_input_source_tracker(self, input_source_id:int)->__xrcontrollertracker__.XRControllerTracker:
    """"""
    pass

  def get_input_source_target_ray_mode(self, input_source_id:int)->int:
    """"""
    pass

  def get_visibility_state(self)->str:
    """"""
    pass

  def get_display_refresh_rate(self)->float:
    """"""
    pass

  def set_display_refresh_rate(self, refresh_rate:float)->None:
    """"""
    pass

  def get_available_display_refresh_rates(self)->__core__.Array:
    """"""
    pass


