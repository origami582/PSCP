from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.AudioEffectInstance as __audioeffectinstance__
import py4godot.classes.AudioEffectSpectrumAnalyzerInstance as __audioeffectspectrumanalyzerinstance__



class AudioEffect(__resource__.Resource):
  """
		The base `Resource` for every audio effect. In the editor, an audio effect can be added to the current bus layout through the Audio panel. At run-time, it is also possible to manipulate audio effects through `AudioServer.add_bus_effect`, `AudioServer.remove_bus_effect`, and `AudioServer.get_bus_effect`.
		When applied on a bus, an audio effect creates a corresponding `AudioEffectInstance`. The instance is directly responsible for manipulating the sound, based on the original audio effect's properties.
	"""

  @staticmethod
  def constructor()->AudioEffect:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffect:pass


  def _instantiate(self)->__audioeffectspectrumanalyzerinstance__.AudioEffectSpectrumAnalyzerInstance|__audioeffectinstance__.AudioEffectInstance:
    """
				Override this method to customize the `AudioEffectInstance` created when this effect is applied on a bus in the editor's Audio panel, or through `AudioServer.add_bus_effect`.
				```gdscript
				extends AudioEffect

				@export var strength = 4.0

				func _instantiate():
					var effect = CustomAudioEffectInstance.new()
					effect.base = self

					return effect
				```
				**Note:** It is recommended to keep a reference to the original `AudioEffect` in the new instance. Depending on the implementation this allows the effect instance to listen for changes at run-time and be modified accordingly.
			"""
    pass


