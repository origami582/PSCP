from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.EditorVCSInterface as __editorvcsinterface__
import py4godot.classes.r as __r__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.t as __t__
import py4godot.classes.g as __g__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.S as __s__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.Object as __object__
import py4godot.classes.T as __t__


class ChangeType:
  CHANGE_KIND_NEW:int = 0
  CHANGE_KIND_MODIFIED:int = 1
  CHANGE_KIND_RENAMED:int = 2
  CHANGE_KIND_DELETED:int = 3
  CHANGE_KIND_TYPECHANGE:int = 4
  CHANGE_KIND_UNMERGED:int = 5
class TreeArea:
  TREE_AREA_COMMIT:int = 0
  TREE_AREA_STAGED:int = 1
  TREE_AREA_UNSTAGED:int = 2


class EditorVCSInterface(__object__.Object):
  """
		Defines the API that the editor uses to extract information from the underlying VCS. The implementation of this API is included in VCS plugins, which are GDExtension plugins that inherit `EditorVCSInterface` and are attached (on demand) to the singleton instance of `EditorVCSInterface`. Instead of performing the task themselves, all the virtual functions listed below are calling the internally overridden functions in the VCS plugins to provide a plug-n-play experience. A custom VCS plugin is supposed to inherit from `EditorVCSInterface` and override each of these virtual functions.
	"""

  @staticmethod
  def constructor()->EditorVCSInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorVCSInterface:pass


  def _initialize(self, project_path:str)->bool:
    """
				Initializes the VCS plugin when called from the editor. Returns whether or not the plugin was successfully initialized. A VCS project is initialized at `project_path`.
			"""
    pass

  def _set_credentials(self, username:str, password:str, ssh_public_key_path:str, ssh_private_key_path:str, ssh_passphrase:str)->None:
    """
				Set user credentials in the underlying VCS. `username` and `password` are used only during HTTPS authentication unless not already mentioned in the remote URL. `ssh_public_key_path`, `ssh_private_key_path`, and `ssh_passphrase` are only used during SSH authentication.
			"""
    pass

  def _get_modified_files_data(self)->typedarray::Dictionary:
    """
				Returns an `Array` of `Dictionary` items (see `create_status_file`), each containing the status data of every modified file in the project folder.
			"""
    pass

  def _stage_file(self, file_path:str)->None:
    """
				Stages the file present at `file_path` to the staged area.
			"""
    pass

  def _unstage_file(self, file_path:str)->None:
    """
				Unstages the file present at `file_path` from the staged area to the unstaged area.
			"""
    pass

  def _discard_file(self, file_path:str)->None:
    """
				Discards the changes made in a file present at `file_path`.
			"""
    pass

  def _commit(self, msg:str)->None:
    """
				Commits the currently staged changes and applies the commit `msg` to the resulting commit.
			"""
    pass

  def _get_diff(self, identifier:str, area:int)->typedarray::Dictionary:
    """
				Returns an array of `Dictionary` items (see `create_diff_file`, `create_diff_hunk`, `create_diff_line`, `add_line_diffs_into_diff_hunk` and `add_diff_hunks_into_diff_file`), each containing information about a diff. If `identifier` is a file path, returns a file diff, and if it is a commit identifier, then returns a commit diff.
			"""
    pass

  def _shut_down(self)->bool:
    """
				Shuts down VCS plugin instance. Called when the user either closes the editor or shuts down the VCS plugin through the editor UI.
			"""
    pass

  def _get_vcs_name(self)->str:
    """
				Returns the name of the underlying VCS provider.
			"""
    pass

  def _get_previous_commits(self, max_commits:int)->typedarray::Dictionary:
    """
				Returns an `Array` of `Dictionary` items (see `create_commit`), each containing the data for a past commit.
			"""
    pass

  def _get_branch_list(self)->typedarray::String:
    """
				Gets an instance of an `Array` of `String`s containing available branch names in the VCS.
			"""
    pass

  def _get_remotes(self)->typedarray::String:
    """
				Returns an `Array` of `String`s, each containing the name of a remote configured in the VCS.
			"""
    pass

  def _create_branch(self, branch_name:str)->None:
    """
				Creates a new branch named `branch_name` in the VCS.
			"""
    pass

  def _remove_branch(self, branch_name:str)->None:
    """
				Remove a branch from the local VCS.
			"""
    pass

  def _create_remote(self, remote_name:str, remote_url:str)->None:
    """
				Creates a new remote destination with name `remote_name` and points it to `remote_url`. This can be an HTTPS remote or an SSH remote.
			"""
    pass

  def _remove_remote(self, remote_name:str)->None:
    """
				Remove a remote from the local VCS.
			"""
    pass

  def _get_current_branch_name(self)->str:
    """
				Gets the current branch name defined in the VCS.
			"""
    pass

  def _checkout_branch(self, branch_name:str)->bool:
    """
				Checks out a `branch_name` in the VCS.
			"""
    pass

  def _pull(self, remote:str)->None:
    """
				Pulls changes from the remote. This can give rise to merge conflicts.
			"""
    pass

  def _push(self, remote:str, force:bool)->None:
    """
				Pushes changes to the `remote`. If `force` is `true`, a force push will override the change history already present on the remote.
			"""
    pass

  def _fetch(self, remote:str)->None:
    """
				Fetches new changes from the `remote`, but doesn't write changes to the current working directory. Equivalent to `git fetch`.
			"""
    pass

  def _get_line_diff(self, file_path:str, text:str)->typedarray::Dictionary:
    """
				Returns an `Array` of `Dictionary` items (see `create_diff_hunk`), each containing a line diff between a file at `file_path` and the `text` which is passed in.
			"""
    pass

  def create_diff_line(self, new_line_no:int, old_line_no:int, content:str, status:str)->__core__.Dictionary:
    """
				Helper function to create a `Dictionary` for storing a line diff. `new_line_no` is the line number in the new file (can be `-1` if the line is deleted). `old_line_no` is the line number in the old file (can be `-1` if the line is added). `content` is the diff text. `status` is a single character string which stores the line origin.
			"""
    pass

  def create_diff_hunk(self, old_start:int, new_start:int, old_lines:int, new_lines:int)->__core__.Dictionary:
    """
				Helper function to create a `Dictionary` for storing diff hunk data. `old_start` is the starting line number in old file. `new_start` is the starting line number in new file. `old_lines` is the number of lines in the old file. `new_lines` is the number of lines in the new file.
			"""
    pass

  def create_diff_file(self, new_file:str, old_file:str)->__core__.Dictionary:
    """
				Helper function to create a `Dictionary` for storing old and new diff file paths.
			"""
    pass

  def create_commit(self, msg:str, author:str, id:str, unix_timestamp:int, offset_minutes:int)->__core__.Dictionary:
    """
				Helper function to create a commit `Dictionary` item. `msg` is the commit message of the commit. `author` is a single human-readable string containing all the author's details, e.g. the email and name configured in the VCS. `id` is the identifier of the commit, in whichever format your VCS may provide an identifier to commits. `unix_timestamp` is the UTC Unix timestamp of when the commit was created. `offset_minutes` is the timezone offset in minutes, recorded from the system timezone where the commit was created.
			"""
    pass

  def create_status_file(self, file_path:str, change_type:int , area:int )->__core__.Dictionary:
    """
				Helper function to create a `Dictionary` used by editor to read the status of a file.
			"""
    pass

  def add_diff_hunks_into_diff_file(self, diff_file:__core__.Dictionary, diff_hunks:__core__.Array)->__core__.Dictionary:
    """
				Helper function to add an array of `diff_hunks` into a `diff_file`.
			"""
    pass

  def add_line_diffs_into_diff_hunk(self, diff_hunk:__core__.Dictionary, line_diffs:__core__.Array)->__core__.Dictionary:
    """
				Helper function to add an array of `line_diffs` into a `diff_hunk`.
			"""
    pass

  def popup_error(self, msg:str)->None:
    """
				Pops up an error message in the editor which is shown as coming from the underlying VCS. Use this to show VCS specific error messages.
			"""
    pass


