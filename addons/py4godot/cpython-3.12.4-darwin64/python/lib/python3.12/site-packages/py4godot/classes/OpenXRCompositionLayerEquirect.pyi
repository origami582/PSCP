from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__



class OpenXRCompositionLayerEquirect(__openxrcompositionlayer__.OpenXRCompositionLayer):
  """"""

  @staticmethod
  def constructor()->OpenXRCompositionLayerEquirect:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRCompositionLayerEquirect:pass


  @property
  def radius(self)->float:
    """"""
    pass
  @radius.setter
  def radius(self,  value:float)->None:
    """"""
    pass
  @property
  def central_horizontal_angle(self)->float:
    """"""
    pass
  @central_horizontal_angle.setter
  def central_horizontal_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def upper_vertical_angle(self)->float:
    """"""
    pass
  @upper_vertical_angle.setter
  def upper_vertical_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def lower_vertical_angle(self)->float:
    """"""
    pass
  @lower_vertical_angle.setter
  def lower_vertical_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def fallback_segments(self)->int:
    """"""
    pass
  @fallback_segments.setter
  def fallback_segments(self,  value:int)->None:
    """"""
    pass
  def set_radius(self, radius:float)->None:
    """"""
    pass

  def get_radius(self)->float:
    """"""
    pass

  def set_central_horizontal_angle(self, angle:float)->None:
    """"""
    pass

  def get_central_horizontal_angle(self)->float:
    """"""
    pass

  def set_upper_vertical_angle(self, angle:float)->None:
    """"""
    pass

  def get_upper_vertical_angle(self)->float:
    """"""
    pass

  def set_lower_vertical_angle(self, angle:float)->None:
    """"""
    pass

  def get_lower_vertical_angle(self)->float:
    """"""
    pass

  def set_fallback_segments(self, segments:int)->None:
    """"""
    pass

  def get_fallback_segments(self)->int:
    """"""
    pass


