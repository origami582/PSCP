from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__



class ResourceUID(__object__.Object):
  """
		Resource UIDs (Unique IDentifiers) allow the engine to keep references between resources intact, even if files are renamed or moved. They can be accessed with `uid://`.
		`ResourceUID` keeps track of all registered resource UIDs in a project, generates new UIDs, and converts between their string and integer representations.
	"""



  @staticmethod
  def cast(other:__object__.Object)->ResourceUID:pass

  @staticmethod
  def instance()->ResourceUID:pass

  def id_to_text(self, id:int)->str:
    """
				Converts the given UID to a `uid://` string value.
			"""
    pass

  def text_to_id(self, text_id:str)->int:
    """
				Extracts the UID value from the given `uid://` string.
			"""
    pass

  def create_id(self)->int:
    """
				Generates a random resource UID which is guaranteed to be unique within the list of currently loaded UIDs.
				In order for this UID to be registered, you must call `add_id` or `set_id`.
			"""
    pass

  def has_id(self, id:int)->bool:
    """
				Returns whether the given UID value is known to the cache.
			"""
    pass

  def add_id(self, id:int, path:str)->None:
    """
				Adds a new UID value which is mapped to the given resource path.
				Fails with an error if the UID already exists, so be sure to check `has_id` beforehand, or use `set_id` instead.
			"""
    pass

  def set_id(self, id:int, path:str)->None:
    """
				Updates the resource path of an existing UID.
				Fails with an error if the UID does not exist, so be sure to check `has_id` beforehand, or use `add_id` instead.
			"""
    pass

  def get_id_path(self, id:int)->str:
    """
				Returns the path that the given UID value refers to.
				Fails with an error if the UID does not exist, so be sure to check `has_id` beforehand.
			"""
    pass

  def remove_id(self, id:int)->None:
    """
				Removes a loaded UID value from the cache.
				Fails with an error if the UID does not exist, so be sure to check `has_id` beforehand.
			"""
    pass


