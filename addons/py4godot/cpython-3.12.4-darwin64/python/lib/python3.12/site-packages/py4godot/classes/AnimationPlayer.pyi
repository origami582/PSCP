from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Tween as __tween__
import py4godot.classes.AnimationPlayer as __animationplayer__
import py4godot.classes.AnimationMixer as __animationmixer__


class AnimationProcessCallback:
  ANIMATION_PROCESS_PHYSICS:int = 0
  ANIMATION_PROCESS_IDLE:int = 1
  ANIMATION_PROCESS_MANUAL:int = 2
class AnimationMethodCallMode:
  ANIMATION_METHOD_CALL_DEFERRED:int = 0
  ANIMATION_METHOD_CALL_IMMEDIATE:int = 1


class AnimationPlayer(__animationmixer__.AnimationMixer):
  """
		An animation player is used for general-purpose playback of animations. It contains a dictionary of `AnimationLibrary` resources and custom blend times between animation transitions.
		Some methods and properties use a single key to reference an animation directly. These keys are formatted as the key for the library, followed by a forward slash, then the key for the animation within the library, for example `"movement/run"`. If the library's key is an empty string (known as the default library), the forward slash is omitted, being the same key used by the library.
		`AnimationPlayer` is better-suited than `Tween` for more complex animations, for example ones with non-trivial timings. It can also be used over `Tween` if the animation track editor is more convenient than doing it in code.
		Updating the target properties of animations occurs at the process frame.
	"""
  current_animation_changed: BuiltinSignal
  animation_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationPlayer:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationPlayer:pass


  @property
  def current_animation(self)->__core__.StringName:
    """"""
    pass
  @current_animation.setter
  def current_animation(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def assigned_animation(self)->__core__.StringName:
    """"""
    pass
  @assigned_animation.setter
  def assigned_animation(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def autoplay(self)->__core__.StringName:
    """"""
    pass
  @autoplay.setter
  def autoplay(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def current_animation_length(self)->float:
    """"""
    pass
  @property
  def current_animation_position(self)->float:
    """"""
    pass
  @property
  def playback_auto_capture(self)->bool:
    """"""
    pass
  @playback_auto_capture.setter
  def playback_auto_capture(self,  value:bool)->None:
    """"""
    pass
  @property
  def playback_auto_capture_duration(self)->float:
    """"""
    pass
  @playback_auto_capture_duration.setter
  def playback_auto_capture_duration(self,  value:float)->None:
    """"""
    pass
  @property
  def playback_auto_capture_transition_type(self)->int:
    """"""
    pass
  @playback_auto_capture_transition_type.setter
  def playback_auto_capture_transition_type(self,  value:int)->None:
    """"""
    pass
  @property
  def playback_auto_capture_ease_type(self)->int:
    """"""
    pass
  @playback_auto_capture_ease_type.setter
  def playback_auto_capture_ease_type(self,  value:int)->None:
    """"""
    pass
  @property
  def playback_default_blend_time(self)->float:
    """"""
    pass
  @playback_default_blend_time.setter
  def playback_default_blend_time(self,  value:float)->None:
    """"""
    pass
  @property
  def speed_scale(self)->float:
    """"""
    pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def movie_quit_on_finish(self)->bool:
    """"""
    pass
  @movie_quit_on_finish.setter
  def movie_quit_on_finish(self,  value:bool)->None:
    """"""
    pass
  def animation_set_next(self, animation_from:__core__.StringName|str, animation_to:__core__.StringName|str)->None:
    """
				Triggers the `animation_to` animation when the `animation_from` animation completes.
			"""
    pass

  def animation_get_next(self, animation_from:__core__.StringName|str)->__core__.StringName:
    """
				Returns the key of the animation which is queued to play after the `animation_from` animation.
			"""
    pass

  def set_blend_time(self, animation_from:__core__.StringName|str, animation_to:__core__.StringName|str, sec:float)->None:
    """
				Specifies a blend time (in seconds) between two animations, referenced by their keys.
			"""
    pass

  def get_blend_time(self, animation_from:__core__.StringName|str, animation_to:__core__.StringName|str)->float:
    """
				Returns the blend time (in seconds) between two animations, referenced by their keys.
			"""
    pass

  def set_default_blend_time(self, sec:float)->None:
    """"""
    pass

  def get_default_blend_time(self)->float:
    """"""
    pass

  def set_auto_capture(self, auto_capture:bool)->None:
    """"""
    pass

  def is_auto_capture(self)->bool:
    """"""
    pass

  def set_auto_capture_duration(self, auto_capture_duration:float)->None:
    """"""
    pass

  def get_auto_capture_duration(self)->float:
    """"""
    pass

  def set_auto_capture_transition_type(self, auto_capture_transition_type:int )->None:
    """"""
    pass

  def get_auto_capture_transition_type(self)->int:
    """"""
    pass

  def set_auto_capture_ease_type(self, auto_capture_ease_type:int )->None:
    """"""
    pass

  def get_auto_capture_ease_type(self)->int:
    """"""
    pass

  def play(self, name:__core__.StringName|str= __core__.StringName.new0(), custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False)->None:
    """
				Plays the animation with key `name`. Custom blend times and speed can be set.
				The `from_end` option only affects when switching to a new animation track, or if the same track but at the start or end. It does not affect resuming playback that was paused in the middle of an animation. If `custom_speed` is negative and `from_end` is `true`, the animation will play backwards (which is equivalent to calling `play_backwards`).
				The `AnimationPlayer` keeps track of its current or last played animation with `assigned_animation`. If this method is called with that same animation `name`, or with no `name` parameter, the assigned animation will resume playing if it was paused.
				**Note:** The animation will be updated the next time the `AnimationPlayer` is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call `advance(0)`.
			"""
    pass

  def play_section_with_markers(self, name:__core__.StringName|str= __core__.StringName.new0(), start_marker:__core__.StringName|str= __core__.StringName.new0(), end_marker:__core__.StringName|str= __core__.StringName.new0(), custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False)->None:
    """
				Plays the animation with key `name` and the section starting from `start_marker` and ending on `end_marker`.
				If the start marker is empty, the section starts from the beginning of the animation. If the end marker is empty, the section ends on the end of the animation. See also `play`.
			"""
    pass

  def play_section(self, name:__core__.StringName|str= __core__.StringName.new0(), start_time:float=-1, end_time:float=-1, custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False)->None:
    """
				Plays the animation with key `name` and the section starting from `start_time` and ending on `end_time`. See also `play`.
				Setting `start_time` to a value outside the range of the animation means the start of the animation will be used instead, and setting `end_time` to a value outside the range of the animation means the end of the animation will be used instead. `start_time` cannot be equal to `end_time`.
			"""
    pass

  def play_backwards(self, name:__core__.StringName|str= __core__.StringName.new0(), custom_blend:float=-1)->None:
    """
				Plays the animation with key `name` in reverse.
				This method is a shorthand for `play` with `custom_speed = -1.0` and `from_end = true`, so see its description for more information.
			"""
    pass

  def play_section_with_markers_backwards(self, name:__core__.StringName|str= __core__.StringName.new0(), start_marker:__core__.StringName|str= __core__.StringName.new0(), end_marker:__core__.StringName|str= __core__.StringName.new0(), custom_blend:float=-1)->None:
    """
				Plays the animation with key `name` and the section starting from `start_marker` and ending on `end_marker` in reverse.
				This method is a shorthand for `play_section_with_markers` with `custom_speed = -1.0` and `from_end = true`, see its description for more information.
			"""
    pass

  def play_section_backwards(self, name:__core__.StringName|str= __core__.StringName.new0(), start_time:float=-1, end_time:float=-1, custom_blend:float=-1)->None:
    """
				Plays the animation with key `name` and the section starting from `start_time` and ending on `end_time` in reverse.
				This method is a shorthand for `play_section` with `custom_speed = -1.0` and `from_end = true`, see its description for more information.
			"""
    pass

  def play_with_capture(self, name:__core__.StringName|str= __core__.StringName.new0(), duration:float=-1.0, custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False, trans_type:int =0, ease_type:int =0)->None:
    """
				See also `AnimationMixer.capture`.
				You can use this method to use more detailed options for capture than those performed by `playback_auto_capture`. When `playback_auto_capture` is `false`, this method is almost the same as the following:
				```gdscript
				capture(name, duration, trans_type, ease_type)
				play(name, custom_blend, custom_speed, from_end)
				```
				If `name` is blank, it specifies `assigned_animation`.
				If `duration` is a negative value, the duration is set to the interval between the current position and the first key, when `from_end` is `true`, uses the interval between the current position and the last key instead.
				**Note:** The `duration` takes `speed_scale` into account, but `custom_speed` does not, because the capture cache is interpolated with the blend result and the result may contain multiple animations.
			"""
    pass

  def pause(self)->None:
    """
				Pauses the currently playing animation. The `current_animation_position` will be kept and calling `play` or `play_backwards` without arguments or with the same animation name as `assigned_animation` will resume the animation.
				See also `stop`.
			"""
    pass

  def stop(self, keep_state:bool=False)->None:
    """
				Stops the currently playing animation. The animation position is reset to `0` and the `custom_speed` is reset to `1.0`. See also `pause`.
				If `keep_state` is `true`, the animation state is not updated visually.
				**Note:** The method / audio / animation playback tracks will not be processed by this method.
			"""
    pass

  def is_playing(self)->bool:
    """
				Returns `true` if an animation is currently playing (even if `speed_scale` and/or `custom_speed` are `0`).
			"""
    pass

  def set_current_animation(self, animation:str)->None:
    """"""
    pass

  def get_current_animation(self)->str:
    """"""
    pass

  def set_assigned_animation(self, animation:str)->None:
    """"""
    pass

  def get_assigned_animation(self)->str:
    """"""
    pass

  def queue(self, name:__core__.StringName|str)->None:
    """
				Queues an animation for playback once the current animation and all previously queued animations are done.
				**Note:** If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow.
			"""
    pass

  def get_queue(self)->__core__.PackedStringArray:
    """
				Returns a list of the animation keys that are currently queued to play.
			"""
    pass

  def clear_queue(self)->None:
    """
				Clears all queued, unplayed animations.
			"""
    pass

  def set_speed_scale(self, speed:float)->None:
    """"""
    pass

  def get_speed_scale(self)->float:
    """"""
    pass

  def get_playing_speed(self)->float:
    """
				Returns the actual playing speed of current animation or `0` if not playing. This speed is the `speed_scale` property multiplied by `custom_speed` argument specified when calling the `play` method.
				Returns a negative value if the current animation is playing backwards.
			"""
    pass

  def set_autoplay(self, name:str)->None:
    """"""
    pass

  def get_autoplay(self)->str:
    """"""
    pass

  def set_movie_quit_on_finish_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_movie_quit_on_finish_enabled(self)->bool:
    """"""
    pass

  def get_current_animation_position(self)->float:
    """"""
    pass

  def get_current_animation_length(self)->float:
    """"""
    pass

  def set_section_with_markers(self, start_marker:__core__.StringName|str= __core__.StringName.new0(), end_marker:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Changes the start and end markers of the section being played. The current playback position will be clamped within the new section. See also `play_section_with_markers`.
				If the argument is empty, the section uses the beginning or end of the animation. If both are empty, it means that the section is not set.
			"""
    pass

  def set_section(self, start_time:float=-1, end_time:float=-1)->None:
    """
				Changes the start and end times of the section being played. The current playback position will be clamped within the new section. See also `play_section`.
			"""
    pass

  def reset_section(self)->None:
    """
				Resets the current section. Does nothing if a section has not been set.
			"""
    pass

  def get_section_start_time(self)->float:
    """
				Returns the start time of the section currently being played.
			"""
    pass

  def get_section_end_time(self)->float:
    """
				Returns the end time of the section currently being played.
			"""
    pass

  def has_section(self)->bool:
    """
				Returns `true` if an animation is currently playing with a section.
			"""
    pass

  def seek(self, seconds:float, update:bool=False, update_only:bool=False)->None:
    """
				Seeks the animation to the `seconds` point in time (in seconds). If `update` is `true`, the animation updates too, otherwise it updates at process time. Events between the current frame and `seconds` are skipped.
				If `update_only` is `true`, the method / audio / animation playback tracks will not be processed.
				**Note:** Seeking to the end of the animation doesn't emit `signal AnimationMixer.animation_finished`. If you want to skip animation and emit the signal, use `AnimationMixer.advance`.
			"""
    pass

  def set_process_callback(self, mode:int )->None:
    """
				Sets the process notification in which to update animations.
			"""
    pass

  def get_process_callback(self)->int:
    """
				Returns the process notification in which to update animations.
			"""
    pass

  def set_method_call_mode(self, mode:int )->None:
    """
				Sets the call mode used for "Call Method" tracks.
			"""
    pass

  def get_method_call_mode(self)->int:
    """
				Returns the call mode used for "Call Method" tracks.
			"""
    pass

  def set_root(self, path:__core__.NodePath|str)->None:
    """
				Sets the node which node path references will travel from.
			"""
    pass

  def get_root(self)->__core__.NodePath:
    """
				Returns the node which node path references will travel from.
			"""
    pass


