from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.Font as __font__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__



class TextLine(__refcounted__.RefCounted):
  """
		Abstraction over `TextServer` for handling a single line of text.
	"""

  @staticmethod
  def constructor()->TextLine:pass



  @staticmethod
  def cast(other:__object__.Object)->TextLine:pass


  @property
  def direction(self)->int:
    """"""
    pass
  @direction.setter
  def direction(self,  value:int)->None:
    """"""
    pass
  @property
  def orientation(self)->int:
    """"""
    pass
  @orientation.setter
  def orientation(self,  value:int)->None:
    """"""
    pass
  @property
  def preserve_invalid(self)->bool:
    """"""
    pass
  @preserve_invalid.setter
  def preserve_invalid(self,  value:bool)->None:
    """"""
    pass
  @property
  def preserve_control(self)->bool:
    """"""
    pass
  @preserve_control.setter
  def preserve_control(self,  value:bool)->None:
    """"""
    pass
  @property
  def width(self)->float:
    """"""
    pass
  @width.setter
  def width(self,  value:float)->None:
    """"""
    pass
  @property
  def alignment(self)->int:
    """"""
    pass
  @alignment.setter
  def alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def flags(self)->int:
    """"""
    pass
  @flags.setter
  def flags(self,  value:int)->None:
    """"""
    pass
  @property
  def text_overrun_behavior(self)->int:
    """"""
    pass
  @text_overrun_behavior.setter
  def text_overrun_behavior(self,  value:int)->None:
    """"""
    pass
  @property
  def ellipsis_char(self)->str:
    """"""
    pass
  @ellipsis_char.setter
  def ellipsis_char(self,  value:str)->None:
    """"""
    pass
  def clear(self)->None:
    """
				Clears text line (removes text and inline objects).
			"""
    pass

  def set_direction(self, direction:int )->None:
    """"""
    pass

  def get_direction(self)->int:
    """"""
    pass

  def set_orientation(self, orientation:int )->None:
    """"""
    pass

  def get_orientation(self)->int:
    """"""
    pass

  def set_preserve_invalid(self, enabled:bool)->None:
    """"""
    pass

  def get_preserve_invalid(self)->bool:
    """"""
    pass

  def set_preserve_control(self, enabled:bool)->None:
    """"""
    pass

  def get_preserve_control(self)->bool:
    """"""
    pass

  def set_bidi_override(self, override:__core__.Array)->None:
    """
				Overrides BiDi for the structured text.
				Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
			"""
    pass

  def add_string(self, text:str, font:__font__.Font, font_size:int, language:str= __core__.String.new0(), meta:Any=None)->bool:
    """
				Adds text span and font to draw it.
			"""
    pass

  def add_object(self, key:Any, size:__core__.Vector2, inline_align:int =5, length:int=1, baseline:float=0.0)->bool:
    """
				Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
			"""
    pass

  def resize_object(self, key:Any, size:__core__.Vector2, inline_align:int =5, baseline:float=0.0)->bool:
    """
				Sets new size and alignment of embedded object.
			"""
    pass

  def set_width(self, width:float)->None:
    """"""
    pass

  def get_width(self)->float:
    """"""
    pass

  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def tab_align(self, tab_stops:__core__.PackedFloat32Array)->None:
    """
				Aligns text to the given tab-stops.
			"""
    pass

  def set_flags(self, flags:int)->None:
    """"""
    pass

  def get_flags(self)->int:
    """"""
    pass

  def set_text_overrun_behavior(self, overrun_behavior:int )->None:
    """"""
    pass

  def get_text_overrun_behavior(self)->int:
    """"""
    pass

  def set_ellipsis_char(self, char:str)->None:
    """"""
    pass

  def get_ellipsis_char(self)->str:
    """"""
    pass

  def get_objects(self)->__core__.Array:
    """
				Returns array of inline objects.
			"""
    pass

  def get_object_rect(self, key:Any)->__core__.Rect2:
    """
				Returns bounding rectangle of the inline object.
			"""
    pass

  def get_size(self)->__core__.Vector2:
    """
				Returns size of the bounding box of the text.
			"""
    pass

  def get_rid(self)->__core__.RID:
    """
				Returns TextServer buffer RID.
			"""
    pass

  def get_line_ascent(self)->float:
    """
				Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
			"""
    pass

  def get_line_descent(self)->float:
    """
				Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
			"""
    pass

  def get_line_width(self)->float:
    """
				Returns width (for horizontal layout) or height (for vertical) of the text.
			"""
    pass

  def get_line_underline_position(self)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def get_line_underline_thickness(self)->float:
    """
				Returns thickness of the underline.
			"""
    pass

  def draw(self, canvas:__core__.RID, pos:__core__.Vector2, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def draw_outline(self, canvas:__core__.RID, pos:__core__.Vector2, outline_size:int=1, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def hit_test(self, coords:float)->int:
    """
				Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
			"""
    pass


