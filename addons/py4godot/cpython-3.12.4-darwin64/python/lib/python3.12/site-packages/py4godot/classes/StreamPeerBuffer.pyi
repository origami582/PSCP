from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StreamPeer as __streampeer__
import py4godot.classes.StreamPeerBuffer as __streampeerbuffer__



class StreamPeerBuffer(__streampeer__.StreamPeer):
  """
		A data buffer stream peer that uses a byte array as the stream. This object can be used to handle binary data from network sessions. To handle binary data stored in files, `FileAccess` can be used directly.
		A `StreamPeerBuffer` object keeps an internal cursor which is the offset in bytes to the start of the buffer. Get and put operations are performed at the cursor position and will move the cursor accordingly.
	"""

  @staticmethod
  def constructor()->StreamPeerBuffer:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeerBuffer:pass


  @property
  def data_array(self)->__core__.PackedByteArray:
    """"""
    pass
  @data_array.setter
  def data_array(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  def seek(self, position:int)->None:
    """
				Moves the cursor to the specified position. `position` must be a valid index of `data_array`.
			"""
    pass

  def get_size(self)->int:
    """
				Returns the size of `data_array`.
			"""
    pass

  def get_position(self)->int:
    """
				Returns the current cursor position.
			"""
    pass

  def resize(self, size:int)->None:
    """
				Resizes the `data_array`. This _doesn't_ update the cursor.
			"""
    pass

  def set_data_array(self, data:__core__.PackedByteArray)->None:
    """"""
    pass

  def get_data_array(self)->__core__.PackedByteArray:
    """"""
    pass

  def clear(self)->None:
    """
				Clears the `data_array` and resets the cursor.
			"""
    pass

  def duplicate(self)->__streampeerbuffer__.StreamPeerBuffer:
    """
				Returns a new `StreamPeerBuffer` with the same `data_array` content.
			"""
    pass


