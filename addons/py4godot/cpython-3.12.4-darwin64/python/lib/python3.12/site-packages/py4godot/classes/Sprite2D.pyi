from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__



class Sprite2D(__node2d__.Node2D):
  """
		A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.
	"""
  frame_changed: BuiltinSignal
  texture_changed: BuiltinSignal

  @staticmethod
  def constructor()->Sprite2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Sprite2D:pass


  @property
  def texture(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def centered(self)->bool:
    """"""
    pass
  @centered.setter
  def centered(self,  value:bool)->None:
    """"""
    pass
  @property
  def offset(self)->__core__.Vector2:
    """"""
    pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def flip_h(self)->bool:
    """"""
    pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None:
    """"""
    pass
  @property
  def flip_v(self)->bool:
    """"""
    pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None:
    """"""
    pass
  @property
  def hframes(self)->int:
    """"""
    pass
  @hframes.setter
  def hframes(self,  value:int)->None:
    """"""
    pass
  @property
  def vframes(self)->int:
    """"""
    pass
  @vframes.setter
  def vframes(self,  value:int)->None:
    """"""
    pass
  @property
  def frame(self)->int:
    """"""
    pass
  @frame.setter
  def frame(self,  value:int)->None:
    """"""
    pass
  @property
  def frame_coords(self)->__core__.Vector2i:
    """"""
    pass
  @frame_coords.setter
  def frame_coords(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def region_enabled(self)->bool:
    """"""
    pass
  @region_enabled.setter
  def region_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def region_rect(self)->__core__.Rect2:
    """"""
    pass
  @region_rect.setter
  def region_rect(self,  value:__core__.Rect2)->None:
    """"""
    pass
  @property
  def region_filter_clip_enabled(self)->bool:
    """"""
    pass
  @region_filter_clip_enabled.setter
  def region_filter_clip_enabled(self,  value:bool)->None:
    """"""
    pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_texture(self)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """"""
    pass

  def set_centered(self, centered:bool)->None:
    """"""
    pass

  def is_centered(self)->bool:
    """"""
    pass

  def set_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_flip_h(self, flip_h:bool)->None:
    """"""
    pass

  def is_flipped_h(self)->bool:
    """"""
    pass

  def set_flip_v(self, flip_v:bool)->None:
    """"""
    pass

  def is_flipped_v(self)->bool:
    """"""
    pass

  def set_region_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_region_enabled(self)->bool:
    """"""
    pass

  def is_pixel_opaque(self, pos:__core__.Vector2)->bool:
    """
				Returns `true`, if the pixel at the given position is opaque and `false` in other case. The position is in local coordinates.
				**Note:** It also returns `false`, if the sprite's texture is `null` or if the given position is invalid.
			"""
    pass

  def set_region_rect(self, rect:__core__.Rect2)->None:
    """"""
    pass

  def get_region_rect(self)->__core__.Rect2:
    """"""
    pass

  def set_region_filter_clip_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_region_filter_clip_enabled(self)->bool:
    """"""
    pass

  def set_frame(self, frame:int)->None:
    """"""
    pass

  def get_frame(self)->int:
    """"""
    pass

  def set_frame_coords(self, coords:__core__.Vector2i)->None:
    """"""
    pass

  def get_frame_coords(self)->__core__.Vector2i:
    """"""
    pass

  def set_vframes(self, vframes:int)->None:
    """"""
    pass

  def get_vframes(self)->int:
    """"""
    pass

  def set_hframes(self, hframes:int)->None:
    """"""
    pass

  def get_hframes(self)->int:
    """"""
    pass

  def get_rect(self)->__core__.Rect2:
    """
				Returns a `Rect2` representing the Sprite2D's boundary in local coordinates.
				**Example:** Detect if the Sprite2D was clicked:
				
				```gdscript
				func _input(event):
					if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
						if get_rect().has_point(to_local(event.position)):
							print("A click!")
				```
				
				
			"""
    pass


