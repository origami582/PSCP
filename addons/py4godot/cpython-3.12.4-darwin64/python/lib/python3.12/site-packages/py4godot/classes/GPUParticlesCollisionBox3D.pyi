from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__



class GPUParticlesCollisionBox3D(__gpuparticlescollision3d__.GPUParticlesCollision3D):
  """
		A box-shaped 3D particle collision shape affecting `GPUParticles3D` nodes.
		Particle collision shapes work in real-time and can be moved, rotated and scaled during gameplay. Unlike attractors, non-uniform scaling of collision shapes is _not_ supported.
		**Note:** `ParticleProcessMaterial.collision_mode` must be `constant ParticleProcessMaterial.COLLISION_RIGID` or `constant ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT` on the `GPUParticles3D`'s process material for collision to work.
		**Note:** Particle collision only affects `GPUParticles3D`, not `CPUParticles3D`.
	"""

  @staticmethod
  def constructor()->GPUParticlesCollisionBox3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesCollisionBox3D:pass


  @property
  def size(self)->__core__.Vector3:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector3:
    """"""
    pass


