from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.Container as __container__


class AlignmentMode:
  ALIGNMENT_BEGIN:int = 0
  ALIGNMENT_CENTER:int = 1
  ALIGNMENT_END:int = 2
class LastWrapAlignmentMode:
  LAST_WRAP_ALIGNMENT_INHERIT:int = 0
  LAST_WRAP_ALIGNMENT_BEGIN:int = 1
  LAST_WRAP_ALIGNMENT_CENTER:int = 2
  LAST_WRAP_ALIGNMENT_END:int = 3


class FlowContainer(__container__.Container):
  """
		A container that arranges its child controls horizontally or vertically and wraps them around at the borders. This is similar to how text in a book wraps around when no more words can fit on a line.
	"""

  @staticmethod
  def constructor()->FlowContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->FlowContainer:pass


  @property
  def alignment(self)->int:
    """"""
    pass
  @alignment.setter
  def alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def last_wrap_alignment(self)->int:
    """"""
    pass
  @last_wrap_alignment.setter
  def last_wrap_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def vertical(self)->bool:
    """"""
    pass
  @vertical.setter
  def vertical(self,  value:bool)->None:
    """"""
    pass
  @property
  def reverse_fill(self)->bool:
    """"""
    pass
  @reverse_fill.setter
  def reverse_fill(self,  value:bool)->None:
    """"""
    pass
  def get_line_count(self)->int:
    """
				Returns the current line count.
			"""
    pass

  def set_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_alignment(self)->int:
    """"""
    pass

  def set_last_wrap_alignment(self, last_wrap_alignment:int )->None:
    """"""
    pass

  def get_last_wrap_alignment(self)->int:
    """"""
    pass

  def set_vertical(self, vertical:bool)->None:
    """"""
    pass

  def is_vertical(self)->bool:
    """"""
    pass

  def set_reverse_fill(self, reverse_fill:bool)->None:
    """"""
    pass

  def is_reverse_fill(self)->bool:
    """"""
    pass


