from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsDirectBodyState2D as __physicsdirectbodystate2d__
import py4godot.classes.PhysicsDirectSpaceState2D as __physicsdirectspacestate2d__
import py4godot.classes.PhysicsDirectBodyState2DExtension as __physicsdirectbodystate2dextension__
import py4godot.classes.PhysicsDirectSpaceState2DExtension as __physicsdirectspacestate2dextension__
import py4godot.classes.PhysicsTestMotionParameters2D as __physicstestmotionparameters2d__
import py4godot.classes.Object as __object__
import py4godot.classes.PhysicsTestMotionResult2D as __physicstestmotionresult2d__
import py4godot.classes.PhysicsServer2DExtension as __physicsserver2dextension__
import py4godot.classes.PhysicsServer2D as __physicsserver2d__


class SpaceParameter:
  SPACE_PARAM_CONTACT_RECYCLE_RADIUS:int = 0
  SPACE_PARAM_CONTACT_MAX_SEPARATION:int = 1
  SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION:int = 2
  SPACE_PARAM_CONTACT_DEFAULT_BIAS:int = 3
  SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD:int = 4
  SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD:int = 5
  SPACE_PARAM_BODY_TIME_TO_SLEEP:int = 6
  SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS:int = 7
  SPACE_PARAM_SOLVER_ITERATIONS:int = 8
class ShapeType:
  SHAPE_WORLD_BOUNDARY:int = 0
  SHAPE_SEPARATION_RAY:int = 1
  SHAPE_SEGMENT:int = 2
  SHAPE_CIRCLE:int = 3
  SHAPE_RECTANGLE:int = 4
  SHAPE_CAPSULE:int = 5
  SHAPE_CONVEX_POLYGON:int = 6
  SHAPE_CONCAVE_POLYGON:int = 7
  SHAPE_CUSTOM:int = 8
class AreaParameter:
  AREA_PARAM_GRAVITY_OVERRIDE_MODE:int = 0
  AREA_PARAM_GRAVITY:int = 1
  AREA_PARAM_GRAVITY_VECTOR:int = 2
  AREA_PARAM_GRAVITY_IS_POINT:int = 3
  AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE:int = 4
  AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE:int = 5
  AREA_PARAM_LINEAR_DAMP:int = 6
  AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE:int = 7
  AREA_PARAM_ANGULAR_DAMP:int = 8
  AREA_PARAM_PRIORITY:int = 9
class AreaSpaceOverrideMode:
  AREA_SPACE_OVERRIDE_DISABLED:int = 0
  AREA_SPACE_OVERRIDE_COMBINE:int = 1
  AREA_SPACE_OVERRIDE_COMBINE_REPLACE:int = 2
  AREA_SPACE_OVERRIDE_REPLACE:int = 3
  AREA_SPACE_OVERRIDE_REPLACE_COMBINE:int = 4
class BodyMode:
  BODY_MODE_STATIC:int = 0
  BODY_MODE_KINEMATIC:int = 1
  BODY_MODE_RIGID:int = 2
  BODY_MODE_RIGID_LINEAR:int = 3
class BodyParameter:
  BODY_PARAM_BOUNCE:int = 0
  BODY_PARAM_FRICTION:int = 1
  BODY_PARAM_MASS:int = 2
  BODY_PARAM_INERTIA:int = 3
  BODY_PARAM_CENTER_OF_MASS:int = 4
  BODY_PARAM_GRAVITY_SCALE:int = 5
  BODY_PARAM_LINEAR_DAMP_MODE:int = 6
  BODY_PARAM_ANGULAR_DAMP_MODE:int = 7
  BODY_PARAM_LINEAR_DAMP:int = 8
  BODY_PARAM_ANGULAR_DAMP:int = 9
  BODY_PARAM_MAX:int = 10
class BodyDampMode:
  BODY_DAMP_MODE_COMBINE:int = 0
  BODY_DAMP_MODE_REPLACE:int = 1
class BodyState:
  BODY_STATE_TRANSFORM:int = 0
  BODY_STATE_LINEAR_VELOCITY:int = 1
  BODY_STATE_ANGULAR_VELOCITY:int = 2
  BODY_STATE_SLEEPING:int = 3
  BODY_STATE_CAN_SLEEP:int = 4
class JointType:
  JOINT_KIND_PIN:int = 0
  JOINT_KIND_GROOVE:int = 1
  JOINT_KIND_DAMPED_SPRING:int = 2
  JOINT_KIND_MAX:int = 3
class JointParam:
  JOINT_PARAM_BIAS:int = 0
  JOINT_PARAM_MAX_BIAS:int = 1
  JOINT_PARAM_MAX_FORCE:int = 2
class PinJointParam:
  PIN_JOINT_SOFTNESS:int = 0
  PIN_JOINT_LIMIT_UPPER:int = 1
  PIN_JOINT_LIMIT_LOWER:int = 2
  PIN_JOINT_MOTOR_TARGET_VELOCITY:int = 3
class PinJointFlag:
  PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED:int = 0
  PIN_JOINT_FLAG_MOTOR_ENABLED:int = 1
class DampedSpringParam:
  DAMPED_SPRING_REST_LENGTH:int = 0
  DAMPED_SPRING_STIFFNESS:int = 1
  DAMPED_SPRING_DAMPING:int = 2
class CCDMode:
  CCD_MODE_DISABLED:int = 0
  CCD_MODE_CAST_RAY:int = 1
  CCD_MODE_CAST_SHAPE:int = 2
class AreaBodyStatus:
  AREA_BODY_ADDED:int = 0
  AREA_BODY_REMOVED:int = 1
class ProcessInfo:
  INFO_ACTIVE_OBJECTS:int = 0
  INFO_COLLISION_PAIRS:int = 1
  INFO_ISLAND_COUNT:int = 2


class PhysicsServer2D(__object__.Object):
  """
		PhysicsServer2D is the server responsible for all 2D physics. It can directly create and manipulate all physics objects:
		- A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
		- A _shape_ is a geometric shape such as a circle, a rectangle, a capsule, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
		- A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
		- An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
		- A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
		Physics objects in `PhysicsServer2D` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
		**Note:** All the 2D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
	"""



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer2D:pass

  @staticmethod
  def instance()->PhysicsServer2D:pass

  def world_boundary_shape_create(self)->__core__.RID:
    """
				Creates a 2D world boundary shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's normal direction and distance properties.
			"""
    pass

  def separation_ray_shape_create(self)->__core__.RID:
    """
				Creates a 2D separation ray shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's `length` and `slide_on_slope` properties.
			"""
    pass

  def segment_shape_create(self)->__core__.RID:
    """
				Creates a 2D segment shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the segment's start and end points.
			"""
    pass

  def circle_shape_create(self)->__core__.RID:
    """
				Creates a 2D circle shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the circle's radius.
			"""
    pass

  def rectangle_shape_create(self)->__core__.RID:
    """
				Creates a 2D rectangle shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the rectangle's half-extents.
			"""
    pass

  def capsule_shape_create(self)->__core__.RID:
    """
				Creates a 2D capsule shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the capsule's height and radius.
			"""
    pass

  def convex_polygon_shape_create(self)->__core__.RID:
    """
				Creates a 2D convex polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the convex polygon's points.
			"""
    pass

  def concave_polygon_shape_create(self)->__core__.RID:
    """
				Creates a 2D concave polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the concave polygon's segments.
			"""
    pass

  def shape_set_data(self, shape:__core__.RID, data:Any)->None:
    """
				Sets the shape data that defines the configuration of the shape. The `data` to be passed depends on the shape's type (see `shape_get_type`):
				- `constant SHAPE_WORLD_BOUNDARY`: an array of length two containing a `Vector2` `normal` direction and a `float` distance `d`,
				- `constant SHAPE_SEPARATION_RAY`: a dictionary containing the key `length` with a `float` value and the key `slide_on_slope` with a `bool` value,
				- `constant SHAPE_SEGMENT`: a `Rect2` `rect` containing the first point of the segment in `rect.position` and the second point of the segment in `rect.size`,
				- `constant SHAPE_CIRCLE`: a `float` `radius`,
				- `constant SHAPE_RECTANGLE`: a `Vector2` `half_extents`,
				- `constant SHAPE_CAPSULE`: an array of length two (or a `Vector2`) containing a `float` `height` and a `float` `radius`,
				- `constant SHAPE_CONVEX_POLYGON`: either a `PackedVector2Array` of points defining a convex polygon in counterclockwise order (the clockwise outward normal of each segment formed by consecutive points is calculated internally), or a `PackedFloat32Array` of length divisible by four so that every 4-tuple of `float`s contains the coordinates of a point followed by the coordinates of the clockwise outward normal vector to the segment between the current point and the next point,
				- `constant SHAPE_CONCAVE_POLYGON`: a `PackedVector2Array` of length divisible by two (each pair of points forms one segment).
				**Warning:** In the case of `constant SHAPE_CONVEX_POLYGON`, this method does not check if the points supplied actually form a convex polygon (unlike the `CollisionPolygon2D.polygon` property).
			"""
    pass

  def shape_get_type(self, shape:__core__.RID)->int:
    """
				Returns the shape's type.
			"""
    pass

  def shape_get_data(self, shape:__core__.RID)->Any:
    """
				Returns the shape data that defines the configuration of the shape, such as the half-extents of a rectangle or the segments of a concave shape. See `shape_set_data` for the precise format of this data in each case.
			"""
    pass

  def space_create(self)->__core__.RID:
    """
				Creates a 2D space in the physics server, and returns the `RID` that identifies it. A space contains bodies and areas, and controls the stepping of the physics simulation of the objects in it.
			"""
    pass

  def space_set_active(self, space:__core__.RID, active:bool)->None:
    """
				Activates or deactivates the space. If `active` is `false`, then the physics server will not do anything with this space in its physics step.
			"""
    pass

  def space_is_active(self, space:__core__.RID)->bool:
    """
				Returns `true` if the space is active.
			"""
    pass

  def space_set_param(self, space:__core__.RID, param:int , value:float)->None:
    """
				Sets the value of the given space parameter.
			"""
    pass

  def space_get_param(self, space:__core__.RID, param:int )->float:
    """
				Returns the value of the given space parameter.
			"""
    pass

  def space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate2d__.PhysicsDirectSpaceState2D|__physicsdirectspacestate2dextension__.PhysicsDirectSpaceState2DExtension:
    """
				Returns the state of a space, a `PhysicsDirectSpaceState2D`. This object can be used for collision/intersection queries.
			"""
    pass

  def area_create(self)->__core__.RID:
    """
				Creates a 2D area object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and `monitorable` set to `false`.
				Use `area_add_shape` to add shapes to it, use `area_set_transform` to set its transform, and use `area_set_space` to add the area to a space. If you want the area to be detectable use `area_set_monitorable`.
			"""
    pass

  def area_set_space(self, area:__core__.RID, space:__core__.RID)->None:
    """
				Adds the area to the given space, after removing the area from the previously assigned space (if any).
				**Note:** To remove an area from a space without immediately adding it back elsewhere, use `PhysicsServer2D.area_set_space(area, RID())`.
			"""
    pass

  def area_get_space(self, area:__core__.RID)->__core__.RID:
    """
				Returns the `RID` of the space assigned to the area. Returns an empty `RID` if no space is assigned.
			"""
    pass

  def area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), disabled:bool=False)->None:
    """
				Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of an area are usually referenced by their index in this array.
			"""
    pass

  def area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
				Replaces the area's shape at the given index by another shape, while not affecting the `transform` and `disabled` properties at the same index.
			"""
    pass

  def area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None:
    """
				Sets the local transform matrix of the area's shape with the given index.
			"""
    pass

  def area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
				Sets the disabled property of the area's shape with the given index. If `disabled` is `true`, then the shape will not detect any other shapes entering or exiting it.
			"""
    pass

  def area_get_shape_count(self, area:__core__.RID)->int:
    """
				Returns the number of shapes added to the area.
			"""
    pass

  def area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID:
    """
				Returns the `RID` of the shape with the given index in the area's array of shapes.
			"""
    pass

  def area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform2D:
    """
				Returns the local transform matrix of the shape with the given index in the area's array of shapes.
			"""
    pass

  def area_remove_shape(self, area:__core__.RID, shape_idx:int)->None:
    """
				Removes the shape with the given index from the area's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the area's shapes which used to have indices higher than `shape_idx` will have their index decreased by one.
			"""
    pass

  def area_clear_shapes(self, area:__core__.RID)->None:
    """
				Removes all shapes from the area. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
			"""
    pass

  def area_set_collision_layer(self, area:__core__.RID, layer:int)->None:
    """
				Assigns the area to one or many physics layers, via a bitmask.
			"""
    pass

  def area_get_collision_layer(self, area:__core__.RID)->int:
    """
				Returns the physics layer or layers the area belongs to, as a bitmask.
			"""
    pass

  def area_set_collision_mask(self, area:__core__.RID, mask:int)->None:
    """
				Sets which physics layers the area will monitor, via a bitmask.
			"""
    pass

  def area_get_collision_mask(self, area:__core__.RID)->int:
    """
				Returns the physics layer or layers the area can contact with, as a bitmask.
			"""
    pass

  def area_set_param(self, area:__core__.RID, param:int , value:Any)->None:
    """
				Sets the value of the given area parameter.
			"""
    pass

  def area_set_transform(self, area:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets the transform matrix of the area.
			"""
    pass

  def area_get_param(self, area:__core__.RID, param:int )->Any:
    """
				Returns the value of the given area parameter.
			"""
    pass

  def area_get_transform(self, area:__core__.RID)->__core__.Transform2D:
    """
				Returns the transform matrix of the area.
			"""
    pass

  def area_attach_object_instance_id(self, area:__core__.RID, id:int)->None:
    """
				Attaches the `ObjectID` of an `Object` to the area. Use `Object.get_instance_id` to get the `ObjectID` of a `CollisionObject2D`.
			"""
    pass

  def area_get_object_instance_id(self, area:__core__.RID)->int:
    """
				Returns the `ObjectID` attached to the area. Use `@GlobalScope.instance_from_id` to retrieve an `Object` from a nonzero `ObjectID`.
			"""
    pass

  def area_attach_canvas_instance_id(self, area:__core__.RID, id:int)->None:
    """
				Attaches the `ObjectID` of a canvas to the area. Use `Object.get_instance_id` to get the `ObjectID` of a `CanvasLayer`.
			"""
    pass

  def area_get_canvas_instance_id(self, area:__core__.RID)->int:
    """
				Returns the `ObjectID` of the canvas attached to the area. Use `@GlobalScope.instance_from_id` to retrieve a `CanvasLayer` from a nonzero `ObjectID`.
			"""
    pass

  def area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other body shape entered or exited the area,
				2. an `RID` `body_rid`: the `RID` of the body that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the body,
				4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
			"""
    pass

  def area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other area's shape entered or exited the area,
				2. an `RID` `area_rid`: the `RID` of the other area that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the other area,
				4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
			"""
    pass

  def area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None:
    """
				Sets whether the area is monitorable or not. If `monitorable` is `true`, the area monitoring callback of other areas will be called when this area enters or exits them.
			"""
    pass

  def body_create(self)->__core__.RID:
    """
				Creates a 2D body object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and body mode set to `constant BODY_MODE_RIGID`.
				Use `body_add_shape` to add shapes to it, use `body_set_state` to set its transform, and use `body_set_space` to add the body to a space.
			"""
    pass

  def body_set_space(self, body:__core__.RID, space:__core__.RID)->None:
    """
				Adds the body to the given space, after removing the body from the previously assigned space (if any). If the body's mode is set to `constant BODY_MODE_RIGID`, then adding the body to a space will have the following additional effects:
				- If the parameter `constant BODY_PARAM_CENTER_OF_MASS` has never been set explicitly, then the value of that parameter will be recalculated based on the body's shapes.
				- If the parameter `constant BODY_PARAM_INERTIA` is set to a value `<= 0.0`, then the value of that parameter will be recalculated based on the body's shapes, mass, and center of mass.
				**Note:** To remove a body from a space without immediately adding it back elsewhere, use `PhysicsServer2D.body_set_space(body, RID())`.
			"""
    pass

  def body_get_space(self, body:__core__.RID)->__core__.RID:
    """
				Returns the `RID` of the space assigned to the body. Returns an empty `RID` if no space is assigned.
			"""
    pass

  def body_set_mode(self, body:__core__.RID, mode:int )->None:
    """
				Sets the body's mode.
			"""
    pass

  def body_get_mode(self, body:__core__.RID)->int:
    """
				Returns the body's mode.
			"""
    pass

  def body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), disabled:bool=False)->None:
    """
				Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of a body are usually referenced by their index in this array.
			"""
    pass

  def body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
				Replaces the body's shape at the given index by another shape, while not affecting the `transform`, `disabled`, and one-way collision properties at the same index.
			"""
    pass

  def body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None:
    """
				Sets the local transform matrix of the body's shape with the given index.
			"""
    pass

  def body_get_shape_count(self, body:__core__.RID)->int:
    """
				Returns the number of shapes added to the body.
			"""
    pass

  def body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID:
    """
				Returns the `RID` of the shape with the given index in the body's array of shapes.
			"""
    pass

  def body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform2D:
    """
				Returns the local transform matrix of the shape with the given index in the area's array of shapes.
			"""
    pass

  def body_remove_shape(self, body:__core__.RID, shape_idx:int)->None:
    """
				Removes the shape with the given index from the body's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the body's shapes which used to have indices higher than `shape_idx` will have their index decreased by one.
			"""
    pass

  def body_clear_shapes(self, body:__core__.RID)->None:
    """
				Removes all shapes from the body. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
			"""
    pass

  def body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
				Sets the disabled property of the body's shape with the given index. If `disabled` is `true`, then the shape will be ignored in all collision detection.
			"""
    pass

  def body_set_shape_as_one_way_collision(self, body:__core__.RID, shape_idx:int, enable:bool, margin:float)->None:
    """
				Sets the one-way collision properties of the body's shape with the given index. If `enable` is `true`, the one-way collision direction given by the shape's local upward axis `body_get_shape_transform(body, shape_idx).y` will be used to ignore collisions with the shape in the opposite direction, and to ensure depenetration of kinematic bodies happens in this direction.
			"""
    pass

  def body_attach_object_instance_id(self, body:__core__.RID, id:int)->None:
    """
				Attaches the `ObjectID` of an `Object` to the body. Use `Object.get_instance_id` to get the `ObjectID` of a `CollisionObject2D`.
			"""
    pass

  def body_get_object_instance_id(self, body:__core__.RID)->int:
    """
				Returns the `ObjectID` attached to the body. Use `@GlobalScope.instance_from_id` to retrieve an `Object` from a nonzero `ObjectID`.
			"""
    pass

  def body_attach_canvas_instance_id(self, body:__core__.RID, id:int)->None:
    """
				Attaches the `ObjectID` of a canvas to the body. Use `Object.get_instance_id` to get the `ObjectID` of a `CanvasLayer`.
			"""
    pass

  def body_get_canvas_instance_id(self, body:__core__.RID)->int:
    """
				Returns the `ObjectID` of the canvas attached to the body. Use `@GlobalScope.instance_from_id` to retrieve a `CanvasLayer` from a nonzero `ObjectID`.
			"""
    pass

  def body_set_continuous_collision_detection_mode(self, body:__core__.RID, mode:int )->None:
    """
				Sets the continuous collision detection mode.
				Continuous collision detection tries to predict where a moving body would collide in between physics updates, instead of moving it and correcting its movement if it collided.
			"""
    pass

  def body_get_continuous_collision_detection_mode(self, body:__core__.RID)->int:
    """
				Returns the body's continuous collision detection mode.
			"""
    pass

  def body_set_collision_layer(self, body:__core__.RID, layer:int)->None:
    """
				Sets the physics layer or layers the body belongs to, via a bitmask.
			"""
    pass

  def body_get_collision_layer(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers the body belongs to, as a bitmask.
			"""
    pass

  def body_set_collision_mask(self, body:__core__.RID, mask:int)->None:
    """
				Sets the physics layer or layers the body can collide with, via a bitmask.
			"""
    pass

  def body_get_collision_mask(self, body:__core__.RID)->int:
    """
				Returns the physics layer or layers the body can collide with, as a bitmask.
			"""
    pass

  def body_set_collision_priority(self, body:__core__.RID, priority:float)->None:
    """
				Sets the body's collision priority. This is used in the depenetration phase of `body_test_motion`. The higher the priority is, the lower the penetration into the body will be.
			"""
    pass

  def body_get_collision_priority(self, body:__core__.RID)->float:
    """
				Returns the body's collision priority. This is used in the depenetration phase of `body_test_motion`. The higher the priority is, the lower the penetration into the body will be.
			"""
    pass

  def body_set_param(self, body:__core__.RID, param:int , value:Any)->None:
    """
				Sets the value of the given body parameter.
			"""
    pass

  def body_get_param(self, body:__core__.RID, param:int )->Any:
    """
				Returns the value of the given body parameter.
			"""
    pass

  def body_reset_mass_properties(self, body:__core__.RID)->None:
    """
				Restores the default inertia and center of mass of the body based on its shapes. This undoes any custom values previously set using `body_set_param`.
			"""
    pass

  def body_set_state(self, body:__core__.RID, state:int , value:Any)->None:
    """
				Sets the value of a body's state.
				**Note:** The state change doesn't take effect immediately. The state will change on the next physics frame.
			"""
    pass

  def body_get_state(self, body:__core__.RID, state:int )->Any:
    """
				Returns the value of the given state of the body.
			"""
    pass

  def body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector2)->None:
    """
				Applies a directional impulse to the body, at the body's center of mass. The impulse does not affect rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				This is equivalent to using `body_apply_impulse` at the body's center of mass.
			"""
    pass

  def body_apply_torque_impulse(self, body:__core__.RID, impulse:float)->None:
    """
				Applies a rotational impulse to the body. The impulse does not affect position.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			"""
    pass

  def body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Applies a positioned impulse to the body. The impulse can affect rotation if `position` is different from the body's center of mass.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_apply_central_force(self, body:__core__.RID, force:__core__.Vector2)->None:
    """
				Applies a directional force to the body, at the body's center of mass. The force does not affect rotation. A force is time dependent and meant to be applied every physics update.
				This is equivalent to using `body_apply_force` at the body's center of mass.
			"""
    pass

  def body_apply_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Applies a positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. A force is time dependent and meant to be applied every physics update.
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_apply_torque(self, body:__core__.RID, torque:float)->None:
    """
				Applies a rotational force to the body. The force does not affect position. A force is time dependent and meant to be applied every physics update.
			"""
    pass

  def body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector2)->None:
    """
				Adds a constant directional force to the body. The force does not affect rotation. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
				This is equivalent to using `body_add_constant_force` at the body's center of mass.
			"""
    pass

  def body_add_constant_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None:
    """
				Adds a constant positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
				`position` is the offset from the body origin in global coordinates.
			"""
    pass

  def body_add_constant_torque(self, body:__core__.RID, torque:float)->None:
    """
				Adds a constant rotational force to the body. The force does not affect position. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_torque(body, 0)`.
			"""
    pass

  def body_set_constant_force(self, body:__core__.RID, force:__core__.Vector2)->None:
    """
				Sets the body's total constant positional force applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			"""
    pass

  def body_get_constant_force(self, body:__core__.RID)->__core__.Vector2:
    """
				Returns the body's total constant positional force applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			"""
    pass

  def body_set_constant_torque(self, body:__core__.RID, torque:float)->None:
    """
				Sets the body's total constant rotational force applied during each physics update.
				See `body_add_constant_torque`.
			"""
    pass

  def body_get_constant_torque(self, body:__core__.RID)->float:
    """
				Returns the body's total constant rotational force applied during each physics update.
				See `body_add_constant_torque`.
			"""
    pass

  def body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector2)->None:
    """
				Modifies the body's linear velocity so that its projection to the axis `axis_velocity.normalized()` is exactly `axis_velocity.length()`. This is useful for jumping behavior.
			"""
    pass

  def body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
				Adds `excepted_body` to the body's list of collision exceptions, so that collisions with it are ignored.
			"""
    pass

  def body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
				Removes `excepted_body` from the body's list of collision exceptions, so that collisions with it are no longer ignored.
			"""
    pass

  def body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None:
    """
				Sets the maximum number of contacts that the body can report. If `amount` is greater than zero, then the body will keep track of at most this many contacts with other bodies.
			"""
    pass

  def body_get_max_contacts_reported(self, body:__core__.RID)->int:
    """
				Returns the maximum number of contacts that the body can report. See `body_set_max_contacts_reported`.
			"""
    pass

  def body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None:
    """
				Sets whether the body omits the standard force integration. If `enable` is `true`, the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, `body_set_force_integration_callback` can be used to manually update the linear and angular velocity instead.
				This method is called when the property `RigidBody2D.custom_integrator` is set.
			"""
    pass

  def body_is_omitting_force_integration(self, body:__core__.RID)->bool:
    """
				Returns `true` if the body is omitting the standard force integration. See `body_set_omit_force_integration`.
			"""
    pass

  def body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None:
    """
				Sets the body's state synchronization callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the callback.
				The function `callable` will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
				The function `callable` must take the following parameters:
				1. `state`: a `PhysicsDirectBodyState2D`, used to retrieve the body's state.
			"""
    pass

  def body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:Any=None)->None:
    """
				Sets the body's custom force integration callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the custom callback.
				The function `callable` will be called every physics tick, before the standard force integration (see `body_set_omit_force_integration`). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
				If `userdata` is not `null`, the function `callable` must take the following two parameters:
				1. `state`: a `PhysicsDirectBodyState2D` used to retrieve and modify the body's state,
				2. `code skip-lint`userdata`: a `Variant`; its value will be the `userdata` passed into this method.
				If `userdata` is `null`, then `callable` must take only the `state` parameter.
			"""
    pass

  def body_test_motion(self, body:__core__.RID, parameters:__physicstestmotionparameters2d__.PhysicsTestMotionParameters2D, result:__physicstestmotionresult2d__.PhysicsTestMotionResult2D= __physicstestmotionresult2d__.PhysicsTestMotionResult2D.constructor())->bool:
    """
				Returns `true` if a collision would result from moving the body along a motion vector from a given point in space. See `PhysicsTestMotionParameters2D` for the available motion parameters. Optionally a `PhysicsTestMotionResult2D` object can be passed, which will be used to store the information about the resulting collision.
			"""
    pass

  def body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate2d__.PhysicsDirectBodyState2D|__physicsdirectbodystate2dextension__.PhysicsDirectBodyState2DExtension:
    """
				Returns the `PhysicsDirectBodyState2D` of the body. Returns `null` if the body is destroyed or not assigned to a space.
			"""
    pass

  def joint_create(self)->__core__.RID:
    """
				Creates a 2D joint in the physics server, and returns the `RID` that identifies it. To set the joint type, use `joint_make_damped_spring`, `joint_make_groove` or `joint_make_pin`. Use `joint_set_param` to set generic joint parameters.
			"""
    pass

  def joint_clear(self, joint:__core__.RID)->None:
    """
				Destroys the joint with the given `RID`, creates a new uninitialized joint, and makes the `RID` refer to this new joint.
			"""
    pass

  def joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets the value of the given joint parameter.
			"""
    pass

  def joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Returns the value of the given joint parameter.
			"""
    pass

  def joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None:
    """
				Sets whether the bodies attached to the `Joint2D` will collide with each other.
			"""
    pass

  def joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool:
    """
				Returns whether the bodies attached to the `Joint2D` will collide with each other.
			"""
    pass

  def joint_make_pin(self, joint:__core__.RID, anchor:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID= __core__.RID.new0())->None:
    """
				Makes the joint a pin joint. If `body_b` is an empty `RID`, then `body_a` is pinned to the point `anchor` (given in global coordinates); otherwise, `body_a` is pinned to `body_b` at the point `anchor` (given in global coordinates). To set the parameters which are specific to the pin joint, see `pin_joint_set_param`.
			"""
    pass

  def joint_make_groove(self, joint:__core__.RID, groove1_a:__core__.Vector2, groove2_a:__core__.Vector2, anchor_b:__core__.Vector2, body_a:__core__.RID= __core__.RID.new0(), body_b:__core__.RID= __core__.RID.new0())->None:
    """
				Makes the joint a groove joint.
			"""
    pass

  def joint_make_damped_spring(self, joint:__core__.RID, anchor_a:__core__.Vector2, anchor_b:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID= __core__.RID.new0())->None:
    """
				Makes the joint a damped spring joint, attached at the point `anchor_a` (given in global coordinates) on the body `body_a` and at the point `anchor_b` (given in global coordinates) on the body `body_b`. To set the parameters which are specific to the damped spring, see `damped_spring_joint_set_param`.
			"""
    pass

  def pin_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None:
    """
				Sets a pin joint flag.
			"""
    pass

  def pin_joint_get_flag(self, joint:__core__.RID, flag:int )->bool:
    """
				Gets a pin joint flag.
			"""
    pass

  def pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets a pin joint parameter.
			"""
    pass

  def pin_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Returns the value of a pin joint parameter.
			"""
    pass

  def damped_spring_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
				Sets the value of the given damped spring joint parameter.
			"""
    pass

  def damped_spring_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
				Returns the value of the given damped spring joint parameter.
			"""
    pass

  def joint_get_type(self, joint:__core__.RID)->int:
    """
				Returns the joint's type.
			"""
    pass

  def free_rid(self, rid:__core__.RID)->None:
    """
				Destroys any of the objects created by PhysicsServer2D. If the `RID` passed is not one of the objects that can be created by PhysicsServer2D, an error will be printed to the console.
			"""
    pass

  def set_active(self, active:bool)->None:
    """
				Activates or deactivates the 2D physics server. If `active` is `false`, then the physics server will not do anything in its physics step.
			"""
    pass

  def get_process_info(self, process_info:int )->int:
    """
				Returns the value of a physics engine state specified by `process_info`.
			"""
    pass


