from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__
import py4godot.classes.UndoRedo as __undoredo__


class SpecialHistory:
  GLOBAL_HISTORY:int = 0
  REMOTE_HISTORY:int = -9
  INVALID_HISTORY:int = -99


class EditorUndoRedoManager(__object__.Object):
  """
		`EditorUndoRedoManager` is a manager for `UndoRedo` objects associated with edited scenes. Each scene has its own undo history and `EditorUndoRedoManager` ensures that each action performed in the editor gets associated with a proper scene. For actions not related to scenes (`ProjectSettings` edits, external resources, etc.), a separate global history is used.
		The usage is mostly the same as `UndoRedo`. You create and commit actions and the manager automatically decides under-the-hood what scenes it belongs to. The scene is deduced based on the first operation in an action, using the object from the operation. The rules are as follows:
		- If the object is a `Node`, use the currently edited scene;
		- If the object is a built-in resource, use the scene from its path;
		- If the object is external resource or anything else, use global history.
		This guessing can sometimes yield false results, so you can provide a custom context object when creating an action.
		`EditorUndoRedoManager` is intended to be used by Godot editor plugins. You can obtain it using `EditorPlugin.get_undo_redo`. For non-editor uses or plugins that don't need to integrate with the editor's undo history, use `UndoRedo` instead.
		The manager's API is mostly the same as in `UndoRedo`, so you can refer to its documentation for more examples. The main difference is that `EditorUndoRedoManager` uses object + method name for actions, instead of `Callable`.
	"""
  history_changed: BuiltinSignal
  version_changed: BuiltinSignal

  @staticmethod
  def constructor()->EditorUndoRedoManager:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorUndoRedoManager:pass


  def create_action(self, name:str, merge_mode:int =0, custom_context:__object__.Object= __object__.Object.constructor(), backward_undo_ops:bool=False)->None:
    """
				Create a new action. After this is called, do all your calls to `add_do_method`, `add_undo_method`, `add_do_property`, and `add_undo_property`, then commit the action with `commit_action`.
				The way actions are merged is dictated by the `merge_mode` argument.
				If `custom_context` object is provided, it will be used for deducing target history (instead of using the first operation).
				The way undo operation are ordered in actions is dictated by `backward_undo_ops`. When `backward_undo_ops` is `false` undo option are ordered in the same order they were added. Which means the first operation to be added will be the first to be undone.
				If `mark_unsaved` is `false`, the action will not mark the history as unsaved. This is useful for example for actions that change a selection, or a setting that will be saved automatically. Otherwise, this should be left to `true` if the action requires saving by the user or if it can cause data loss when left unsaved.
			"""
    pass

  def commit_action(self, execute:bool=True)->None:
    """
				Commits the action. If `execute` is `true` (default), all "do" methods/properties are called/set when this function is called.
			"""
    pass

  def is_committing_action(self)->bool:
    """
				Returns `true` if the `EditorUndoRedoManager` is currently committing the action, i.e. running its "do" method or property change (see `commit_action`).
			"""
    pass

  def force_fixed_history(self)->None:
    """
				Forces the next operation (e.g. `add_do_method`) to use the action's history rather than guessing it from the object. This is sometimes needed when a history can't be correctly determined, like for a nested resource that doesn't have a path yet.
				This method should only be used when absolutely necessary, otherwise it might cause invalid history state. For most of complex cases, the `custom_context` parameter of `create_action` is sufficient.
			"""
    pass

  def add_do_method(self, object:__object__.Object, method:__core__.StringName|str)->None:
    """
				Register a method that will be called when the action is committed (i.e. the "do" action).
				If this is the first operation, the `object` will be used to deduce target undo history.
			"""
    pass

  def add_undo_method(self, object:__object__.Object, method:__core__.StringName|str)->None:
    """
				Register a method that will be called when the action is undone (i.e. the "undo" action).
				If this is the first operation, the `object` will be used to deduce target undo history.
			"""
    pass

  def add_do_property(self, object:__object__.Object, property:__core__.StringName|str, value:Any)->None:
    """
				Register a property value change for "do".
				If this is the first operation, the `object` will be used to deduce target undo history.
			"""
    pass

  def add_undo_property(self, object:__object__.Object, property:__core__.StringName|str, value:Any)->None:
    """
				Register a property value change for "undo".
				If this is the first operation, the `object` will be used to deduce target undo history.
			"""
    pass

  def add_do_reference(self, object:__object__.Object)->None:
    """
				Register a reference for "do" that will be erased if the "do" history is lost. This is useful mostly for new nodes created for the "do" call. Do not use for resources.
			"""
    pass

  def add_undo_reference(self, object:__object__.Object)->None:
    """
				Register a reference for "undo" that will be erased if the "undo" history is lost. This is useful mostly for nodes removed with the "do" call (not the "undo" call!).
			"""
    pass

  def get_object_history_id(self, object:__object__.Object)->int:
    """
				Returns the history ID deduced from the given `object`. It can be used with `get_history_undo_redo`.
			"""
    pass

  def get_history_undo_redo(self, id:int)->__undoredo__.UndoRedo:
    """
				Returns the `UndoRedo` object associated with the given history `id`.
				`id` above `0` are mapped to the opened scene tabs (but it doesn't match their order). `id` of `0` or lower have special meaning (see `enum SpecialHistory`).
				Best used with `get_object_history_id`. This method is only provided in case you need some more advanced methods of `UndoRedo` (but keep in mind that directly operating on the `UndoRedo` object might affect editor's stability).
			"""
    pass

  def clear_history(self, id:int=-99, increase_version:bool=True)->None:
    """
				Clears the given undo history. You can clear history for a specific scene, global history, or for all scenes at once if `id` is `constant INVALID_HISTORY`.
				If `increase_version` is `true`, the undo history version will be increased, marking it as unsaved. Useful for operations that modify the scene, but don't support undo.
				```gdscript
				var scene_root = EditorInterface.get_edited_scene_root()
				var undo_redo = EditorInterface.get_editor_undo_redo()
				undo_redo.clear_history(undo_redo.get_object_history_id(scene_root))
				```
				**Note:** If you want to mark an edited scene as unsaved without clearing its history, use `EditorInterface.mark_scene_as_unsaved` instead.
			"""
    pass


