from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.OccluderPolygon2D as __occluderpolygon2d__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.NavigationPolygon as __navigationpolygon__
import py4godot.classes.Object as __object__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.TileSet as __tileset__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__



class TileData(__object__.Object):
  """
		`TileData` object represents a single tile in a `TileSet`. It is usually edited using the tileset editor, but it can be modified at runtime using `TileMapLayer._tile_data_runtime_update`.
	"""
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileData:pass



  @staticmethod
  def cast(other:__object__.Object)->TileData:pass


  @property
  def flip_h(self)->bool:
    """"""
    pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None:
    """"""
    pass
  @property
  def flip_v(self)->bool:
    """"""
    pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None:
    """"""
    pass
  @property
  def transpose(self)->bool:
    """"""
    pass
  @transpose.setter
  def transpose(self,  value:bool)->None:
    """"""
    pass
  @property
  def texture_origin(self)->__core__.Vector2i:
    """"""
    pass
  @texture_origin.setter
  def texture_origin(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def modulate(self)->__core__.Color:
    """"""
    pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def material(self)->CanvasItemMaterial,ShaderMaterial:
    """"""
    pass
  @material.setter
  def material(self,  value:__canvasitemmaterial__.CanvasItemMaterial)->None:
    """"""
    pass
  @property
  def z_index(self)->int:
    """"""
    pass
  @z_index.setter
  def z_index(self,  value:int)->None:
    """"""
    pass
  @property
  def y_sort_origin(self)->int:
    """"""
    pass
  @y_sort_origin.setter
  def y_sort_origin(self,  value:int)->None:
    """"""
    pass
  @property
  def terrain_set(self)->int:
    """"""
    pass
  @terrain_set.setter
  def terrain_set(self,  value:int)->None:
    """"""
    pass
  @property
  def terrain(self)->int:
    """"""
    pass
  @terrain.setter
  def terrain(self,  value:int)->None:
    """"""
    pass
  @property
  def probability(self)->float:
    """"""
    pass
  @probability.setter
  def probability(self,  value:float)->None:
    """"""
    pass
  def set_flip_h(self, flip_h:bool)->None:
    """"""
    pass

  def get_flip_h(self)->bool:
    """"""
    pass

  def set_flip_v(self, flip_v:bool)->None:
    """"""
    pass

  def get_flip_v(self)->bool:
    """"""
    pass

  def set_transpose(self, transpose:bool)->None:
    """"""
    pass

  def get_transpose(self)->bool:
    """"""
    pass

  def set_material(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material(self)->__fogmaterial__.FogMaterial|__material__.Material|__panoramaskymaterial__.PanoramaSkyMaterial|__basematerial3d__.BaseMaterial3D|__particleprocessmaterial__.ParticleProcessMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__ormmaterial3d__.ORMMaterial3D|__canvasitemmaterial__.CanvasItemMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__placeholdermaterial__.PlaceholderMaterial|__standardmaterial3d__.StandardMaterial3D:
    """"""
    pass

  def set_texture_origin(self, texture_origin:__core__.Vector2i)->None:
    """"""
    pass

  def get_texture_origin(self)->__core__.Vector2i:
    """"""
    pass

  def set_modulate(self, modulate:__core__.Color)->None:
    """"""
    pass

  def get_modulate(self)->__core__.Color:
    """"""
    pass

  def set_z_index(self, z_index:int)->None:
    """"""
    pass

  def get_z_index(self)->int:
    """"""
    pass

  def set_y_sort_origin(self, y_sort_origin:int)->None:
    """"""
    pass

  def get_y_sort_origin(self)->int:
    """"""
    pass

  def set_occluder_polygons_count(self, layer_id:int, polygons_count:int)->None:
    """
				Sets the occluder polygon count in the TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def get_occluder_polygons_count(self, layer_id:int)->int:
    """
				Returns the number of occluder polygons of the tile in the TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def add_occluder_polygon(self, layer_id:int)->None:
    """
				Adds an occlusion polygon to the tile on the TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def remove_occluder_polygon(self, layer_id:int, polygon_index:int)->None:
    """
				Removes the polygon at index `polygon_index` for TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def set_occluder_polygon(self, layer_id:int, polygon_index:int, polygon:__occluderpolygon2d__.OccluderPolygon2D)->None:
    """
				Sets the occluder for polygon with index `polygon_index` in the TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def get_occluder_polygon(self, layer_id:int, polygon_index:int, flip_h:bool=False, flip_v:bool=False, transpose:bool=False)->__occluderpolygon2d__.OccluderPolygon2D:
    """
				Returns the occluder polygon at index `polygon_index` from the TileSet occlusion layer with index `layer_id`.
				The `flip_h`, `flip_v`, and `transpose` parameters can be `true` to transform the returned polygon.
			"""
    pass

  def set_occluder(self, layer_id:int, occluder_polygon:__occluderpolygon2d__.OccluderPolygon2D)->None:
    """
				Sets the occluder for the TileSet occlusion layer with index `layer_id`.
			"""
    pass

  def get_occluder(self, layer_id:int, flip_h:bool=False, flip_v:bool=False, transpose:bool=False)->__occluderpolygon2d__.OccluderPolygon2D:
    """
				Returns the occluder polygon of the tile for the TileSet occlusion layer with index `layer_id`.
				`flip_h`, `flip_v`, and `transpose` allow transforming the returned polygon.
			"""
    pass

  def set_constant_linear_velocity(self, layer_id:int, velocity:__core__.Vector2)->None:
    """
				Sets the constant linear velocity. This does not move the tile. This linear velocity is applied to objects colliding with this tile. This is useful to create conveyor belts.
			"""
    pass

  def get_constant_linear_velocity(self, layer_id:int)->__core__.Vector2:
    """
				Returns the constant linear velocity applied to objects colliding with this tile.
			"""
    pass

  def set_constant_angular_velocity(self, layer_id:int, velocity:float)->None:
    """
				Sets the constant angular velocity. This does not rotate the tile. This angular velocity is applied to objects colliding with this tile.
			"""
    pass

  def get_constant_angular_velocity(self, layer_id:int)->float:
    """
				Returns the constant angular velocity applied to objects colliding with this tile.
			"""
    pass

  def set_collision_polygons_count(self, layer_id:int, polygons_count:int)->None:
    """
				Sets the polygons count for TileSet physics layer with index `layer_id`.
			"""
    pass

  def get_collision_polygons_count(self, layer_id:int)->int:
    """
				Returns how many polygons the tile has for TileSet physics layer with index `layer_id`.
			"""
    pass

  def add_collision_polygon(self, layer_id:int)->None:
    """
				Adds a collision polygon to the tile on the given TileSet physics layer.
			"""
    pass

  def remove_collision_polygon(self, layer_id:int, polygon_index:int)->None:
    """
				Removes the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def set_collision_polygon_points(self, layer_id:int, polygon_index:int, polygon:__core__.PackedVector2Array)->None:
    """
				Sets the points of the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def get_collision_polygon_points(self, layer_id:int, polygon_index:int)->__core__.PackedVector2Array:
    """
				Returns the points of the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def set_collision_polygon_one_way(self, layer_id:int, polygon_index:int, one_way:bool)->None:
    """
				Enables/disables one-way collisions on the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def is_collision_polygon_one_way(self, layer_id:int, polygon_index:int)->bool:
    """
				Returns whether one-way collisions are enabled for the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def set_collision_polygon_one_way_margin(self, layer_id:int, polygon_index:int, one_way_margin:float)->None:
    """
				Sets the one-way margin (for one-way platforms) of the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def get_collision_polygon_one_way_margin(self, layer_id:int, polygon_index:int)->float:
    """
				Returns the one-way margin (for one-way platforms) of the polygon at index `polygon_index` for TileSet physics layer with index `layer_id`.
			"""
    pass

  def set_terrain_set(self, terrain_set:int)->None:
    """"""
    pass

  def get_terrain_set(self)->int:
    """"""
    pass

  def set_terrain(self, terrain:int)->None:
    """"""
    pass

  def get_terrain(self)->int:
    """"""
    pass

  def set_terrain_peering_bit(self, peering_bit:int , terrain:int)->None:
    """
				Sets the tile's terrain bit for the given `peering_bit` direction. To check that a direction is valid, use `is_valid_terrain_peering_bit`.
			"""
    pass

  def get_terrain_peering_bit(self, peering_bit:int )->int:
    """
				Returns the tile's terrain bit for the given `peering_bit` direction. To check that a direction is valid, use `is_valid_terrain_peering_bit`.
			"""
    pass

  def is_valid_terrain_peering_bit(self, peering_bit:int )->bool:
    """
				Returns whether the given `peering_bit` direction is valid for this tile.
			"""
    pass

  def set_navigation_polygon(self, layer_id:int, navigation_polygon:__navigationpolygon__.NavigationPolygon)->None:
    """
				Sets the navigation polygon for the TileSet navigation layer with index `layer_id`.
			"""
    pass

  def get_navigation_polygon(self, layer_id:int, flip_h:bool=False, flip_v:bool=False, transpose:bool=False)->__navigationpolygon__.NavigationPolygon:
    """
				Returns the navigation polygon of the tile for the TileSet navigation layer with index `layer_id`.
				`flip_h`, `flip_v`, and `transpose` allow transforming the returned polygon.
			"""
    pass

  def set_probability(self, probability:float)->None:
    """"""
    pass

  def get_probability(self)->float:
    """"""
    pass

  def set_custom_data(self, layer_name:str, value:Any)->None:
    """
				Sets the tile's custom data value for the TileSet custom data layer with name `layer_name`.
			"""
    pass

  def get_custom_data(self, layer_name:str)->Any:
    """
				Returns the custom data value for custom data layer named `layer_name`. To check if a custom data layer exists, use `has_custom_data`.
			"""
    pass

  def has_custom_data(self, layer_name:str)->bool:
    """
				Returns whether there exists a custom data layer named `layer_name`.
			"""
    pass

  def set_custom_data_by_layer_id(self, layer_id:int, value:Any)->None:
    """
				Sets the tile's custom data value for the TileSet custom data layer with index `layer_id`.
			"""
    pass

  def get_custom_data_by_layer_id(self, layer_id:int)->Any:
    """
				Returns the custom data value for custom data layer with index `layer_id`.
			"""
    pass


