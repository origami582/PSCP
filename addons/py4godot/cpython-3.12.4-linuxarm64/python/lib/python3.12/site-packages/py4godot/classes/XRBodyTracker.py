# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.XRPositionalTracker as py4godot_xrpositionaltracker 
from py4godot.wrappers.wrappers import CPPXRBodyTrackerWrapper

class XRBodyTracker(py4godot_xrpositionaltracker.XRPositionalTracker):
  r'''
		A body tracking system will create an instance of this object and add it to the `XRServer`. This tracking system will then obtain skeleton data, convert it to the Godot Humanoid skeleton and store this data on the `XRBodyTracker` object.
		Use `XRBodyModifier3D` to animate a body mesh using body tracking data.
	'''
  @staticmethod
  def constructor():
    class_ = XRBodyTracker.construct_without_init()
    class_._ptr = constructor(1013,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRBodyTracker.construct_without_init()
    class_._ptr = constructor(1013,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRBodyTrackerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1013,0, ())


  def generate_wrapper(self):
    return CPPXRBodyTrackerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRBodyTracker.__new__(XRBodyTracker)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRBodyTracker'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRBodyTracker.construct_without_init()
    cls._ptr = CPPXRBodyTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRBodyTracker.construct_without_init()
    cls._ptr = CPPXRBodyTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def has_tracking_data(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_has_tracking_data()
    return _ret
  @has_tracking_data.setter
  def has_tracking_data(self,  value:'bool'):
    self.set_has_tracking_data(value)
  @property
  def body_flags(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_body_flags()
    return _ret
  @body_flags.setter
  def body_flags(self,  value:'int'):
    self.set_body_flags(value)
  @functools.native_method
  def set_has_tracking_data(self, has_data:'bool'   ) -> None:
    r''''''

    assert isinstance(has_data, bool), 'has_data must be bool'

    self.py__has_tracking_data = has_data






    self._ptr.call_with_return(69,tuple([has_data]))

  @functools.native_method
  def get_has_tracking_data(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_body_flags(self, flags:'int'   ) -> None:
    r''''''

    assert isinstance(flags, (int, float)), 'flags must be int or float'

    self.py__body_flags = flags






    self._ptr.call_with_return(71,tuple([flags]))

  @functools.native_method
  def get_body_flags(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_joint_flags(self, joint:'int'  , flags:'int'   ) -> None:
    r'''
				Sets flags about the validity of the tracking data for the given body joint.
			'''

    assert isinstance(joint, (int, float)), 'joint must be int or float'
    assert isinstance(flags, (int, float)), 'flags must be int or float'







    self._ptr.call_with_return(73,tuple([joint, flags]))

  @functools.native_method
  def get_joint_flags(self, joint:'int'  ) -> typing.Union[int]:
    r'''
				Returns flags about the validity of the tracking data for the given body joint.
			'''

    assert isinstance(joint, (int, float)), 'joint must be int or float'






    _ret
    _ret = self._ptr.call_with_return(74,tuple([joint]))
    return _ret


  @functools.native_method
  def set_joint_transform(self, joint:'int'  , transform:'Transform3D'   ) -> None:
    r'''
				Sets the transform for the given body joint.
			'''

    assert isinstance(joint, (int, float)), 'joint must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'







    self._ptr.call_with_return(75,tuple([joint, transform._ptr]))

  @functools.native_method
  def get_joint_transform(self, joint:'int'  ) -> typing.Union['Transform3D']:
    r'''
				Returns the transform for the given body joint.
			'''

    assert isinstance(joint, (int, float)), 'joint must be int or float'






    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(76,tuple([joint]))
    return _ret



register_cast_function('XRBodyTracker', XRBodyTracker.cast)
register_class('XRBodyTracker', XRBodyTracker)
