from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__



class Marshalls(__object__.Object):
  """
		Provides data transformation and encoding utility functions.
	"""



  @staticmethod
  def cast(other:__object__.Object)->Marshalls:pass

  @staticmethod
  def instance()->Marshalls:pass

  def variant_to_base64(self, variant:Any, full_objects:bool=False)->str:
    """
				Returns a Base64-encoded string of the `Variant` `variant`. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method.
			"""
    pass

  def base64_to_variant(self, base64_str:str, allow_objects:bool=False)->Any:
    """
				Returns a decoded `Variant` corresponding to the Base64-encoded string `base64_str`. If `allow_objects` is `true`, decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			"""
    pass

  def raw_to_base64(self, array:__core__.PackedByteArray)->str:
    """
				Returns a Base64-encoded string of a given `PackedByteArray`.
			"""
    pass

  def base64_to_raw(self, base64_str:str)->__core__.PackedByteArray:
    """
				Returns a decoded `PackedByteArray` corresponding to the Base64-encoded string `base64_str`.
			"""
    pass

  def utf8_to_base64(self, utf8_str:str)->str:
    """
				Returns a Base64-encoded string of the UTF-8 string `utf8_str`.
			"""
    pass

  def base64_to_utf8(self, base64_str:str)->str:
    """
				Returns a decoded string corresponding to the Base64-encoded string `base64_str`.
			"""
    pass


