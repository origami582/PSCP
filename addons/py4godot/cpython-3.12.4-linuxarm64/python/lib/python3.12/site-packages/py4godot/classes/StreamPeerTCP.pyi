from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StreamPeerTCP as __streampeertcp__
import py4godot.classes.StreamPeer as __streampeer__


class Status:
  STATUS_NONE:int = 0
  STATUS_CONNECTING:int = 1
  STATUS_CONNECTED:int = 2
  STATUS_ERROR:int = 3


class StreamPeerTCP(__streampeer__.StreamPeer):
  """
		A stream peer that handles TCP connections. This object can be used to connect to TCP servers, or also is returned by a TCP server.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	"""

  @staticmethod
  def constructor()->StreamPeerTCP:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeerTCP:pass


  def bind(self, port:int, host:str= __core__.String.new0())->int:
    """
				Opens the TCP socket, and binds it to the specified local address.
				This method is generally not needed, and only used to force the subsequent call to `connect_to_host` to use the specified `host` and `port` as source address. This can be desired in some NAT punchthrough techniques, or when forcing the source network interface.
			"""
    pass

  def connect_to_host(self, host:str, port:int)->int:
    """
				Connects to the specified `host:port` pair. A hostname will be resolved if valid. Returns `constant OK` on success.
			"""
    pass

  def poll(self)->int:
    """
				Poll the socket, updating its state. See `get_status`.
			"""
    pass

  def get_status(self)->int:
    """
				Returns the status of the connection.
			"""
    pass

  def get_connected_host(self)->str:
    """
				Returns the IP of this peer.
			"""
    pass

  def get_connected_port(self)->int:
    """
				Returns the port of this peer.
			"""
    pass

  def get_local_port(self)->int:
    """
				Returns the local port to which this peer is bound.
			"""
    pass

  def disconnect_from_host(self)->None:
    """
				Disconnects from host.
			"""
    pass

  def set_no_delay(self, enabled:bool)->None:
    """
				If `enabled` is `true`, packets will be sent immediately. If `enabled` is `false` (the default), packet transfers will be delayed and combined using `url=https://en.wikipedia.org/wiki/Nagle%27s_algorithm`Nagle's algorithm`/url`.
				**Note:** It's recommended to leave this disabled for applications that send large packets or need to transfer a lot of data, as enabling this can decrease the total available bandwidth.
			"""
    pass


