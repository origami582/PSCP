from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Image as __image__
import py4godot.classes.FileAccess as __fileaccess__
import py4godot.classes.ImageFormatLoader as __imageformatloader__



class ImageFormatLoaderExtension(__imageformatloader__.ImageFormatLoader):
  """
		The engine supports multiple image formats out of the box (PNG, SVG, JPEG, WebP to name a few), but you can choose to implement support for additional image formats by extending this class.
		Be sure to respect the documented return types and values. You should create an instance of it, and call `add_format_loader` to register that loader during the initialization phase.
	"""

  @staticmethod
  def constructor()->ImageFormatLoaderExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->ImageFormatLoaderExtension:pass


  def _get_recognized_extensions(self)->__core__.PackedStringArray:
    """
				Returns the list of file extensions for this image format. Files with the given extensions will be treated as image file and loaded using this class.
			"""
    pass

  def _load_image(self, image:__image__.Image, fileaccess:__fileaccess__.FileAccess, flags:int, scale:float)->int:
    """
				Loads the content of `fileaccess` into the provided `image`.
			"""
    pass

  def add_format_loader(self)->None:
    """
				Add this format loader to the engine, allowing it to recognize the file extensions returned by `_get_recognized_extensions`.
			"""
    pass

  def remove_format_loader(self)->None:
    """
				Remove this format loader from the engine.
			"""
    pass


