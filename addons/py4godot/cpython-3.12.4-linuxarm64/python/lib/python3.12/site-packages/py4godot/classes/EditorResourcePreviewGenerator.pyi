from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__



class EditorResourcePreviewGenerator(__refcounted__.RefCounted):
  """
		Custom code to generate previews. Check `EditorSettings.filesystem/file_dialog/thumbnail_size` to find a proper size to generate previews at.
	"""

  @staticmethod
  def constructor()->EditorResourcePreviewGenerator:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorResourcePreviewGenerator:pass


  def _handles(self, type:str)->bool:
    """
				Returns `true` if your generator supports the resource of type `type`.
			"""
    pass

  def _generate(self, resource:__resource__.Resource, size:__core__.Vector2i, metadata:__core__.Dictionary)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Generate a preview from a given resource with the specified size. This must always be implemented.
				Returning `null` is an OK way to fail and let another generator take care.
				Care must be taken because this function is always called from a thread (not the main thread).
				`metadata` dictionary can be modified to store file-specific metadata that can be used in `EditorResourceTooltipPlugin._make_tooltip_for_path` (like image size, sample length etc.).
			"""
    pass

  def _generate_from_path(self, path:str, size:__core__.Vector2i, metadata:__core__.Dictionary)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call `_generate`.
				Returning `null` is an OK way to fail and let another generator take care.
				Care must be taken because this function is always called from a thread (not the main thread).
				`metadata` dictionary can be modified to store file-specific metadata that can be used in `EditorResourceTooltipPlugin._make_tooltip_for_path` (like image size, sample length etc.).
			"""
    pass

  def _generate_small_preview_automatically(self)->bool:
    """
				If this function returns `true`, the generator will automatically generate the small previews from the normal preview texture generated by the methods `_generate` or `_generate_from_path`.
				By default, it returns `false`.
			"""
    pass

  def _can_generate_small_preview(self)->bool:
    """
				If this function returns `true`, the generator will call `_generate` or `_generate_from_path` for small previews as well.
				By default, it returns `false`.
			"""
    pass


