from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.R as __r__
import py4godot.classes.t as __t__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.3 as __3__
import py4godot.classes.I as __i__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.i as __i__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.p as __p__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.o as __o__
import py4godot.classes.y as __y__
import py4godot.classes.Image as __image__
import py4godot.classes.2 as __2__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__



class TextServerExtension(__textserver__.TextServer):
  """
		External `TextServer` implementations should inherit from this class.
	"""

  @staticmethod
  def constructor()->TextServerExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->TextServerExtension:pass


  def _has_feature(self, feature:int )->bool:
    """
				Returns `true` if the server supports a feature.
			"""
    pass

  def _get_name(self)->str:
    """
				Returns the name of the server interface.
			"""
    pass

  def _get_features(self)->int:
    """
				Returns text server features, see `enum TextServer.Feature`.
			"""
    pass

  def _free_rid(self, rid:__core__.RID)->None:
    """
				Frees an object created by this `TextServer`.
			"""
    pass

  def _has(self, rid:__core__.RID)->bool:
    """
				Returns `true` if `rid` is valid resource owned by this text server.
			"""
    pass

  def _load_support_data(self, filename:str)->bool:
    """
				Loads optional TextServer database (e.g. ICU break iterators and dictionaries).
			"""
    pass

  def _get_support_data_filename(self)->str:
    """
				Returns default TextServer database (e.g. ICU break iterators and dictionaries) filename.
			"""
    pass

  def _get_support_data_info(self)->str:
    """
				Returns TextServer database (e.g. ICU break iterators and dictionaries) description.
			"""
    pass

  def _save_support_data(self, filename:str)->bool:
    """
				Saves optional TextServer database (e.g. ICU break iterators and dictionaries) to the file.
			"""
    pass

  def _get_support_data(self)->__core__.PackedByteArray:
    """
				Returns default TextServer database (e.g. ICU break iterators and dictionaries).
			"""
    pass

  def _is_locale_right_to_left(self, locale:str)->bool:
    """
				Returns `true` if locale is right-to-left.
			"""
    pass

  def _name_to_tag(self, name:str)->int:
    """
				Converts readable feature, variation, script, or language name to OpenType tag.
			"""
    pass

  def _tag_to_name(self, tag:int)->str:
    """
				Converts OpenType tag to readable feature, variation, script, or language name.
			"""
    pass

  def _create_font(self)->__core__.RID:
    """
				Creates a new, empty font cache entry resource.
			"""
    pass

  def _create_font_linked_variation(self, font_rid:__core__.RID)->__core__.RID:
    """
				Optional, implement if font supports extra spacing or baseline offset.
				Creates a new variation existing font which is reusing the same glyph cache and font data.
			"""
    pass

  def _font_set_data(self, font_rid:__core__.RID, data:__core__.PackedByteArray)->None:
    """
				Sets font source data, e.g contents of the dynamic font source file.
			"""
    pass

  def _font_set_face_index(self, font_rid:__core__.RID, face_index:int)->None:
    """
				Sets an active face index in the TrueType / OpenType collection.
			"""
    pass

  def _font_get_face_index(self, font_rid:__core__.RID)->int:
    """
				Returns an active face index in the TrueType / OpenType collection.
			"""
    pass

  def _font_get_face_count(self, font_rid:__core__.RID)->int:
    """
				Returns number of faces in the TrueType / OpenType collection.
			"""
    pass

  def _font_set_style(self, font_rid:__core__.RID, style:int)->None:
    """
				Sets the font style flags.
			"""
    pass

  def _font_get_style(self, font_rid:__core__.RID)->int:
    """
				Returns font style flags.
			"""
    pass

  def _font_set_name(self, font_rid:__core__.RID, name:str)->None:
    """
				Sets the font family name.
			"""
    pass

  def _font_get_name(self, font_rid:__core__.RID)->str:
    """
				Returns font family name.
			"""
    pass

  def _font_get_ot_name_strings(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns `Dictionary` with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
			"""
    pass

  def _font_set_style_name(self, font_rid:__core__.RID, name_style:str)->None:
    """
				Sets the font style name.
			"""
    pass

  def _font_get_style_name(self, font_rid:__core__.RID)->str:
    """
				Returns font style name.
			"""
    pass

  def _font_set_weight(self, font_rid:__core__.RID, weight:int)->None:
    """
				Sets weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
			"""
    pass

  def _font_get_weight(self, font_rid:__core__.RID)->int:
    """
				Returns weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
			"""
    pass

  def _font_set_stretch(self, font_rid:__core__.RID, stretch:int)->None:
    """
				Sets font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
			"""
    pass

  def _font_get_stretch(self, font_rid:__core__.RID)->int:
    """
				Returns font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
			"""
    pass

  def _font_set_antialiasing(self, font_rid:__core__.RID, antialiasing:int )->None:
    """
				Sets font anti-aliasing mode.
			"""
    pass

  def _font_get_antialiasing(self, font_rid:__core__.RID)->int:
    """
				Returns font anti-aliasing mode.
			"""
    pass

  def _font_set_disable_embedded_bitmaps(self, font_rid:__core__.RID, disable_embedded_bitmaps:bool)->None:
    """
				If set to `true`, embedded font bitmap loading is disabled.
			"""
    pass

  def _font_get_disable_embedded_bitmaps(self, font_rid:__core__.RID)->bool:
    """
				Returns whether the font's embedded bitmap loading is disabled.
			"""
    pass

  def _font_set_generate_mipmaps(self, font_rid:__core__.RID, generate_mipmaps:bool)->None:
    """
				If set to `true` font texture mipmap generation is enabled.
			"""
    pass

  def _font_get_generate_mipmaps(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if font texture mipmap generation is enabled.
			"""
    pass

  def _font_set_multichannel_signed_distance_field(self, font_rid:__core__.RID, msdf:bool)->None:
    """
				If set to `true`, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. MSDF rendering allows displaying the font at any scaling factor without blurriness, and without incurring a CPU cost when the font size changes (since the font no longer needs to be rasterized on the CPU). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.
			"""
    pass

  def _font_is_multichannel_signed_distance_field(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data.
			"""
    pass

  def _font_set_msdf_pixel_range(self, font_rid:__core__.RID, msdf_pixel_range:int)->None:
    """
				Sets the width of the range around the shape between the minimum and maximum representable signed distance.
			"""
    pass

  def _font_get_msdf_pixel_range(self, font_rid:__core__.RID)->int:
    """
				Returns the width of the range around the shape between the minimum and maximum representable signed distance.
			"""
    pass

  def _font_set_msdf_size(self, font_rid:__core__.RID, msdf_size:int)->None:
    """
				Sets source font size used to generate MSDF textures.
			"""
    pass

  def _font_get_msdf_size(self, font_rid:__core__.RID)->int:
    """
				Returns source font size used to generate MSDF textures.
			"""
    pass

  def _font_set_fixed_size(self, font_rid:__core__.RID, fixed_size:int)->None:
    """
				Sets bitmap font fixed size. If set to value greater than zero, same cache entry will be used for all font sizes.
			"""
    pass

  def _font_get_fixed_size(self, font_rid:__core__.RID)->int:
    """
				Returns bitmap font fixed size.
			"""
    pass

  def _font_set_fixed_size_scale_mode(self, font_rid:__core__.RID, fixed_size_scale_mode:int )->None:
    """
				Sets bitmap font scaling mode. This property is used only if `fixed_size` is greater than zero.
			"""
    pass

  def _font_get_fixed_size_scale_mode(self, font_rid:__core__.RID)->int:
    """
				Returns bitmap font scaling mode.
			"""
    pass

  def _font_set_allow_system_fallback(self, font_rid:__core__.RID, allow_system_fallback:bool)->None:
    """
				If set to `true`, system fonts can be automatically used as fallbacks.
			"""
    pass

  def _font_is_allow_system_fallback(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if system fonts can be automatically used as fallbacks.
			"""
    pass

  def _font_set_force_autohinter(self, font_rid:__core__.RID, force_autohinter:bool)->None:
    """
				If set to `true` auto-hinting is preferred over font built-in hinting.
			"""
    pass

  def _font_is_force_autohinter(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if auto-hinting is supported and preferred over font built-in hinting.
			"""
    pass

  def _font_set_hinting(self, font_rid:__core__.RID, hinting:int )->None:
    """
				Sets font hinting mode. Used by dynamic fonts only.
			"""
    pass

  def _font_get_hinting(self, font_rid:__core__.RID)->int:
    """
				Returns the font hinting mode. Used by dynamic fonts only.
			"""
    pass

  def _font_set_subpixel_positioning(self, font_rid:__core__.RID, subpixel_positioning:int )->None:
    """
				Sets font subpixel glyph positioning mode.
			"""
    pass

  def _font_get_subpixel_positioning(self, font_rid:__core__.RID)->int:
    """
				Returns font subpixel glyph positioning mode.
			"""
    pass

  def _font_set_keep_rounding_remainders(self, font_rid:__core__.RID, keep_rounding_remainders:bool)->None:
    """
				Sets glyph position rounding behavior. If set to `true`, when aligning glyphs to the pixel boundaries rounding remainders are accumulated to ensure more uniform glyph distribution. This setting has no effect if subpixel positioning is enabled.
			"""
    pass

  def _font_get_keep_rounding_remainders(self, font_rid:__core__.RID)->bool:
    """
				Returns glyph position rounding behavior. If set to `true`, when aligning glyphs to the pixel boundaries rounding remainders are accumulated to ensure more uniform glyph distribution. This setting has no effect if subpixel positioning is enabled.
			"""
    pass

  def _font_set_embolden(self, font_rid:__core__.RID, strength:float)->None:
    """
				Sets font embolden strength. If `strength` is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
			"""
    pass

  def _font_get_embolden(self, font_rid:__core__.RID)->float:
    """
				Returns font embolden strength.
			"""
    pass

  def _font_set_spacing(self, font_rid:__core__.RID, spacing:int , value:int)->None:
    """
				Sets the spacing for `spacing` to `value` in pixels (not relative to the font size).
			"""
    pass

  def _font_get_spacing(self, font_rid:__core__.RID, spacing:int )->int:
    """
				Returns the spacing for `spacing` in pixels (not relative to the font size).
			"""
    pass

  def _font_set_baseline_offset(self, font_rid:__core__.RID, baseline_offset:float)->None:
    """
				Sets extra baseline offset (as a fraction of font height).
			"""
    pass

  def _font_get_baseline_offset(self, font_rid:__core__.RID)->float:
    """
				Returns extra baseline offset (as a fraction of font height).
			"""
    pass

  def _font_set_transform(self, font_rid:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
			"""
    pass

  def _font_get_transform(self, font_rid:__core__.RID)->__core__.Transform2D:
    """
				Returns 2D transform applied to the font outlines.
			"""
    pass

  def _font_set_variation_coordinates(self, font_rid:__core__.RID, variation_coordinates:__core__.Dictionary)->None:
    """
				Sets variation coordinates for the specified font cache entry.
			"""
    pass

  def _font_get_variation_coordinates(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns variation coordinates for the specified font cache entry.
			"""
    pass

  def _font_set_oversampling(self, font_rid:__core__.RID, oversampling:float)->None:
    """
				If set to a positive value, overrides the oversampling factor of the viewport this font is used in. See `Viewport.oversampling`. This value doesn't override the `code skip-lint`oversampling` parameter of `code skip-lint`draw_*` methods. Used by dynamic fonts only.
			"""
    pass

  def _font_get_oversampling(self, font_rid:__core__.RID)->float:
    """
				Returns oversampling factor override. If set to a positive value, overrides the oversampling factor of the viewport this font is used in. See `Viewport.oversampling`. This value doesn't override the `code skip-lint`oversampling` parameter of `code skip-lint`draw_*` methods. Used by dynamic fonts only.
			"""
    pass

  def _font_get_size_cache_list(self, font_rid:__core__.RID)->typedarray::Vector2i:
    """
				Returns list of the font sizes in the cache. Each size is `Vector2i` with font size and outline size.
			"""
    pass

  def _font_clear_size_cache(self, font_rid:__core__.RID)->None:
    """
				Removes all font sizes from the cache entry.
			"""
    pass

  def _font_remove_size_cache(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes specified font size from the cache entry.
			"""
    pass

  def _font_set_ascent(self, font_rid:__core__.RID, size:int, ascent:float)->None:
    """
				Sets the font ascent (number of pixels above the baseline).
			"""
    pass

  def _font_get_ascent(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns the font ascent (number of pixels above the baseline).
			"""
    pass

  def _font_set_descent(self, font_rid:__core__.RID, size:int, descent:float)->None:
    """
				Sets the font descent (number of pixels below the baseline).
			"""
    pass

  def _font_get_descent(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns the font descent (number of pixels below the baseline).
			"""
    pass

  def _font_set_underline_position(self, font_rid:__core__.RID, size:int, underline_position:float)->None:
    """
				Sets pixel offset of the underline below the baseline.
			"""
    pass

  def _font_get_underline_position(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def _font_set_underline_thickness(self, font_rid:__core__.RID, size:int, underline_thickness:float)->None:
    """
				Sets thickness of the underline in pixels.
			"""
    pass

  def _font_get_underline_thickness(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns thickness of the underline in pixels.
			"""
    pass

  def _font_set_scale(self, font_rid:__core__.RID, size:int, scale:float)->None:
    """
				Sets scaling factor of the color bitmap font.
			"""
    pass

  def _font_get_scale(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns scaling factor of the color bitmap font.
			"""
    pass

  def _font_get_texture_count(self, font_rid:__core__.RID, size:__core__.Vector2i)->int:
    """
				Returns number of textures used by font cache entry.
			"""
    pass

  def _font_clear_textures(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes all textures from font cache entry.
			"""
    pass

  def _font_remove_texture(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->None:
    """
				Removes specified texture from the cache entry.
			"""
    pass

  def _font_set_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, image:__image__.Image)->None:
    """
				Sets font cache texture image data.
			"""
    pass

  def _font_get_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__image__.Image:
    """
				Returns font cache texture image data.
			"""
    pass

  def _font_set_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, offset:__core__.PackedInt32Array)->None:
    """
				Sets array containing glyph packing data.
			"""
    pass

  def _font_get_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__core__.PackedInt32Array:
    """
				Returns array containing glyph packing data.
			"""
    pass

  def _font_get_glyph_list(self, font_rid:__core__.RID, size:__core__.Vector2i)->__core__.PackedInt32Array:
    """
				Returns list of rendered glyphs in the cache entry.
			"""
    pass

  def _font_clear_glyphs(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes all rendered glyph information from the cache entry.
			"""
    pass

  def _font_remove_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->None:
    """
				Removes specified rendered glyph information from the cache entry.
			"""
    pass

  def _font_get_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int)->__core__.Vector2:
    """
				Returns glyph advance (offset of the next glyph).
			"""
    pass

  def _font_set_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int, advance:__core__.Vector2)->None:
    """
				Sets glyph advance (offset of the next glyph).
			"""
    pass

  def _font_get_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns glyph offset from the baseline.
			"""
    pass

  def _font_set_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, offset:__core__.Vector2)->None:
    """
				Sets glyph offset from the baseline.
			"""
    pass

  def _font_get_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns size of the glyph.
			"""
    pass

  def _font_set_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, gl_size:__core__.Vector2)->None:
    """
				Sets size of the glyph.
			"""
    pass

  def _font_get_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Rect2:
    """
				Returns rectangle in the cache texture containing the glyph.
			"""
    pass

  def _font_set_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, uv_rect:__core__.Rect2)->None:
    """
				Sets rectangle in the cache texture containing the glyph.
			"""
    pass

  def _font_get_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->int:
    """
				Returns index of the cache texture containing the glyph.
			"""
    pass

  def _font_set_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, texture_idx:int)->None:
    """
				Sets index of the cache texture containing the glyph.
			"""
    pass

  def _font_get_glyph_texture_rid(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.RID:
    """
				Returns resource ID of the cache texture containing the glyph.
			"""
    pass

  def _font_get_glyph_texture_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns size of the cache texture containing the glyph.
			"""
    pass

  def _font_get_glyph_contours(self, font_rid:__core__.RID, size:int, index:int)->__core__.Dictionary:
    """
				Returns outline contours of the glyph.
			"""
    pass

  def _font_get_kerning_list(self, font_rid:__core__.RID, size:int)->typedarray::Vector2i:
    """
				Returns list of the kerning overrides.
			"""
    pass

  def _font_clear_kerning_map(self, font_rid:__core__.RID, size:int)->None:
    """
				Removes all kerning overrides.
			"""
    pass

  def _font_remove_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->None:
    """
				Removes kerning override for the pair of glyphs.
			"""
    pass

  def _font_set_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i, kerning:__core__.Vector2)->None:
    """
				Sets kerning for the pair of glyphs.
			"""
    pass

  def _font_get_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->__core__.Vector2:
    """
				Returns kerning for the pair of glyphs.
			"""
    pass

  def _font_get_glyph_index(self, font_rid:__core__.RID, size:int, char:int, variation_selector:int)->int:
    """
				Returns the glyph index of a `char`, optionally modified by the `variation_selector`.
			"""
    pass

  def _font_get_char_from_glyph_index(self, font_rid:__core__.RID, size:int, glyph_index:int)->int:
    """
				Returns character code associated with `glyph_index`, or `0` if `glyph_index` is invalid.
			"""
    pass

  def _font_has_char(self, font_rid:__core__.RID, char:int)->bool:
    """
				Returns `true` if a Unicode `char` is available in the font.
			"""
    pass

  def _font_get_supported_chars(self, font_rid:__core__.RID)->str:
    """
				Returns a string containing all the characters available in the font.
			"""
    pass

  def _font_get_supported_glyphs(self, font_rid:__core__.RID)->__core__.PackedInt32Array:
    """
				Returns an array containing all glyph indices in the font.
			"""
    pass

  def _font_render_range(self, font_rid:__core__.RID, size:__core__.Vector2i, start:int, end:int)->None:
    """
				Renders the range of characters to the font cache texture.
			"""
    pass

  def _font_render_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, index:int)->None:
    """
				Renders specified glyph to the font cache texture.
			"""
    pass

  def _font_draw_glyph(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None:
    """
				Draws single glyph into a canvas item at the position, using `font_rid` at the size `size`. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def _font_draw_glyph_outline(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, outline_size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None:
    """
				Draws single glyph outline of size `outline_size` into a canvas item at the position, using `font_rid` at the size `size`. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def _font_is_language_supported(self, font_rid:__core__.RID, language:str)->bool:
    """
				Returns `true`, if font supports given language (`url=https://en.wikipedia.org/wiki/ISO_639-1`ISO 639`/url` code).
			"""
    pass

  def _font_set_language_support_override(self, font_rid:__core__.RID, language:str, supported:bool)->None:
    """
				Adds override for `_font_is_language_supported`.
			"""
    pass

  def _font_get_language_support_override(self, font_rid:__core__.RID, language:str)->bool:
    """
				Returns `true` if support override is enabled for the `language`.
			"""
    pass

  def _font_remove_language_support_override(self, font_rid:__core__.RID, language:str)->None:
    """
				Remove language support override.
			"""
    pass

  def _font_get_language_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray:
    """
				Returns list of language support overrides.
			"""
    pass

  def _font_is_script_supported(self, font_rid:__core__.RID, script:str)->bool:
    """
				Returns `true`, if font supports given script (ISO 15924 code).
			"""
    pass

  def _font_set_script_support_override(self, font_rid:__core__.RID, script:str, supported:bool)->None:
    """
				Adds override for `_font_is_script_supported`.
			"""
    pass

  def _font_get_script_support_override(self, font_rid:__core__.RID, script:str)->bool:
    """
				Returns `true` if support override is enabled for the `script`.
			"""
    pass

  def _font_remove_script_support_override(self, font_rid:__core__.RID, script:str)->None:
    """
				Removes script support override.
			"""
    pass

  def _font_get_script_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray:
    """
				Returns list of script support overrides.
			"""
    pass

  def _font_set_opentype_feature_overrides(self, font_rid:__core__.RID, overrides:__core__.Dictionary)->None:
    """
				Sets font OpenType feature set override.
			"""
    pass

  def _font_get_opentype_feature_overrides(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns font OpenType feature set override.
			"""
    pass

  def _font_supported_feature_list(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns the dictionary of the supported OpenType features.
			"""
    pass

  def _font_supported_variation_list(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns the dictionary of the supported OpenType variation coordinates.
			"""
    pass

  def _font_get_global_oversampling(self)->float:
    """
				Returns the font oversampling factor, shared by all fonts in the TextServer.
			"""
    pass

  def _font_set_global_oversampling(self, oversampling:float)->None:
    """
				Sets oversampling factor, shared by all font in the TextServer.
			"""
    pass

  def _get_hex_code_box_size(self, size:int, index:int)->__core__.Vector2:
    """
				Returns size of the replacement character (box with character hexadecimal code that is drawn in place of invalid characters).
			"""
    pass

  def _draw_hex_code_box(self, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None:
    """
				Draws box displaying character hexadecimal code.
			"""
    pass

  def _create_shaped_text(self, direction:int , orientation:int )->__core__.RID:
    """
				Creates a new buffer for complex text layout, with the given `direction` and `orientation`.
			"""
    pass

  def _shaped_text_clear(self, shaped:__core__.RID)->None:
    """
				Clears text buffer (removes text and inline objects).
			"""
    pass

  def _shaped_text_set_direction(self, shaped:__core__.RID, direction:int )->None:
    """
				Sets desired text direction. If set to `constant TextServer.DIRECTION_AUTO`, direction will be detected based on the buffer contents and current locale.
			"""
    pass

  def _shaped_text_get_direction(self, shaped:__core__.RID)->int:
    """
				Returns direction of the text.
			"""
    pass

  def _shaped_text_get_inferred_direction(self, shaped:__core__.RID)->int:
    """
				Returns direction of the text, inferred by the BiDi algorithm.
			"""
    pass

  def _shaped_text_set_bidi_override(self, shaped:__core__.RID, override:__core__.Array)->None:
    """
				Overrides BiDi for the structured text.
			"""
    pass

  def _shaped_text_set_custom_punctuation(self, shaped:__core__.RID, punct:str)->None:
    """
				Sets custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
			"""
    pass

  def _shaped_text_get_custom_punctuation(self, shaped:__core__.RID)->str:
    """
				Returns custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
			"""
    pass

  def _shaped_text_set_custom_ellipsis(self, shaped:__core__.RID, char:int)->None:
    """
				Sets ellipsis character used for text clipping.
			"""
    pass

  def _shaped_text_get_custom_ellipsis(self, shaped:__core__.RID)->int:
    """
				Returns ellipsis character used for text clipping.
			"""
    pass

  def _shaped_text_set_orientation(self, shaped:__core__.RID, orientation:int )->None:
    """
				Sets desired text orientation.
			"""
    pass

  def _shaped_text_get_orientation(self, shaped:__core__.RID)->int:
    """
				Returns text orientation.
			"""
    pass

  def _shaped_text_set_preserve_invalid(self, shaped:__core__.RID, enabled:bool)->None:
    """
				If set to `true` text buffer will display invalid characters as hexadecimal codes, otherwise nothing is displayed.
			"""
    pass

  def _shaped_text_get_preserve_invalid(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if text buffer is configured to display hexadecimal codes in place of invalid characters.
			"""
    pass

  def _shaped_text_set_preserve_control(self, shaped:__core__.RID, enabled:bool)->None:
    """
				If set to `true` text buffer will display control characters.
			"""
    pass

  def _shaped_text_get_preserve_control(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if text buffer is configured to display control characters.
			"""
    pass

  def _shaped_text_set_spacing(self, shaped:__core__.RID, spacing:int , value:int)->None:
    """
				Sets extra spacing added between glyphs or lines in pixels.
			"""
    pass

  def _shaped_text_get_spacing(self, shaped:__core__.RID, spacing:int )->int:
    """
				Returns extra spacing added between glyphs or lines in pixels.
			"""
    pass

  def _shaped_text_add_string(self, shaped:__core__.RID, text:str, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary, language:str, meta:Any)->bool:
    """
				Adds text span and font to draw it to the text buffer.
			"""
    pass

  def _shaped_text_add_object(self, shaped:__core__.RID, key:Any, size:__core__.Vector2, inline_align:int , length:int, baseline:float)->bool:
    """
				Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
			"""
    pass

  def _shaped_text_resize_object(self, shaped:__core__.RID, key:Any, size:__core__.Vector2, inline_align:int , baseline:float)->bool:
    """
				Sets new size and alignment of embedded object.
			"""
    pass

  def _shaped_get_span_count(self, shaped:__core__.RID)->int:
    """
				Returns number of text spans added using `_shaped_text_add_string` or `_shaped_text_add_object`.
			"""
    pass

  def _shaped_get_span_meta(self, shaped:__core__.RID, index:int)->Any:
    """
				Returns text span metadata.
			"""
    pass

  def _shaped_get_span_embedded_object(self, shaped:__core__.RID, index:int)->Any:
    """
				Returns text embedded object key.
			"""
    pass

  def _shaped_set_span_update_font(self, shaped:__core__.RID, index:int, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary)->None:
    """
				Changes text span font, font size, and OpenType features, without changing the text.
			"""
    pass

  def _shaped_text_substr(self, shaped:__core__.RID, start:int, length:int)->__core__.RID:
    """
				Returns text buffer for the substring of the text in the `shaped` text buffer (including inline objects).
			"""
    pass

  def _shaped_text_get_parent(self, shaped:__core__.RID)->__core__.RID:
    """
				Returns the parent buffer from which the substring originates.
			"""
    pass

  def _shaped_text_fit_to_width(self, shaped:__core__.RID, width:float, justification_flags:int)->float:
    """
				Adjusts text width to fit to specified width, returns new text width.
			"""
    pass

  def _shaped_text_tab_align(self, shaped:__core__.RID, tab_stops:__core__.PackedFloat32Array)->float:
    """
				Aligns shaped text to the given tab-stops.
			"""
    pass

  def _shaped_text_shape(self, shaped:__core__.RID)->bool:
    """
				Shapes buffer if it's not shaped. Returns `true` if the string is shaped successfully.
			"""
    pass

  def _shaped_text_update_breaks(self, shaped:__core__.RID)->bool:
    """
				Updates break points in the shaped text. This method is called by default implementation of text breaking functions.
			"""
    pass

  def _shaped_text_update_justification_ops(self, shaped:__core__.RID)->bool:
    """
				Updates justification points in the shaped text. This method is called by default implementation of text justification functions.
			"""
    pass

  def _shaped_text_is_ready(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if buffer is successfully shaped.
			"""
    pass

  def _shaped_text_get_glyphs(self, shaped:__core__.RID)->const Glyph*:
    """
				Returns an array of glyphs in the visual order.
			"""
    pass

  def _shaped_text_sort_logical(self, shaped:__core__.RID)->const Glyph*:
    """
				Returns text glyphs in the logical order.
			"""
    pass

  def _shaped_text_get_glyph_count(self, shaped:__core__.RID)->int:
    """
				Returns number of glyphs in the buffer.
			"""
    pass

  def _shaped_text_get_range(self, shaped:__core__.RID)->__core__.Vector2i:
    """
				Returns substring buffer character range in the parent buffer.
			"""
    pass

  def _shaped_text_get_line_breaks_adv(self, shaped:__core__.RID, width:__core__.PackedFloat32Array, start:int, once:bool, break_flags:int)->__core__.PackedInt32Array:
    """
				Breaks text to the lines and columns. Returns character ranges for each segment.
			"""
    pass

  def _shaped_text_get_line_breaks(self, shaped:__core__.RID, width:float, start:int, break_flags:int)->__core__.PackedInt32Array:
    """
				Breaks text to the lines and returns character ranges for each line.
			"""
    pass

  def _shaped_text_get_word_breaks(self, shaped:__core__.RID, grapheme_flags:int, skip_grapheme_flags:int)->__core__.PackedInt32Array:
    """
				Breaks text into words and returns array of character ranges. Use `grapheme_flags` to set what characters are used for breaking.
			"""
    pass

  def _shaped_text_get_trim_pos(self, shaped:__core__.RID)->int:
    """
				Returns the position of the overrun trim.
			"""
    pass

  def _shaped_text_get_ellipsis_pos(self, shaped:__core__.RID)->int:
    """
				Returns position of the ellipsis.
			"""
    pass

  def _shaped_text_get_ellipsis_glyph_count(self, shaped:__core__.RID)->int:
    """
				Returns number of glyphs in the ellipsis.
			"""
    pass

  def _shaped_text_get_ellipsis_glyphs(self, shaped:__core__.RID)->const Glyph*:
    """
				Returns array of the glyphs in the ellipsis.
			"""
    pass

  def _shaped_text_overrun_trim_to_width(self, shaped:__core__.RID, width:float, trim_flags:int)->None:
    """
				Trims text if it exceeds the given width.
			"""
    pass

  def _shaped_text_get_objects(self, shaped:__core__.RID)->__core__.Array:
    """
				Returns array of inline objects.
			"""
    pass

  def _shaped_text_get_object_rect(self, shaped:__core__.RID, key:Any)->__core__.Rect2:
    """
				Returns bounding rectangle of the inline object.
			"""
    pass

  def _shaped_text_get_object_range(self, shaped:__core__.RID, key:Any)->__core__.Vector2i:
    """
				Returns the character range of the inline object.
			"""
    pass

  def _shaped_text_get_object_glyph(self, shaped:__core__.RID, key:Any)->int:
    """
				Returns the glyph index of the inline object.
			"""
    pass

  def _shaped_text_get_size(self, shaped:__core__.RID)->__core__.Vector2:
    """
				Returns size of the text.
			"""
    pass

  def _shaped_text_get_ascent(self, shaped:__core__.RID)->float:
    """
				Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
			"""
    pass

  def _shaped_text_get_descent(self, shaped:__core__.RID)->float:
    """
				Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
			"""
    pass

  def _shaped_text_get_width(self, shaped:__core__.RID)->float:
    """
				Returns width (for horizontal layout) or height (for vertical) of the text.
			"""
    pass

  def _shaped_text_get_underline_position(self, shaped:__core__.RID)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def _shaped_text_get_underline_thickness(self, shaped:__core__.RID)->float:
    """
				Returns thickness of the underline.
			"""
    pass

  def _shaped_text_get_dominant_direction_in_range(self, shaped:__core__.RID, start:int, end:int)->int:
    """
				Returns dominant direction of in the range of text.
			"""
    pass

  def _shaped_text_get_selection(self, shaped:__core__.RID, start:int, end:int)->__core__.PackedVector2Array:
    """
				Returns selection rectangles for the specified character range.
			"""
    pass

  def _shaped_text_hit_test_grapheme(self, shaped:__core__.RID, coord:float)->int:
    """
				Returns grapheme index at the specified pixel offset at the baseline, or `-1` if none is found.
			"""
    pass

  def _shaped_text_hit_test_position(self, shaped:__core__.RID, coord:float)->int:
    """
				Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
			"""
    pass

  def _shaped_text_draw(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float, clip_r:float, color:__core__.Color)->None:
    """
				Draw shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout). If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def _shaped_text_draw_outline(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float, clip_r:float, outline_size:int, color:__core__.Color)->None:
    """
				Draw the outline of the shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout). If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
			"""
    pass

  def _shaped_text_get_grapheme_bounds(self, shaped:__core__.RID, pos:int)->__core__.Vector2:
    """
				Returns composite character's bounds as offsets from the start of the line.
			"""
    pass

  def _shaped_text_next_grapheme_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns grapheme end position closest to the `pos`.
			"""
    pass

  def _shaped_text_prev_grapheme_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns grapheme start position closest to the `pos`.
			"""
    pass

  def _shaped_text_get_character_breaks(self, shaped:__core__.RID)->__core__.PackedInt32Array:
    """
				Returns array of the composite character boundaries.
			"""
    pass

  def _shaped_text_next_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character end position closest to the `pos`.
			"""
    pass

  def _shaped_text_prev_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character start position closest to the `pos`.
			"""
    pass

  def _shaped_text_closest_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character position closest to the `pos`.
			"""
    pass

  def _format_number(self, number:str, language:str)->str:
    """
				Converts a number from the Western Arabic (0..9) to the numeral systems used in `language`.
			"""
    pass

  def _parse_number(self, number:str, language:str)->str:
    """
				Converts `number` from the numeral systems used in `language` to Western Arabic (0..9).
			"""
    pass

  def _percent_sign(self, language:str)->str:
    """
				Returns percent sign used in the `language`.
			"""
    pass

  def _strip_diacritics(self, string:str)->str:
    """
				Strips diacritics from the string.
			"""
    pass

  def _is_valid_identifier(self, string:str)->bool:
    """
				Returns `true` if `string` is a valid identifier.
			"""
    pass

  def _is_valid_letter(self, unicode:int)->bool:
    """
"""
    pass

  def _string_get_word_breaks(self, string:str, language:str, chars_per_line:int)->__core__.PackedInt32Array:
    """
				Returns an array of the word break boundaries. Elements in the returned array are the offsets of the start and end of words. Therefore the length of the array is always even.
			"""
    pass

  def _string_get_character_breaks(self, string:str, language:str)->__core__.PackedInt32Array:
    """
				Returns array of the composite character boundaries.
			"""
    pass

  def _is_confusable(self, string:str, dict:__core__.PackedStringArray)->int:
    """
				Returns index of the first string in `dict` which is visually confusable with the `string`, or `-1` if none is found.
			"""
    pass

  def _spoof_check(self, string:str)->bool:
    """
				Returns `true` if `string` is likely to be an attempt at confusing the reader.
			"""
    pass

  def _string_to_upper(self, string:str, language:str)->str:
    """
				Returns the string converted to uppercase.
			"""
    pass

  def _string_to_lower(self, string:str, language:str)->str:
    """
				Returns the string converted to lowercase.
			"""
    pass

  def _string_to_title(self, string:str, language:str)->str:
    """
				Returns the string converted to title case.
			"""
    pass

  def _parse_structured_text(self, parser_type:int , args:__core__.Array, text:str)->typedarray::Vector3i:
    """
				Default implementation of the BiDi algorithm override function.
			"""
    pass

  def _cleanup(self)->None:
    """
				This method is called before text server is unregistered.
			"""
    pass


