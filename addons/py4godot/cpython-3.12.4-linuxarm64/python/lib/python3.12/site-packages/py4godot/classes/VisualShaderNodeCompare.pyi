from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.VisualShaderNodeCompare as __visualshadernodecompare__


class ComparisonType:
  CKIND_SCALAR:int = 0
  CKIND_SCALAR_INT:int = 1
  CKIND_SCALAR_UINT:int = 2
  CKIND_VECTOR_2D:int = 3
  CKIND_VECTOR_3D:int = 4
  CKIND_VECTOR_4D:int = 5
  CKIND_BOOLEAN:int = 6
  CKIND_TRANSFORM:int = 7
  CKIND_MAX:int = 8
class Function:
  FUNC_EQUAL:int = 0
  FUNC_NOT_EQUAL:int = 1
  FUNC_GREATER_THAN:int = 2
  FUNC_GREATER_THAN_EQUAL:int = 3
  FUNC_LESS_THAN:int = 4
  FUNC_LESS_THAN_EQUAL:int = 5
  FUNC_MAX:int = 6
class Condition:
  COND_ALL:int = 0
  COND_ANY:int = 1
  COND_MAX:int = 2


class VisualShaderNodeCompare(__visualshadernode__.VisualShaderNode):
  """
		Compares `a` and `b` of `type` by `function`. Returns a boolean scalar. Translates to `if` instruction in shader code.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeCompare:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeCompare:pass


  @property
  def type(self)->int:
    """"""
    pass
  @type.setter
  def type(self,  value:int)->None:
    """"""
    pass
  @property
  def function(self)->int:
    """"""
    pass
  @function.setter
  def function(self,  value:int)->None:
    """"""
    pass
  @property
  def condition(self)->int:
    """"""
    pass
  @condition.setter
  def condition(self,  value:int)->None:
    """"""
    pass
  def set_comparison_type(self, type:int )->None:
    """"""
    pass

  def get_comparison_type(self)->int:
    """"""
    pass

  def set_function(self, func:int )->None:
    """"""
    pass

  def get_function(self)->int:
    """"""
    pass

  def set_condition(self, condition:int )->None:
    """"""
    pass

  def get_condition(self)->int:
    """"""
    pass


