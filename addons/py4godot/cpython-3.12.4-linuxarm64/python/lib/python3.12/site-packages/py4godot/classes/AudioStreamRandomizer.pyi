from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamMP3 as __audiostreammp3__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamPlaylist as __audiostreamplaylist__
import py4godot.classes.AudioStreamOggVorbis as __audiostreamoggvorbis__
import py4godot.classes.AudioStreamPolyphonic as __audiostreampolyphonic__
import py4godot.classes.AudioStreamGenerator as __audiostreamgenerator__
import py4godot.classes.AudioStreamWAV as __audiostreamwav__
import py4godot.classes.AudioStreamInteractive as __audiostreaminteractive__
import py4godot.classes.AudioStreamMicrophone as __audiostreammicrophone__
import py4godot.classes.AudioStreamRandomizer as __audiostreamrandomizer__
import py4godot.classes.AudioStreamSynchronized as __audiostreamsynchronized__


class PlaybackMode:
  PLAYBACK_RANDOM_NO_REPEATS:int = 0
  PLAYBACK_RANDOM:int = 1
  PLAYBACK_SEQUENTIAL:int = 2


class AudioStreamRandomizer(__audiostream__.AudioStream):
  """
		Picks a random AudioStream from the pool, depending on the playback mode, and applies random pitch shifting and volume shifting during playback.
	"""

  @staticmethod
  def constructor()->AudioStreamRandomizer:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamRandomizer:pass


  @property
  def playback_mode(self)->int:
    """"""
    pass
  @playback_mode.setter
  def playback_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def random_pitch(self)->float:
    """"""
    pass
  @random_pitch.setter
  def random_pitch(self,  value:float)->None:
    """"""
    pass
  @property
  def random_volume_offset_db(self)->float:
    """"""
    pass
  @random_volume_offset_db.setter
  def random_volume_offset_db(self,  value:float)->None:
    """"""
    pass
  @property
  def streams_count(self)->int:
    """"""
    pass
  @streams_count.setter
  def streams_count(self,  value:int)->None:
    """"""
    pass
  def add_stream(self, index:int, stream:__audiostream__.AudioStream, weight:float=1.0)->None:
    """
				Insert a stream at the specified index. If the index is less than zero, the insertion occurs at the end of the underlying pool.
			"""
    pass

  def move_stream(self, index_from:int, index_to:int)->None:
    """
				Move a stream from one index to another.
			"""
    pass

  def remove_stream(self, index:int)->None:
    """
				Remove the stream at the specified index.
			"""
    pass

  def set_stream(self, index:int, stream:__audiostream__.AudioStream)->None:
    """
				Set the AudioStream at the specified index.
			"""
    pass

  def get_stream(self, index:int)->__audiostreammp3__.AudioStreamMP3|__audiostream__.AudioStream|__audiostreamplaylist__.AudioStreamPlaylist|__audiostreamoggvorbis__.AudioStreamOggVorbis|__audiostreampolyphonic__.AudioStreamPolyphonic|__audiostreamgenerator__.AudioStreamGenerator|__audiostreamwav__.AudioStreamWAV|__audiostreaminteractive__.AudioStreamInteractive|__audiostreammicrophone__.AudioStreamMicrophone|__audiostreamrandomizer__.AudioStreamRandomizer|__audiostreamsynchronized__.AudioStreamSynchronized:
    """
				Returns the stream at the specified index.
			"""
    pass

  def set_stream_probability_weight(self, index:int, weight:float)->None:
    """
				Set the probability weight of the stream at the specified index. The higher this value, the more likely that the randomizer will choose this stream during random playback modes.
			"""
    pass

  def get_stream_probability_weight(self, index:int)->float:
    """
				Returns the probability weight associated with the stream at the given index.
			"""
    pass

  def set_streams_count(self, count:int)->None:
    """"""
    pass

  def get_streams_count(self)->int:
    """"""
    pass

  def set_random_pitch(self, scale:float)->None:
    """"""
    pass

  def get_random_pitch(self)->float:
    """"""
    pass

  def set_random_volume_offset_db(self, db_offset:float)->None:
    """"""
    pass

  def get_random_volume_offset_db(self)->float:
    """"""
    pass

  def set_playback_mode(self, mode:int )->None:
    """"""
    pass

  def get_playback_mode(self)->int:
    """"""
    pass


