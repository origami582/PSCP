from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.KinematicCollision3D as __kinematiccollision3d__


class MotionMode:
  MOTION_MODE_GROUNDED:int = 0
  MOTION_MODE_FLOATING:int = 1
class PlatformOnLeave:
  PLATFORM_ON_LEAVE_ADD_VELOCITY:int = 0
  PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY:int = 1
  PLATFORM_ON_LEAVE_DO_NOTHING:int = 2


class CharacterBody3D(__physicsbody3d__.PhysicsBody3D):
  """
		`CharacterBody3D` is a specialized class for physics bodies that are meant to be user-controlled. They are not affected by physics at all, but they affect other physics bodies in their path. They are mainly used to provide high-level API to move objects with wall and slope detection (`move_and_slide` method) in addition to the general collision detection provided by `PhysicsBody3D.move_and_collide`. This makes it useful for highly configurable physics bodies that must move in specific ways and collide with the world, as is often the case with user-controlled characters.
		For game objects that don't require complex movement or collision detection, such as moving platforms, `AnimatableBody3D` is simpler to configure.
	"""

  @staticmethod
  def constructor()->CharacterBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CharacterBody3D:pass


  @property
  def motion_mode(self)->int:
    """"""
    pass
  @motion_mode.setter
  def motion_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def up_direction(self)->__core__.Vector3:
    """"""
    pass
  @up_direction.setter
  def up_direction(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def slide_on_ceiling(self)->bool:
    """"""
    pass
  @slide_on_ceiling.setter
  def slide_on_ceiling(self,  value:bool)->None:
    """"""
    pass
  @property
  def velocity(self)->__core__.Vector3:
    """"""
    pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def max_slides(self)->int:
    """"""
    pass
  @max_slides.setter
  def max_slides(self,  value:int)->None:
    """"""
    pass
  @property
  def wall_min_slide_angle(self)->float:
    """"""
    pass
  @wall_min_slide_angle.setter
  def wall_min_slide_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def floor_stop_on_slope(self)->bool:
    """"""
    pass
  @floor_stop_on_slope.setter
  def floor_stop_on_slope(self,  value:bool)->None:
    """"""
    pass
  @property
  def floor_constant_speed(self)->bool:
    """"""
    pass
  @floor_constant_speed.setter
  def floor_constant_speed(self,  value:bool)->None:
    """"""
    pass
  @property
  def floor_block_on_wall(self)->bool:
    """"""
    pass
  @floor_block_on_wall.setter
  def floor_block_on_wall(self,  value:bool)->None:
    """"""
    pass
  @property
  def floor_max_angle(self)->float:
    """"""
    pass
  @floor_max_angle.setter
  def floor_max_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def floor_snap_length(self)->float:
    """"""
    pass
  @floor_snap_length.setter
  def floor_snap_length(self,  value:float)->None:
    """"""
    pass
  @property
  def platform_on_leave(self)->int:
    """"""
    pass
  @platform_on_leave.setter
  def platform_on_leave(self,  value:int)->None:
    """"""
    pass
  @property
  def platform_floor_layers(self)->int:
    """"""
    pass
  @platform_floor_layers.setter
  def platform_floor_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def platform_wall_layers(self)->int:
    """"""
    pass
  @platform_wall_layers.setter
  def platform_wall_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def safe_margin(self)->float:
    """"""
    pass
  @safe_margin.setter
  def safe_margin(self,  value:float)->None:
    """"""
    pass
  def move_and_slide(self)->bool:
    """
				Moves the body based on `velocity`. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a `CharacterBody3D` or `RigidBody3D`, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.
				Modifies `velocity` if a slide collision occurred. To get the latest collision call `get_last_slide_collision`, for more detailed information about collisions that occurred, use `get_slide_collision`.
				When the body touches a moving platform, the platform's velocity is automatically added to the body motion. If a collision occurs due to the platform's motion, it will always be first in the slide collisions.
				Returns `true` if the body collided, otherwise, returns `false`.
			"""
    pass

  def apply_floor_snap(self)->None:
    """
				Allows to manually apply a snap to the floor regardless of the body's velocity. This function does nothing when `is_on_floor` returns `true`.
			"""
    pass

  def set_velocity(self, velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_safe_margin(self, margin:float)->None:
    """"""
    pass

  def get_safe_margin(self)->float:
    """"""
    pass

  def is_floor_stop_on_slope_enabled(self)->bool:
    """"""
    pass

  def set_floor_stop_on_slope_enabled(self, enabled:bool)->None:
    """"""
    pass

  def set_floor_constant_speed_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_floor_constant_speed_enabled(self)->bool:
    """"""
    pass

  def set_floor_block_on_wall_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_floor_block_on_wall_enabled(self)->bool:
    """"""
    pass

  def set_slide_on_ceiling_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_slide_on_ceiling_enabled(self)->bool:
    """"""
    pass

  def set_platform_floor_layers(self, exclude_layer:int)->None:
    """"""
    pass

  def get_platform_floor_layers(self)->int:
    """"""
    pass

  def set_platform_wall_layers(self, exclude_layer:int)->None:
    """"""
    pass

  def get_platform_wall_layers(self)->int:
    """"""
    pass

  def get_max_slides(self)->int:
    """"""
    pass

  def set_max_slides(self, max_slides:int)->None:
    """"""
    pass

  def get_floor_max_angle(self)->float:
    """"""
    pass

  def set_floor_max_angle(self, radians:float)->None:
    """"""
    pass

  def get_floor_snap_length(self)->float:
    """"""
    pass

  def set_floor_snap_length(self, floor_snap_length:float)->None:
    """"""
    pass

  def get_wall_min_slide_angle(self)->float:
    """"""
    pass

  def set_wall_min_slide_angle(self, radians:float)->None:
    """"""
    pass

  def get_up_direction(self)->__core__.Vector3:
    """"""
    pass

  def set_up_direction(self, up_direction:__core__.Vector3)->None:
    """"""
    pass

  def set_motion_mode(self, mode:int )->None:
    """"""
    pass

  def get_motion_mode(self)->int:
    """"""
    pass

  def set_platform_on_leave(self, on_leave_apply_velocity:int )->None:
    """"""
    pass

  def get_platform_on_leave(self)->int:
    """"""
    pass

  def is_on_floor(self)->bool:
    """
				Returns `true` if the body collided with the floor on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "floor" or not.
			"""
    pass

  def is_on_floor_only(self)->bool:
    """
				Returns `true` if the body collided only with the floor on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "floor" or not.
			"""
    pass

  def is_on_ceiling(self)->bool:
    """
				Returns `true` if the body collided with the ceiling on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "ceiling" or not.
			"""
    pass

  def is_on_ceiling_only(self)->bool:
    """
				Returns `true` if the body collided only with the ceiling on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "ceiling" or not.
			"""
    pass

  def is_on_wall(self)->bool:
    """
				Returns `true` if the body collided with a wall on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "wall" or not.
			"""
    pass

  def is_on_wall_only(self)->bool:
    """
				Returns `true` if the body collided only with a wall on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "wall" or not.
			"""
    pass

  def get_floor_normal(self)->__core__.Vector3:
    """
				Returns the collision normal of the floor at the last collision point. Only valid after calling `move_and_slide` and when `is_on_floor` returns `true`.
				**Warning:** The collision normal is not always the same as the surface normal.
			"""
    pass

  def get_wall_normal(self)->__core__.Vector3:
    """
				Returns the collision normal of the wall at the last collision point. Only valid after calling `move_and_slide` and when `is_on_wall` returns `true`.
				**Warning:** The collision normal is not always the same as the surface normal.
			"""
    pass

  def get_last_motion(self)->__core__.Vector3:
    """
				Returns the last motion applied to the `CharacterBody3D` during the last call to `move_and_slide`. The movement can be split into multiple motions when sliding occurs, and this method return the last one, which is useful to retrieve the current direction of the movement.
			"""
    pass

  def get_position_delta(self)->__core__.Vector3:
    """
				Returns the travel (position delta) that occurred during the last call to `move_and_slide`.
			"""
    pass

  def get_real_velocity(self)->__core__.Vector3:
    """
				Returns the current real velocity since the last call to `move_and_slide`. For example, when you climb a slope, you will move diagonally even though the velocity is horizontal. This method returns the diagonal movement, as opposed to `velocity` which returns the requested velocity.
			"""
    pass

  def get_floor_angle(self, up_direction:__core__.Vector3= __core__.Vector3.new0())->float:
    """
				Returns the floor's collision angle at the last collision point according to `up_direction`, which is `constant Vector3.UP` by default. This value is always positive and only valid after calling `move_and_slide` and when `is_on_floor` returns `true`.
			"""
    pass

  def get_platform_velocity(self)->__core__.Vector3:
    """
				Returns the linear velocity of the platform at the last collision point. Only valid after calling `move_and_slide`.
			"""
    pass

  def get_platform_angular_velocity(self)->__core__.Vector3:
    """
				Returns the angular velocity of the platform at the last collision point. Only valid after calling `move_and_slide`.
			"""
    pass

  def get_slide_collision_count(self)->int:
    """
				Returns the number of times the body collided and changed direction during the last call to `move_and_slide`.
			"""
    pass

  def get_slide_collision(self, slide_idx:int)->__kinematiccollision3d__.KinematicCollision3D:
    """
				Returns a `KinematicCollision3D`, which contains information about a collision that occurred during the last call to `move_and_slide`. Since the body can collide several times in a single call to `move_and_slide`, you must specify the index of the collision in the range 0 to (`get_slide_collision_count` - 1).
			"""
    pass

  def get_last_slide_collision(self)->__kinematiccollision3d__.KinematicCollision3D:
    """
				Returns a `KinematicCollision3D`, which contains information about the latest collision that occurred during the last call to `move_and_slide`.
			"""
    pass


