from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderSceneData as __renderscenedata__



class RenderSceneDataExtension(__renderscenedata__.RenderSceneData):
  """
		This class allows for a RenderSceneData implementation to be made in GDExtension.
	"""

  @staticmethod
  def constructor()->RenderSceneDataExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->RenderSceneDataExtension:pass


  def _get_cam_transform(self)->__core__.Transform3D:
    """
				Implement this in GDExtension to return the camera `Transform3D`.
			"""
    pass

  def _get_cam_projection(self)->__core__.Projection:
    """
				Implement this in GDExtension to return the camera `Projection`.
			"""
    pass

  def _get_view_count(self)->int:
    """
				Implement this in GDExtension to return the view count.
			"""
    pass

  def _get_view_eye_offset(self, view:int)->__core__.Vector3:
    """
				Implement this in GDExtension to return the eye offset for the given `view`.
			"""
    pass

  def _get_view_projection(self, view:int)->__core__.Projection:
    """
				Implement this in GDExtension to return the view `Projection` for the given `view`.
			"""
    pass

  def _get_uniform_buffer(self)->__core__.RID:
    """
				Implement this in GDExtension to return the `RID` of the uniform buffer containing the scene data as a UBO.
			"""
    pass


