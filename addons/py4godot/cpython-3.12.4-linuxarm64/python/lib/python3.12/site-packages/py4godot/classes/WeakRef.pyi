from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class WeakRef(__refcounted__.RefCounted):
  """
		A weakref can hold a `RefCounted` without contributing to the reference counter. A weakref can be created from an `Object` using `@GlobalScope.weakref`. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.
	"""

  @staticmethod
  def constructor()->WeakRef:pass



  @staticmethod
  def cast(other:__object__.Object)->WeakRef:pass


  def get_ref(self)->Any:
    """
				Returns the `Object` this weakref is referring to. Returns `null` if that object no longer exists.
			"""
    pass


