from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__
import py4godot.classes.JavaScriptObject as __javascriptobject__



class JavaScriptBridge(__object__.Object):
  """
		The JavaScriptBridge singleton is implemented only in the Web export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.
		**Note:** This singleton can be disabled at build-time to improve security. By default, the JavaScriptBridge singleton is enabled. Official export templates also have the JavaScriptBridge singleton enabled. See `url=$DOCS_URL/contributing/development/compiling/compiling_for_web.html`Compiling for the Web`/url` in the documentation for more information.
	"""
  pwa_update_available: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->JavaScriptBridge:pass

  @staticmethod
  def instance()->JavaScriptBridge:pass

  def eval(self, code:str, use_global_execution_context:bool=False)->Any:
    """
				Execute the string `code` as JavaScript code within the browser window. This is a call to the actual global JavaScript function `code skip-lint`eval()`.
				If `use_global_execution_context` is `true`, the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.
			"""
    pass

  def get_interface(self, interface:str)->__javascriptobject__.JavaScriptObject:
    """
				Returns an interface to a JavaScript object that can be used by scripts. The `interface` must be a valid property of the JavaScript `window`. The callback must accept a single `Array` argument, which will contain the JavaScript `arguments`. See `JavaScriptObject` for usage.
			"""
    pass

  def create_callback(self, callable:__core__.Callable)->__javascriptobject__.JavaScriptObject:
    """
				Creates a reference to a `Callable` that can be used as a callback by JavaScript. The reference must be kept until the callback happens, or it won't be called at all. See `JavaScriptObject` for usage.
				**Note:** The callback function must take exactly one `Array` argument, which is going to be the JavaScript `url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments`arguments object`/url` converted to an array.
			"""
    pass

  def is_js_buffer(self, javascript_object:__javascriptobject__.JavaScriptObject)->bool:
    """
				Returns `true` if the given `javascript_object` is of type `url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer``ArrayBuffer``/url`, `url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView``DataView``/url`, or one of the many `url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray`typed array objects`/url`.
			"""
    pass

  def js_buffer_to_packed_byte_array(self, javascript_buffer:__javascriptobject__.JavaScriptObject)->__core__.PackedByteArray:
    """
				Returns a copy of `javascript_buffer`'s contents as a `PackedByteArray`. See also `is_js_buffer`.
			"""
    pass

  def create_object(self, object:str)->Any:
    """
				Creates a new JavaScript object using the `new` constructor. The `object` must a valid property of the JavaScript `window`. See `JavaScriptObject` for usage.
			"""
    pass

  def download_buffer(self, buffer:__core__.PackedByteArray, name:str, mime:str= __core__.String.new0())->None:
    """
				Prompts the user to download a file containing the specified `buffer`. The file will have the given `name` and `mime` type.
				**Note:** The browser may override the `url=https://en.wikipedia.org/wiki/Media_type`MIME type`/url` provided based on the file `name`'s extension.
				**Note:** Browsers might block the download if `download_buffer` is not being called from a user interaction (e.g. button click).
				**Note:** Browsers might ask the user for permission or block the download if multiple download requests are made in a quick succession.
			"""
    pass

  def pwa_needs_update(self)->bool:
    """
				Returns `true` if a new version of the progressive web app is waiting to be activated.
				**Note:** Only relevant when exported as a Progressive Web App.
			"""
    pass

  def pwa_update(self)->int:
    """
				Performs the live update of the progressive web app. Forcing the new version to be installed and the page to be reloaded.
				**Note:** Your application will be **reloaded in all browser tabs**.
				**Note:** Only relevant when exported as a Progressive Web App and `pwa_needs_update` returns `true`.
			"""
    pass

  def force_fs_sync(self)->None:
    """
				Force synchronization of the persistent file system (when enabled).
				**Note:** This is only useful for modules or extensions that can't use `FileAccess` to write files.
			"""
    pass


