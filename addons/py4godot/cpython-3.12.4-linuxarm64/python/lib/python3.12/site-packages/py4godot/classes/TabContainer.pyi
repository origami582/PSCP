from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.Label as __label__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.Node as __node__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Container as __container__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Popup as __popup__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.Separator as __separator__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.Slider as __slider__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.GridContainer as __gridcontainer__


class TabPosition:
  POSITION_TOP:int = 0
  POSITION_BOTTOM:int = 1
  POSITION_MAX:int = 2


class TabContainer(__container__.Container):
  """
		Arranges child controls into a tabbed view, creating a tab for each one. The active tab's corresponding control is made visible, while all other child controls are hidden. Ignores non-control children.
		**Note:** The drawing of the clickable tabs is handled by this node; `TabBar` is not needed.
	"""
  active_tab_rearranged: BuiltinSignal
  tab_changed: BuiltinSignal
  tab_clicked: BuiltinSignal
  tab_hovered: BuiltinSignal
  tab_selected: BuiltinSignal
  tab_button_pressed: BuiltinSignal
  pre_popup_pressed: BuiltinSignal

  @staticmethod
  def constructor()->TabContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->TabContainer:pass


  @property
  def tab_alignment(self)->int:
    """"""
    pass
  @tab_alignment.setter
  def tab_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def current_tab(self)->int:
    """"""
    pass
  @current_tab.setter
  def current_tab(self,  value:int)->None:
    """"""
    pass
  @property
  def tabs_position(self)->int:
    """"""
    pass
  @tabs_position.setter
  def tabs_position(self,  value:int)->None:
    """"""
    pass
  @property
  def clip_tabs(self)->bool:
    """"""
    pass
  @clip_tabs.setter
  def clip_tabs(self,  value:bool)->None:
    """"""
    pass
  @property
  def tabs_visible(self)->bool:
    """"""
    pass
  @tabs_visible.setter
  def tabs_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def all_tabs_in_front(self)->bool:
    """"""
    pass
  @all_tabs_in_front.setter
  def all_tabs_in_front(self,  value:bool)->None:
    """"""
    pass
  @property
  def drag_to_rearrange_enabled(self)->bool:
    """"""
    pass
  @drag_to_rearrange_enabled.setter
  def drag_to_rearrange_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def tabs_rearrange_group(self)->int:
    """"""
    pass
  @tabs_rearrange_group.setter
  def tabs_rearrange_group(self,  value:int)->None:
    """"""
    pass
  @property
  def use_hidden_tabs_for_min_size(self)->bool:
    """"""
    pass
  @use_hidden_tabs_for_min_size.setter
  def use_hidden_tabs_for_min_size(self,  value:bool)->None:
    """"""
    pass
  @property
  def tab_focus_mode(self)->int:
    """"""
    pass
  @tab_focus_mode.setter
  def tab_focus_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def deselect_enabled(self)->bool:
    """"""
    pass
  @deselect_enabled.setter
  def deselect_enabled(self,  value:bool)->None:
    """"""
    pass
  def get_tab_count(self)->int:
    """
				Returns the number of tabs.
			"""
    pass

  def set_current_tab(self, tab_idx:int)->None:
    """"""
    pass

  def get_current_tab(self)->int:
    """"""
    pass

  def get_previous_tab(self)->int:
    """
				Returns the previously active tab index.
			"""
    pass

  def select_previous_available(self)->bool:
    """
				Selects the first available tab with lower index than the currently selected. Returns `true` if tab selection changed.
			"""
    pass

  def select_next_available(self)->bool:
    """
				Selects the first available tab with greater index than the currently selected. Returns `true` if tab selection changed.
			"""
    pass

  def get_current_tab_control(self)->__vsplitcontainer__.VSplitContainer|__editorinspector__.EditorInspector|__hboxcontainer__.HBoxContainer|__texturebutton__.TextureButton|__vflowcontainer__.VFlowContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__colorrect__.ColorRect|__spinbox__.SpinBox|__range__.Range|__referencerect__.ReferenceRect|__scrollcontainer__.ScrollContainer|__container__.Container|__checkbutton__.CheckButton|__label__.Label|__centercontainer__.CenterContainer|__hslider__.HSlider|__richtextlabel__.RichTextLabel|__lineedit__.LineEdit|__hseparator__.HSeparator|__hflowcontainer__.HFlowContainer|__panelcontainer__.PanelContainer|__tabbar__.TabBar|__vseparator__.VSeparator|__subviewportcontainer__.SubViewportContainer|__linkbutton__.LinkButton|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__graphedit__.GraphEdit|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__separator__.Separator|__textedit__.TextEdit|__tree__.Tree|__flowcontainer__.FlowContainer|__menubar__.MenuBar|__hsplitcontainer__.HSplitContainer|__ninepatchrect__.NinePatchRect|__vboxcontainer__.VBoxContainer|__vscrollbar__.VScrollBar|__itemlist__.ItemList|__textureprogressbar__.TextureProgressBar|__texturerect__.TextureRect|__videostreamplayer__.VideoStreamPlayer|__scripteditorbase__.ScriptEditorBase|__panel__.Panel|__vslider__.VSlider|__editortoaster__.EditorToaster|__progressbar__.ProgressBar|__scripteditor__.ScriptEditor|__optionbutton__.OptionButton|__splitcontainer__.SplitContainer|__graphelement__.GraphElement|__basebutton__.BaseButton|__colorpicker__.ColorPicker|__menubutton__.MenuButton|__filesystemdock__.FileSystemDock|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__scrollbar__.ScrollBar|__slider__.Slider|__editorspinslider__.EditorSpinSlider|__graphnode__.GraphNode|__hscrollbar__.HScrollBar|__checkbox__.CheckBox|__editorresourcepicker__.EditorResourcePicker|__graphframe__.GraphFrame|__codeedit__.CodeEdit|__colorpickerbutton__.ColorPickerButton|__editorscriptpicker__.EditorScriptPicker|__margincontainer__.MarginContainer|__boxcontainer__.BoxContainer|__tabcontainer__.TabContainer|__control__.Control|__button__.Button|__gridcontainer__.GridContainer:
    """
				Returns the child `Control` node located at the active tab index.
			"""
    pass

  def get_tab_bar(self)->__tabbar__.TabBar:
    """
				Returns the `TabBar` contained in this container.
				**Warning:** This is a required internal node, removing and freeing it or editing its tabs may cause a crash. If you wish to edit the tabs, use the methods provided in `TabContainer`.
			"""
    pass

  def get_tab_control(self, tab_idx:int)->__vsplitcontainer__.VSplitContainer|__editorinspector__.EditorInspector|__hboxcontainer__.HBoxContainer|__texturebutton__.TextureButton|__vflowcontainer__.VFlowContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__colorrect__.ColorRect|__spinbox__.SpinBox|__range__.Range|__referencerect__.ReferenceRect|__scrollcontainer__.ScrollContainer|__container__.Container|__checkbutton__.CheckButton|__label__.Label|__centercontainer__.CenterContainer|__hslider__.HSlider|__richtextlabel__.RichTextLabel|__lineedit__.LineEdit|__hseparator__.HSeparator|__hflowcontainer__.HFlowContainer|__panelcontainer__.PanelContainer|__tabbar__.TabBar|__vseparator__.VSeparator|__subviewportcontainer__.SubViewportContainer|__linkbutton__.LinkButton|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__graphedit__.GraphEdit|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__separator__.Separator|__textedit__.TextEdit|__tree__.Tree|__flowcontainer__.FlowContainer|__menubar__.MenuBar|__hsplitcontainer__.HSplitContainer|__ninepatchrect__.NinePatchRect|__vboxcontainer__.VBoxContainer|__vscrollbar__.VScrollBar|__itemlist__.ItemList|__textureprogressbar__.TextureProgressBar|__texturerect__.TextureRect|__videostreamplayer__.VideoStreamPlayer|__scripteditorbase__.ScriptEditorBase|__panel__.Panel|__vslider__.VSlider|__editortoaster__.EditorToaster|__progressbar__.ProgressBar|__scripteditor__.ScriptEditor|__optionbutton__.OptionButton|__splitcontainer__.SplitContainer|__graphelement__.GraphElement|__basebutton__.BaseButton|__colorpicker__.ColorPicker|__menubutton__.MenuButton|__filesystemdock__.FileSystemDock|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__scrollbar__.ScrollBar|__slider__.Slider|__editorspinslider__.EditorSpinSlider|__graphnode__.GraphNode|__hscrollbar__.HScrollBar|__checkbox__.CheckBox|__editorresourcepicker__.EditorResourcePicker|__graphframe__.GraphFrame|__codeedit__.CodeEdit|__colorpickerbutton__.ColorPickerButton|__editorscriptpicker__.EditorScriptPicker|__margincontainer__.MarginContainer|__boxcontainer__.BoxContainer|__tabcontainer__.TabContainer|__control__.Control|__button__.Button|__gridcontainer__.GridContainer:
    """
				Returns the `Control` node from the tab at index `tab_idx`.
			"""
    pass

  def set_tab_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_tab_alignment(self)->int:
    """"""
    pass

  def set_tabs_position(self, tabs_position:int )->None:
    """"""
    pass

  def get_tabs_position(self)->int:
    """"""
    pass

  def set_clip_tabs(self, clip_tabs:bool)->None:
    """"""
    pass

  def get_clip_tabs(self)->bool:
    """"""
    pass

  def set_tabs_visible(self, visible:bool)->None:
    """"""
    pass

  def are_tabs_visible(self)->bool:
    """"""
    pass

  def set_all_tabs_in_front(self, is_front:bool)->None:
    """"""
    pass

  def is_all_tabs_in_front(self)->bool:
    """"""
    pass

  def set_tab_title(self, tab_idx:int, title:str)->None:
    """
				Sets a custom title for the tab at index `tab_idx` (tab titles default to the name of the indexed child node). Set it back to the child's name to make the tab default to it again.
			"""
    pass

  def get_tab_title(self, tab_idx:int)->str:
    """
				Returns the title of the tab at index `tab_idx`. Tab titles default to the name of the indexed child node, but this can be overridden with `set_tab_title`.
			"""
    pass

  def set_tab_tooltip(self, tab_idx:int, tooltip:str)->None:
    """
				Sets a custom tooltip text for tab at index `tab_idx`.
				**Note:** By default, if the `tooltip` is empty and the tab text is truncated (not all characters fit into the tab), the title will be displayed as a tooltip. To hide the tooltip, assign `" "` as the `tooltip` text.
			"""
    pass

  def get_tab_tooltip(self, tab_idx:int)->str:
    """
				Returns the tooltip text of the tab at index `tab_idx`.
			"""
    pass

  def set_tab_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None:
    """
				Sets an icon for the tab at index `tab_idx`.
			"""
    pass

  def get_tab_icon(self, tab_idx:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the `Texture2D` for the tab at index `tab_idx` or `null` if the tab has no `Texture2D`.
			"""
    pass

  def set_tab_icon_max_width(self, tab_idx:int, width:int)->None:
    """
				Sets the maximum allowed width of the icon for the tab at index `tab_idx`. This limit is applied on top of the default size of the icon and on top of `theme_item icon_max_width`. The height is adjusted according to the icon's ratio.
			"""
    pass

  def get_tab_icon_max_width(self, tab_idx:int)->int:
    """
				Returns the maximum allowed width of the icon for the tab at index `tab_idx`.
			"""
    pass

  def set_tab_disabled(self, tab_idx:int, disabled:bool)->None:
    """
				If `disabled` is `true`, disables the tab at index `tab_idx`, making it non-interactable.
			"""
    pass

  def is_tab_disabled(self, tab_idx:int)->bool:
    """
				Returns `true` if the tab at index `tab_idx` is disabled.
			"""
    pass

  def set_tab_hidden(self, tab_idx:int, hidden:bool)->None:
    """
				If `hidden` is `true`, hides the tab at index `tab_idx`, making it disappear from the tab area.
			"""
    pass

  def is_tab_hidden(self, tab_idx:int)->bool:
    """
				Returns `true` if the tab at index `tab_idx` is hidden.
			"""
    pass

  def set_tab_metadata(self, tab_idx:int, metadata:Any)->None:
    """
				Sets the metadata value for the tab at index `tab_idx`, which can be retrieved later using `get_tab_metadata`.
			"""
    pass

  def get_tab_metadata(self, tab_idx:int)->Any:
    """
				Returns the metadata value set to the tab at index `tab_idx` using `set_tab_metadata`. If no metadata was previously set, returns `null` by default.
			"""
    pass

  def set_tab_button_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None:
    """
				Sets the button icon from the tab at index `tab_idx`.
			"""
    pass

  def get_tab_button_icon(self, tab_idx:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the button icon from the tab at index `tab_idx`.
			"""
    pass

  def get_tab_idx_at_point(self, point:__core__.Vector2)->int:
    """
				Returns the index of the tab at local coordinates `point`. Returns `-1` if the point is outside the control boundaries or if there's no tab at the queried position.
			"""
    pass

  def get_tab_idx_from_control(self, control:__control__.Control)->int:
    """
				Returns the index of the tab tied to the given `control`. The control must be a child of the `TabContainer`.
			"""
    pass

  def set_popup(self, popup:__node__.Node)->None:
    """
				If set on a `Popup` node instance, a popup menu icon appears in the top-right corner of the `TabContainer` (setting it to `null` will make it go away). Clicking it will expand the `Popup` node.
			"""
    pass

  def get_popup(self)->__popupmenu__.PopupMenu|__popuppanel__.PopupPanel|__popup__.Popup:
    """
				Returns the `Popup` node instance if one has been set already with `set_popup`.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			"""
    pass

  def set_drag_to_rearrange_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_drag_to_rearrange_enabled(self)->bool:
    """"""
    pass

  def set_tabs_rearrange_group(self, group_id:int)->None:
    """"""
    pass

  def get_tabs_rearrange_group(self)->int:
    """"""
    pass

  def set_use_hidden_tabs_for_min_size(self, enabled:bool)->None:
    """"""
    pass

  def get_use_hidden_tabs_for_min_size(self)->bool:
    """"""
    pass

  def set_tab_focus_mode(self, focus_mode:int )->None:
    """"""
    pass

  def get_tab_focus_mode(self)->int:
    """"""
    pass

  def set_deselect_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_deselect_enabled(self)->bool:
    """"""
    pass


