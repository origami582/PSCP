from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__
import py4godot.classes.Resource as __resource__
import py4godot.classes.ResourceFormatSaver as __resourceformatsaver__


class SaverFlags:
  FLAG_NONE:int = 0
  FLAG_RELATIVE_PATHS:int = 1
  FLAG_BUNDLE_RESOURCES:int = 2
  FLAG_CHANGE_PATH:int = 4
  FLAG_OMIT_EDITOR_PROPERTIES:int = 8
  FLAG_SAVE_BIG_ENDIAN:int = 16
  FLAG_COMPRESS:int = 32
  FLAG_REPLACE_SUBRESOURCE_PATHS:int = 64


class ResourceSaver(__object__.Object):
  """
		A singleton for saving resource types to the filesystem.
		It uses the many `ResourceFormatSaver` classes registered in the engine (either built-in or from a plugin) to save resource data to text-based (e.g. `.tres` or `.tscn`) or binary files (e.g. `.res` or `.scn`).
	"""



  @staticmethod
  def cast(other:__object__.Object)->ResourceSaver:pass

  @staticmethod
  def instance()->ResourceSaver:pass

  def save(self, resource:__resource__.Resource, path:str= __core__.String.new0(), flags:int=0)->int:
    """
				Saves a resource to disk to the given path, using a `ResourceFormatSaver` that recognizes the resource object. If `path` is empty, `ResourceSaver` will try to use `Resource.resource_path`.
				The `flags` bitmask can be specified to customize the save behavior.
				Returns `constant OK` on success.
				**Note:** When the project is running, any generated UID associated with the resource will not be saved as the required code is only executed in editor mode.
			"""
    pass

  def get_recognized_extensions(self, type:__resource__.Resource)->__core__.PackedStringArray:
    """
				Returns the list of extensions available for saving a resource of a given type.
			"""
    pass

  def add_resource_format_saver(self, format_saver:__resourceformatsaver__.ResourceFormatSaver, at_front:bool=False)->None:
    """
				Registers a new `ResourceFormatSaver`. The ResourceSaver will use the ResourceFormatSaver as described in `save`.
				This method is performed implicitly for ResourceFormatSavers written in GDScript (see `ResourceFormatSaver` for more information).
			"""
    pass

  def remove_resource_format_saver(self, format_saver:__resourceformatsaver__.ResourceFormatSaver)->None:
    """
				Unregisters the given `ResourceFormatSaver`.
			"""
    pass

  def get_resource_id_for_path(self, path:str, generate:bool=False)->int:
    """
				Returns the resource ID for the given path. If `generate` is `true`, a new resource ID will be generated if one for the path is not found. If `generate` is `false` and the path is not found, `constant ResourceUID.INVALID_ID` is returned.
			"""
    pass


