from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D as __texture2d__



class CompressedTexture2D(__texture2d__.Texture2D):
  """
		A texture that is loaded from a `.ctex` file. This file format is internal to Godot; it is created by importing other image formats with the import system. `CompressedTexture2D` can use one of 4 compression methods (including a lack of any compression):
		- Lossless (WebP or PNG, uncompressed on the GPU)
		- Lossy (WebP, uncompressed on the GPU)
		- VRAM Compressed (compressed on the GPU)
		- VRAM Uncompressed (uncompressed on the GPU)
		- Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)
		Only **VRAM Compressed** actually reduces the memory usage on the GPU. The **Lossless** and **Lossy** compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed.
		Using **VRAM Compressed** also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.
	"""

  @staticmethod
  def constructor()->CompressedTexture2D:pass



  @staticmethod
  def cast(other:__object__.Object)->CompressedTexture2D:pass


  @property
  def load_path(self)->str:
    """"""
    pass
  @load_path.setter
  def load_path(self,  value:str)->None:
    """"""
    pass
  def load(self, path:str)->int:
    """
				Loads the texture from the specified `path`.
			"""
    pass

  def get_load_path(self)->str:
    """"""
    pass


