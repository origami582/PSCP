from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class RandomNumberGenerator(__refcounted__.RefCounted):
  """
		RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses `url=https://www.pcg-random.org/`PCG32`/url`.
		**Note:** The underlying algorithm is an implementation detail and should not be depended upon.
		To generate a random float number (within a given range) based on a time-dependent seed:
		```gdscript
		var rng = RandomNumberGenerator.new()
		func _ready():
			var my_random_number = rng.randf_range(-10.0, 10.0)
		```
	"""

  @staticmethod
  def constructor()->RandomNumberGenerator:pass



  @staticmethod
  def cast(other:__object__.Object)->RandomNumberGenerator:pass


  @property
  def seed(self)->int:
    """"""
    pass
  @seed.setter
  def seed(self,  value:int)->None:
    """"""
    pass
  @property
  def state(self)->int:
    """"""
    pass
  @state.setter
  def state(self,  value:int)->None:
    """"""
    pass
  def set_seed(self, seed:int)->None:
    """"""
    pass

  def get_seed(self)->int:
    """"""
    pass

  def set_state(self, state:int)->None:
    """"""
    pass

  def get_state(self)->int:
    """"""
    pass

  def randi(self)->int:
    """
				Returns a pseudo-random 32-bit unsigned integer between `0` and `4294967295` (inclusive).
			"""
    pass

  def randf(self)->float:
    """
				Returns a pseudo-random float between `0.0` and `1.0` (inclusive).
			"""
    pass

  def randfn(self, mean:float=0.0, deviation:float=1.0)->float:
    """
				Returns a `url=https://en.wikipedia.org/wiki/Normal_distribution`normally-distributed`/url`, pseudo-random floating-point number from the specified `mean` and a standard `deviation`. This is also known as a Gaussian distribution.
				**Note:** This method uses the `url=https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform`Box-Muller transform`/url` algorithm.
			"""
    pass

  def randf_range(self, from_:float, to:float)->float:
    """
				Returns a pseudo-random float between `from` and `to` (inclusive).
			"""
    pass

  def randi_range(self, from_:int, to:int)->int:
    """
				Returns a pseudo-random 32-bit signed integer between `from` and `to` (inclusive).
			"""
    pass

  def rand_weighted(self, weights:__core__.PackedFloat32Array)->int:
    """
				Returns a random index with non-uniform weights. Prints an error and returns `-1` if the array is empty.
				
				```gdscript
				var rng = RandomNumberGenerator.new()

				var my_array = `"one", "two", "three", "four"`
				var weights = PackedFloat32Array(`0.5, 1, 1, 2`)

				# Prints one of the four elements in `my_array`.
				# It is more likely to print "four", and less likely to print "one".
				print(my_array`rng.rand_weighted(weights)`)
				```
				
			"""
    pass

  def randomize(self)->None:
    """
				Sets up a time-based seed for this `RandomNumberGenerator` instance. Unlike the `@GlobalScope` random number generation functions, different `RandomNumberGenerator` instances can use different seeds.
			"""
    pass


