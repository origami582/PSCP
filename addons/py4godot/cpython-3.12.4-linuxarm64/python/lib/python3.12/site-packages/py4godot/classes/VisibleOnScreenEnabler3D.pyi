from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__


class EnableMode:
  ENABLE_MODE_INHERIT:int = 0
  ENABLE_MODE_ALWAYS:int = 1
  ENABLE_MODE_WHEN_PAUSED:int = 2


class VisibleOnScreenEnabler3D(__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D):
  """
		`VisibleOnScreenEnabler3D` contains a box-shaped region of 3D space and a target node. The target node will be automatically enabled (via its `Node.process_mode` property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them.
		See `VisibleOnScreenNotifier3D` if you only want to be notified when the region is visible on screen.
		**Note:** `VisibleOnScreenEnabler3D` uses an approximate heuristic that doesn't take walls and other occlusion into account, unless occlusion culling is used. It also won't function unless `Node3D.visible` is set to `true`.
	"""

  @staticmethod
  def constructor()->VisibleOnScreenEnabler3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VisibleOnScreenEnabler3D:pass


  @property
  def enable_mode(self)->int:
    """"""
    pass
  @enable_mode.setter
  def enable_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def enable_node_path(self)->__core__.NodePath:
    """"""
    pass
  @enable_node_path.setter
  def enable_node_path(self,  value:__core__.NodePath)->None:
    """"""
    pass
  def set_enable_mode(self, mode:int )->None:
    """"""
    pass

  def get_enable_mode(self)->int:
    """"""
    pass

  def set_enable_node_path(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_enable_node_path(self)->__core__.NodePath:
    """"""
    pass


