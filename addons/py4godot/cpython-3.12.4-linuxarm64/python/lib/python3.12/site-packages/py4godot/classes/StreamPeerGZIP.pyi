from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StreamPeer as __streampeer__



class StreamPeerGZIP(__streampeer__.StreamPeer):
  """
		This class allows to compress or decompress data using GZIP/deflate in a streaming fashion. This is particularly useful when compressing or decompressing files that have to be sent through the network without needing to allocate them all in memory.
		After starting the stream via `start_compression` (or `start_decompression`), calling `StreamPeer.put_partial_data` on this stream will compress (or decompress) the data, writing it to the internal buffer. Calling `StreamPeer.get_available_bytes` will return the pending bytes in the internal buffer, and `StreamPeer.get_partial_data` will retrieve the compressed (or decompressed) bytes from it. When the stream is over, you must call `finish` to ensure the internal buffer is properly flushed (make sure to call `StreamPeer.get_available_bytes` on last time to check if more data needs to be read after that).
	"""

  @staticmethod
  def constructor()->StreamPeerGZIP:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeerGZIP:pass


  def start_compression(self, use_deflate:bool=False, buffer_size:int=65535)->int:
    """
				Start the stream in compression mode with the given `buffer_size`, if `use_deflate` is `true` uses deflate instead of GZIP.
			"""
    pass

  def start_decompression(self, use_deflate:bool=False, buffer_size:int=65535)->int:
    """
				Start the stream in decompression mode with the given `buffer_size`, if `use_deflate` is `true` uses deflate instead of GZIP.
			"""
    pass

  def finish(self)->int:
    """
				Finalizes the stream, compressing any buffered chunk left.
				You must call it only when you are compressing.
			"""
    pass

  def clear(self)->None:
    """
				Clears this stream, resetting the internal state.
			"""
    pass


