from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamPlaybackResampled as __audiostreamplaybackresampled__



class AudioStreamGeneratorPlayback(__audiostreamplaybackresampled__.AudioStreamPlaybackResampled):
  """
		This class is meant to be used with `AudioStreamGenerator` to play back the generated audio in real-time.
	"""

  @staticmethod
  def constructor()->AudioStreamGeneratorPlayback:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamGeneratorPlayback:pass


  def push_frame(self, frame:__core__.Vector2)->bool:
    """
				Pushes a single audio data frame to the buffer. This is usually less efficient than `push_buffer` in C# and compiled languages via GDExtension, but `push_frame` may be _more_ efficient in GDScript.
			"""
    pass

  def can_push_buffer(self, amount:int)->bool:
    """
				Returns `true` if a buffer of the size `amount` can be pushed to the audio sample data buffer without overflowing it, `false` otherwise.
			"""
    pass

  def push_buffer(self, frames:__core__.PackedVector2Array)->bool:
    """
				Pushes several audio data frames to the buffer. This is usually more efficient than `push_frame` in C# and compiled languages via GDExtension, but `push_buffer` may be _less_ efficient in GDScript.
			"""
    pass

  def get_frames_available(self)->int:
    """
				Returns the number of frames that can be pushed to the audio sample data buffer without overflowing it. If the result is `0`, the buffer is full.
			"""
    pass

  def get_skips(self)->int:
    """
				Returns the number of times the playback skipped due to a buffer underrun in the audio sample data. This value is reset at the start of the playback.
			"""
    pass

  def clear_buffer(self)->None:
    """
				Clears the audio sample data buffer.
			"""
    pass


