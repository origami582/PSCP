from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.Tween as __tween__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__


class OriginFrom:
  ORIGIN_FROM_SELF:int = 0
  ORIGIN_FROM_SPECIFIC_BONE:int = 1
  ORIGIN_FROM_EXTERNAL_NODE:int = 2


class LookAtModifier3D(__skeletonmodifier3d__.SkeletonModifier3D):
  """
		This `SkeletonModifier3D` rotates a bone to look at a target. This is helpful for moving a character's head to look at the player, rotating a turret to look at a target, or any other case where you want to make a bone rotate towards something quickly and easily.
		When applying multiple `LookAtModifier3D`s, the `LookAtModifier3D` assigned to the parent bone must be put above the `LookAtModifier3D` assigned to the child bone in the list in order for the child bone results to be correct.
	"""

  @staticmethod
  def constructor()->LookAtModifier3D:pass



  @staticmethod
  def cast(other:__object__.Object)->LookAtModifier3D:pass


  @property
  def target_node(self)->__core__.NodePath:
    """"""
    pass
  @target_node.setter
  def target_node(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def bone_name(self)->str:
    """"""
    pass
  @bone_name.setter
  def bone_name(self,  value:str)->None:
    """"""
    pass
  @property
  def bone(self)->int:
    """"""
    pass
  @bone.setter
  def bone(self,  value:int)->None:
    """"""
    pass
  @property
  def forward_axis(self)->int:
    """"""
    pass
  @forward_axis.setter
  def forward_axis(self,  value:int)->None:
    """"""
    pass
  @property
  def primary_rotation_axis(self)->int:
    """"""
    pass
  @primary_rotation_axis.setter
  def primary_rotation_axis(self,  value:int)->None:
    """"""
    pass
  @property
  def use_secondary_rotation(self)->bool:
    """"""
    pass
  @use_secondary_rotation.setter
  def use_secondary_rotation(self,  value:bool)->None:
    """"""
    pass
  @property
  def origin_from(self)->int:
    """"""
    pass
  @origin_from.setter
  def origin_from(self,  value:int)->None:
    """"""
    pass
  @property
  def origin_bone_name(self)->str:
    """"""
    pass
  @origin_bone_name.setter
  def origin_bone_name(self,  value:str)->None:
    """"""
    pass
  @property
  def origin_bone(self)->int:
    """"""
    pass
  @origin_bone.setter
  def origin_bone(self,  value:int)->None:
    """"""
    pass
  @property
  def origin_external_node(self)->__core__.NodePath:
    """"""
    pass
  @origin_external_node.setter
  def origin_external_node(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def origin_offset(self)->__core__.Vector3:
    """"""
    pass
  @origin_offset.setter
  def origin_offset(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def origin_safe_margin(self)->float:
    """"""
    pass
  @origin_safe_margin.setter
  def origin_safe_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def duration(self)->float:
    """"""
    pass
  @duration.setter
  def duration(self,  value:float)->None:
    """"""
    pass
  @property
  def transition_type(self)->int:
    """"""
    pass
  @transition_type.setter
  def transition_type(self,  value:int)->None:
    """"""
    pass
  @property
  def ease_type(self)->int:
    """"""
    pass
  @ease_type.setter
  def ease_type(self,  value:int)->None:
    """"""
    pass
  @property
  def use_angle_limitation(self)->bool:
    """"""
    pass
  @use_angle_limitation.setter
  def use_angle_limitation(self,  value:bool)->None:
    """"""
    pass
  @property
  def symmetry_limitation(self)->bool:
    """"""
    pass
  @symmetry_limitation.setter
  def symmetry_limitation(self,  value:bool)->None:
    """"""
    pass
  @property
  def primary_limit_angle(self)->float:
    """"""
    pass
  @primary_limit_angle.setter
  def primary_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def primary_damp_threshold(self)->float:
    """"""
    pass
  @primary_damp_threshold.setter
  def primary_damp_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def primary_positive_limit_angle(self)->float:
    """"""
    pass
  @primary_positive_limit_angle.setter
  def primary_positive_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def primary_positive_damp_threshold(self)->float:
    """"""
    pass
  @primary_positive_damp_threshold.setter
  def primary_positive_damp_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def primary_negative_limit_angle(self)->float:
    """"""
    pass
  @primary_negative_limit_angle.setter
  def primary_negative_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def primary_negative_damp_threshold(self)->float:
    """"""
    pass
  @primary_negative_damp_threshold.setter
  def primary_negative_damp_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_limit_angle(self)->float:
    """"""
    pass
  @secondary_limit_angle.setter
  def secondary_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_damp_threshold(self)->float:
    """"""
    pass
  @secondary_damp_threshold.setter
  def secondary_damp_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_positive_limit_angle(self)->float:
    """"""
    pass
  @secondary_positive_limit_angle.setter
  def secondary_positive_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_positive_damp_threshold(self)->float:
    """"""
    pass
  @secondary_positive_damp_threshold.setter
  def secondary_positive_damp_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_negative_limit_angle(self)->float:
    """"""
    pass
  @secondary_negative_limit_angle.setter
  def secondary_negative_limit_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def secondary_negative_damp_threshold(self)->float:
    """"""
    pass
  @secondary_negative_damp_threshold.setter
  def secondary_negative_damp_threshold(self,  value:float)->None:
    """"""
    pass
  def set_target_node(self, target_node:__core__.NodePath|str)->None:
    """"""
    pass

  def get_target_node(self)->__core__.NodePath:
    """"""
    pass

  def set_bone_name(self, bone_name:str)->None:
    """"""
    pass

  def get_bone_name(self)->str:
    """"""
    pass

  def set_bone(self, bone:int)->None:
    """"""
    pass

  def get_bone(self)->int:
    """"""
    pass

  def set_forward_axis(self, forward_axis:int )->None:
    """"""
    pass

  def get_forward_axis(self)->int:
    """"""
    pass

  def set_primary_rotation_axis(self, axis:int )->None:
    """"""
    pass

  def get_primary_rotation_axis(self)->int:
    """"""
    pass

  def set_use_secondary_rotation(self, enabled:bool)->None:
    """"""
    pass

  def is_using_secondary_rotation(self)->bool:
    """"""
    pass

  def set_origin_safe_margin(self, margin:float)->None:
    """"""
    pass

  def get_origin_safe_margin(self)->float:
    """"""
    pass

  def set_origin_from(self, origin_from:int )->None:
    """"""
    pass

  def get_origin_from(self)->int:
    """"""
    pass

  def set_origin_bone_name(self, bone_name:str)->None:
    """"""
    pass

  def get_origin_bone_name(self)->str:
    """"""
    pass

  def set_origin_bone(self, bone:int)->None:
    """"""
    pass

  def get_origin_bone(self)->int:
    """"""
    pass

  def set_origin_external_node(self, external_node:__core__.NodePath|str)->None:
    """"""
    pass

  def get_origin_external_node(self)->__core__.NodePath:
    """"""
    pass

  def set_origin_offset(self, offset:__core__.Vector3)->None:
    """"""
    pass

  def get_origin_offset(self)->__core__.Vector3:
    """"""
    pass

  def set_duration(self, duration:float)->None:
    """"""
    pass

  def get_duration(self)->float:
    """"""
    pass

  def set_transition_type(self, transition_type:int )->None:
    """"""
    pass

  def get_transition_type(self)->int:
    """"""
    pass

  def set_ease_type(self, ease_type:int )->None:
    """"""
    pass

  def get_ease_type(self)->int:
    """"""
    pass

  def set_use_angle_limitation(self, enabled:bool)->None:
    """"""
    pass

  def is_using_angle_limitation(self)->bool:
    """"""
    pass

  def set_symmetry_limitation(self, enabled:bool)->None:
    """"""
    pass

  def is_limitation_symmetry(self)->bool:
    """"""
    pass

  def set_primary_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_primary_limit_angle(self)->float:
    """"""
    pass

  def set_primary_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_primary_damp_threshold(self)->float:
    """"""
    pass

  def set_primary_positive_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_primary_positive_limit_angle(self)->float:
    """"""
    pass

  def set_primary_positive_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_primary_positive_damp_threshold(self)->float:
    """"""
    pass

  def set_primary_negative_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_primary_negative_limit_angle(self)->float:
    """"""
    pass

  def set_primary_negative_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_primary_negative_damp_threshold(self)->float:
    """"""
    pass

  def set_secondary_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_secondary_limit_angle(self)->float:
    """"""
    pass

  def set_secondary_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_secondary_damp_threshold(self)->float:
    """"""
    pass

  def set_secondary_positive_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_secondary_positive_limit_angle(self)->float:
    """"""
    pass

  def set_secondary_positive_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_secondary_positive_damp_threshold(self)->float:
    """"""
    pass

  def set_secondary_negative_limit_angle(self, angle:float)->None:
    """"""
    pass

  def get_secondary_negative_limit_angle(self)->float:
    """"""
    pass

  def set_secondary_negative_damp_threshold(self, power:float)->None:
    """"""
    pass

  def get_secondary_negative_damp_threshold(self)->float:
    """"""
    pass

  def get_interpolation_remaining(self)->float:
    """
				Returns the remaining seconds of the time-based interpolation.
			"""
    pass

  def is_interpolating(self)->bool:
    """
				Returns `true` if time-based interpolation is running. If `true`, it is equivalent to `get_interpolation_remaining` returning `0.0`.
				This is useful to determine whether a `LookAtModifier3D` can be removed safely.
			"""
    pass

  def is_target_within_limitation(self)->bool:
    """
				Returns whether the target is within the angle limitations. It is useful for unsetting the `target_node` when the target is outside of the angle limitations.
				**Note:** The value is updated after `SkeletonModifier3D._process_modification`. To retrieve this value correctly, we recommend using the signal `signal SkeletonModifier3D.modification_processed`.
			"""
    pass


