from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.Theme as __theme__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.StyleBoxEmpty as __styleboxempty__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.StyleBoxFlat as __styleboxflat__
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.StyleBoxLine as __styleboxline__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.Font as __font__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.StyleBox as __stylebox__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.FontVariation as __fontvariation__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.StyleBoxTexture as __styleboxtexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__


class DataType:
  DATA_KIND_COLOR:int = 0
  DATA_KIND_CONSTANT:int = 1
  DATA_KIND_FONT:int = 2
  DATA_KIND_FONT_SIZE:int = 3
  DATA_KIND_ICON:int = 4
  DATA_KIND_STYLEBOX:int = 5
  DATA_KIND_MAX:int = 6


class Theme(__resource__.Resource):
  """
		A resource used for styling/skinning `Control` and `Window` nodes. While individual controls can be styled using their local theme overrides (see `Control.add_theme_color_override`), theme resources allow you to store and apply the same settings across all controls sharing the same type (e.g. style all `Button`s the same). One theme resource can be used for the entire project, but you can also set a separate theme resource to a branch of control nodes. A theme resource assigned to a control applies to the control itself, as well as all of its direct and indirect children (as long as a chain of controls is uninterrupted).
		Use `ProjectSettings.gui/theme/custom` to set up a project-scope theme that will be available to every control in your project.
		Use `Control.theme` of any control node to set up a theme that will be available to that control and all of its direct and indirect children.
	"""

  @staticmethod
  def constructor()->Theme:pass



  @staticmethod
  def cast(other:__object__.Object)->Theme:pass


  @property
  def default_base_scale(self)->float:
    """"""
    pass
  @default_base_scale.setter
  def default_base_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def default_font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass
  @default_font.setter
  def default_font(self,  value:__font__.Font)->None:
    """"""
    pass
  @property
  def default_font_size(self)->int:
    """"""
    pass
  @default_font_size.setter
  def default_font_size(self,  value:int)->None:
    """"""
    pass
  def set_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, texture:__texture2d__.Texture2D)->None:
    """
				Creates or changes the value of the icon property defined by `name` and `theme_type`. Use `clear_icon` to remove the property.
			"""
    pass

  def get_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the icon property defined by `name` and `theme_type`, if it exists.
				Returns the engine fallback icon value if the property doesn't exist (see `ThemeDB.fallback_icon`). Use `has_icon` to check for existence.
			"""
    pass

  def has_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the icon property defined by `name` and `theme_type` exists.
				Returns `false` if it doesn't exist. Use `set_icon` to define it.
			"""
    pass

  def rename_icon(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the icon property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_icon` to check for existence, and `clear_icon` to remove the existing property.
			"""
    pass

  def clear_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the icon property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_icon` to check for existence.
			"""
    pass

  def get_icon_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for icon properties defined with `theme_type`. Use `get_icon_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_icon_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for icon properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, texture:__stylebox__.StyleBox)->None:
    """
				Creates or changes the value of the `StyleBox` property defined by `name` and `theme_type`. Use `clear_stylebox` to remove the property.
			"""
    pass

  def get_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->__styleboxempty__.StyleBoxEmpty|__styleboxtexture__.StyleBoxTexture|__styleboxline__.StyleBoxLine|__stylebox__.StyleBox|__styleboxflat__.StyleBoxFlat:
    """
				Returns the `StyleBox` property defined by `name` and `theme_type`, if it exists.
				Returns the engine fallback stylebox value if the property doesn't exist (see `ThemeDB.fallback_stylebox`). Use `has_stylebox` to check for existence.
			"""
    pass

  def has_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the `StyleBox` property defined by `name` and `theme_type` exists.
				Returns `false` if it doesn't exist. Use `set_stylebox` to define it.
			"""
    pass

  def rename_stylebox(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the `StyleBox` property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_stylebox` to check for existence, and `clear_stylebox` to remove the existing property.
			"""
    pass

  def clear_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the `StyleBox` property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_stylebox` to check for existence.
			"""
    pass

  def get_stylebox_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for `StyleBox` properties defined with `theme_type`. Use `get_stylebox_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_stylebox_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for `StyleBox` properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, font:__font__.Font)->None:
    """
				Creates or changes the value of the `Font` property defined by `name` and `theme_type`. Use `clear_font` to remove the property.
			"""
    pass

  def get_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """
				Returns the `Font` property defined by `name` and `theme_type`, if it exists.
				Returns the default theme font if the property doesn't exist and the default theme font is set up (see `default_font`). Use `has_font` to check for existence of the property and `has_default_font` to check for existence of the default theme font.
				Returns the engine fallback font value, if neither exist (see `ThemeDB.fallback_font`).
			"""
    pass

  def has_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the `Font` property defined by `name` and `theme_type` exists, or if the default theme font is set up (see `has_default_font`).
				Returns `false` if neither exist. Use `set_font` to define the property.
			"""
    pass

  def rename_font(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the `Font` property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_font` to check for existence, and `clear_font` to remove the existing property.
			"""
    pass

  def clear_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the `Font` property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_font` to check for existence.
			"""
    pass

  def get_font_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for `Font` properties defined with `theme_type`. Use `get_font_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_font_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for `Font` properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, font_size:int)->None:
    """
				Creates or changes the value of the font size property defined by `name` and `theme_type`. Use `clear_font_size` to remove the property.
			"""
    pass

  def get_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->int:
    """
				Returns the font size property defined by `name` and `theme_type`, if it exists.
				Returns the default theme font size if the property doesn't exist and the default theme font size is set up (see `default_font_size`). Use `has_font_size` to check for existence of the property and `has_default_font_size` to check for existence of the default theme font.
				Returns the engine fallback font size value, if neither exist (see `ThemeDB.fallback_font_size`).
			"""
    pass

  def has_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the font size property defined by `name` and `theme_type` exists, or if the default theme font size is set up (see `has_default_font_size`).
				Returns `false` if neither exist. Use `set_font_size` to define the property.
			"""
    pass

  def rename_font_size(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the font size property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_font_size` to check for existence, and `clear_font_size` to remove the existing property.
			"""
    pass

  def clear_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the font size property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_font_size` to check for existence.
			"""
    pass

  def get_font_size_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for font size properties defined with `theme_type`. Use `get_font_size_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_font_size_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for font size properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, color:__core__.Color)->None:
    """
				Creates or changes the value of the `Color` property defined by `name` and `theme_type`. Use `clear_color` to remove the property.
			"""
    pass

  def get_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->__core__.Color:
    """
				Returns the `Color` property defined by `name` and `theme_type`, if it exists.
				Returns the default color value if the property doesn't exist. Use `has_color` to check for existence.
			"""
    pass

  def has_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the `Color` property defined by `name` and `theme_type` exists.
				Returns `false` if it doesn't exist. Use `set_color` to define it.
			"""
    pass

  def rename_color(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the `Color` property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_color` to check for existence, and `clear_color` to remove the existing property.
			"""
    pass

  def clear_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the `Color` property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_color` to check for existence.
			"""
    pass

  def get_color_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for `Color` properties defined with `theme_type`. Use `get_color_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_color_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for `Color` properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str, constant:int)->None:
    """
				Creates or changes the value of the constant property defined by `name` and `theme_type`. Use `clear_constant` to remove the property.
			"""
    pass

  def get_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->int:
    """
				Returns the constant property defined by `name` and `theme_type`, if it exists.
				Returns `0` if the property doesn't exist. Use `has_constant` to check for existence.
			"""
    pass

  def has_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the constant property defined by `name` and `theme_type` exists.
				Returns `false` if it doesn't exist. Use `set_constant` to define it.
			"""
    pass

  def rename_constant(self, old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the constant property defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_constant` to check for existence, and `clear_constant` to remove the existing property.
			"""
    pass

  def clear_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the constant property defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_constant` to check for existence.
			"""
    pass

  def get_constant_list(self, theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for constant properties defined with `theme_type`. Use `get_constant_type_list` to get a list of possible theme type names.
			"""
    pass

  def get_constant_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for constant properties. Use `get_type_list` to get a list of all unique theme types.
			"""
    pass

  def set_default_base_scale(self, base_scale:float)->None:
    """"""
    pass

  def get_default_base_scale(self)->float:
    """"""
    pass

  def has_default_base_scale(self)->bool:
    """
				Returns `true` if `default_base_scale` has a valid value.
				Returns `false` if it doesn't. The value must be greater than `0.0` to be considered valid.
			"""
    pass

  def set_default_font(self, font:__font__.Font)->None:
    """"""
    pass

  def get_default_font(self)->__fontvariation__.FontVariation|__systemfont__.SystemFont|__font__.Font|__fontfile__.FontFile:
    """"""
    pass

  def has_default_font(self)->bool:
    """
				Returns `true` if `default_font` has a valid value.
				Returns `false` if it doesn't.
			"""
    pass

  def set_default_font_size(self, font_size:int)->None:
    """"""
    pass

  def get_default_font_size(self)->int:
    """"""
    pass

  def has_default_font_size(self)->bool:
    """
				Returns `true` if `default_font_size` has a valid value.
				Returns `false` if it doesn't. The value must be greater than `0` to be considered valid.
			"""
    pass

  def set_theme_item(self, data_type:int , name:__core__.StringName|str, theme_type:__core__.StringName|str, value:Any)->None:
    """
				Creates or changes the value of the theme property of `data_type` defined by `name` and `theme_type`. Use `clear_theme_item` to remove the property.
				Fails if the `value` type is not accepted by `data_type`.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def get_theme_item(self, data_type:int , name:__core__.StringName|str, theme_type:__core__.StringName|str)->Any:
    """
				Returns the theme property of `data_type` defined by `name` and `theme_type`, if it exists.
				Returns the engine fallback value if the property doesn't exist (see `ThemeDB`). Use `has_theme_item` to check for existence.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def has_theme_item(self, data_type:int , name:__core__.StringName|str, theme_type:__core__.StringName|str)->bool:
    """
				Returns `true` if the theme property of `data_type` defined by `name` and `theme_type` exists.
				Returns `false` if it doesn't exist. Use `set_theme_item` to define it.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def rename_theme_item(self, data_type:int , old_name:__core__.StringName|str, name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Renames the theme property of `data_type` defined by `old_name` and `theme_type` to `name`, if it exists.
				Fails if it doesn't exist, or if a similar property with the new name already exists. Use `has_theme_item` to check for existence, and `clear_theme_item` to remove the existing property.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def clear_theme_item(self, data_type:int , name:__core__.StringName|str, theme_type:__core__.StringName|str)->None:
    """
				Removes the theme property of `data_type` defined by `name` and `theme_type`, if it exists.
				Fails if it doesn't exist. Use `has_theme_item` to check for existence.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def get_theme_item_list(self, data_type:int , theme_type:str)->__core__.PackedStringArray:
    """
				Returns a list of names for properties of `data_type` defined with `theme_type`. Use `get_theme_item_type_list` to get a list of possible theme type names.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def get_theme_item_type_list(self, data_type:int )->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names for `data_type` properties. Use `get_type_list` to get a list of all unique theme types.
				**Note:** This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic.
			"""
    pass

  def set_type_variation(self, theme_type:__core__.StringName|str, base_type:__core__.StringName|str)->None:
    """
				Marks `theme_type` as a variation of `base_type`.
				This adds `theme_type` as a suggested option for `Control.theme_type_variation` on a `Control` that is of the `base_type` class.
				Variations can also be nested, i.e. `base_type` can be another variation. If a chain of variations ends with a `base_type` matching the class of the `Control`, the whole chain is going to be suggested as options.
				**Note:** Suggestions only show up if this theme resource is set as the project default theme. See `ProjectSettings.gui/theme/custom`.
			"""
    pass

  def is_type_variation(self, theme_type:__core__.StringName|str, base_type:__core__.StringName|str)->bool:
    """
				Returns `true` if `theme_type` is marked as a variation of `base_type`.
			"""
    pass

  def clear_type_variation(self, theme_type:__core__.StringName|str)->None:
    """
				Unmarks `theme_type` as being a variation of another theme type. See `set_type_variation`.
			"""
    pass

  def get_type_variation_base(self, theme_type:__core__.StringName|str)->__core__.StringName:
    """
				Returns the name of the base theme type if `theme_type` is a valid variation type. Returns an empty string otherwise.
			"""
    pass

  def get_type_variation_list(self, base_type:__core__.StringName|str)->__core__.PackedStringArray:
    """
				Returns a list of all type variations for the given `base_type`.
			"""
    pass

  def add_type(self, theme_type:__core__.StringName|str)->None:
    """
				Adds an empty theme type for every valid data type.
				**Note:** Empty types are not saved with the theme. This method only exists to perform in-memory changes to the resource. Use available `set_*` methods to add theme items.
			"""
    pass

  def remove_type(self, theme_type:__core__.StringName|str)->None:
    """
				Removes the theme type, gracefully discarding defined theme items. If the type is a variation, this information is also erased. If the type is a base for type variations, those variations lose their base.
			"""
    pass

  def get_type_list(self)->__core__.PackedStringArray:
    """
				Returns a list of all unique theme type names. Use the appropriate `get_*_type_list` method to get a list of unique theme types for a single data type.
			"""
    pass

  def merge_with(self, other:__theme__.Theme)->None:
    """
				Adds missing and overrides existing definitions with values from the `other` theme resource.
				**Note:** This modifies the current theme. If you want to merge two themes together without modifying either one, create a new empty theme and merge the other two into it one after another.
			"""
    pass

  def clear(self)->None:
    """
				Removes all the theme properties defined on the theme resource.
			"""
    pass


