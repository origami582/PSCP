from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CameraServer as __cameraserver__
import py4godot.classes.Image as __image__
import py4godot.classes.CameraFeed as __camerafeed__
import py4godot.classes.RefCounted as __refcounted__


class FeedDataType:
  FEED_NOIMAGE:int = 0
  FEED_RGB:int = 1
  FEED_YCBCR:int = 2
  FEED_YCBCR_SEP:int = 3
  FEED_EXTERNAL:int = 4
class FeedPosition:
  FEED_UNSPECIFIED:int = 0
  FEED_FRONT:int = 1
  FEED_BACK:int = 2


class CameraFeed(__refcounted__.RefCounted):
  """
		A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used. See also `CameraServer`.
		**Note:** Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background.
		**Note:** This class is currently only implemented on Linux, Android, macOS, and iOS. On other platforms no `CameraFeed`s will be available. To get a `CameraFeed` on iOS, the camera plugin from `url=https://github.com/godotengine/godot-ios-plugins`godot-ios-plugins`/url` is required.
	"""
  frame_changed: BuiltinSignal
  format_changed: BuiltinSignal

  @staticmethod
  def constructor()->CameraFeed:pass



  @staticmethod
  def cast(other:__object__.Object)->CameraFeed:pass


  @property
  def feed_is_active(self)->bool:
    """"""
    pass
  @feed_is_active.setter
  def feed_is_active(self,  value:bool)->None:
    """"""
    pass
  @property
  def feed_transform(self)->__core__.Transform2D:
    """"""
    pass
  @feed_transform.setter
  def feed_transform(self,  value:__core__.Transform2D)->None:
    """"""
    pass
  @property
  def formats(self)->__core__.Array:
    """"""
    pass
  def _activate_feed(self)->bool:
    """
				Called when the camera feed is activated.
			"""
    pass

  def _deactivate_feed(self)->None:
    """
				Called when the camera feed is deactivated.
			"""
    pass

  def get_id(self)->int:
    """
				Returns the unique ID for this feed.
			"""
    pass

  def is_active(self)->bool:
    """"""
    pass

  def set_active(self, active:bool)->None:
    """"""
    pass

  def get_name(self)->str:
    """
				Returns the camera's name.
			"""
    pass

  def set_name(self, name:str)->None:
    """
				Sets the camera's name.
			"""
    pass

  def get_position(self)->int:
    """
				Returns the position of camera on the device.
			"""
    pass

  def set_position(self, position:int )->None:
    """
				Sets the position of this camera.
			"""
    pass

  def get_transform(self)->__core__.Transform2D:
    """"""
    pass

  def set_transform(self, transform:__core__.Transform2D)->None:
    """"""
    pass

  def set_rgb_image(self, rgb_image:__image__.Image)->None:
    """
				Sets RGB image for this feed.
			"""
    pass

  def set_ycbcr_image(self, ycbcr_image:__image__.Image)->None:
    """
				Sets YCbCr image for this feed.
			"""
    pass

  def set_external(self, width:int, height:int)->None:
    """
				Sets the feed as external feed provided by another library.
			"""
    pass

  def get_texture_tex_id(self, feed_image_type:int )->int:
    """
				Returns the texture backend ID (usable by some external libraries that need a handle to a texture to write data).
			"""
    pass

  def get_datatype(self)->int:
    """
				Returns feed image data type.
			"""
    pass

  def get_formats(self)->__core__.Array:
    """"""
    pass

  def set_format(self, index:int, parameters:__core__.Dictionary)->bool:
    """
				Sets the feed format parameters for the given `index` in the `formats` array. Returns `true` on success. By default, the YUYV encoded stream is transformed to `constant FEED_RGB`. The YUYV encoded stream output format can be changed by setting `parameters`'s `output` entry to one of the following:
				- `"separate"` will result in `constant FEED_YCBCR_SEP`;
				- `"grayscale"` will result in desaturated `constant FEED_RGB`;
				- `"copy"` will result in `constant FEED_YCBCR`.
			"""
    pass


