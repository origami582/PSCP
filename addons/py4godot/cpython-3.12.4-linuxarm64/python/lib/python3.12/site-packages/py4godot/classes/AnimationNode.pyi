from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeAdd2 as __animationnodeadd2__
import py4godot.classes.AnimationNodeTimeSeek as __animationnodetimeseek__
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationNodeOutput as __animationnodeoutput__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeOneShot as __animationnodeoneshot__
import py4godot.classes.AnimationNodeSub2 as __animationnodesub2__
import py4godot.classes.Resource as __resource__
import py4godot.classes.AnimationNodeTransition as __animationnodetransition__
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationNodeBlend3 as __animationnodeblend3__
import py4godot.classes.AnimationNodeTimeScale as __animationnodetimescale__
import py4godot.classes.Animation as __animation__
import py4godot.classes.AnimationNodeBlend2 as __animationnodeblend2__
import py4godot.classes.AnimationNode as __animationnode__
import py4godot.classes.AnimationNodeExtension as __animationnodeextension__
import py4godot.classes.AnimationNodeAdd3 as __animationnodeadd3__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__


class FilterAction:
  FILTER_IGNORE:int = 0
  FILTER_PASS:int = 1
  FILTER_STOP:int = 2
  FILTER_BLEND:int = 3


class AnimationNode(__resource__.Resource):
  """
		Base resource for `AnimationTree` nodes. In general, it's not used directly, but you can create custom ones with custom blending formulas.
		Inherit this when creating animation nodes mainly for use in `AnimationNodeBlendTree`, otherwise `AnimationRootNode` should be used instead.
		You can access the time information as read-only parameter which is processed and stored in the previous frame for all nodes except `AnimationNodeOutput`.
		**Note:** If multiple inputs exist in the `AnimationNode`, which time information takes precedence depends on the type of `AnimationNode`.
		```gdscript
		var current_length = $AnimationTree`"parameters/AnimationNodeName/current_length"`
		var current_position = $AnimationTree`"parameters/AnimationNodeName/current_position"`
		var current_delta = $AnimationTree`"parameters/AnimationNodeName/current_delta"`
		```
	"""
  tree_changed: BuiltinSignal
  animation_node_renamed: BuiltinSignal
  animation_node_removed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNode:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNode:pass


  @property
  def filter_enabled(self)->bool:
    """"""
    pass
  @filter_enabled.setter
  def filter_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def filters(self)->__core__.Array:
    """"""
    pass
  @filters.setter
  def filters(self,  value:__core__.Array)->None:
    """"""
    pass
  def _get_child_nodes(self)->__core__.Dictionary:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return all child animation nodes in order as a `name: node` dictionary.
			"""
    pass

  def _get_parameter_list(self)->__core__.Array:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return a list of the properties on this animation node. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. Format is similar to `Object.get_property_list`.
			"""
    pass

  def _get_child_by_name(self, name:__core__.StringName|str)->__animationnodeadd2__.AnimationNodeAdd2|__animationnodetimeseek__.AnimationNodeTimeSeek|__animationnodesync__.AnimationNodeSync|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeoutput__.AnimationNodeOutput|__animationrootnode__.AnimationRootNode|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeoneshot__.AnimationNodeOneShot|__animationnodesub2__.AnimationNodeSub2|__animationnodetransition__.AnimationNodeTransition|__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodeblend3__.AnimationNodeBlend3|__animationnodetimescale__.AnimationNodeTimeScale|__animationnodeblend2__.AnimationNodeBlend2|__animationnode__.AnimationNode|__animationnodeextension__.AnimationNodeExtension|__animationnodeadd3__.AnimationNodeAdd3|__animationnodeblendtree__.AnimationNodeBlendTree:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return a child animation node by its `name`.
			"""
    pass

  def _get_parameter_default_value(self, parameter:__core__.StringName|str)->Any:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return the default value of a `parameter`. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees.
			"""
    pass

  def _is_parameter_read_only(self, parameter:__core__.StringName|str)->bool:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return whether the `parameter` is read-only. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees.
			"""
    pass

  def _process(self, time:float, seek:bool, is_external_seeking:bool, test_only:bool)->float:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to run some code when this animation node is processed. The `time` parameter is a relative delta, unless `seek` is `true`, in which case it is absolute.
				Here, call the `blend_input`, `blend_node` or `blend_animation` functions. You can also use `get_parameter` and `set_parameter` to modify local memory.
				This function should return the delta.
			"""
    pass

  def _get_caption(self)->str:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to override the text caption for this animation node.
			"""
    pass

  def _has_filter(self)->bool:
    """
				When inheriting from `AnimationRootNode`, implement this virtual method to return whether the blend tree editor should display filter editing on this animation node.
			"""
    pass

  def add_input(self, name:str)->bool:
    """
				Adds an input to the animation node. This is only useful for animation nodes created for use in an `AnimationNodeBlendTree`. If the addition fails, returns `false`.
			"""
    pass

  def remove_input(self, index:int)->None:
    """
				Removes an input, call this only when inactive.
			"""
    pass

  def set_input_name(self, input:int, name:str)->bool:
    """
				Sets the name of the input at the given `input` index. If the setting fails, returns `false`.
			"""
    pass

  def get_input_name(self, input:int)->str:
    """
				Gets the name of an input by index.
			"""
    pass

  def get_input_count(self)->int:
    """
				Amount of inputs in this animation node, only useful for animation nodes that go into `AnimationNodeBlendTree`.
			"""
    pass

  def find_input(self, name:str)->int:
    """
				Returns the input index which corresponds to `name`. If not found, returns `-1`.
			"""
    pass

  def set_filter_path(self, path:__core__.NodePath|str, enable:bool)->None:
    """
				Adds or removes a path for the filter.
			"""
    pass

  def is_path_filtered(self, path:__core__.NodePath|str)->bool:
    """
				Returns `true` if the given path is filtered.
			"""
    pass

  def set_filter_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_filter_enabled(self)->bool:
    """"""
    pass

  def get_processing_animation_tree_instance_id(self)->int:
    """
				Returns the object id of the `AnimationTree` that owns this node.
				**Note:** This method should only be called from within the `AnimationNodeExtension._process_animation_node` method, and will return an invalid id otherwise.
			"""
    pass

  def is_process_testing(self)->bool:
    """
				Returns `true` if this animation node is being processed in test-only mode.
			"""
    pass

  def blend_animation(self, animation:__core__.StringName|str, time:float, delta:float, seeked:bool, is_external_seeking:bool, blend:float, looped_flag:int =0)->None:
    """
				Blends an animation by `blend` amount (name must be valid in the linked `AnimationPlayer`). A `time` and `delta` may be passed, as well as whether `seeked` happened.
				A `looped_flag` is used by internal processing immediately after the loop.
			"""
    pass

  def blend_node(self, name:__core__.StringName|str, node:__animationnode__.AnimationNode, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float:
    """
				Blend another animation node (in case this animation node contains child animation nodes). This function is only useful if you inherit from `AnimationRootNode` instead, otherwise editors will not display your animation node for addition.
			"""
    pass

  def blend_input(self, input_index:int, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float:
    """
				Blends an input. This is only useful for animation nodes created for an `AnimationNodeBlendTree`. The `time` parameter is a relative delta, unless `seek` is `true`, in which case it is absolute. A filter mode may be optionally passed.
			"""
    pass

  def set_parameter(self, name:__core__.StringName|str, value:Any)->None:
    """
				Sets a custom parameter. These are used as local memory, because resources can be reused across the tree or scenes.
			"""
    pass

  def get_parameter(self, name:__core__.StringName|str)->Any:
    """
				Gets the value of a parameter. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees.
			"""
    pass


