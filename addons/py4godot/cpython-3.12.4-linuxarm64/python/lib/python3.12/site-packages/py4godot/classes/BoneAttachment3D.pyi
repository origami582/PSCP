from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.Skeleton3D as __skeleton3d__



class BoneAttachment3D(__node3d__.Node3D):
  """
		This node selects a bone in a `Skeleton3D` and attaches to it. This means that the `BoneAttachment3D` node will either dynamically copy or override the 3D transform of the selected bone.
	"""

  @staticmethod
  def constructor()->BoneAttachment3D:pass



  @staticmethod
  def cast(other:__object__.Object)->BoneAttachment3D:pass


  @property
  def bone_name(self)->__core__.StringName:
    """"""
    pass
  @bone_name.setter
  def bone_name(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def bone_idx(self)->int:
    """"""
    pass
  @bone_idx.setter
  def bone_idx(self,  value:int)->None:
    """"""
    pass
  @property
  def override_pose(self)->bool:
    """"""
    pass
  @override_pose.setter
  def override_pose(self,  value:bool)->None:
    """"""
    pass
  def get_skeleton(self)->__skeleton3d__.Skeleton3D:
    """
				Returns the parent or external `Skeleton3D` node if it exists, otherwise returns `null`.
			"""
    pass

  def set_bone_name(self, bone_name:str)->None:
    """"""
    pass

  def get_bone_name(self)->str:
    """"""
    pass

  def set_bone_idx(self, bone_idx:int)->None:
    """"""
    pass

  def get_bone_idx(self)->int:
    """"""
    pass

  def on_skeleton_update(self)->None:
    """
				A function that is called automatically when the `Skeleton3D` is updated. This function is where the `BoneAttachment3D` node updates its position so it is correctly bound when it is _not_ set to override the bone pose.
			"""
    pass

  def set_override_pose(self, override_pose:bool)->None:
    """"""
    pass

  def get_override_pose(self)->bool:
    """"""
    pass

  def set_use_external_skeleton(self, use_external_skeleton:bool)->None:
    """"""
    pass

  def get_use_external_skeleton(self)->bool:
    """"""
    pass

  def set_external_skeleton(self, external_skeleton:__core__.NodePath|str)->None:
    """"""
    pass

  def get_external_skeleton(self)->__core__.NodePath:
    """"""
    pass


