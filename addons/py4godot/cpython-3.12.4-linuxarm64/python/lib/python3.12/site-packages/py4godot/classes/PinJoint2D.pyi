from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Joint2D as __joint2d__



class PinJoint2D(__joint2d__.Joint2D):
  """
		A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate. For example, a `RigidBody2D` can be attached to a `StaticBody2D` to create a pendulum or a seesaw.
	"""

  @staticmethod
  def constructor()->PinJoint2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PinJoint2D:pass


  @property
  def softness(self)->float:
    """"""
    pass
  @softness.setter
  def softness(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_limit_enabled(self)->bool:
    """"""
    pass
  @angular_limit_enabled.setter
  def angular_limit_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def angular_limit_lower(self)->float:
    """"""
    pass
  @angular_limit_lower.setter
  def angular_limit_lower(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_limit_upper(self)->float:
    """"""
    pass
  @angular_limit_upper.setter
  def angular_limit_upper(self,  value:float)->None:
    """"""
    pass
  @property
  def motor_enabled(self)->bool:
    """"""
    pass
  @motor_enabled.setter
  def motor_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def motor_target_velocity(self)->float:
    """"""
    pass
  @motor_target_velocity.setter
  def motor_target_velocity(self,  value:float)->None:
    """"""
    pass
  def set_softness(self, softness:float)->None:
    """"""
    pass

  def get_softness(self)->float:
    """"""
    pass

  def set_angular_limit_lower(self, angular_limit_lower:float)->None:
    """"""
    pass

  def get_angular_limit_lower(self)->float:
    """"""
    pass

  def set_angular_limit_upper(self, angular_limit_upper:float)->None:
    """"""
    pass

  def get_angular_limit_upper(self)->float:
    """"""
    pass

  def set_motor_target_velocity(self, motor_target_velocity:float)->None:
    """"""
    pass

  def get_motor_target_velocity(self)->float:
    """"""
    pass

  def set_motor_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_motor_enabled(self)->bool:
    """"""
    pass

  def set_angular_limit_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_angular_limit_enabled(self)->bool:
    """"""
    pass


