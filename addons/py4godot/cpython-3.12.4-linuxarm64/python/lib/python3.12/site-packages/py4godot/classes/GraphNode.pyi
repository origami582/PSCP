from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__



class GraphNode(__graphelement__.GraphElement):
  """
		`GraphNode` allows to create nodes for a `GraphEdit` graph with customizable content based on its child controls. `GraphNode` is derived from `Container` and it is responsible for placing its children on screen. This works similar to `VBoxContainer`. Children, in turn, provide `GraphNode` with so-called slots, each of which can have a connection port on either side.
		Each `GraphNode` slot is defined by its index and can provide the node with up to two ports: one on the left, and one on the right. By convention the left port is also referred to as the **input port** and the right port is referred to as the **output port**. Each port can be enabled and configured individually, using different type and color. The type is an arbitrary value that you can define using your own considerations. The parent `GraphEdit` will receive this information on each connect and disconnect request.
		Slots can be configured in the Inspector dock once you add at least one child `Control`. The properties are grouped by each slot's index in the "Slot" section.
		**Note:** While GraphNode is set up using slots and slot indices, connections are made between the ports which are enabled. Because of that `GraphEdit` uses the port's index and not the slot's index. You can use `get_input_port_slot` and `get_output_port_slot` to get the slot index from the port index.
	"""
  slot_updated: BuiltinSignal

  @staticmethod
  def constructor()->GraphNode:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphNode:pass


  @property
  def title(self)->str:
    """"""
    pass
  @title.setter
  def title(self,  value:str)->None:
    """"""
    pass
  @property
  def ignore_invalid_connection_type(self)->bool:
    """"""
    pass
  @ignore_invalid_connection_type.setter
  def ignore_invalid_connection_type(self,  value:bool)->None:
    """"""
    pass
  def _draw_port(self, slot_index:int, position:__core__.Vector2i, left:bool, color:__core__.Color)->None:
    """
"""
    pass

  def set_title(self, title:str)->None:
    """"""
    pass

  def get_title(self)->str:
    """"""
    pass

  def get_titlebar_hbox(self)->__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorresourcepicker__.EditorResourcePicker|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__editorscriptpicker__.EditorScriptPicker|__editortoaster__.EditorToaster|__hboxcontainer__.HBoxContainer:
    """
				Returns the `HBoxContainer` used for the title bar, only containing a `Label` for displaying the title by default. This can be used to add custom controls to the title bar such as option or close buttons.
			"""
    pass

  def set_slot(self, slot_index:int, enable_left_port:bool, type_left:int, color_left:__core__.Color, enable_right_port:bool, type_right:int, color_right:__core__.Color, custom_icon_left:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor(), custom_icon_right:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor(), draw_stylebox:bool=True)->None:
    """
				Sets properties of the slot with the given `slot_index`.
				If `enable_left_port`/`enable_right_port` is `true`, a port will appear and the slot will be able to be connected from this side.
				With `type_left`/`type_right` an arbitrary type can be assigned to each port. Two ports can be connected if they share the same type, or if the connection between their types is allowed in the parent `GraphEdit` (see `GraphEdit.add_valid_connection_type`). Keep in mind that the `GraphEdit` has the final say in accepting the connection. Type compatibility simply allows the `signal GraphEdit.connection_request` signal to be emitted.
				Ports can be further customized using `color_left`/`color_right` and `custom_icon_left`/`custom_icon_right`. The color parameter adds a tint to the icon. The custom icon can be used to override the default port dot.
				Additionally, `draw_stylebox` can be used to enable or disable drawing of the background stylebox for each slot. See `theme_item slot`.
				Individual properties can also be set using one of the `set_slot_*` methods.
				**Note:** This method only sets properties of the slot. To create the slot itself, add a `Control`-derived child to the GraphNode.
			"""
    pass

  def clear_slot(self, slot_index:int)->None:
    """
				Disables the slot with the given `slot_index`. This will remove the corresponding input and output port from the GraphNode.
			"""
    pass

  def clear_all_slots(self)->None:
    """
				Disables all slots of the GraphNode. This will remove all input/output ports from the GraphNode.
			"""
    pass

  def is_slot_enabled_left(self, slot_index:int)->bool:
    """
				Returns `true` if left (input) side of the slot with the given `slot_index` is enabled.
			"""
    pass

  def set_slot_enabled_left(self, slot_index:int, enable:bool)->None:
    """
				Toggles the left (input) side of the slot with the given `slot_index`. If `enable` is `true`, a port will appear on the left side and the slot will be able to be connected from this side.
			"""
    pass

  def set_slot_type_left(self, slot_index:int, type:int)->None:
    """
				Sets the left (input) type of the slot with the given `slot_index` to `type`. If the value is negative, all connections will be disallowed to be created via user inputs.
			"""
    pass

  def get_slot_type_left(self, slot_index:int)->int:
    """
				Returns the left (input) type of the slot with the given `slot_index`.
			"""
    pass

  def set_slot_color_left(self, slot_index:int, color:__core__.Color)->None:
    """
				Sets the `Color` of the left (input) side of the slot with the given `slot_index` to `color`.
			"""
    pass

  def get_slot_color_left(self, slot_index:int)->__core__.Color:
    """
				Returns the left (input) `Color` of the slot with the given `slot_index`.
			"""
    pass

  def set_slot_custom_icon_left(self, slot_index:int, custom_icon:__texture2d__.Texture2D)->None:
    """
				Sets the custom `Texture2D` of the left (input) side of the slot with the given `slot_index` to `custom_icon`.
			"""
    pass

  def get_slot_custom_icon_left(self, slot_index:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the left (input) custom `Texture2D` of the slot with the given `slot_index`.
			"""
    pass

  def is_slot_enabled_right(self, slot_index:int)->bool:
    """
				Returns `true` if right (output) side of the slot with the given `slot_index` is enabled.
			"""
    pass

  def set_slot_enabled_right(self, slot_index:int, enable:bool)->None:
    """
				Toggles the right (output) side of the slot with the given `slot_index`. If `enable` is `true`, a port will appear on the right side and the slot will be able to be connected from this side.
			"""
    pass

  def set_slot_type_right(self, slot_index:int, type:int)->None:
    """
				Sets the right (output) type of the slot with the given `slot_index` to `type`. If the value is negative, all connections will be disallowed to be created via user inputs.
			"""
    pass

  def get_slot_type_right(self, slot_index:int)->int:
    """
				Returns the right (output) type of the slot with the given `slot_index`.
			"""
    pass

  def set_slot_color_right(self, slot_index:int, color:__core__.Color)->None:
    """
				Sets the `Color` of the right (output) side of the slot with the given `slot_index` to `color`.
			"""
    pass

  def get_slot_color_right(self, slot_index:int)->__core__.Color:
    """
				Returns the right (output) `Color` of the slot with the given `slot_index`.
			"""
    pass

  def set_slot_custom_icon_right(self, slot_index:int, custom_icon:__texture2d__.Texture2D)->None:
    """
				Sets the custom `Texture2D` of the right (output) side of the slot with the given `slot_index` to `custom_icon`.
			"""
    pass

  def get_slot_custom_icon_right(self, slot_index:int)->__placeholdertexture2d__.PlaceholderTexture2D|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__noisetexture2d__.NoiseTexture2D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__gradienttexture1d__.GradientTexture1D|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__externaltexture__.ExternalTexture|__viewporttexture__.ViewportTexture|__gradienttexture2d__.GradientTexture2D|__meshtexture__.MeshTexture|__cameratexture__.CameraTexture|__curvexyztexture__.CurveXYZTexture|__compressedtexture2d__.CompressedTexture2D|__atlastexture__.AtlasTexture|__texture2d__.Texture2D:
    """
				Returns the right (output) custom `Texture2D` of the slot with the given `slot_index`.
			"""
    pass

  def is_slot_draw_stylebox(self, slot_index:int)->bool:
    """
				Returns `true` if the background `StyleBox` of the slot with the given `slot_index` is drawn.
			"""
    pass

  def set_slot_draw_stylebox(self, slot_index:int, enable:bool)->None:
    """
				Toggles the background `StyleBox` of the slot with the given `slot_index`.
			"""
    pass

  def set_ignore_invalid_connection_type(self, ignore:bool)->None:
    """"""
    pass

  def is_ignoring_valid_connection_type(self)->bool:
    """"""
    pass

  def get_input_port_count(self)->int:
    """
				Returns the number of slots with an enabled input port.
			"""
    pass

  def get_input_port_position(self, port_idx:int)->__core__.Vector2:
    """
				Returns the position of the input port with the given `port_idx`.
			"""
    pass

  def get_input_port_type(self, port_idx:int)->int:
    """
				Returns the type of the input port with the given `port_idx`.
			"""
    pass

  def get_input_port_color(self, port_idx:int)->__core__.Color:
    """
				Returns the `Color` of the input port with the given `port_idx`.
			"""
    pass

  def get_input_port_slot(self, port_idx:int)->int:
    """
				Returns the corresponding slot index of the input port with the given `port_idx`.
			"""
    pass

  def get_output_port_count(self)->int:
    """
				Returns the number of slots with an enabled output port.
			"""
    pass

  def get_output_port_position(self, port_idx:int)->__core__.Vector2:
    """
				Returns the position of the output port with the given `port_idx`.
			"""
    pass

  def get_output_port_type(self, port_idx:int)->int:
    """
				Returns the type of the output port with the given `port_idx`.
			"""
    pass

  def get_output_port_color(self, port_idx:int)->__core__.Color:
    """
				Returns the `Color` of the output port with the given `port_idx`.
			"""
    pass

  def get_output_port_slot(self, port_idx:int)->int:
    """
				Returns the corresponding slot index of the output port with the given `port_idx`.
			"""
    pass


