from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D as __shape2d__



class WorldBoundaryShape2D(__shape2d__.Shape2D):
  """
		A 2D world boundary shape, intended for use in physics. `WorldBoundaryShape2D` works like an infinite straight line that forces all physics bodies to stay above it. The line's normal determines which direction is considered as "above" and in the editor, the smaller line over it represents this direction. It can for example be used for endless flat floors.
	"""

  @staticmethod
  def constructor()->WorldBoundaryShape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->WorldBoundaryShape2D:pass


  @property
  def normal(self)->__core__.Vector2:
    """"""
    pass
  @normal.setter
  def normal(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def distance(self)->float:
    """"""
    pass
  @distance.setter
  def distance(self,  value:float)->None:
    """"""
    pass
  def set_normal(self, normal:__core__.Vector2)->None:
    """"""
    pass

  def get_normal(self)->__core__.Vector2:
    """"""
    pass

  def set_distance(self, distance:float)->None:
    """"""
    pass

  def get_distance(self)->float:
    """"""
    pass


