from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.Curve as __curve__



class TubeTrailMesh(__primitivemesh__.PrimitiveMesh):
  """
		`TubeTrailMesh` represents a straight tube-shaped mesh with variable width. The tube is composed of a number of cylindrical sections, each with the same `section_length` and number of `section_rings`. A `curve` is sampled along the total length of the tube, meaning that the curve determines the radius of the tube along its length.
		This primitive mesh is usually used for particle trails.
	"""

  @staticmethod
  def constructor()->TubeTrailMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->TubeTrailMesh:pass


  @property
  def radius(self)->float:
    """"""
    pass
  @radius.setter
  def radius(self,  value:float)->None:
    """"""
    pass
  @property
  def radial_steps(self)->int:
    """"""
    pass
  @radial_steps.setter
  def radial_steps(self,  value:int)->None:
    """"""
    pass
  @property
  def sections(self)->int:
    """"""
    pass
  @sections.setter
  def sections(self,  value:int)->None:
    """"""
    pass
  @property
  def section_length(self)->float:
    """"""
    pass
  @section_length.setter
  def section_length(self,  value:float)->None:
    """"""
    pass
  @property
  def section_rings(self)->int:
    """"""
    pass
  @section_rings.setter
  def section_rings(self,  value:int)->None:
    """"""
    pass
  @property
  def cap_top(self)->bool:
    """"""
    pass
  @cap_top.setter
  def cap_top(self,  value:bool)->None:
    """"""
    pass
  @property
  def cap_bottom(self)->bool:
    """"""
    pass
  @cap_bottom.setter
  def cap_bottom(self,  value:bool)->None:
    """"""
    pass
  @property
  def curve(self)->__curve__.Curve:
    """"""
    pass
  @curve.setter
  def curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  def set_radius(self, radius:float)->None:
    """"""
    pass

  def get_radius(self)->float:
    """"""
    pass

  def set_radial_steps(self, radial_steps:int)->None:
    """"""
    pass

  def get_radial_steps(self)->int:
    """"""
    pass

  def set_sections(self, sections:int)->None:
    """"""
    pass

  def get_sections(self)->int:
    """"""
    pass

  def set_section_length(self, section_length:float)->None:
    """"""
    pass

  def get_section_length(self)->float:
    """"""
    pass

  def set_section_rings(self, section_rings:int)->None:
    """"""
    pass

  def get_section_rings(self)->int:
    """"""
    pass

  def set_cap_top(self, cap_top:bool)->None:
    """"""
    pass

  def is_cap_top(self)->bool:
    """"""
    pass

  def set_cap_bottom(self, cap_bottom:bool)->None:
    """"""
    pass

  def is_cap_bottom(self)->bool:
    """"""
    pass

  def set_curve(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_curve(self)->__curve__.Curve:
    """"""
    pass


