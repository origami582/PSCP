from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class GLTFTextureSampler(__resource__.Resource):
  """"""

  @staticmethod
  def constructor()->GLTFTextureSampler:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFTextureSampler:pass


  @property
  def mag_filter(self)->int:
    """"""
    pass
  @mag_filter.setter
  def mag_filter(self,  value:int)->None:
    """"""
    pass
  @property
  def min_filter(self)->int:
    """"""
    pass
  @min_filter.setter
  def min_filter(self,  value:int)->None:
    """"""
    pass
  @property
  def wrap_s(self)->int:
    """"""
    pass
  @wrap_s.setter
  def wrap_s(self,  value:int)->None:
    """"""
    pass
  @property
  def wrap_t(self)->int:
    """"""
    pass
  @wrap_t.setter
  def wrap_t(self,  value:int)->None:
    """"""
    pass
  def get_mag_filter(self)->int:
    """"""
    pass

  def set_mag_filter(self, filter_mode:int)->None:
    """"""
    pass

  def get_min_filter(self)->int:
    """"""
    pass

  def set_min_filter(self, filter_mode:int)->None:
    """"""
    pass

  def get_wrap_s(self)->int:
    """"""
    pass

  def set_wrap_s(self, wrap_mode:int)->None:
    """"""
    pass

  def get_wrap_t(self)->int:
    """"""
    pass

  def set_wrap_t(self, wrap_mode:int)->None:
    """"""
    pass


