from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class SceneTreeTimer(__refcounted__.RefCounted):
  """
		A one-shot timer managed by the scene tree, which emits `signal timeout` on completion. See also `SceneTree.create_timer`.
		As opposed to `Timer`, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:
		
		```gdscript
		func some_function():
			print("Timer started.")
			await get_tree().create_timer(1.0).timeout
			print("Timer ended.")
		```
		
		
		The timer will be dereferenced after its time elapses. To preserve the timer, you can keep a reference to it. See `RefCounted`.
		**Note:** The timer is processed after all of the nodes in the current frame, i.e. node's `Node._process` method would be called before the timer (or `Node._physics_process` if `process_in_physics` in `SceneTree.create_timer` has been set to `true`).
	"""
  timeout: BuiltinSignal

  @staticmethod
  def constructor()->SceneTreeTimer:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneTreeTimer:pass


  @property
  def time_left(self)->float:
    """"""
    pass
  @time_left.setter
  def time_left(self,  value:float)->None:
    """"""
    pass
  def set_time_left(self, time:float)->None:
    """"""
    pass

  def get_time_left(self)->float:
    """"""
    pass


