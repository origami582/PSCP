from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventMouse as __inputeventmouse__



class InputEventMouseMotion(__inputeventmouse__.InputEventMouse):
  """
		Stores information about a mouse or a pen motion. This includes relative position, absolute position, and velocity. See `Node._input`.
		**Note:** By default, this event is only emitted once per frame rendered at most. If you need more precise input reporting, set `Input.use_accumulated_input` to `false` to make events emitted as often as possible. If you use InputEventMouseMotion to draw lines, consider using `Geometry2D.bresenham_line` as well to avoid visible gaps in lines if the user is moving the mouse quickly.
		**Note:** This event may be emitted even when the mouse hasn't moved, either by the operating system or by Godot itself. If you really need to know if the mouse has moved (e.g. to suppress displaying a tooltip), you should check that `relative.is_zero_approx()` is `false`.
	"""

  @staticmethod
  def constructor()->InputEventMouseMotion:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventMouseMotion:pass


  @property
  def tilt(self)->__core__.Vector2:
    """"""
    pass
  @tilt.setter
  def tilt(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def pressure(self)->float:
    """"""
    pass
  @pressure.setter
  def pressure(self,  value:float)->None:
    """"""
    pass
  @property
  def pen_inverted(self)->bool:
    """"""
    pass
  @pen_inverted.setter
  def pen_inverted(self,  value:bool)->None:
    """"""
    pass
  @property
  def relative(self)->__core__.Vector2:
    """"""
    pass
  @relative.setter
  def relative(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def screen_relative(self)->__core__.Vector2:
    """"""
    pass
  @screen_relative.setter
  def screen_relative(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def velocity(self)->__core__.Vector2:
    """"""
    pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def screen_velocity(self)->__core__.Vector2:
    """"""
    pass
  @screen_velocity.setter
  def screen_velocity(self,  value:__core__.Vector2)->None:
    """"""
    pass
  def set_tilt(self, tilt:__core__.Vector2)->None:
    """"""
    pass

  def get_tilt(self)->__core__.Vector2:
    """"""
    pass

  def set_pressure(self, pressure:float)->None:
    """"""
    pass

  def get_pressure(self)->float:
    """"""
    pass

  def set_pen_inverted(self, pen_inverted:bool)->None:
    """"""
    pass

  def get_pen_inverted(self)->bool:
    """"""
    pass

  def set_relative(self, relative:__core__.Vector2)->None:
    """"""
    pass

  def get_relative(self)->__core__.Vector2:
    """"""
    pass

  def set_screen_relative(self, relative:__core__.Vector2)->None:
    """"""
    pass

  def get_screen_relative(self)->__core__.Vector2:
    """"""
    pass

  def set_velocity(self, velocity:__core__.Vector2)->None:
    """"""
    pass

  def get_velocity(self)->__core__.Vector2:
    """"""
    pass

  def set_screen_velocity(self, velocity:__core__.Vector2)->None:
    """"""
    pass

  def get_screen_velocity(self)->__core__.Vector2:
    """"""
    pass


