from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RefCounted as __refcounted__



class RDShaderSource(__refcounted__.RefCounted):
  """
		Shader source code in text form.
		See also `RDShaderFile`. `RDShaderSource` is only meant to be used with the `RenderingDevice` API. It should not be confused with Godot's own `Shader` resource, which is what Godot's various nodes use for high-level shader programming.
	"""

  @staticmethod
  def constructor()->RDShaderSource:pass



  @staticmethod
  def cast(other:__object__.Object)->RDShaderSource:pass


  @property
  def source_vertex(self)->str:
    """"""
    pass
  @source_vertex.setter
  def source_vertex(self,  value:str)->None:
    """"""
    pass
  @property
  def source_fragment(self)->str:
    """"""
    pass
  @source_fragment.setter
  def source_fragment(self,  value:str)->None:
    """"""
    pass
  @property
  def source_tesselation_control(self)->str:
    """"""
    pass
  @source_tesselation_control.setter
  def source_tesselation_control(self,  value:str)->None:
    """"""
    pass
  @property
  def source_tesselation_evaluation(self)->str:
    """"""
    pass
  @source_tesselation_evaluation.setter
  def source_tesselation_evaluation(self,  value:str)->None:
    """"""
    pass
  @property
  def source_compute(self)->str:
    """"""
    pass
  @source_compute.setter
  def source_compute(self,  value:str)->None:
    """"""
    pass
  @property
  def language(self)->int:
    """"""
    pass
  @language.setter
  def language(self,  value:int)->None:
    """"""
    pass
  def set_stage_source(self, stage:int , source:str)->None:
    """
				Sets `source` code for the specified shader `stage`. Equivalent to setting one of `source_compute`, `source_fragment`, `source_tesselation_control`, `source_tesselation_evaluation` or `source_vertex`.
				**Note:** If you set the compute shader source code using this method directly, remember to remove the Godot-specific hint `#`compute``.
			"""
    pass

  def get_stage_source(self, stage:int )->str:
    """
				Returns source code for the specified shader `stage`. Equivalent to getting one of `source_compute`, `source_fragment`, `source_tesselation_control`, `source_tesselation_evaluation` or `source_vertex`.
			"""
    pass

  def set_language(self, language:int )->None:
    """"""
    pass

  def get_language(self)->int:
    """"""
    pass


