from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.Curve as __curve__


class TangentMode:
  TANGENT_FREE:int = 0
  TANGENT_LINEAR:int = 1
  TANGENT_MODE_COUNT:int = 2


class Curve(__resource__.Resource):
  """
		This resource describes a mathematical curve by defining a set of points and tangents at each point. By default, it ranges between `0` and `1` on the X and Y axes, but these ranges can be changed.
		Please note that many resources and nodes assume they are given _unit curves_. A unit curve is a curve whose domain (the X axis) is between `0` and `1`. Some examples of unit curve usage are `CPUParticles2D.angle_curve` and `Line2D.width_curve`.
	"""
  range_changed: BuiltinSignal
  domain_changed: BuiltinSignal

  @staticmethod
  def constructor()->Curve:pass



  @staticmethod
  def cast(other:__object__.Object)->Curve:pass


  @property
  def min_domain(self)->float:
    """"""
    pass
  @min_domain.setter
  def min_domain(self,  value:float)->None:
    """"""
    pass
  @property
  def max_domain(self)->float:
    """"""
    pass
  @max_domain.setter
  def max_domain(self,  value:float)->None:
    """"""
    pass
  @property
  def min_value(self)->float:
    """"""
    pass
  @min_value.setter
  def min_value(self,  value:float)->None:
    """"""
    pass
  @property
  def max_value(self)->float:
    """"""
    pass
  @max_value.setter
  def max_value(self,  value:float)->None:
    """"""
    pass
  @property
  def bake_resolution(self)->int:
    """"""
    pass
  @bake_resolution.setter
  def bake_resolution(self,  value:int)->None:
    """"""
    pass
  @property
  def point_count(self)->int:
    """"""
    pass
  @point_count.setter
  def point_count(self,  value:int)->None:
    """"""
    pass
  def get_point_count(self)->int:
    """"""
    pass

  def set_point_count(self, count:int)->None:
    """"""
    pass

  def add_point(self, position:__core__.Vector2, left_tangent:float=0, right_tangent:float=0, left_mode:int =0, right_mode:int =0)->int:
    """
				Adds a point to the curve. For each side, if the `*_mode` is `constant TANGENT_LINEAR`, the `*_tangent` angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the `*_tangent` angle if `*_mode` is set to `constant TANGENT_FREE`.
			"""
    pass

  def remove_point(self, index:int)->None:
    """
				Removes the point at `index` from the curve.
			"""
    pass

  def clear_points(self)->None:
    """
				Removes all points from the curve.
			"""
    pass

  def get_point_position(self, index:int)->__core__.Vector2:
    """
				Returns the curve coordinates for the point at `index`.
			"""
    pass

  def set_point_value(self, index:int, y:float)->None:
    """
				Assigns the vertical position `y` to the point at `index`.
			"""
    pass

  def set_point_offset(self, index:int, offset:float)->int:
    """
				Sets the offset from `0.5`.
			"""
    pass

  def sample(self, offset:float)->float:
    """
				Returns the Y value for the point that would exist at the X position `offset` along the curve.
			"""
    pass

  def sample_baked(self, offset:float)->float:
    """
				Returns the Y value for the point that would exist at the X position `offset` along the curve using the baked cache. Bakes the curve's points if not already baked.
			"""
    pass

  def get_point_left_tangent(self, index:int)->float:
    """
				Returns the left tangent angle (in degrees) for the point at `index`.
			"""
    pass

  def get_point_right_tangent(self, index:int)->float:
    """
				Returns the right tangent angle (in degrees) for the point at `index`.
			"""
    pass

  def get_point_left_mode(self, index:int)->int:
    """
				Returns the left `enum TangentMode` for the point at `index`.
			"""
    pass

  def get_point_right_mode(self, index:int)->int:
    """
				Returns the right `enum TangentMode` for the point at `index`.
			"""
    pass

  def set_point_left_tangent(self, index:int, tangent:float)->None:
    """
				Sets the left tangent angle for the point at `index` to `tangent`.
			"""
    pass

  def set_point_right_tangent(self, index:int, tangent:float)->None:
    """
				Sets the right tangent angle for the point at `index` to `tangent`.
			"""
    pass

  def set_point_left_mode(self, index:int, mode:int )->None:
    """
				Sets the left `enum TangentMode` for the point at `index` to `mode`.
			"""
    pass

  def set_point_right_mode(self, index:int, mode:int )->None:
    """
				Sets the right `enum TangentMode` for the point at `index` to `mode`.
			"""
    pass

  def get_min_value(self)->float:
    """"""
    pass

  def set_min_value(self, min:float)->None:
    """"""
    pass

  def get_max_value(self)->float:
    """"""
    pass

  def set_max_value(self, max:float)->None:
    """"""
    pass

  def get_value_range(self)->float:
    """
				Returns the difference between `min_value` and `max_value`.
			"""
    pass

  def get_min_domain(self)->float:
    """"""
    pass

  def set_min_domain(self, min:float)->None:
    """"""
    pass

  def get_max_domain(self)->float:
    """"""
    pass

  def set_max_domain(self, max:float)->None:
    """"""
    pass

  def get_domain_range(self)->float:
    """
				Returns the difference between `min_domain` and `max_domain`.
			"""
    pass

  def clean_dupes(self)->None:
    """
				Removes duplicate points, i.e. points that are less than 0.00001 units (engine epsilon value) away from their neighbor on the curve.
			"""
    pass

  def bake(self)->None:
    """
				Recomputes the baked cache of points for the curve.
			"""
    pass

  def get_bake_resolution(self)->int:
    """"""
    pass

  def set_bake_resolution(self, resolution:int)->None:
    """"""
    pass


