from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RigidBody3D as __rigidbody3d__



class VehicleBody3D(__rigidbody3d__.RigidBody3D):
  """
		This physics body implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. Aside from a `CollisionShape3D` for the main body of the vehicle, you must also add a `VehicleWheel3D` node for each wheel. You should also add a `MeshInstance3D` to this node for the 3D model of the vehicle, but this model should generally not include meshes for the wheels. You can control the vehicle by using the `brake`, `engine_force`, and `steering` properties. The position or orientation of this node shouldn't be changed directly.
		**Note:** The local forward for this node is `constant Vector3.MODEL_FRONT`.
		**Note:** The origin point of your VehicleBody3D will determine the center of gravity of your vehicle. To make the vehicle more grounded, the origin point is usually kept low, moving the `CollisionShape3D` and `MeshInstance3D` upwards.
		**Note:** This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you may have to write your own physics integration using `CharacterBody3D` or `RigidBody3D`.
	"""

  @staticmethod
  def constructor()->VehicleBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VehicleBody3D:pass


  @property
  def engine_force(self)->float:
    """"""
    pass
  @engine_force.setter
  def engine_force(self,  value:float)->None:
    """"""
    pass
  @property
  def brake(self)->float:
    """"""
    pass
  @brake.setter
  def brake(self,  value:float)->None:
    """"""
    pass
  @property
  def steering(self)->float:
    """"""
    pass
  @steering.setter
  def steering(self,  value:float)->None:
    """"""
    pass
  def set_engine_force(self, engine_force:float)->None:
    """"""
    pass

  def get_engine_force(self)->float:
    """"""
    pass

  def set_brake(self, brake:float)->None:
    """"""
    pass

  def get_brake(self)->float:
    """"""
    pass

  def set_steering(self, steering:float)->None:
    """"""
    pass

  def get_steering(self)->float:
    """"""
    pass


