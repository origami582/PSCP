from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.Range as __range__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.Container as __container__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.Label as __label__
import py4godot.classes.LabelSettings as __labelsettings__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Tree as __tree__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Panel as __panel__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.Slider as __slider__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Control as __control__
import py4godot.classes.Button as __button__
import py4godot.classes.GridContainer as __gridcontainer__



class Label(__control__.Control):
  """
		A control for displaying plain text. It gives you control over the horizontal and vertical alignment and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics, or other rich text formatting. For that, use `RichTextLabel` instead.
	"""

  @staticmethod
  def constructor()->Label:pass



  @staticmethod
  def cast(other:__object__.Object)->Label:pass


  @property
  def text(self)->str:
    """"""
    pass
  @text.setter
  def text(self,  value:str)->None:
    """"""
    pass
  @property
  def label_settings(self)->__labelsettings__.LabelSettings:
    """"""
    pass
  @label_settings.setter
  def label_settings(self,  value:__labelsettings__.LabelSettings)->None:
    """"""
    pass
  @property
  def horizontal_alignment(self)->int:
    """"""
    pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def vertical_alignment(self)->int:
    """"""
    pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def autowrap_mode(self)->int:
    """"""
    pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def justification_flags(self)->int:
    """"""
    pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None:
    """"""
    pass
  @property
  def paragraph_separator(self)->str:
    """"""
    pass
  @paragraph_separator.setter
  def paragraph_separator(self,  value:str)->None:
    """"""
    pass
  @property
  def clip_text(self)->bool:
    """"""
    pass
  @clip_text.setter
  def clip_text(self,  value:bool)->None:
    """"""
    pass
  @property
  def text_overrun_behavior(self)->int:
    """"""
    pass
  @text_overrun_behavior.setter
  def text_overrun_behavior(self,  value:int)->None:
    """"""
    pass
  @property
  def ellipsis_char(self)->str:
    """"""
    pass
  @ellipsis_char.setter
  def ellipsis_char(self,  value:str)->None:
    """"""
    pass
  @property
  def uppercase(self)->bool:
    """"""
    pass
  @uppercase.setter
  def uppercase(self,  value:bool)->None:
    """"""
    pass
  @property
  def tab_stops(self)->__core__.PackedFloat32Array:
    """"""
    pass
  @tab_stops.setter
  def tab_stops(self,  value:__core__.PackedFloat32Array)->None:
    """"""
    pass
  @property
  def lines_skipped(self)->int:
    """"""
    pass
  @lines_skipped.setter
  def lines_skipped(self,  value:int)->None:
    """"""
    pass
  @property
  def max_lines_visible(self)->int:
    """"""
    pass
  @max_lines_visible.setter
  def max_lines_visible(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_characters(self)->int:
    """"""
    pass
  @visible_characters.setter
  def visible_characters(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_characters_behavior(self)->int:
    """"""
    pass
  @visible_characters_behavior.setter
  def visible_characters_behavior(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_ratio(self)->float:
    """"""
    pass
  @visible_ratio.setter
  def visible_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def text_direction(self)->int:
    """"""
    pass
  @text_direction.setter
  def text_direction(self,  value:int)->None:
    """"""
    pass
  @property
  def language(self)->str:
    """"""
    pass
  @language.setter
  def language(self,  value:str)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override(self)->int:
    """"""
    pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def set_vertical_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_vertical_alignment(self)->int:
    """"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def set_label_settings(self, settings:__labelsettings__.LabelSettings)->None:
    """"""
    pass

  def get_label_settings(self)->__labelsettings__.LabelSettings:
    """"""
    pass

  def set_text_direction(self, direction:int )->None:
    """"""
    pass

  def get_text_direction(self)->int:
    """"""
    pass

  def set_language(self, language:str)->None:
    """"""
    pass

  def get_language(self)->str:
    """"""
    pass

  def set_paragraph_separator(self, paragraph_separator:str)->None:
    """"""
    pass

  def get_paragraph_separator(self)->str:
    """"""
    pass

  def set_autowrap_mode(self, autowrap_mode:int )->None:
    """"""
    pass

  def get_autowrap_mode(self)->int:
    """"""
    pass

  def set_justification_flags(self, justification_flags:int)->None:
    """"""
    pass

  def get_justification_flags(self)->int:
    """"""
    pass

  def set_clip_text(self, enable:bool)->None:
    """"""
    pass

  def is_clipping_text(self)->bool:
    """"""
    pass

  def set_tab_stops(self, tab_stops:__core__.PackedFloat32Array)->None:
    """"""
    pass

  def get_tab_stops(self)->__core__.PackedFloat32Array:
    """"""
    pass

  def set_text_overrun_behavior(self, overrun_behavior:int )->None:
    """"""
    pass

  def get_text_overrun_behavior(self)->int:
    """"""
    pass

  def set_ellipsis_char(self, char:str)->None:
    """"""
    pass

  def get_ellipsis_char(self)->str:
    """"""
    pass

  def set_uppercase(self, enable:bool)->None:
    """"""
    pass

  def is_uppercase(self)->bool:
    """"""
    pass

  def get_line_height(self, line:int=-1)->int:
    """
				Returns the height of the line `line`.
				If `line` is set to `-1`, returns the biggest line height.
				If there are no lines, returns font size in pixels.
			"""
    pass

  def get_line_count(self)->int:
    """
				Returns the number of lines of text the Label has.
			"""
    pass

  def get_visible_line_count(self)->int:
    """
				Returns the number of lines shown. Useful if the `Label`'s height cannot currently display all lines.
			"""
    pass

  def get_total_character_count(self)->int:
    """
				Returns the total number of printable characters in the text (excluding spaces and newlines).
			"""
    pass

  def set_visible_characters(self, amount:int)->None:
    """"""
    pass

  def get_visible_characters(self)->int:
    """"""
    pass

  def get_visible_characters_behavior(self)->int:
    """"""
    pass

  def set_visible_characters_behavior(self, behavior:int )->None:
    """"""
    pass

  def set_visible_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_visible_ratio(self)->float:
    """"""
    pass

  def set_lines_skipped(self, lines_skipped:int)->None:
    """"""
    pass

  def get_lines_skipped(self)->int:
    """"""
    pass

  def set_max_lines_visible(self, lines_visible:int)->None:
    """"""
    pass

  def get_max_lines_visible(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override(self, parser:int )->None:
    """"""
    pass

  def get_structured_text_bidi_override(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None:
    """"""
    pass

  def get_structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass

  def get_character_bounds(self, pos:int)->__core__.Rect2:
    """
				Returns the bounding rectangle of the character at position `pos` in the label's local coordinate system. If the character is a non-visual character or `pos` is outside the valid range, an empty `Rect2` is returned. If the character is a part of a composite grapheme, the bounding rectangle of the whole grapheme is returned.
			"""
    pass


