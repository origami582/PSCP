from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape3D as __shape3d__



class ConvexPolygonShape3D(__shape3d__.Shape3D):
  """
		A 3D convex polyhedron shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`.
		`ConvexPolygonShape3D` is _solid_, which means it detects collisions from objects that are fully inside it, unlike `ConcavePolygonShape3D` which is hollow. This makes it more suitable for both detection and physics.
		**Convex decomposition:** A concave polyhedron can be split up into several convex polyhedra. This allows dynamic physics bodies to have complex concave collisions (at a performance cost) and can be achieved by using several `ConvexPolygonShape3D` nodes. To generate a convex decomposition from a mesh, select the `MeshInstance3D` node, go to the **Mesh** menu that appears above the viewport, and choose **Create Multiple Convex Collision Siblings**. Alternatively, `MeshInstance3D.create_multiple_convex_collisions` can be called in a script to perform this decomposition at run-time.
		**Performance:** `ConvexPolygonShape3D` is faster to check collisions against compared to `ConcavePolygonShape3D`, but it is slower than primitive collision shapes such as `SphereShape3D` and `BoxShape3D`. Its use should generally be limited to medium-sized objects that cannot have their collision accurately represented by primitive shapes.
	"""

  @staticmethod
  def constructor()->ConvexPolygonShape3D:pass



  @staticmethod
  def cast(other:__object__.Object)->ConvexPolygonShape3D:pass


  @property
  def points(self)->__core__.Array:
    """"""
    pass
  @points.setter
  def points(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_points(self, points:__core__.PackedVector3Array)->None:
    """"""
    pass

  def get_points(self)->__core__.PackedVector3Array:
    """"""
    pass


