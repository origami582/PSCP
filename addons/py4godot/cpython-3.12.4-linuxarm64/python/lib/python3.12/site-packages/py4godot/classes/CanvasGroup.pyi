from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D as __node2d__



class CanvasGroup(__node2d__.Node2D):
  """
		Child `CanvasItem` nodes of a `CanvasGroup` are drawn as a single object. It allows to e.g. draw overlapping translucent 2D nodes without blending (set `CanvasItem.self_modulate` property of `CanvasGroup` to achieve this effect).
		**Note:** The `CanvasGroup` uses a custom shader to read from the backbuffer to draw its children. Assigning a `Material` to the `CanvasGroup` overrides the builtin shader. To duplicate the behavior of the builtin shader in a custom `Shader` use the following:
		```gdscript
		shader_type canvas_item;
		render_mode unshaded;

		uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

		void fragment() {
			vec4 c = textureLod(screen_texture, SCREEN_UV, 0.0);

			if (c.a > 0.0001) {
				c.rgb /= c.a;
			}

			COLOR *= c;
		}
		```
		**Note:** Since `CanvasGroup` and `CanvasItem.clip_children` both utilize the backbuffer, children of a `CanvasGroup` who have their `CanvasItem.clip_children` set to anything other than `constant CanvasItem.CLIP_CHILDREN_DISABLED` will not function correctly.
	"""

  @staticmethod
  def constructor()->CanvasGroup:pass



  @staticmethod
  def cast(other:__object__.Object)->CanvasGroup:pass


  @property
  def fit_margin(self)->float:
    """"""
    pass
  @fit_margin.setter
  def fit_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def clear_margin(self)->float:
    """"""
    pass
  @clear_margin.setter
  def clear_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def use_mipmaps(self)->bool:
    """"""
    pass
  @use_mipmaps.setter
  def use_mipmaps(self,  value:bool)->None:
    """"""
    pass
  def set_fit_margin(self, fit_margin:float)->None:
    """"""
    pass

  def get_fit_margin(self)->float:
    """"""
    pass

  def set_clear_margin(self, clear_margin:float)->None:
    """"""
    pass

  def get_clear_margin(self)->float:
    """"""
    pass

  def set_use_mipmaps(self, use_mipmaps:bool)->None:
    """"""
    pass

  def is_using_mipmaps(self)->bool:
    """"""
    pass


