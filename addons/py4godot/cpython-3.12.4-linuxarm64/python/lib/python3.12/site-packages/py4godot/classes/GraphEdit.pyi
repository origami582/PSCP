from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.D as __d__
import py4godot.classes.a as __a__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.S as __s__
import py4godot.classes.Object as __object__
import py4godot.classes.m as __m__
import py4godot.classes.i as __i__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.e as __e__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.g as __g__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.N as __n__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.Node as __node__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.y as __y__
import py4godot.classes.Control as __control__


class PanningScheme:
  SCROLL_ZOOMS:int = 0
  SCROLL_PANS:int = 1
class GridPattern:
  GRID_PATTERN_LINES:int = 0
  GRID_PATTERN_DOTS:int = 1


class GraphEdit(__control__.Control):
  """
		`GraphEdit` provides tools for creation, manipulation, and display of various graphs. Its main purpose in the engine is to power the visual programming systems, such as visual shaders, but it is also available for use in user projects.
		`GraphEdit` by itself is only an empty container, representing an infinite grid where `GraphNode`s can be placed. Each `GraphNode` represents a node in the graph, a single unit of data in the connected scheme. `GraphEdit`, in turn, helps to control various interactions with nodes and between nodes. When the user attempts to connect, disconnect, or delete a `GraphNode`, a signal is emitted in the `GraphEdit`, but no action is taken by default. It is the responsibility of the programmer utilizing this control to implement the necessary logic to determine how each request should be handled.
		**Performance:** It is greatly advised to enable low-processor usage mode (see `OS.low_processor_usage_mode`) when using GraphEdits.
		**Note:** Keep in mind that `Node.get_children` will also return the connection layer node named `_connection_layer` due to technical limitations. This behavior may change in future releases.
	"""
  connection_request: BuiltinSignal
  disconnection_request: BuiltinSignal
  connection_to_empty: BuiltinSignal
  connection_from_empty: BuiltinSignal
  connection_drag_started: BuiltinSignal
  connection_drag_ended: BuiltinSignal
  copy_nodes_request: BuiltinSignal
  cut_nodes_request: BuiltinSignal
  paste_nodes_request: BuiltinSignal
  duplicate_nodes_request: BuiltinSignal
  delete_nodes_request: BuiltinSignal
  node_selected: BuiltinSignal
  node_deselected: BuiltinSignal
  frame_rect_changed: BuiltinSignal
  popup_request: BuiltinSignal
  begin_node_move: BuiltinSignal
  end_node_move: BuiltinSignal
  graph_elements_linked_to_frame_request: BuiltinSignal
  scroll_offset_changed: BuiltinSignal

  @staticmethod
  def constructor()->GraphEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphEdit:pass


  @property
  def scroll_offset(self)->__core__.Vector2:
    """"""
    pass
  @scroll_offset.setter
  def scroll_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def show_grid(self)->bool:
    """"""
    pass
  @show_grid.setter
  def show_grid(self,  value:bool)->None:
    """"""
    pass
  @property
  def grid_pattern(self)->int:
    """"""
    pass
  @grid_pattern.setter
  def grid_pattern(self,  value:int)->None:
    """"""
    pass
  @property
  def snapping_enabled(self)->bool:
    """"""
    pass
  @snapping_enabled.setter
  def snapping_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def snapping_distance(self)->int:
    """"""
    pass
  @snapping_distance.setter
  def snapping_distance(self,  value:int)->None:
    """"""
    pass
  @property
  def panning_scheme(self)->int:
    """"""
    pass
  @panning_scheme.setter
  def panning_scheme(self,  value:int)->None:
    """"""
    pass
  @property
  def right_disconnects(self)->bool:
    """"""
    pass
  @right_disconnects.setter
  def right_disconnects(self,  value:bool)->None:
    """"""
    pass
  @property
  def connection_lines_curvature(self)->float:
    """"""
    pass
  @connection_lines_curvature.setter
  def connection_lines_curvature(self,  value:float)->None:
    """"""
    pass
  @property
  def connection_lines_thickness(self)->float:
    """"""
    pass
  @connection_lines_thickness.setter
  def connection_lines_thickness(self,  value:float)->None:
    """"""
    pass
  @property
  def connection_lines_antialiased(self)->bool:
    """"""
    pass
  @connection_lines_antialiased.setter
  def connection_lines_antialiased(self,  value:bool)->None:
    """"""
    pass
  @property
  def connections(self)->typedarray::27/0::
    """"""
    pass
  @connections.setter
  def connections(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def zoom(self)->float:
    """"""
    pass
  @zoom.setter
  def zoom(self,  value:float)->None:
    """"""
    pass
  @property
  def zoom_min(self)->float:
    """"""
    pass
  @zoom_min.setter
  def zoom_min(self,  value:float)->None:
    """"""
    pass
  @property
  def zoom_max(self)->float:
    """"""
    pass
  @zoom_max.setter
  def zoom_max(self,  value:float)->None:
    """"""
    pass
  @property
  def zoom_step(self)->float:
    """"""
    pass
  @zoom_step.setter
  def zoom_step(self,  value:float)->None:
    """"""
    pass
  @property
  def minimap_enabled(self)->bool:
    """"""
    pass
  @minimap_enabled.setter
  def minimap_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def minimap_size(self)->__core__.Vector2:
    """"""
    pass
  @minimap_size.setter
  def minimap_size(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def minimap_opacity(self)->float:
    """"""
    pass
  @minimap_opacity.setter
  def minimap_opacity(self,  value:float)->None:
    """"""
    pass
  @property
  def show_menu(self)->bool:
    """"""
    pass
  @show_menu.setter
  def show_menu(self,  value:bool)->None:
    """"""
    pass
  @property
  def show_zoom_label(self)->bool:
    """"""
    pass
  @show_zoom_label.setter
  def show_zoom_label(self,  value:bool)->None:
    """"""
    pass
  @property
  def show_zoom_buttons(self)->bool:
    """"""
    pass
  @show_zoom_buttons.setter
  def show_zoom_buttons(self,  value:bool)->None:
    """"""
    pass
  @property
  def show_grid_buttons(self)->bool:
    """"""
    pass
  @show_grid_buttons.setter
  def show_grid_buttons(self,  value:bool)->None:
    """"""
    pass
  @property
  def show_minimap_button(self)->bool:
    """"""
    pass
  @show_minimap_button.setter
  def show_minimap_button(self,  value:bool)->None:
    """"""
    pass
  @property
  def show_arrange_button(self)->bool:
    """"""
    pass
  @show_arrange_button.setter
  def show_arrange_button(self,  value:bool)->None:
    """"""
    pass
  def _is_in_input_hotzone(self, in_node:__object__.Object, in_port:int, mouse_position:__core__.Vector2)->bool:
    """
				Returns whether the `mouse_position` is in the input hot zone.
				By default, a hot zone is a `Rect2` positioned such that its center is at `in_node`.`GraphNode.get_input_port_position`(`in_port`) (For output's case, call `GraphNode.get_output_port_position` instead). The hot zone's width is twice the Theme Property `port_grab_distance_horizontal`, and its height is twice the `port_grab_distance_vertical`.
				Below is a sample code to help get started:
				```gdscript
				func _is_in_input_hotzone(in_node, in_port, mouse_position):
					var port_size = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
					var port_pos = in_node.get_position() + in_node.get_input_port_position(in_port) - port_size / 2
					var rect = Rect2(port_pos, port_size)

					return rect.has_point(mouse_position)
				```
			"""
    pass

  def _is_in_output_hotzone(self, in_node:__object__.Object, in_port:int, mouse_position:__core__.Vector2)->bool:
    """
				Returns whether the `mouse_position` is in the output hot zone. For more information on hot zones, see `_is_in_input_hotzone`.
				Below is a sample code to help get started:
				```gdscript
				func _is_in_output_hotzone(in_node, in_port, mouse_position):
					var port_size = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
					var port_pos = in_node.get_position() + in_node.get_output_port_position(in_port) - port_size / 2
					var rect = Rect2(port_pos, port_size)

					return rect.has_point(mouse_position)
				```
			"""
    pass

  def _get_connection_line(self, from_position:__core__.Vector2, to_position:__core__.Vector2)->__core__.PackedVector2Array:
    """
				Virtual method which can be overridden to customize how connections are drawn.
			"""
    pass

  def _is_node_hover_valid(self, from_node:__core__.StringName|str, from_port:int, to_node:__core__.StringName|str, to_port:int)->bool:
    """
				This virtual method can be used to insert additional error detection while the user is dragging a connection over a valid port.
				Return `true` if the connection is indeed valid or return `false` if the connection is impossible. If the connection is impossible, no snapping to the port and thus no connection request to that port will happen.
				In this example a connection to same node is suppressed:
				
				```gdscript
				func _is_node_hover_valid(from, from_port, to, to_port):
					return from != to
				```
				
				
			"""
    pass

  def connect_node(self, from_node:__core__.StringName|str, from_port:int, to_node:__core__.StringName|str, to_port:int, keep_alive:bool=False)->int:
    """
				Create a connection between the `from_port` of the `from_node` `GraphNode` and the `to_port` of the `to_node` `GraphNode`. If the connection already exists, no connection is created.
				Connections with `keep_alive` set to `false` may be deleted automatically if invalid during a redraw.
			"""
    pass

  def is_node_connected(self, from_node:__core__.StringName|str, from_port:int, to_node:__core__.StringName|str, to_port:int)->bool:
    """
				Returns `true` if the `from_port` of the `from_node` `GraphNode` is connected to the `to_port` of the `to_node` `GraphNode`.
			"""
    pass

  def disconnect_node(self, from_node:__core__.StringName|str, from_port:int, to_node:__core__.StringName|str, to_port:int)->None:
    """
				Removes the connection between the `from_port` of the `from_node` `GraphNode` and the `to_port` of the `to_node` `GraphNode`. If the connection does not exist, no connection is removed.
			"""
    pass

  def set_connection_activity(self, from_node:__core__.StringName|str, from_port:int, to_node:__core__.StringName|str, to_port:int, amount:float)->None:
    """
				Sets the coloration of the connection between `from_node`'s `from_port` and `to_node`'s `to_port` with the color provided in the `theme_item activity` theme property. The color is linearly interpolated between the connection color and the activity color using `amount` as weight.
			"""
    pass

  def set_connections(self, connections:__core__.Array)->None:
    """"""
    pass

  def get_connection_list(self)->typedarray::Dictionary:
    """"""
    pass

  def get_connection_count(self, from_node:__core__.StringName|str, from_port:int)->int:
    """
				Returns the number of connections from `from_port` of `from_node`.
			"""
    pass

  def get_closest_connection_at_point(self, point:__core__.Vector2, max_distance:float=4.0)->__core__.Dictionary:
    """
				Returns the closest connection to the given point in screen space. If no connection is found within `max_distance` pixels, an empty `Dictionary` is returned.
				A connection is represented as a `Dictionary` in the form of:
				```gdscript
				{
					from_node: StringName,
					from_port: int,
					to_node: StringName,
					to_port: int,
					keep_alive: bool
				}
				```
				For example, getting a connection at a given mouse position can be achieved like this:
				
				```gdscript
				var connection = get_closest_connection_at_point(mouse_event.get_position())
				```
				
			"""
    pass

  def get_connections_intersecting_with_rect(self, rect:__core__.Rect2)->typedarray::Dictionary:
    """
				Returns an `Array` containing the list of connections that intersect with the given `Rect2`.
				A connection is represented as a `Dictionary` in the form of:
				```gdscript
				{
					from_node: StringName,
					from_port: int,
					to_node: StringName,
					to_port: int,
					keep_alive: bool
				}
				```
			"""
    pass

  def clear_connections(self)->None:
    """
				Removes all connections between nodes.
			"""
    pass

  def force_connection_drag_end(self)->None:
    """
				Ends the creation of the current connection. In other words, if you are dragging a connection you can use this method to abort the process and remove the line that followed your cursor.
				This is best used together with `signal connection_drag_started` and `signal connection_drag_ended` to add custom behavior like node addition through shortcuts.
				**Note:** This method suppresses any other connection request signals apart from `signal connection_drag_ended`.
			"""
    pass

  def get_scroll_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_scroll_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def add_valid_right_disconnect_type(self, type:int)->None:
    """
				Allows to disconnect nodes when dragging from the right port of the `GraphNode`'s slot if it has the specified type. See also `remove_valid_right_disconnect_type`.
			"""
    pass

  def remove_valid_right_disconnect_type(self, type:int)->None:
    """
				Disallows to disconnect nodes when dragging from the right port of the `GraphNode`'s slot if it has the specified type. Use this to disable disconnection previously allowed with `add_valid_right_disconnect_type`.
			"""
    pass

  def add_valid_left_disconnect_type(self, type:int)->None:
    """
				Allows to disconnect nodes when dragging from the left port of the `GraphNode`'s slot if it has the specified type. See also `remove_valid_left_disconnect_type`.
			"""
    pass

  def remove_valid_left_disconnect_type(self, type:int)->None:
    """
				Disallows to disconnect nodes when dragging from the left port of the `GraphNode`'s slot if it has the specified type. Use this to disable disconnection previously allowed with `add_valid_left_disconnect_type`.
			"""
    pass

  def add_valid_connection_type(self, from_type:int, to_type:int)->None:
    """
				Allows the connection between two different port types. The port type is defined individually for the left and the right port of each slot with the `GraphNode.set_slot` method.
				See also `is_valid_connection_type` and `remove_valid_connection_type`.
			"""
    pass

  def remove_valid_connection_type(self, from_type:int, to_type:int)->None:
    """
				Disallows the connection between two different port types previously allowed by `add_valid_connection_type`. The port type is defined individually for the left and the right port of each slot with the `GraphNode.set_slot` method.
				See also `is_valid_connection_type`.
			"""
    pass

  def is_valid_connection_type(self, from_type:int, to_type:int)->bool:
    """
				Returns whether it's possible to make a connection between two different port types. The port type is defined individually for the left and the right port of each slot with the `GraphNode.set_slot` method.
				See also `add_valid_connection_type` and `remove_valid_connection_type`.
			"""
    pass

  def get_connection_line(self, from_node:__core__.Vector2, to_node:__core__.Vector2)->__core__.PackedVector2Array:
    """
				Returns the points which would make up a connection between `from_node` and `to_node`.
			"""
    pass

  def attach_graph_element_to_frame(self, element:__core__.StringName|str, frame:__core__.StringName|str)->None:
    """
				Attaches the `element` `GraphElement` to the `frame` `GraphFrame`.
			"""
    pass

  def detach_graph_element_from_frame(self, element:__core__.StringName|str)->None:
    """
				Detaches the `element` `GraphElement` from the `GraphFrame` it is currently attached to.
			"""
    pass

  def get_element_frame(self, element:__core__.StringName|str)->__graphframe__.GraphFrame:
    """
				Returns the `GraphFrame` that contains the `GraphElement` with the given name.
			"""
    pass

  def get_attached_nodes_of_frame(self, frame:__core__.StringName|str)->typedarray::StringName:
    """
				Returns an array of node names that are attached to the `GraphFrame` with the given name.
			"""
    pass

  def set_panning_scheme(self, scheme:int )->None:
    """"""
    pass

  def get_panning_scheme(self)->int:
    """"""
    pass

  def set_zoom(self, zoom:float)->None:
    """"""
    pass

  def get_zoom(self)->float:
    """"""
    pass

  def set_zoom_min(self, zoom_min:float)->None:
    """"""
    pass

  def get_zoom_min(self)->float:
    """"""
    pass

  def set_zoom_max(self, zoom_max:float)->None:
    """"""
    pass

  def get_zoom_max(self)->float:
    """"""
    pass

  def set_zoom_step(self, zoom_step:float)->None:
    """"""
    pass

  def get_zoom_step(self)->float:
    """"""
    pass

  def set_show_grid(self, enable:bool)->None:
    """"""
    pass

  def is_showing_grid(self)->bool:
    """"""
    pass

  def set_grid_pattern(self, pattern:int )->None:
    """"""
    pass

  def get_grid_pattern(self)->int:
    """"""
    pass

  def set_snapping_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_snapping_enabled(self)->bool:
    """"""
    pass

  def set_snapping_distance(self, pixels:int)->None:
    """"""
    pass

  def get_snapping_distance(self)->int:
    """"""
    pass

  def set_connection_lines_curvature(self, curvature:float)->None:
    """"""
    pass

  def get_connection_lines_curvature(self)->float:
    """"""
    pass

  def set_connection_lines_thickness(self, pixels:float)->None:
    """"""
    pass

  def get_connection_lines_thickness(self)->float:
    """"""
    pass

  def set_connection_lines_antialiased(self, pixels:bool)->None:
    """"""
    pass

  def is_connection_lines_antialiased(self)->bool:
    """"""
    pass

  def set_minimap_size(self, size:__core__.Vector2)->None:
    """"""
    pass

  def get_minimap_size(self)->__core__.Vector2:
    """"""
    pass

  def set_minimap_opacity(self, opacity:float)->None:
    """"""
    pass

  def get_minimap_opacity(self)->float:
    """"""
    pass

  def set_minimap_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_minimap_enabled(self)->bool:
    """"""
    pass

  def set_show_menu(self, hidden:bool)->None:
    """"""
    pass

  def is_showing_menu(self)->bool:
    """"""
    pass

  def set_show_zoom_label(self, enable:bool)->None:
    """"""
    pass

  def is_showing_zoom_label(self)->bool:
    """"""
    pass

  def set_show_grid_buttons(self, hidden:bool)->None:
    """"""
    pass

  def is_showing_grid_buttons(self)->bool:
    """"""
    pass

  def set_show_zoom_buttons(self, hidden:bool)->None:
    """"""
    pass

  def is_showing_zoom_buttons(self)->bool:
    """"""
    pass

  def set_show_minimap_button(self, hidden:bool)->None:
    """"""
    pass

  def is_showing_minimap_button(self)->bool:
    """"""
    pass

  def set_show_arrange_button(self, hidden:bool)->None:
    """"""
    pass

  def is_showing_arrange_button(self)->bool:
    """"""
    pass

  def set_right_disconnects(self, enable:bool)->None:
    """"""
    pass

  def is_right_disconnects_enabled(self)->bool:
    """"""
    pass

  def get_menu_hbox(self)->__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorresourcepicker__.EditorResourcePicker|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__editorscriptpicker__.EditorScriptPicker|__editortoaster__.EditorToaster|__hboxcontainer__.HBoxContainer:
    """
				Gets the `HBoxContainer` that contains the zooming and grid snap controls in the top left of the graph. You can use this method to reposition the toolbar or to add your own custom controls to it.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def arrange_nodes(self)->None:
    """
				Rearranges selected nodes in a layout with minimum crossings between connections and uniform horizontal and vertical gap between nodes.
			"""
    pass

  def set_selected(self, node:__node__.Node)->None:
    """
				Sets the specified `node` as the one selected.
			"""
    pass


