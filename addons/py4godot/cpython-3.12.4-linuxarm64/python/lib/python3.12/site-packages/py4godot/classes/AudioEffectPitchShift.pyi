from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.AudioEffectPitchShift as __audioeffectpitchshift__


class FFTSize:
  FFT_SIZE_256:int = 0
  FFT_SIZE_512:int = 1
  FFT_SIZE_1024:int = 2
  FFT_SIZE_2048:int = 3
  FFT_SIZE_4096:int = 4
  FFT_SIZE_MAX:int = 5


class AudioEffectPitchShift(__audioeffect__.AudioEffect):
  """
		Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.
	"""

  @staticmethod
  def constructor()->AudioEffectPitchShift:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectPitchShift:pass


  @property
  def pitch_scale(self)->float:
    """"""
    pass
  @pitch_scale.setter
  def pitch_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def oversampling(self)->float:
    """"""
    pass
  @oversampling.setter
  def oversampling(self,  value:float)->None:
    """"""
    pass
  @property
  def fft_size(self)->int:
    """"""
    pass
  @fft_size.setter
  def fft_size(self,  value:int)->None:
    """"""
    pass
  def set_pitch_scale(self, rate:float)->None:
    """"""
    pass

  def get_pitch_scale(self)->float:
    """"""
    pass

  def set_oversampling(self, amount:int)->None:
    """"""
    pass

  def get_oversampling(self)->int:
    """"""
    pass

  def set_fft_size(self, size:int )->None:
    """"""
    pass

  def get_fft_size(self)->int:
    """"""
    pass


