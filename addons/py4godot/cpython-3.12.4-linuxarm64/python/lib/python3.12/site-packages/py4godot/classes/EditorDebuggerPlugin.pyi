from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorDebuggerSession as __editordebuggersession__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.Script as __script__



class EditorDebuggerPlugin(__refcounted__.RefCounted):
  """
		`EditorDebuggerPlugin` provides functions related to the editor side of the debugger.
		To interact with the debugger, an instance of this class must be added to the editor via `EditorPlugin.add_debugger_plugin`.
		Once added, the `_setup_session` callback will be called for every `EditorDebuggerSession` available to the plugin, and when new ones are created (the sessions may be inactive during this stage).
		You can retrieve the available `EditorDebuggerSession`s via `get_sessions` or get a specific one via `get_session`.
		
		```gdscript
		@tool
		extends EditorPlugin

		class ExampleEditorDebugger extends EditorDebuggerPlugin:

			func _has_capture(capture):
				# Return true if you wish to handle messages with the prefix "my_plugin:".
				return capture == "my_plugin"

			func _capture(message, data, session_id):
				if message == "my_plugin:ping":
					get_session(session_id).send_message("my_plugin:echo", data)
					return true
				return false

			func _setup_session(session_id):
				# Add a new tab in the debugger session UI containing a label.
				var label = Label.new()
				label.name = "Example plugin" # Will be used as the tab title.
				label.text = "Example plugin"
				var session = get_session(session_id)
				# Listens to the session started and stopped signals.
				session.started.connect(func (): print("Session started"))
				session.stopped.connect(func (): print("Session stopped"))
				session.add_session_tab(label)

		var debugger = ExampleEditorDebugger.new()

		func _enter_tree():
			add_debugger_plugin(debugger)

		func _exit_tree():
			remove_debugger_plugin(debugger)
		```
		
		To connect on the running game side, use the `EngineDebugger` singleton:
		
		```gdscript
		extends Node

		func _ready():
			EngineDebugger.register_message_capture("my_plugin", _capture)
			EngineDebugger.send_message("my_plugin:ping", `"test"`)

		func _capture(message, data):
			# Note that the "my_plugin:" prefix is not used here.
			if message == "echo":
				prints("Echo received:", data)
				return true
			return false
		```
		
		**Note:** While the game is running, `@GlobalScope.print` and similar functions _called in the editor_ do not print anything, the Output Log prints only game messages.
	"""

  @staticmethod
  def constructor()->EditorDebuggerPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorDebuggerPlugin:pass


  def _setup_session(self, session_id:int)->None:
    """
				Override this method to be notified whenever a new `EditorDebuggerSession` is created. Note that the session may be inactive during this stage.
			"""
    pass

  def _has_capture(self, capture:str)->bool:
    """
				Override this method to enable receiving messages from the debugger. If `capture` is "my_message" then messages starting with "my_message:" will be passed to the `_capture` method.
			"""
    pass

  def _capture(self, message:str, data:__core__.Array, session_id:int)->bool:
    """
				Override this method to process incoming messages. The `session_id` is the ID of the `EditorDebuggerSession` that received the `message`. Use `get_session` to retrieve the session. This method should return `true` if the message is recognized.
			"""
    pass

  def _goto_script_line(self, script:__script__.Script, line:int)->None:
    """
				Override this method to be notified when a breakpoint line has been clicked in the debugger breakpoint panel.
			"""
    pass

  def _breakpoints_cleared_in_tree(self)->None:
    """
				Override this method to be notified when all breakpoints are cleared in the editor.
			"""
    pass

  def _breakpoint_set_in_tree(self, script:__script__.Script, line:int, enabled:bool)->None:
    """
				Override this method to be notified when a breakpoint is set in the editor.
			"""
    pass

  def get_session(self, id:int)->__editordebuggersession__.EditorDebuggerSession:
    """
				Returns the `EditorDebuggerSession` with the given `id`.
			"""
    pass

  def get_sessions(self)->__core__.Array:
    """
				Returns an array of `EditorDebuggerSession` currently available to this debugger plugin.
				**Note:** Sessions in the array may be inactive, check their state via `EditorDebuggerSession.is_active`.
			"""
    pass


