from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2DStackHolder as __skeletonmodification2dstackholder__
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__
import py4godot.classes.SkeletonModification2DFABRIK as __skeletonmodification2dfabrik__
import py4godot.classes.SkeletonModification2DJiggle as __skeletonmodification2djiggle__
import py4godot.classes.SkeletonModification2DCCDIK as __skeletonmodification2dccdik__
import py4godot.classes.SkeletonModification2DPhysicalBones as __skeletonmodification2dphysicalbones__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.SkeletonModification2DTwoBoneIK as __skeletonmodification2dtwoboneik__
import py4godot.classes.SkeletonModification2DLookAt as __skeletonmodification2dlookat__



class SkeletonModificationStack2D(__resource__.Resource):
  """
		This resource is used by the Skeleton and holds a stack of `SkeletonModification2D`s.
		This controls the order of the modifications and how they are applied. Modification order is especially important for full-body IK setups, as you need to execute the modifications in the correct order to get the desired results. For example, you want to execute a modification on the spine _before_ the arms on a humanoid skeleton.
		This resource also controls how strongly all of the modifications are applied to the `Skeleton2D`.
	"""

  @staticmethod
  def constructor()->SkeletonModificationStack2D:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModificationStack2D:pass


  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def strength(self)->float:
    """"""
    pass
  @strength.setter
  def strength(self,  value:float)->None:
    """"""
    pass
  @property
  def modification_count(self)->int:
    """"""
    pass
  @modification_count.setter
  def modification_count(self,  value:int)->None:
    """"""
    pass
  def setup(self)->None:
    """
				Sets up the modification stack so it can execute. This function should be called by `Skeleton2D` and shouldn't be manually called unless you know what you are doing.
			"""
    pass

  def execute(self, delta:float, execution_mode:int)->None:
    """
				Executes all of the `SkeletonModification2D`s in the stack that use the same execution mode as the passed-in `execution_mode`, starting from index `0` to `modification_count`.
				**Note:** The order of the modifications can matter depending on the modifications. For example, modifications on a spine should operate before modifications on the arms in order to get proper results.
			"""
    pass

  def enable_all_modifications(self, enabled:bool)->None:
    """
				Enables all `SkeletonModification2D`s in the stack.
			"""
    pass

  def get_modification(self, mod_idx:int)->__skeletonmodification2dstackholder__.SkeletonModification2DStackHolder|__skeletonmodification2d__.SkeletonModification2D|__skeletonmodification2dfabrik__.SkeletonModification2DFABRIK|__skeletonmodification2djiggle__.SkeletonModification2DJiggle|__skeletonmodification2dccdik__.SkeletonModification2DCCDIK|__skeletonmodification2dphysicalbones__.SkeletonModification2DPhysicalBones|__skeletonmodification2dtwoboneik__.SkeletonModification2DTwoBoneIK|__skeletonmodification2dlookat__.SkeletonModification2DLookAt:
    """
				Returns the `SkeletonModification2D` at the passed-in index, `mod_idx`.
			"""
    pass

  def add_modification(self, modification:__skeletonmodification2d__.SkeletonModification2D)->None:
    """
				Adds the passed-in `SkeletonModification2D` to the stack.
			"""
    pass

  def delete_modification(self, mod_idx:int)->None:
    """
				Deletes the `SkeletonModification2D` at the index position `mod_idx`, if it exists.
			"""
    pass

  def set_modification(self, mod_idx:int, modification:__skeletonmodification2d__.SkeletonModification2D)->None:
    """
				Sets the modification at `mod_idx` to the passed-in modification, `modification`.
			"""
    pass

  def set_modification_count(self, count:int)->None:
    """"""
    pass

  def get_modification_count(self)->int:
    """"""
    pass

  def get_is_setup(self)->bool:
    """
				Returns a boolean that indicates whether the modification stack is setup and can execute.
			"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_enabled(self)->bool:
    """"""
    pass

  def set_strength(self, strength:float)->None:
    """"""
    pass

  def get_strength(self)->float:
    """"""
    pass

  def get_skeleton(self)->__skeleton2d__.Skeleton2D:
    """
				Returns the `Skeleton2D` node that the SkeletonModificationStack2D is bound to.
			"""
    pass


