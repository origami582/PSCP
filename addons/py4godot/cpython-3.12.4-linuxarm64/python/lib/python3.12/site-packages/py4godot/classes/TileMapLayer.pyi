from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.TileData as __tiledata__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.a as __a__
import py4godot.classes.V as __v__
import py4godot.classes.A as __a__
import py4godot.classes.d as __d__
import py4godot.classes.TileMapPattern as __tilemappattern__
import py4godot.classes.TileSet as __tileset__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.i as __i__
import py4godot.classes.p as __p__
import py4godot.classes.o as __o__
import py4godot.classes.y as __y__
import py4godot.classes.2 as __2__
import py4godot.classes.e as __e__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.T as __t__


class DebugVisibilityMode:
  DEBUG_VISIBILITY_MODE_DEFAULT:int = 0
  DEBUG_VISIBILITY_MODE_FORCE_HIDE:int = 2
  DEBUG_VISIBILITY_MODE_FORCE_SHOW:int = 1


class TileMapLayer(__node2d__.Node2D):
  """
		Node for 2D tile-based maps. A `TileMapLayer` uses a `TileSet` which contain a list of tiles which are used to create grid-based maps. Unlike the `TileMap` node, which is deprecated, `TileMapLayer` has only one layer of tiles. You can use several `TileMapLayer` to achieve the same result as a `TileMap` node.
		For performance reasons, all TileMap updates are batched at the end of a frame. Notably, this means that scene tiles from a `TileSetScenesCollectionSource` may be initialized after their parent. This is only queued when inside the scene tree.
		To force an update earlier on, call `update_internals`.
		**Note:** For performance and compatibility reasons, the coordinates serialized by `TileMapLayer` are limited to 16-bit signed integers, i.e. the range for X and Y coordinates is from `-32768` to `32767`. When saving tile data, tiles outside this range are wrapped.
	"""
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileMapLayer:pass



  @staticmethod
  def cast(other:__object__.Object)->TileMapLayer:pass


  @property
  def tile_map_data(self)->__core__.PackedByteArray:
    """"""
    pass
  @tile_map_data.setter
  def tile_map_data(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def tile_set(self)->__tileset__.TileSet:
    """"""
    pass
  @tile_set.setter
  def tile_set(self,  value:__tileset__.TileSet)->None:
    """"""
    pass
  @property
  def occlusion_enabled(self)->bool:
    """"""
    pass
  @occlusion_enabled.setter
  def occlusion_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def y_sort_origin(self)->int:
    """"""
    pass
  @y_sort_origin.setter
  def y_sort_origin(self,  value:int)->None:
    """"""
    pass
  @property
  def x_draw_order_reversed(self)->bool:
    """"""
    pass
  @x_draw_order_reversed.setter
  def x_draw_order_reversed(self,  value:bool)->None:
    """"""
    pass
  @property
  def rendering_quadrant_size(self)->int:
    """"""
    pass
  @rendering_quadrant_size.setter
  def rendering_quadrant_size(self,  value:int)->None:
    """"""
    pass
  @property
  def collision_enabled(self)->bool:
    """"""
    pass
  @collision_enabled.setter
  def collision_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_kinematic_bodies(self)->bool:
    """"""
    pass
  @use_kinematic_bodies.setter
  def use_kinematic_bodies(self,  value:bool)->None:
    """"""
    pass
  @property
  def collision_visibility_mode(self)->int:
    """"""
    pass
  @collision_visibility_mode.setter
  def collision_visibility_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def navigation_enabled(self)->bool:
    """"""
    pass
  @navigation_enabled.setter
  def navigation_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def navigation_visibility_mode(self)->int:
    """"""
    pass
  @navigation_visibility_mode.setter
  def navigation_visibility_mode(self,  value:int)->None:
    """"""
    pass
  def _use_tile_data_runtime_update(self, coords:__core__.Vector2i)->bool:
    """
				Should return `true` if the tile at coordinates `coords` requires a runtime update.
				**Warning:** Make sure this function only returns `true` when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty.
				**Note:** If the result of this function should change, use `notify_runtime_tile_data_update` to notify the `TileMapLayer` it needs an update.
			"""
    pass

  def _tile_data_runtime_update(self, coords:__core__.Vector2i, tile_data:__tiledata__.TileData)->None:
    """
				Called with a `TileData` object about to be used internally by the `TileMapLayer`, allowing its modification at runtime.
				This method is only called if `_use_tile_data_runtime_update` is implemented and returns `true` for the given tile `coords`.
				**Warning:** The `tile_data` object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources.
				**Note:** If the properties of `tile_data` object should change over time, use `notify_runtime_tile_data_update` to notify the `TileMapLayer` it needs an update.
			"""
    pass

  def _update_cells(self, coords:__core__.Array, forced_cleanup:bool)->None:
    """
				Called when this `TileMapLayer`'s cells need an internal update. This update may be caused from individual cells being modified or by a change in the `tile_set` (causing all cells to be queued for an update). The first call to this function is always for initializing all the `TileMapLayer`'s cells. `coords` contains the coordinates of all modified cells, roughly in the order they were modified. `forced_cleanup` is `true` when the `TileMapLayer`'s internals should be fully cleaned up. This is the case when:
				- The layer is disabled;
				- The layer is not visible;
				- `tile_set` is set to `null`;
				- The node is removed from the tree;
				- The node is freed.
				Note that any internal update happening while one of these conditions is verified is considered to be a "cleanup". See also `update_internals`.
				**Warning:** Implementing this method may degrade the `TileMapLayer`'s performance.
			"""
    pass

  def set_cell(self, coords:__core__.Vector2i, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=0)->None:
    """
				Sets the tile identifiers for the cell at coordinates `coords`. Each tile of the `TileSet` is identified using three parts:
				- The source identifier `source_id` identifies a `TileSetSource` identifier. See `TileSet.set_source_id`,
				- The atlas coordinate identifier `atlas_coords` identifies a tile coordinates in the atlas (if the source is a `TileSetAtlasSource`). For `TileSetScenesCollectionSource` it should always be `Vector2i(0, 0)`,
				- The alternative tile identifier `alternative_tile` identifies a tile alternative in the atlas (if the source is a `TileSetAtlasSource`), and the scene for a `TileSetScenesCollectionSource`.
				If `source_id` is set to `-1`, `atlas_coords` to `Vector2i(-1, -1)`, or `alternative_tile` to `-1`, the cell will be erased. An erased cell gets **all** its identifiers automatically set to their respective invalid values, namely `-1`, `Vector2i(-1, -1)` and `-1`.
			"""
    pass

  def erase_cell(self, coords:__core__.Vector2i)->None:
    """
				Erases the cell at coordinates `coords`.
			"""
    pass

  def fix_invalid_tiles(self)->None:
    """
				Clears cells containing tiles that do not exist in the `tile_set`.
			"""
    pass

  def clear(self)->None:
    """
				Clears all cells.
			"""
    pass

  def get_cell_source_id(self, coords:__core__.Vector2i)->int:
    """
				Returns the tile source ID of the cell at coordinates `coords`. Returns `-1` if the cell does not exist.
			"""
    pass

  def get_cell_atlas_coords(self, coords:__core__.Vector2i)->__core__.Vector2i:
    """
				Returns the tile atlas coordinates ID of the cell at coordinates `coords`. Returns `Vector2i(-1, -1)` if the cell does not exist.
			"""
    pass

  def get_cell_alternative_tile(self, coords:__core__.Vector2i)->int:
    """
				Returns the tile alternative ID of the cell at coordinates `coords`.
			"""
    pass

  def get_cell_tile_data(self, coords:__core__.Vector2i)->__tiledata__.TileData:
    """
				Returns the `TileData` object associated with the given cell, or `null` if the cell does not exist or is not a `TileSetAtlasSource`.
				```gdscript
				func get_clicked_tile_power():
					var clicked_cell = tile_map_layer.local_to_map(tile_map_layer.get_local_mouse_position())
					var data = tile_map_layer.get_cell_tile_data(clicked_cell)
					if data:
						return data.get_custom_data("power")
					else:
						return 0
				```
			"""
    pass

  def is_cell_flipped_h(self, coords:__core__.Vector2i)->bool:
    """
				Returns `true` if the cell at coordinates `coords` is flipped horizontally. The result is valid only for atlas sources.
			"""
    pass

  def is_cell_flipped_v(self, coords:__core__.Vector2i)->bool:
    """
				Returns `true` if the cell at coordinates `coords` is flipped vertically. The result is valid only for atlas sources.
			"""
    pass

  def is_cell_transposed(self, coords:__core__.Vector2i)->bool:
    """
				Returns `true` if the cell at coordinates `coords` is transposed. The result is valid only for atlas sources.
			"""
    pass

  def get_used_cells(self)->typedarray::Vector2i:
    """
				Returns a `Vector2i` array with the positions of all cells containing a tile. A cell is considered empty if its source identifier equals `-1`, its atlas coordinate identifier is `Vector2(-1, -1)` and its alternative identifier is `-1`.
			"""
    pass

  def get_used_cells_by_id(self, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=-1)->typedarray::Vector2i:
    """
				Returns a `Vector2i` array with the positions of all cells containing a tile. Tiles may be filtered according to their source (`source_id`), their atlas coordinates (`atlas_coords`), or alternative id (`alternative_tile`).
				If a parameter has its value set to the default one, this parameter is not used to filter a cell. Thus, if all parameters have their respective default values, this method returns the same result as `get_used_cells`.
				A cell is considered empty if its source identifier equals `-1`, its atlas coordinate identifier is `Vector2(-1, -1)` and its alternative identifier is `-1`.
			"""
    pass

  def get_used_rect(self)->__core__.Rect2i:
    """
				Returns a rectangle enclosing the used (non-empty) tiles of the map.
			"""
    pass

  def get_pattern(self, coords_array:__core__.Array)->__tilemappattern__.TileMapPattern:
    """
				Creates and returns a new `TileMapPattern` from the given array of cells. See also `set_pattern`.
			"""
    pass

  def set_pattern(self, position:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->None:
    """
				Pastes the `TileMapPattern` at the given `position` in the tile map. See also `get_pattern`.
			"""
    pass

  def set_cells_terrain_connect(self, cells:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None:
    """
				Update all the cells in the `cells` coordinates array so that they use the given `terrain` for the given `terrain_set`. If an updated cell has the same terrain as one of its neighboring cells, this function tries to join the two. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				**Note:** To work correctly, this method requires the `TileMapLayer`'s TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			"""
    pass

  def set_cells_terrain_path(self, path:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None:
    """
				Update all the cells in the `path` coordinates array so that they use the given `terrain` for the given `terrain_set`. The function will also connect two successive cell in the path with the same terrain. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				**Note:** To work correctly, this method requires the `TileMapLayer`'s TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			"""
    pass

  def has_body_rid(self, body:__core__.RID)->bool:
    """
				Returns whether the provided `body` `RID` belongs to one of this `TileMapLayer`'s cells.
			"""
    pass

  def get_coords_for_body_rid(self, body:__core__.RID)->__core__.Vector2i:
    """
				Returns the coordinates of the physics quadrant (see `physics_quadrant_size`) for given physics body `RID`. Such an `RID` can be retrieved from `KinematicCollision2D.get_collider_rid`, when colliding with a tile.
			"""
    pass

  def update_internals(self)->None:
    """
				Triggers a direct update of the `TileMapLayer`. Usually, calling this function is not needed, as `TileMapLayer` node updates automatically when one of its properties or cells is modified.
				However, for performance reasons, those updates are batched and delayed to the end of the frame. Calling this function will force the `TileMapLayer` to update right away instead.
				**Warning:** Updating the `TileMapLayer` is computationally expensive and may impact performance. Try to limit the number of updates and how many tiles they impact.
			"""
    pass

  def notify_runtime_tile_data_update(self)->None:
    """
				Notifies the `TileMapLayer` node that calls to `_use_tile_data_runtime_update` or `_tile_data_runtime_update` will lead to different results. This will thus trigger a `TileMapLayer` update.
				**Warning:** Updating the `TileMapLayer` is computationally expensive and may impact performance. Try to limit the number of calls to this function to avoid unnecessary update.
				**Note:** This does not trigger a direct update of the `TileMapLayer`, the update will be done at the end of the frame as usual (unless you call `update_internals`).
			"""
    pass

  def map_pattern(self, position_in_tilemap:__core__.Vector2i, coords_in_pattern:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->__core__.Vector2i:
    """
				Returns for the given coordinates `coords_in_pattern` in a `TileMapPattern` the corresponding cell coordinates if the pattern was pasted at the `position_in_tilemap` coordinates (see `set_pattern`). This mapping is required as in half-offset tile shapes, the mapping might not work by calculating `position_in_tile_map + coords_in_pattern`.
			"""
    pass

  def get_surrounding_cells(self, coords:__core__.Vector2i)->typedarray::Vector2i:
    """
				Returns the list of all neighboring cells to the one at `coords`. Any neighboring cell is one that is touching edges, so for a square cell 4 cells would be returned, for a hexagon 6 cells are returned.
			"""
    pass

  def get_neighbor_cell(self, coords:__core__.Vector2i, neighbor:int )->__core__.Vector2i:
    """
				Returns the neighboring cell to the one at coordinates `coords`, identified by the `neighbor` direction. This method takes into account the different layouts a TileMap can take.
			"""
    pass

  def map_to_local(self, map_position:__core__.Vector2i)->__core__.Vector2:
    """
				Returns the centered position of a cell in the `TileMapLayer`'s local coordinate space. To convert the returned value into global coordinates, use `Node2D.to_global`. See also `local_to_map`.
				**Note:** This may not correspond to the visual position of the tile, i.e. it ignores the `TileData.texture_origin` property of individual tiles.
			"""
    pass

  def local_to_map(self, local_position:__core__.Vector2)->__core__.Vector2i:
    """
				Returns the map coordinates of the cell containing the given `local_position`. If `local_position` is in global coordinates, consider using `Node2D.to_local` before passing it to this method. See also `map_to_local`.
			"""
    pass

  def set_tile_map_data_from_array(self, tile_map_layer_data:__core__.PackedByteArray)->None:
    """"""
    pass

  def get_tile_map_data_as_array(self)->__core__.PackedByteArray:
    """"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_enabled(self)->bool:
    """"""
    pass

  def set_tile_set(self, tile_set:__tileset__.TileSet)->None:
    """"""
    pass

  def get_tile_set(self)->__tileset__.TileSet:
    """"""
    pass

  def set_y_sort_origin(self, y_sort_origin:int)->None:
    """"""
    pass

  def get_y_sort_origin(self)->int:
    """"""
    pass

  def set_x_draw_order_reversed(self, x_draw_order_reversed:bool)->None:
    """"""
    pass

  def is_x_draw_order_reversed(self)->bool:
    """"""
    pass

  def set_rendering_quadrant_size(self, size:int)->None:
    """"""
    pass

  def get_rendering_quadrant_size(self)->int:
    """"""
    pass

  def set_collision_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_collision_enabled(self)->bool:
    """"""
    pass

  def set_use_kinematic_bodies(self, use_kinematic_bodies:bool)->None:
    """"""
    pass

  def is_using_kinematic_bodies(self)->bool:
    """"""
    pass

  def set_collision_visibility_mode(self, visibility_mode:int )->None:
    """"""
    pass

  def get_collision_visibility_mode(self)->int:
    """"""
    pass

  def set_occlusion_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_occlusion_enabled(self)->bool:
    """"""
    pass

  def set_navigation_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_navigation_enabled(self)->bool:
    """"""
    pass

  def set_navigation_map(self, map:__core__.RID)->None:
    """
				Sets a custom `map` as a `NavigationServer2D` navigation map. If not set, uses the default `World2D` navigation map instead.
			"""
    pass

  def get_navigation_map(self)->__core__.RID:
    """
				Returns the `RID` of the `NavigationServer2D` navigation used by this `TileMapLayer`.
				By default this returns the default `World2D` navigation map, unless a custom map was provided using `set_navigation_map`.
			"""
    pass

  def set_navigation_visibility_mode(self, show_navigation:int )->None:
    """"""
    pass

  def get_navigation_visibility_mode(self)->int:
    """"""
    pass


