from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__



class OpenXRCompositionLayerCylinder(__openxrcompositionlayer__.OpenXRCompositionLayer):
  """"""

  @staticmethod
  def constructor()->OpenXRCompositionLayerCylinder:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRCompositionLayerCylinder:pass


  @property
  def radius(self)->float:
    """"""
    pass
  @radius.setter
  def radius(self,  value:float)->None:
    """"""
    pass
  @property
  def aspect_ratio(self)->float:
    """"""
    pass
  @aspect_ratio.setter
  def aspect_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def central_angle(self)->float:
    """"""
    pass
  @central_angle.setter
  def central_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def fallback_segments(self)->int:
    """"""
    pass
  @fallback_segments.setter
  def fallback_segments(self,  value:int)->None:
    """"""
    pass
  def set_radius(self, radius:float)->None:
    """"""
    pass

  def get_radius(self)->float:
    """"""
    pass

  def set_aspect_ratio(self, aspect_ratio:float)->None:
    """"""
    pass

  def get_aspect_ratio(self)->float:
    """"""
    pass

  def set_central_angle(self, angle:float)->None:
    """"""
    pass

  def get_central_angle(self)->float:
    """"""
    pass

  def set_fallback_segments(self, segments:int)->None:
    """"""
    pass

  def get_fallback_segments(self)->int:
    """"""
    pass


