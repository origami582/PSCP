from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMeshSourceGeometryData3D as __navigationmeshsourcegeometrydata3d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.Mesh as __mesh__



class NavigationMeshSourceGeometryData3D(__resource__.Resource):
  """
		Container for parsed source geometry data used in navigation mesh baking.
	"""

  @staticmethod
  def constructor()->NavigationMeshSourceGeometryData3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationMeshSourceGeometryData3D:pass


  @property
  def vertices(self)->__core__.PackedVector3Array:
    """"""
    pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def indices(self)->__core__.PackedInt32Array:
    """"""
    pass
  @indices.setter
  def indices(self,  value:__core__.PackedInt32Array)->None:
    """"""
    pass
  @property
  def projected_obstructions(self)->__core__.Array:
    """"""
    pass
  @projected_obstructions.setter
  def projected_obstructions(self,  value:__core__.Array)->None:
    """"""
    pass
  def set_vertices(self, vertices:__core__.PackedFloat32Array)->None:
    """
				Sets the parsed source geometry data vertices. The vertices need to be matched with appropriated indices.
				**Warning:** Inappropriate data can crash the baking process of the involved third-party libraries.
			"""
    pass

  def get_vertices(self)->__core__.PackedFloat32Array:
    """
				Returns the parsed source geometry data vertices array.
			"""
    pass

  def set_indices(self, indices:__core__.PackedInt32Array)->None:
    """
				Sets the parsed source geometry data indices. The indices need to be matched with appropriated vertices.
				**Warning:** Inappropriate data can crash the baking process of the involved third-party libraries.
			"""
    pass

  def get_indices(self)->__core__.PackedInt32Array:
    """
				Returns the parsed source geometry data indices array.
			"""
    pass

  def append_arrays(self, vertices:__core__.PackedFloat32Array, indices:__core__.PackedInt32Array)->None:
    """
				Appends arrays of `vertices` and `indices` at the end of the existing arrays. Adds the existing index as an offset to the appended indices.
			"""
    pass

  def clear(self)->None:
    """
				Clears the internal data.
			"""
    pass

  def has_data(self)->bool:
    """
				Returns `true` when parsed source geometry data exists.
			"""
    pass

  def add_mesh(self, mesh:__mesh__.Mesh, xform:__core__.Transform3D)->None:
    """
				Adds the geometry data of a `Mesh` resource to the navigation mesh baking data. The mesh must have valid triangulated mesh data to be considered. Since `NavigationMesh` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
			"""
    pass

  def add_mesh_array(self, mesh_array:__core__.Array, xform:__core__.Transform3D)->None:
    """
				Adds an `Array` the size of `constant Mesh.ARRAY_MAX` and with vertices at index `constant Mesh.ARRAY_VERTEX` and indices at index `constant Mesh.ARRAY_INDEX` to the navigation mesh baking data. The array must have valid triangulated mesh data to be considered. Since `NavigationMesh` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
			"""
    pass

  def add_faces(self, faces:__core__.PackedVector3Array, xform:__core__.Transform3D)->None:
    """
				Adds an array of vertex positions to the geometry data for navigation mesh baking to form triangulated faces. For each face the array must have three vertex positions in clockwise winding order. Since `NavigationMesh` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
			"""
    pass

  def merge(self, other_geometry:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D)->None:
    """
				Adds the geometry data of another `NavigationMeshSourceGeometryData3D` to the navigation mesh baking data.
			"""
    pass

  def add_projected_obstruction(self, vertices:__core__.PackedVector3Array, elevation:float, height:float, carve:bool)->None:
    """
				Adds a projected obstruction shape to the source geometry. The `vertices` are considered projected on an xz-axes plane, placed at the global y-axis `elevation` and extruded by `height`. If `carve` is `true` the carved shape will not be affected by additional offsets (e.g. agent radius) of the navigation mesh baking process.
			"""
    pass

  def clear_projected_obstructions(self)->None:
    """
				Clears all projected obstructions.
			"""
    pass

  def set_projected_obstructions(self, projected_obstructions:__core__.Array)->None:
    """
				Sets the projected obstructions with an Array of Dictionaries with the following key value pairs:
				
				```gdscript
				"vertices" : PackedFloat32Array
				"elevation" : float
				"height" : float
				"carve" : bool
				```
				
			"""
    pass

  def get_projected_obstructions(self)->__core__.Array:
    """
				Returns the projected obstructions as an `Array` of dictionaries. Each `Dictionary` contains the following entries:
				- `vertices` - A `PackedFloat32Array` that defines the outline points of the projected shape.
				- `elevation` - A `float` that defines the projected shape placement on the y-axis.
				- `height` - A `float` that defines how much the projected shape is extruded along the y-axis.
				- `carve` - A `bool` that defines how the obstacle affects the navigation mesh baking. If `true` the projected shape will not be affected by addition offsets, e.g. agent radius.
			"""
    pass

  def get_bounds(self)->__core__.AABB:
    """
				Returns an axis-aligned bounding box that covers all the stored geometry data. The bounds are calculated when calling this function with the result cached until further geometry changes are made.
			"""
    pass


