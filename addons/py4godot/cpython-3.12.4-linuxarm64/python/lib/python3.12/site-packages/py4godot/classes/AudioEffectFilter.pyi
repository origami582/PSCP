from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffectBandPassFilter as __audioeffectbandpassfilter__
import py4godot.classes.AudioEffectFilter as __audioeffectfilter__
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.AudioEffectLowShelfFilter as __audioeffectlowshelffilter__
import py4godot.classes.AudioEffectLowPassFilter as __audioeffectlowpassfilter__
import py4godot.classes.AudioEffectBandLimitFilter as __audioeffectbandlimitfilter__
import py4godot.classes.AudioEffectHighShelfFilter as __audioeffecthighshelffilter__
import py4godot.classes.AudioEffectNotchFilter as __audioeffectnotchfilter__
import py4godot.classes.AudioEffectHighPassFilter as __audioeffecthighpassfilter__


class FilterDB:
  FILTER_6DB:int = 0
  FILTER_12DB:int = 1
  FILTER_18DB:int = 2
  FILTER_24DB:int = 3


class AudioEffectFilter(__audioeffect__.AudioEffect):
  """
		Allows frequencies other than the `cutoff_hz` to pass.
	"""

  @staticmethod
  def constructor()->AudioEffectFilter:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectFilter:pass


  @property
  def cutoff_hz(self)->float:
    """"""
    pass
  @cutoff_hz.setter
  def cutoff_hz(self,  value:float)->None:
    """"""
    pass
  @property
  def resonance(self)->float:
    """"""
    pass
  @resonance.setter
  def resonance(self,  value:float)->None:
    """"""
    pass
  @property
  def gain(self)->float:
    """"""
    pass
  @gain.setter
  def gain(self,  value:float)->None:
    """"""
    pass
  @property
  def db(self)->int:
    """"""
    pass
  @db.setter
  def db(self,  value:int)->None:
    """"""
    pass
  def set_cutoff(self, freq:float)->None:
    """"""
    pass

  def get_cutoff(self)->float:
    """"""
    pass

  def set_resonance(self, amount:float)->None:
    """"""
    pass

  def get_resonance(self)->float:
    """"""
    pass

  def set_gain(self, amount:float)->None:
    """"""
    pass

  def get_gain(self)->float:
    """"""
    pass

  def set_db(self, amount:int )->None:
    """"""
    pass

  def get_db(self)->int:
    """"""
    pass


