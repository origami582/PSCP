from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNode as __animationnode__



class AnimationNodeExtension(__animationnode__.AnimationNode):
  """
		`AnimationNodeExtension` exposes the APIs of `AnimationRootNode` to allow users to extend it from GDScript, C#, or C++. This class is not meant to be used directly, but to be extended by other classes. It is used to create custom nodes for the `AnimationTree` system.
	"""

  @staticmethod
  def constructor()->AnimationNodeExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeExtension:pass


  def _process_animation_node(self, playback_info:__core__.PackedFloat64Array, test_only:bool)->__core__.PackedFloat32Array:
    """
				A version of the `AnimationNode._process` method that is meant to be overridden by custom nodes. It returns a `PackedFloat32Array` with the processed animation data.
				The `PackedFloat64Array` parameter contains the playback information, containing the following values encoded as floating point numbers (in order): playback time and delta, start and end times, whether a seek was requested (encoded as a float greater than `0`), whether the seek request was externally requested (encoded as a float greater than `0`), the current `enum Animation.LoopedFlag` (encoded as a float), and the current blend weight.
				The function must return a `PackedFloat32Array` of the node's time info, containing the following values (in order): animation length, time position, delta, `enum Animation.LoopMode` (encoded as a float), whether the animation is about to end (encoded as a float greater than `0`) and whether the animation is infinite (encoded as a float greater than `0`). All values must be included in the returned array.
			"""
    pass

  @staticmethod
  def is_looping(node_info:__core__.PackedFloat32Array)->bool:
    """
				Returns `true` if the animation for the given `node_info` is looping.
			"""
    pass

  @staticmethod
  def get_remaining_time(node_info:__core__.PackedFloat32Array, break_loop:bool)->float:
    """
				Returns the animation's remaining time for the given node info. For looping animations, it will only return the remaining time if `break_loop` is `true`, a large integer value will be returned otherwise.
			"""
    pass


