from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffectHardLimiter as __audioeffecthardlimiter__
import py4godot.classes.AudioEffectCompressor as __audioeffectcompressor__
import py4godot.classes.AudioEffectAmplify as __audioeffectamplify__
import py4godot.classes.AudioEffectChorus as __audioeffectchorus__
import py4godot.classes.AudioEffectSpectrumAnalyzerInstance as __audioeffectspectrumanalyzerinstance__
import py4godot.classes.AudioEffectLimiter as __audioeffectlimiter__
import py4godot.classes.AudioEffectBandPassFilter as __audioeffectbandpassfilter__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioEffectFilter as __audioeffectfilter__
import py4godot.classes.AudioEffectLowShelfFilter as __audioeffectlowshelffilter__
import py4godot.classes.AudioEffectEQ as __audioeffecteq__
import py4godot.classes.AudioEffectLowPassFilter as __audioeffectlowpassfilter__
import py4godot.classes.AudioBusLayout as __audiobuslayout__
import py4godot.classes.AudioServer as __audioserver__
import py4godot.classes.AudioEffectBandLimitFilter as __audioeffectbandlimitfilter__
import py4godot.classes.AudioEffectReverb as __audioeffectreverb__
import py4godot.classes.Object as __object__
import py4godot.classes.AudioEffectPhaser as __audioeffectphaser__
import py4godot.classes.AudioEffectHighPassFilter as __audioeffecthighpassfilter__
import py4godot.classes.AudioEffectCapture as __audioeffectcapture__
import py4godot.classes.AudioEffectRecord as __audioeffectrecord__
import py4godot.classes.AudioEffectSpectrumAnalyzer as __audioeffectspectrumanalyzer__
import py4godot.classes.AudioEffectEQ10 as __audioeffecteq10__
import py4godot.classes.AudioEffectStereoEnhance as __audioeffectstereoenhance__
import py4godot.classes.AudioEffectEQ6 as __audioeffecteq6__
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.AudioEffectPitchShift as __audioeffectpitchshift__
import py4godot.classes.AudioEffectPanner as __audioeffectpanner__
import py4godot.classes.AudioEffectDelay as __audioeffectdelay__
import py4godot.classes.AudioEffectDistortion as __audioeffectdistortion__
import py4godot.classes.AudioEffectHighShelfFilter as __audioeffecthighshelffilter__
import py4godot.classes.AudioEffectNotchFilter as __audioeffectnotchfilter__
import py4godot.classes.AudioEffectInstance as __audioeffectinstance__
import py4godot.classes.AudioEffectEQ21 as __audioeffecteq21__


class SpeakerMode:
  SPEAKER_MODE_STEREO:int = 0
  SPEAKER_SURROUND_31:int = 1
  SPEAKER_SURROUND_51:int = 2
  SPEAKER_SURROUND_71:int = 3
class PlaybackType:
  PLAYBACK_KIND_DEFAULT:int = 0
  PLAYBACK_KIND_STREAM:int = 1
  PLAYBACK_KIND_SAMPLE:int = 2
  PLAYBACK_KIND_MAX:int = 3


class AudioServer(__object__.Object):
  """
		`AudioServer` is a low-level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
	"""
  bus_layout_changed: BuiltinSignal
  bus_renamed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->AudioServer:pass

  @staticmethod
  def instance()->AudioServer:pass

  @property
  def bus_count(self)->int:
    """"""
    pass
  @bus_count.setter
  def bus_count(self,  value:int)->None:
    """"""
    pass
  @property
  def output_device(self)->str:
    """"""
    pass
  @output_device.setter
  def output_device(self,  value:str)->None:
    """"""
    pass
  @property
  def input_device(self)->str:
    """"""
    pass
  @input_device.setter
  def input_device(self,  value:str)->None:
    """"""
    pass
  @property
  def playback_speed_scale(self)->float:
    """"""
    pass
  @playback_speed_scale.setter
  def playback_speed_scale(self,  value:float)->None:
    """"""
    pass
  def set_bus_count(self, amount:int)->None:
    """"""
    pass

  def get_bus_count(self)->int:
    """"""
    pass

  def remove_bus(self, index:int)->None:
    """
				Removes the bus at index `index`.
			"""
    pass

  def add_bus(self, at_position:int=-1)->None:
    """
				Adds a bus at `at_position`.
			"""
    pass

  def move_bus(self, index:int, to_index:int)->None:
    """
				Moves the bus from index `index` to index `to_index`.
			"""
    pass

  def set_bus_name(self, bus_idx:int, name:str)->None:
    """
				Sets the name of the bus at index `bus_idx` to `name`.
			"""
    pass

  def get_bus_name(self, bus_idx:int)->str:
    """
				Returns the name of the bus with the index `bus_idx`.
			"""
    pass

  def get_bus_index(self, bus_name:__core__.StringName|str)->int:
    """
				Returns the index of the bus with the name `bus_name`. Returns `-1` if no bus with the specified name exist.
			"""
    pass

  def get_bus_channels(self, bus_idx:int)->int:
    """
				Returns the number of channels of the bus at index `bus_idx`.
			"""
    pass

  def set_bus_volume_db(self, bus_idx:int, volume_db:float)->None:
    """
				Sets the volume in decibels of the bus at index `bus_idx` to `volume_db`.
			"""
    pass

  def get_bus_volume_db(self, bus_idx:int)->float:
    """
				Returns the volume of the bus at index `bus_idx` in dB.
			"""
    pass

  def set_bus_volume_linear(self, bus_idx:int, volume_linear:float)->None:
    """
				Sets the volume as a linear value of the bus at index `bus_idx` to `volume_linear`.
				**Note:** Using this method is equivalent to calling `set_bus_volume_db` with the result of `@GlobalScope.linear_to_db` on a value.
			"""
    pass

  def get_bus_volume_linear(self, bus_idx:int)->float:
    """
				Returns the volume of the bus at index `bus_idx` as a linear value.
				**Note:** The returned value is equivalent to the result of `@GlobalScope.db_to_linear` on the result of `get_bus_volume_db`.
			"""
    pass

  def set_bus_send(self, bus_idx:int, send:__core__.StringName|str)->None:
    """
				Connects the output of the bus at `bus_idx` to the bus named `send`.
			"""
    pass

  def get_bus_send(self, bus_idx:int)->__core__.StringName:
    """
				Returns the name of the bus that the bus at index `bus_idx` sends to.
			"""
    pass

  def set_bus_solo(self, bus_idx:int, enable:bool)->None:
    """
				If `true`, the bus at index `bus_idx` is in solo mode.
			"""
    pass

  def is_bus_solo(self, bus_idx:int)->bool:
    """
				If `true`, the bus at index `bus_idx` is in solo mode.
			"""
    pass

  def set_bus_mute(self, bus_idx:int, enable:bool)->None:
    """
				If `true`, the bus at index `bus_idx` is muted.
			"""
    pass

  def is_bus_mute(self, bus_idx:int)->bool:
    """
				If `true`, the bus at index `bus_idx` is muted.
			"""
    pass

  def set_bus_bypass_effects(self, bus_idx:int, enable:bool)->None:
    """
				If `true`, the bus at index `bus_idx` is bypassing effects.
			"""
    pass

  def is_bus_bypassing_effects(self, bus_idx:int)->bool:
    """
				If `true`, the bus at index `bus_idx` is bypassing effects.
			"""
    pass

  def add_bus_effect(self, bus_idx:int, effect:__audioeffect__.AudioEffect, at_position:int=-1)->None:
    """
				Adds an `AudioEffect` effect to the bus `bus_idx` at `at_position`.
			"""
    pass

  def remove_bus_effect(self, bus_idx:int, effect_idx:int)->None:
    """
				Removes the effect at index `effect_idx` from the bus at index `bus_idx`.
			"""
    pass

  def get_bus_effect_count(self, bus_idx:int)->int:
    """
				Returns the number of effects on the bus at `bus_idx`.
			"""
    pass

  def get_bus_effect(self, bus_idx:int, effect_idx:int)->__audioeffecthardlimiter__.AudioEffectHardLimiter|__audioeffectcompressor__.AudioEffectCompressor|__audioeffectamplify__.AudioEffectAmplify|__audioeffectchorus__.AudioEffectChorus|__audioeffectlimiter__.AudioEffectLimiter|__audioeffectbandpassfilter__.AudioEffectBandPassFilter|__audioeffectfilter__.AudioEffectFilter|__audioeffectlowshelffilter__.AudioEffectLowShelfFilter|__audioeffecteq__.AudioEffectEQ|__audioeffectlowpassfilter__.AudioEffectLowPassFilter|__audioeffectbandlimitfilter__.AudioEffectBandLimitFilter|__audioeffectreverb__.AudioEffectReverb|__audioeffectphaser__.AudioEffectPhaser|__audioeffecthighpassfilter__.AudioEffectHighPassFilter|__audioeffectcapture__.AudioEffectCapture|__audioeffectrecord__.AudioEffectRecord|__audioeffectspectrumanalyzer__.AudioEffectSpectrumAnalyzer|__audioeffecteq10__.AudioEffectEQ10|__audioeffectstereoenhance__.AudioEffectStereoEnhance|__audioeffecteq6__.AudioEffectEQ6|__audioeffect__.AudioEffect|__audioeffectpitchshift__.AudioEffectPitchShift|__audioeffectpanner__.AudioEffectPanner|__audioeffectdelay__.AudioEffectDelay|__audioeffectdistortion__.AudioEffectDistortion|__audioeffecthighshelffilter__.AudioEffectHighShelfFilter|__audioeffectnotchfilter__.AudioEffectNotchFilter|__audioeffecteq21__.AudioEffectEQ21:
    """
				Returns the `AudioEffect` at position `effect_idx` in bus `bus_idx`.
			"""
    pass

  def get_bus_effect_instance(self, bus_idx:int, effect_idx:int, channel:int=0)->__audioeffectspectrumanalyzerinstance__.AudioEffectSpectrumAnalyzerInstance|__audioeffectinstance__.AudioEffectInstance:
    """
				Returns the `AudioEffectInstance` assigned to the given bus and effect indices (and optionally channel).
			"""
    pass

  def swap_bus_effects(self, bus_idx:int, effect_idx:int, by_effect_idx:int)->None:
    """
				Swaps the position of two effects in bus `bus_idx`.
			"""
    pass

  def set_bus_effect_enabled(self, bus_idx:int, effect_idx:int, enabled:bool)->None:
    """
				If `true`, the effect at index `effect_idx` on the bus at index `bus_idx` is enabled.
			"""
    pass

  def is_bus_effect_enabled(self, bus_idx:int, effect_idx:int)->bool:
    """
				If `true`, the effect at index `effect_idx` on the bus at index `bus_idx` is enabled.
			"""
    pass

  def get_bus_peak_volume_left_db(self, bus_idx:int, channel:int)->float:
    """
				Returns the peak volume of the left speaker at bus index `bus_idx` and channel index `channel`.
			"""
    pass

  def get_bus_peak_volume_right_db(self, bus_idx:int, channel:int)->float:
    """
				Returns the peak volume of the right speaker at bus index `bus_idx` and channel index `channel`.
			"""
    pass

  def set_playback_speed_scale(self, scale:float)->None:
    """"""
    pass

  def get_playback_speed_scale(self)->float:
    """"""
    pass

  def lock(self)->None:
    """
				Locks the audio driver's main loop.
				**Note:** Remember to unlock it afterwards.
			"""
    pass

  def unlock(self)->None:
    """
				Unlocks the audio driver's main loop. (After locking it, you should always unlock it.)
			"""
    pass

  def get_speaker_mode(self)->int:
    """
				Returns the speaker configuration.
			"""
    pass

  def get_mix_rate(self)->float:
    """
				Returns the sample rate at the output of the `AudioServer`.
			"""
    pass

  def get_input_mix_rate(self)->float:
    """
				Returns the sample rate at the input of the `AudioServer`.
			"""
    pass

  def get_driver_name(self)->str:
    """
				Returns the name of the current audio driver. The default usually depends on the operating system, but may be overridden via the `--audio-driver` `url=$DOCS_URL/tutorials/editor/command_line_tutorial.html`command line argument`/url`. `--headless` also automatically sets the audio driver to `Dummy`. See also `ProjectSettings.audio/driver/driver`.
			"""
    pass

  def get_output_device_list(self)->__core__.PackedStringArray:
    """
				Returns the names of all audio output devices detected on the system.
			"""
    pass

  def get_output_device(self)->str:
    """"""
    pass

  def set_output_device(self, name:str)->None:
    """"""
    pass

  def get_time_to_next_mix(self)->float:
    """
				Returns the relative time until the next mix occurs.
			"""
    pass

  def get_time_since_last_mix(self)->float:
    """
				Returns the relative time since the last mix occurred.
			"""
    pass

  def get_output_latency(self)->float:
    """
				Returns the audio driver's effective output latency. This is based on `ProjectSettings.audio/driver/output_latency`, but the exact returned value will differ depending on the operating system and audio driver.
				**Note:** This can be expensive; it is not recommended to call `get_output_latency` every frame.
			"""
    pass

  def get_input_device_list(self)->__core__.PackedStringArray:
    """
				Returns the names of all audio input devices detected on the system.
				**Note:** `ProjectSettings.audio/driver/enable_input` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
			"""
    pass

  def get_input_device(self)->str:
    """"""
    pass

  def set_input_device(self, name:str)->None:
    """"""
    pass

  def set_bus_layout(self, bus_layout:__audiobuslayout__.AudioBusLayout)->None:
    """
				Overwrites the currently used `AudioBusLayout`.
			"""
    pass

  def generate_bus_layout(self)->__audiobuslayout__.AudioBusLayout:
    """
				Generates an `AudioBusLayout` using the available buses and effects.
			"""
    pass

  def set_enable_tagging_used_audio_streams(self, enable:bool)->None:
    """
				If set to `true`, all instances of `AudioStreamPlayback` will call `AudioStreamPlayback._tag_used_streams` every mix step.
				**Note:** This is enabled by default in the editor, as it is used by editor plugins for the audio stream previews.
			"""
    pass

  def is_stream_registered_as_sample(self, stream:__audiostream__.AudioStream)->bool:
    """
				If `true`, the stream is registered as a sample. The engine will not have to register it before playing the sample.
				If `false`, the stream will have to be registered before playing it. To prevent lag spikes, register the stream as sample with `register_stream_as_sample`.
			"""
    pass

  def register_stream_as_sample(self, stream:__audiostream__.AudioStream)->None:
    """
				Forces the registration of a stream as a sample.
				**Note:** Lag spikes may occur when calling this method, especially on single-threaded builds. It is suggested to call this method while loading assets, where the lag spike could be masked, instead of registering the sample right before it needs to be played.
			"""
    pass


