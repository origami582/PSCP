from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Occluder3D as __occluder3d__



class PolygonOccluder3D(__occluder3d__.Occluder3D):
  """
		`PolygonOccluder3D` stores a polygon shape that can be used by the engine's occlusion culling system. When an `OccluderInstance3D` with a `PolygonOccluder3D` is selected in the editor, an editor will appear at the top of the 3D viewport so you can add/remove points. All points must be placed on the same 2D plane, which means it is not possible to create arbitrary 3D shapes with a single `PolygonOccluder3D`. To use arbitrary 3D shapes as occluders, use `ArrayOccluder3D` or `OccluderInstance3D`'s baking feature instead.
		See `OccluderInstance3D`'s documentation for instructions on setting up occlusion culling.
	"""

  @staticmethod
  def constructor()->PolygonOccluder3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PolygonOccluder3D:pass


  @property
  def polygon(self)->__core__.PackedVector2Array:
    """"""
    pass
  @polygon.setter
  def polygon(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  def set_polygon(self, polygon:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_polygon(self)->__core__.PackedVector2Array:
    """"""
    pass


