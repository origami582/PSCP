from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect as __audioeffect__



class AudioEffectCapture(__audioeffect__.AudioEffect):
  """
		AudioEffectCapture is an AudioEffect which copies all audio frames from the attached audio effect bus into its internal ring buffer.
		Application code should consume these audio frames from this ring buffer using `get_buffer` and process it as needed, for example to capture data from an `AudioStreamMicrophone`, implement application-defined effects, or to transmit audio over the network. When capturing audio data from a microphone, the format of the samples will be stereo 32-bit floating-point PCM.
		Unlike `AudioEffectRecord`, this effect only returns the raw audio samples instead of encoding them into an `AudioStream`.
	"""

  @staticmethod
  def constructor()->AudioEffectCapture:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectCapture:pass


  @property
  def buffer_length(self)->float:
    """"""
    pass
  @buffer_length.setter
  def buffer_length(self,  value:float)->None:
    """"""
    pass
  def can_get_buffer(self, frames:int)->bool:
    """
				Returns `true` if at least `frames` audio frames are available to read in the internal ring buffer.
			"""
    pass

  def get_buffer(self, frames:int)->__core__.PackedVector2Array:
    """
				Gets the next `frames` audio samples from the internal ring buffer.
				Returns a `PackedVector2Array` containing exactly `frames` audio samples if available, or an empty `PackedVector2Array` if insufficient data was available.
				The samples are signed floating-point PCM between `-1` and `1`. You will have to scale them if you want to use them as 8 or 16-bit integer samples. (`v = 0x7fff * samples`0`.x`)
			"""
    pass

  def clear_buffer(self)->None:
    """
				Clears the internal ring buffer.
				**Note:** Calling this during a capture can cause the loss of samples which causes popping in the playback.
			"""
    pass

  def set_buffer_length(self, buffer_length_seconds:float)->None:
    """"""
    pass

  def get_buffer_length(self)->float:
    """"""
    pass

  def get_frames_available(self)->int:
    """
				Returns the number of frames available to read using `get_buffer`.
			"""
    pass

  def get_discarded_frames(self)->int:
    """
				Returns the number of audio frames discarded from the audio bus due to full buffer.
			"""
    pass

  def get_buffer_length_frames(self)->int:
    """
				Returns the total size of the internal ring buffer in frames.
			"""
    pass

  def get_pushed_frames(self)->int:
    """
				Returns the number of audio frames inserted from the audio bus.
			"""
    pass


