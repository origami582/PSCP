from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEvent as __inputevent__



class InputEventMIDI(__inputevent__.InputEvent):
  """
		InputEventMIDI stores information about messages from `url=https://en.wikipedia.org/wiki/MIDI`MIDI`/url` (Musical Instrument Digital Interface) devices. These may include musical keyboards, synthesizers, and drum machines.
		MIDI messages can be received over a 5-pin MIDI connector or over USB. If your device supports both be sure to check the settings in the device to see which output it is using.
		By default, Godot does not detect MIDI devices. You need to call `OS.open_midi_inputs`, first. You can check which devices are detected with `OS.get_connected_midi_inputs`, and close the connection with `OS.close_midi_inputs`.
		
		```gdscript
		func _ready():
			OS.open_midi_inputs()
			print(OS.get_connected_midi_inputs())

		func _input(input_event):
			if input_event is InputEventMIDI:
				_print_midi_info(input_event)

		func _print_midi_info(midi_event):
			print(midi_event)
			print("Channel ", midi_event.channel)
			print("Message ", midi_event.message)
			print("Pitch ", midi_event.pitch)
			print("Velocity ", midi_event.velocity)
			print("Instrument ", midi_event.instrument)
			print("Pressure ", midi_event.pressure)
			print("Controller number: ", midi_event.controller_number)
			print("Controller value: ", midi_event.controller_value)
		```
		
		
		**Note:** Godot does not support MIDI output, so there is no way to emit MIDI messages from Godot. Only MIDI input is supported.
		**Note:** On the Web platform, using MIDI input requires a browser permission to be granted first. This permission request is performed when calling `OS.open_midi_inputs`. MIDI input will not work until the user accepts the permission request.
	"""

  @staticmethod
  def constructor()->InputEventMIDI:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventMIDI:pass


  @property
  def channel(self)->int:
    """"""
    pass
  @channel.setter
  def channel(self,  value:int)->None:
    """"""
    pass
  @property
  def message(self)->int:
    """"""
    pass
  @message.setter
  def message(self,  value:int)->None:
    """"""
    pass
  @property
  def pitch(self)->int:
    """"""
    pass
  @pitch.setter
  def pitch(self,  value:int)->None:
    """"""
    pass
  @property
  def velocity(self)->int:
    """"""
    pass
  @velocity.setter
  def velocity(self,  value:int)->None:
    """"""
    pass
  @property
  def instrument(self)->int:
    """"""
    pass
  @instrument.setter
  def instrument(self,  value:int)->None:
    """"""
    pass
  @property
  def pressure(self)->int:
    """"""
    pass
  @pressure.setter
  def pressure(self,  value:int)->None:
    """"""
    pass
  @property
  def controller_number(self)->int:
    """"""
    pass
  @controller_number.setter
  def controller_number(self,  value:int)->None:
    """"""
    pass
  @property
  def controller_value(self)->int:
    """"""
    pass
  @controller_value.setter
  def controller_value(self,  value:int)->None:
    """"""
    pass
  def set_channel(self, channel:int)->None:
    """"""
    pass

  def get_channel(self)->int:
    """"""
    pass

  def set_message(self, message:int )->None:
    """"""
    pass

  def get_message(self)->int:
    """"""
    pass

  def set_pitch(self, pitch:int)->None:
    """"""
    pass

  def get_pitch(self)->int:
    """"""
    pass

  def set_velocity(self, velocity:int)->None:
    """"""
    pass

  def get_velocity(self)->int:
    """"""
    pass

  def set_instrument(self, instrument:int)->None:
    """"""
    pass

  def get_instrument(self)->int:
    """"""
    pass

  def set_pressure(self, pressure:int)->None:
    """"""
    pass

  def get_pressure(self)->int:
    """"""
    pass

  def set_controller_number(self, controller_number:int)->None:
    """"""
    pass

  def get_controller_number(self)->int:
    """"""
    pass

  def set_controller_value(self, controller_value:int)->None:
    """"""
    pass

  def get_controller_value(self)->int:
    """"""
    pass


