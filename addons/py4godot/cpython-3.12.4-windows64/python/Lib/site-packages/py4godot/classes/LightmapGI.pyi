from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.Sky as __sky__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.CameraAttributes as __cameraattributes__
import py4godot.classes.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.LightmapGIData as __lightmapgidata__
import py4godot.classes.CameraAttributesPractical as __cameraattributespractical__


class BakeQuality:
  BAKE_QUALITY_LOW:int = 0
  BAKE_QUALITY_MEDIUM:int = 1
  BAKE_QUALITY_HIGH:int = 2
  BAKE_QUALITY_ULTRA:int = 3
class GenerateProbes:
  GENERATE_PROBES_DISABLED:int = 0
  GENERATE_PROBES_SUBDIV_4:int = 1
  GENERATE_PROBES_SUBDIV_8:int = 2
  GENERATE_PROBES_SUBDIV_16:int = 3
  GENERATE_PROBES_SUBDIV_32:int = 4
class BakeError:
  BAKE_ERROR_OK:int = 0
  BAKE_ERROR_NO_SCENE_ROOT:int = 1
  BAKE_ERROR_FOREIGN_DATA:int = 2
  BAKE_ERROR_NO_LIGHTMAPPER:int = 3
  BAKE_ERROR_NO_SAVE_PATH:int = 4
  BAKE_ERROR_NO_MESHES:int = 5
  BAKE_ERROR_MESHES_INVALID:int = 6
  BAKE_ERROR_CANT_CREATE_IMAGE:int = 7
  BAKE_ERROR_USER_ABORTED:int = 8
  BAKE_ERROR_TEXTURE_SIZE_TOO_SMALL:int = 9
  BAKE_ERROR_LIGHTMAP_TOO_SMALL:int = 10
  BAKE_ERROR_ATLAS_TOO_SMALL:int = 11
class EnvironmentMode:
  ENVIRONMENT_MODE_DISABLED:int = 0
  ENVIRONMENT_MODE_SCENE:int = 1
  ENVIRONMENT_MODE_CUSTOM_SKY:int = 2
  ENVIRONMENT_MODE_CUSTOM_COLOR:int = 3


class LightmapGI(__visualinstance3d__.VisualInstance3D):
  """
		The `LightmapGI` node is used to compute and store baked lightmaps. Lightmaps are used to provide high-quality indirect lighting with very little light leaking. `LightmapGI` can also provide rough reflections using spherical harmonics if `directional` is enabled. Dynamic objects can receive indirect lighting thanks to _light probes_, which can be automatically placed by setting `generate_probes_subdiv` to a value other than `constant GENERATE_PROBES_DISABLED`. Additional lightmap probes can also be added by creating `LightmapProbe` nodes. The downside is that lightmaps are fully static and cannot be baked in an exported project. Baking a `LightmapGI` node is also slower compared to `VoxelGI`.
		**Procedural generation:** Lightmap baking functionality is only available in the editor. This means `LightmapGI` is not suited to procedurally generated or user-built levels. For procedurally generated or user-built levels, use `VoxelGI` or SDFGI instead (see `Environment.sdfgi_enabled`).
		**Performance:** `LightmapGI` provides the best possible run-time performance for global illumination. It is suitable for low-end hardware including integrated graphics and mobile devices.
		**Note:** Due to how lightmaps work, most properties only have a visible effect once lightmaps are baked again.
		**Note:** Lightmap baking on `CSGShape3D`s and `PrimitiveMesh`es is not supported, as these cannot store UV2 data required for baking.
		**Note:** If no custom lightmappers are installed, `LightmapGI` can only be baked from devices that support the Forward+ or Mobile renderers.
		**Note:** The `LightmapGI` node only bakes light data for child nodes of its parent. Nodes further up the hierarchy of the scene will not be baked.
	"""

  @staticmethod
  def constructor()->LightmapGI:pass



  @staticmethod
  def cast(other:__object__.Object)->LightmapGI:pass


  @property
  def quality(self)->int:
    """"""
    pass
  @quality.setter
  def quality(self,  value:int)->None:
    """"""
    pass
  @property
  def supersampling(self)->bool:
    """"""
    pass
  @supersampling.setter
  def supersampling(self,  value:bool)->None:
    """"""
    pass
  @property
  def supersampling_factor(self)->float:
    """"""
    pass
  @supersampling_factor.setter
  def supersampling_factor(self,  value:float)->None:
    """"""
    pass
  @property
  def bounces(self)->int:
    """"""
    pass
  @bounces.setter
  def bounces(self,  value:int)->None:
    """"""
    pass
  @property
  def bounce_indirect_energy(self)->float:
    """"""
    pass
  @bounce_indirect_energy.setter
  def bounce_indirect_energy(self,  value:float)->None:
    """"""
    pass
  @property
  def directional(self)->bool:
    """"""
    pass
  @directional.setter
  def directional(self,  value:bool)->None:
    """"""
    pass
  @property
  def shadowmask_mode(self)->int:
    """"""
    pass
  @shadowmask_mode.setter
  def shadowmask_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def use_texture_for_bounces(self)->bool:
    """"""
    pass
  @use_texture_for_bounces.setter
  def use_texture_for_bounces(self,  value:bool)->None:
    """"""
    pass
  @property
  def interior(self)->bool:
    """"""
    pass
  @interior.setter
  def interior(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_denoiser(self)->bool:
    """"""
    pass
  @use_denoiser.setter
  def use_denoiser(self,  value:bool)->None:
    """"""
    pass
  @property
  def denoiser_strength(self)->float:
    """"""
    pass
  @denoiser_strength.setter
  def denoiser_strength(self,  value:float)->None:
    """"""
    pass
  @property
  def denoiser_range(self)->int:
    """"""
    pass
  @denoiser_range.setter
  def denoiser_range(self,  value:int)->None:
    """"""
    pass
  @property
  def bias(self)->float:
    """"""
    pass
  @bias.setter
  def bias(self,  value:float)->None:
    """"""
    pass
  @property
  def texel_scale(self)->float:
    """"""
    pass
  @texel_scale.setter
  def texel_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def max_texture_size(self)->int:
    """"""
    pass
  @max_texture_size.setter
  def max_texture_size(self,  value:int)->None:
    """"""
    pass
  @property
  def environment_mode(self)->int:
    """"""
    pass
  @environment_mode.setter
  def environment_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def environment_custom_sky(self)->__sky__.Sky:
    """"""
    pass
  @environment_custom_sky.setter
  def environment_custom_sky(self,  value:__sky__.Sky)->None:
    """"""
    pass
  @property
  def environment_custom_color(self)->__core__.Color:
    """"""
    pass
  @environment_custom_color.setter
  def environment_custom_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def environment_custom_energy(self)->float:
    """"""
    pass
  @environment_custom_energy.setter
  def environment_custom_energy(self,  value:float)->None:
    """"""
    pass
  @property
  def camera_attributes(self)->CameraAttributesPractical,CameraAttributesPhysical:
    """"""
    pass
  @camera_attributes.setter
  def camera_attributes(self,  value:__cameraattributespractical__.CameraAttributesPractical)->None:
    """"""
    pass
  @property
  def generate_probes_subdiv(self)->int:
    """"""
    pass
  @generate_probes_subdiv.setter
  def generate_probes_subdiv(self,  value:int)->None:
    """"""
    pass
  @property
  def light_data(self)->__lightmapgidata__.LightmapGIData:
    """"""
    pass
  @light_data.setter
  def light_data(self,  value:__lightmapgidata__.LightmapGIData)->None:
    """"""
    pass
  def set_light_data(self, data:__lightmapgidata__.LightmapGIData)->None:
    """"""
    pass

  def get_light_data(self)->__lightmapgidata__.LightmapGIData:
    """"""
    pass

  def set_bake_quality(self, bake_quality:int )->None:
    """"""
    pass

  def get_bake_quality(self)->int:
    """"""
    pass

  def set_bounces(self, bounces:int)->None:
    """"""
    pass

  def get_bounces(self)->int:
    """"""
    pass

  def set_bounce_indirect_energy(self, bounce_indirect_energy:float)->None:
    """"""
    pass

  def get_bounce_indirect_energy(self)->float:
    """"""
    pass

  def set_generate_probes(self, subdivision:int )->None:
    """"""
    pass

  def get_generate_probes(self)->int:
    """"""
    pass

  def set_bias(self, bias:float)->None:
    """"""
    pass

  def get_bias(self)->float:
    """"""
    pass

  def set_environment_mode(self, mode:int )->None:
    """"""
    pass

  def get_environment_mode(self)->int:
    """"""
    pass

  def set_environment_custom_sky(self, sky:__sky__.Sky)->None:
    """"""
    pass

  def get_environment_custom_sky(self)->__sky__.Sky:
    """"""
    pass

  def set_environment_custom_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_environment_custom_color(self)->__core__.Color:
    """"""
    pass

  def set_environment_custom_energy(self, energy:float)->None:
    """"""
    pass

  def get_environment_custom_energy(self)->float:
    """"""
    pass

  def set_texel_scale(self, texel_scale:float)->None:
    """"""
    pass

  def get_texel_scale(self)->float:
    """"""
    pass

  def set_max_texture_size(self, max_texture_size:int)->None:
    """"""
    pass

  def get_max_texture_size(self)->int:
    """"""
    pass

  def set_supersampling_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_supersampling_enabled(self)->bool:
    """"""
    pass

  def set_supersampling_factor(self, factor:float)->None:
    """"""
    pass

  def get_supersampling_factor(self)->float:
    """"""
    pass

  def set_use_denoiser(self, use_denoiser:bool)->None:
    """"""
    pass

  def is_using_denoiser(self)->bool:
    """"""
    pass

  def set_denoiser_strength(self, denoiser_strength:float)->None:
    """"""
    pass

  def get_denoiser_strength(self)->float:
    """"""
    pass

  def set_denoiser_range(self, denoiser_range:int)->None:
    """"""
    pass

  def get_denoiser_range(self)->int:
    """"""
    pass

  def set_interior(self, enable:bool)->None:
    """"""
    pass

  def is_interior(self)->bool:
    """"""
    pass

  def set_directional(self, directional:bool)->None:
    """"""
    pass

  def is_directional(self)->bool:
    """"""
    pass

  def set_shadowmask_mode(self, mode:int )->None:
    """"""
    pass

  def get_shadowmask_mode(self)->int:
    """"""
    pass

  def set_use_texture_for_bounces(self, use_texture_for_bounces:bool)->None:
    """"""
    pass

  def is_using_texture_for_bounces(self)->bool:
    """"""
    pass

  def set_camera_attributes(self, camera_attributes:__cameraattributes__.CameraAttributes)->None:
    """"""
    pass

  def get_camera_attributes(self)->__cameraattributespractical__.CameraAttributesPractical|__cameraattributes__.CameraAttributes|__cameraattributesphysical__.CameraAttributesPhysical:
    """"""
    pass


