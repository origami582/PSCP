from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.ColorPicker as __colorpicker__


class FileMode:
  FILE_MODE_OPEN_FILE:int = 0
  FILE_MODE_OPEN_FILES:int = 1
  FILE_MODE_OPEN_DIR:int = 2
  FILE_MODE_OPEN_ANY:int = 3
  FILE_MODE_SAVE_FILE:int = 4
class Access:
  ACCESS_RESOURCES:int = 0
  ACCESS_USERDATA:int = 1
  ACCESS_FILESYSTEM:int = 2


class FileDialog(__confirmationdialog__.ConfirmationDialog):
  """
		`FileDialog` is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. `FileDialog` automatically sets its window title according to the `file_mode`. If you want to use a custom title, disable this by setting `mode_overrides_title` to `false`.
	"""
  file_selected: BuiltinSignal
  files_selected: BuiltinSignal
  dir_selected: BuiltinSignal
  filename_filter_changed: BuiltinSignal

  @staticmethod
  def constructor()->FileDialog:pass



  @staticmethod
  def cast(other:__object__.Object)->FileDialog:pass


  @property
  def mode_overrides_title(self)->bool:
    """"""
    pass
  @mode_overrides_title.setter
  def mode_overrides_title(self,  value:bool)->None:
    """"""
    pass
  @property
  def file_mode(self)->int:
    """"""
    pass
  @file_mode.setter
  def file_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def access(self)->int:
    """"""
    pass
  @access.setter
  def access(self,  value:int)->None:
    """"""
    pass
  @property
  def root_subfolder(self)->str:
    """"""
    pass
  @root_subfolder.setter
  def root_subfolder(self,  value:str)->None:
    """"""
    pass
  @property
  def filters(self)->__core__.PackedStringArray:
    """"""
    pass
  @filters.setter
  def filters(self,  value:__core__.PackedStringArray)->None:
    """"""
    pass
  @property
  def filename_filter(self)->str:
    """"""
    pass
  @filename_filter.setter
  def filename_filter(self,  value:str)->None:
    """"""
    pass
  @property
  def option_count(self)->int:
    """"""
    pass
  @option_count.setter
  def option_count(self,  value:int)->None:
    """"""
    pass
  @property
  def show_hidden_files(self)->bool:
    """"""
    pass
  @show_hidden_files.setter
  def show_hidden_files(self,  value:bool)->None:
    """"""
    pass
  @property
  def use_native_dialog(self)->bool:
    """"""
    pass
  @use_native_dialog.setter
  def use_native_dialog(self,  value:bool)->None:
    """"""
    pass
  @property
  def current_dir(self)->str:
    """"""
    pass
  @current_dir.setter
  def current_dir(self,  value:str)->None:
    """"""
    pass
  @property
  def current_file(self)->str:
    """"""
    pass
  @current_file.setter
  def current_file(self,  value:str)->None:
    """"""
    pass
  @property
  def current_path(self)->str:
    """"""
    pass
  @current_path.setter
  def current_path(self,  value:str)->None:
    """"""
    pass
  def clear_filters(self)->None:
    """
				Clear all the added filters in the dialog.
			"""
    pass

  def add_filter(self, filter:str, description:str= __core__.String.new0())->None:
    """
				Adds a comma-separated file name `filter` option to the `FileDialog` with an optional `description`, which restricts what files can be picked.
				A `filter` should be of the form `"filename.extension"`, where filename and extension can be `*` to match any string. Filters starting with `.` (i.e. empty filenames) are not allowed.
				For example, a `filter` of `"*.png, *.jpg"` and a `description` of `"Images"` results in filter text "Images (*.png, *.jpg)".
			"""
    pass

  def set_filters(self, filters:__core__.PackedStringArray)->None:
    """"""
    pass

  def get_filters(self)->__core__.PackedStringArray:
    """"""
    pass

  def clear_filename_filter(self)->None:
    """
				Clear the filter for file names.
			"""
    pass

  def set_filename_filter(self, filter:str)->None:
    """"""
    pass

  def get_filename_filter(self)->str:
    """"""
    pass

  def get_option_name(self, option:int)->str:
    """
				Returns the name of the `OptionButton` or `CheckBox` with index `option`.
			"""
    pass

  def get_option_values(self, option:int)->__core__.PackedStringArray:
    """
				Returns an array of values of the `OptionButton` with index `option`.
			"""
    pass

  def get_option_default(self, option:int)->int:
    """
				Returns the default value index of the `OptionButton` or `CheckBox` with index `option`.
			"""
    pass

  def set_option_name(self, option:int, name:str)->None:
    """
				Sets the name of the `OptionButton` or `CheckBox` with index `option`.
			"""
    pass

  def set_option_values(self, option:int, values:__core__.PackedStringArray)->None:
    """
				Sets the option values of the `OptionButton` with index `option`.
			"""
    pass

  def set_option_default(self, option:int, default_value_index:int)->None:
    """
				Sets the default value index of the `OptionButton` or `CheckBox` with index `option`.
			"""
    pass

  def set_option_count(self, count:int)->None:
    """"""
    pass

  def get_option_count(self)->int:
    """"""
    pass

  def add_option(self, name:str, values:__core__.PackedStringArray, default_value_index:int)->None:
    """
				Adds an additional `OptionButton` to the file dialog. If `values` is empty, a `CheckBox` is added instead.
				`default_value_index` should be an index of the value in the `values`. If `values` is empty it should be either `1` (checked), or `0` (unchecked).
			"""
    pass

  def get_selected_options(self)->__core__.Dictionary:
    """
				Returns a `Dictionary` with the selected values of the additional `OptionButton`s and/or `CheckBox`es. `Dictionary` keys are names and values are selected value indices.
			"""
    pass

  def get_current_dir(self)->str:
    """"""
    pass

  def get_current_file(self)->str:
    """"""
    pass

  def get_current_path(self)->str:
    """"""
    pass

  def set_current_dir(self, dir:str)->None:
    """"""
    pass

  def set_current_file(self, file:str)->None:
    """"""
    pass

  def set_current_path(self, path:str)->None:
    """"""
    pass

  def set_mode_overrides_title(self, override:bool)->None:
    """"""
    pass

  def is_mode_overriding_title(self)->bool:
    """"""
    pass

  def set_file_mode(self, mode:int )->None:
    """"""
    pass

  def get_file_mode(self)->int:
    """"""
    pass

  def get_vbox(self)->__filesystemdock__.FileSystemDock|__scripteditorbase__.ScriptEditorBase|__vboxcontainer__.VBoxContainer|__colorpicker__.ColorPicker:
    """
				Returns the vertical box container of the dialog, custom controls can be added to it.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
				**Note:** Changes to this node are ignored by native file dialogs, use `add_option` to add custom elements to the dialog instead.
			"""
    pass

  def get_line_edit(self)->__lineedit__.LineEdit:
    """
				Returns the LineEdit for the selected file.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def set_access(self, access:int )->None:
    """"""
    pass

  def get_access(self)->int:
    """"""
    pass

  def set_root_subfolder(self, dir:str)->None:
    """"""
    pass

  def get_root_subfolder(self)->str:
    """"""
    pass

  def set_show_hidden_files(self, show:bool)->None:
    """"""
    pass

  def is_showing_hidden_files(self)->bool:
    """"""
    pass

  def set_use_native_dialog(self, native:bool)->None:
    """"""
    pass

  def get_use_native_dialog(self)->bool:
    """"""
    pass

  def deselect_all(self)->None:
    """
				Clear all currently selected items in the dialog.
			"""
    pass

  def invalidate(self)->None:
    """
				Invalidate and update the current dialog content list.
				**Note:** This method does nothing on native file dialogs.
			"""
    pass


