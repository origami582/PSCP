from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__



class MeshDataTool(__refcounted__.RefCounted):
  """
		MeshDataTool provides access to individual vertices in a `Mesh`. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.
		To use MeshDataTool, load a mesh with `create_from_surface`. When you are finished editing the data commit the data to a mesh with `commit_to_surface`.
		Below is an example of how MeshDataTool may be used.
		
		```gdscript
		var mesh = ArrayMesh.new()
		mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, BoxMesh.new().get_mesh_arrays())
		var mdt = MeshDataTool.new()
		mdt.create_from_surface(mesh, 0)
		for i in range(mdt.get_vertex_count()):
			var vertex = mdt.get_vertex(i)
			# In this example we extend the mesh by one unit, which results in separated faces as it is flat shaded.
			vertex += mdt.get_vertex_normal(i)
			# Save your change.
			mdt.set_vertex(i, vertex)
		mesh.clear_surfaces()
		mdt.commit_to_surface(mesh)
		var mi = MeshInstance.new()
		mi.mesh = mesh
		add_child(mi)
		```
		
		
		See also `ArrayMesh`, `ImmediateMesh` and `SurfaceTool` for procedural geometry generation.
		**Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes.
	"""

  @staticmethod
  def constructor()->MeshDataTool:pass



  @staticmethod
  def cast(other:__object__.Object)->MeshDataTool:pass


  def clear(self)->None:
    """
				Clears all data currently in MeshDataTool.
			"""
    pass

  def create_from_surface(self, mesh:__arraymesh__.ArrayMesh, surface:int)->int:
    """
				Uses specified surface of given `Mesh` to populate data for MeshDataTool.
				Requires `Mesh` with primitive type `constant Mesh.PRIMITIVE_TRIANGLES`.
			"""
    pass

  def commit_to_surface(self, mesh:__arraymesh__.ArrayMesh, compression_flags:int=0)->int:
    """
				Adds a new surface to specified `Mesh` with edited data.
			"""
    pass

  def get_format(self)->int:
    """
				Returns the `Mesh`'s format as a combination of the `enum Mesh.ArrayFormat` flags. For example, a mesh containing both vertices and normals would return a format of `3` because `constant Mesh.ARRAY_FORMAT_VERTEX` is `1` and `constant Mesh.ARRAY_FORMAT_NORMAL` is `2`.
			"""
    pass

  def get_vertex_count(self)->int:
    """
				Returns the total number of vertices in `Mesh`.
			"""
    pass

  def get_edge_count(self)->int:
    """
				Returns the number of edges in this `Mesh`.
			"""
    pass

  def get_face_count(self)->int:
    """
				Returns the number of faces in this `Mesh`.
			"""
    pass

  def set_vertex(self, idx:int, vertex:__core__.Vector3)->None:
    """
				Sets the position of the given vertex.
			"""
    pass

  def get_vertex(self, idx:int)->__core__.Vector3:
    """
				Returns the position of the given vertex.
			"""
    pass

  def set_vertex_normal(self, idx:int, normal:__core__.Vector3)->None:
    """
				Sets the normal of the given vertex.
			"""
    pass

  def get_vertex_normal(self, idx:int)->__core__.Vector3:
    """
				Returns the normal of the given vertex.
			"""
    pass

  def set_vertex_tangent(self, idx:int, tangent:__core__.Plane)->None:
    """
				Sets the tangent of the given vertex.
			"""
    pass

  def get_vertex_tangent(self, idx:int)->__core__.Plane:
    """
				Returns the tangent of the given vertex.
			"""
    pass

  def set_vertex_uv(self, idx:int, uv:__core__.Vector2)->None:
    """
				Sets the UV of the given vertex.
			"""
    pass

  def get_vertex_uv(self, idx:int)->__core__.Vector2:
    """
				Returns the UV of the given vertex.
			"""
    pass

  def set_vertex_uv2(self, idx:int, uv2:__core__.Vector2)->None:
    """
				Sets the UV2 of the given vertex.
			"""
    pass

  def get_vertex_uv2(self, idx:int)->__core__.Vector2:
    """
				Returns the UV2 of the given vertex.
			"""
    pass

  def set_vertex_color(self, idx:int, color:__core__.Color)->None:
    """
				Sets the color of the given vertex.
			"""
    pass

  def get_vertex_color(self, idx:int)->__core__.Color:
    """
				Returns the color of the given vertex.
			"""
    pass

  def set_vertex_bones(self, idx:int, bones:__core__.PackedInt32Array)->None:
    """
				Sets the bones of the given vertex.
			"""
    pass

  def get_vertex_bones(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns the bones of the given vertex.
			"""
    pass

  def set_vertex_weights(self, idx:int, weights:__core__.PackedFloat32Array)->None:
    """
				Sets the bone weights of the given vertex.
			"""
    pass

  def get_vertex_weights(self, idx:int)->__core__.PackedFloat32Array:
    """
				Returns bone weights of the given vertex.
			"""
    pass

  def set_vertex_meta(self, idx:int, meta:Any)->None:
    """
				Sets the metadata associated with the given vertex.
			"""
    pass

  def get_vertex_meta(self, idx:int)->Any:
    """
				Returns the metadata associated with the given vertex.
			"""
    pass

  def get_vertex_edges(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns an array of edges that share the given vertex.
			"""
    pass

  def get_vertex_faces(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns an array of faces that share the given vertex.
			"""
    pass

  def get_edge_vertex(self, idx:int, vertex:int)->int:
    """
				Returns the index of the specified `vertex` connected to the edge at index `idx`.
				`vertex` can only be `0` or `1`, as edges are composed of two vertices.
			"""
    pass

  def get_edge_faces(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns array of faces that touch given edge.
			"""
    pass

  def set_edge_meta(self, idx:int, meta:Any)->None:
    """
				Sets the metadata of the given edge.
			"""
    pass

  def get_edge_meta(self, idx:int)->Any:
    """
				Returns meta information assigned to given edge.
			"""
    pass

  def get_face_vertex(self, idx:int, vertex:int)->int:
    """
				Returns the specified vertex index of the given face.
				`vertex` must be either `0`, `1`, or `2` because faces contain three vertices.
				
				```gdscript
				var index = mesh_data_tool.get_face_vertex(0, 1) # Gets the index of the second vertex of the first face.
				var position = mesh_data_tool.get_vertex(index)
				var normal = mesh_data_tool.get_vertex_normal(index)
				```
				
				
			"""
    pass

  def get_face_edge(self, idx:int, edge:int)->int:
    """
				Returns the edge associated with the face at index `idx`.
				`edge` argument must be either `0`, `1`, or `2` because a face only has three edges.
			"""
    pass

  def set_face_meta(self, idx:int, meta:Any)->None:
    """
				Sets the metadata of the given face.
			"""
    pass

  def get_face_meta(self, idx:int)->Any:
    """
				Returns the metadata associated with the given face.
			"""
    pass

  def get_face_normal(self, idx:int)->__core__.Vector3:
    """
				Calculates and returns the face normal of the given face.
			"""
    pass

  def set_material(self, material:__material__.Material)->None:
    """
				Sets the material to be used by newly-constructed `Mesh`.
			"""
    pass

  def get_material(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """
				Returns the material assigned to the `Mesh`.
			"""
    pass


