from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node as __node__



class ShaderGlobalsOverride(__node__.Node):
  """
		Similar to how a `WorldEnvironment` node can be used to override the environment while a specific scene is loaded, `ShaderGlobalsOverride` can be used to override global shader parameters temporarily. Once the node is removed, the project-wide values for the global shader parameters are restored. See the `RenderingServer` `global_shader_parameter_*` methods for more information.
		**Note:** Only one `ShaderGlobalsOverride` can be used per scene. If there is more than one `ShaderGlobalsOverride` node in the scene tree, only the first node (in tree order) will be taken into account.
		**Note:** All `ShaderGlobalsOverride` nodes are made part of a `"shader_overrides_group"` group when they are added to the scene tree. The currently active `ShaderGlobalsOverride` node also has a `"shader_overrides_group_active"` group added to it. You can use this to check which `ShaderGlobalsOverride` node is currently active.
	"""

  @staticmethod
  def constructor()->ShaderGlobalsOverride:pass



  @staticmethod
  def cast(other:__object__.Object)->ShaderGlobalsOverride:pass


