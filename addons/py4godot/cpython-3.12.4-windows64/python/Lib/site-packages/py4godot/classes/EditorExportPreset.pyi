from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorExportPreset as __editorexportpreset__
import py4godot.classes.RefCounted as __refcounted__


class ExportFilter:
  EXPORT_ALL_RESOURCES:int = 0
  EXPORT_SELECTED_SCENES:int = 1
  EXPORT_SELECTED_RESOURCES:int = 2
  EXCLUDE_SELECTED_RESOURCES:int = 3
  EXPORT_CUSTOMIZED:int = 4
class FileExportMode:
  MODE_FILE_NOT_CUSTOMIZED:int = 0
  MODE_FILE_STRIP:int = 1
  MODE_FILE_KEEP:int = 2
  MODE_FILE_REMOVE:int = 3
class ScriptExportMode:
  MODE_SCRIPT_TEXT:int = 0
  MODE_SCRIPT_BINARY_TOKENS:int = 1
  MODE_SCRIPT_BINARY_TOKENS_COMPRESSED:int = 2


class EditorExportPreset(__refcounted__.RefCounted):
  """
		Represents the configuration of an export preset, as created by the editor's export dialog. An `EditorExportPreset` instance is intended to be used a read-only configuration passed to the `EditorExportPlatform` methods when exporting the project.
	"""

  @staticmethod
  def constructor()->EditorExportPreset:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPreset:pass


  def has(self, property:__core__.StringName|str)->bool:
    """
				Returns `true` if the preset has the property named `property`.
			"""
    pass

  def get_files_to_export(self)->__core__.PackedStringArray:
    """
				Returns array of files to export.
			"""
    pass

  def get_customized_files(self)->__core__.Dictionary:
    """
				Returns a dictionary of files selected in the "Resources" tab of the export dialog. The dictionary's keys are file paths, and its values are the corresponding export modes: `"strip"`, `"keep"`, or `"remove"`. See also `get_file_export_mode`.
			"""
    pass

  def get_customized_files_count(self)->int:
    """
				Returns the number of files selected in the "Resources" tab of the export dialog.
			"""
    pass

  def has_export_file(self, path:str)->bool:
    """
				Returns `true` if the file at the specified `path` will be exported.
			"""
    pass

  def get_file_export_mode(self, path:str, default:int =0)->int:
    """
				Returns file export mode for the specified file.
			"""
    pass

  def get_preset_name(self)->str:
    """
				Returns this export preset's name.
			"""
    pass

  def is_runnable(self)->bool:
    """
				Returns `true` if the "Runnable" toggle is enabled in the export dialog.
			"""
    pass

  def are_advanced_options_enabled(self)->bool:
    """
				Returns `true` if the "Advanced" toggle is enabled in the export dialog.
			"""
    pass

  def is_dedicated_server(self)->bool:
    """
				Returns `true` if the dedicated server export mode is selected in the export dialog.
			"""
    pass

  def get_export_filter(self)->int:
    """
				Returns export file filter mode selected in the "Resources" tab of the export dialog.
			"""
    pass

  def get_include_filter(self)->str:
    """
				Returns file filters to include during export.
			"""
    pass

  def get_exclude_filter(self)->str:
    """
				Returns file filters to exclude during export.
			"""
    pass

  def get_custom_features(self)->str:
    """
				Returns a comma-separated list of custom features added to this preset, as a string. See `url=$DOCS_URL/tutorials/export/feature_tags.html`Feature tags`/url` in the documentation for more information.
			"""
    pass

  def get_patches(self)->__core__.PackedStringArray:
    """
				Returns the list of packs on which to base a patch export on.
			"""
    pass

  def get_export_path(self)->str:
    """
				Returns export target path.
			"""
    pass

  def get_encryption_in_filter(self)->str:
    """
				Returns file filters to include during PCK encryption.
			"""
    pass

  def get_encryption_ex_filter(self)->str:
    """
				Returns file filters to exclude during PCK encryption.
			"""
    pass

  def get_encrypt_pck(self)->bool:
    """
				Returns `true` if PCK encryption is enabled in the export dialog.
			"""
    pass

  def get_encrypt_directory(self)->bool:
    """
				Returns `true` if PCK directory encryption is enabled in the export dialog.
			"""
    pass

  def get_encryption_key(self)->str:
    """
				Returns PCK encryption key.
			"""
    pass

  def get_script_export_mode(self)->int:
    """
				Returns the export mode used by GDScript files. `0` for "Text", `1` for "Binary tokens", and `2` for "Compressed binary tokens (smaller files)".
			"""
    pass

  def get_or_env(self, name:__core__.StringName|str, env_var:str)->Any:
    """
				Returns export option value or value of environment variable if it is set.
			"""
    pass

  def get_version(self, name:__core__.StringName|str, windows_version:bool)->str:
    """
				Returns the preset's version number, or fall back to the `ProjectSettings.application/config/version` project setting if set to an empty string.
				If `windows_version` is `true`, formats the returned version number to be compatible with Windows executable metadata.
			"""
    pass


