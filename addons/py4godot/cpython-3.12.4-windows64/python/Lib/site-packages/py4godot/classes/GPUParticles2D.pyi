from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.Node as __node__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.Material as __material__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.CameraTexture as __cameratexture__


class DrawOrder:
  DRAW_ORDER_INDEX:int = 0
  DRAW_ORDER_LIFETIME:int = 1
  DRAW_ORDER_REVERSE_LIFETIME:int = 2
class EmitFlags:
  EMIT_FLAG_POSITION:int = 1
  EMIT_FLAG_ROTATION_SCALE:int = 2
  EMIT_FLAG_VELOCITY:int = 4
  EMIT_FLAG_COLOR:int = 8
  EMIT_FLAG_CUSTOM:int = 16


class GPUParticles2D(__node2d__.Node2D):
  """
		2D particle node used to create a variety of particle systems and effects. `GPUParticles2D` features an emitter that generates some number of particles at a given rate.
		Use the `process_material` property to add a `ParticleProcessMaterial` to configure particle appearance and behavior. Alternatively, you can add a `ShaderMaterial` which will be applied to all particles.
		2D particles can optionally collide with `LightOccluder2D`, but they don't collide with `PhysicsBody2D` nodes.
	"""
  finished: BuiltinSignal

  @staticmethod
  def constructor()->GPUParticles2D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticles2D:pass


  @property
  def emitting(self)->bool:
    """"""
    pass
  @emitting.setter
  def emitting(self,  value:bool)->None:
    """"""
    pass
  @property
  def amount(self)->int:
    """"""
    pass
  @amount.setter
  def amount(self,  value:int)->None:
    """"""
    pass
  @property
  def amount_ratio(self)->float:
    """"""
    pass
  @amount_ratio.setter
  def amount_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def sub_emitter(self)->__core__.NodePath:
    """"""
    pass
  @sub_emitter.setter
  def sub_emitter(self,  value:__core__.NodePath)->None:
    """"""
    pass
  @property
  def texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def lifetime(self)->float:
    """"""
    pass
  @lifetime.setter
  def lifetime(self,  value:float)->None:
    """"""
    pass
  @property
  def interp_to_end(self)->float:
    """"""
    pass
  @interp_to_end.setter
  def interp_to_end(self,  value:float)->None:
    """"""
    pass
  @property
  def one_shot(self)->bool:
    """"""
    pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None:
    """"""
    pass
  @property
  def preprocess(self)->float:
    """"""
    pass
  @preprocess.setter
  def preprocess(self,  value:float)->None:
    """"""
    pass
  @property
  def speed_scale(self)->float:
    """"""
    pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def explosiveness(self)->float:
    """"""
    pass
  @explosiveness.setter
  def explosiveness(self,  value:float)->None:
    """"""
    pass
  @property
  def randomness(self)->float:
    """"""
    pass
  @randomness.setter
  def randomness(self,  value:float)->None:
    """"""
    pass
  @property
  def use_fixed_seed(self)->bool:
    """"""
    pass
  @use_fixed_seed.setter
  def use_fixed_seed(self,  value:bool)->None:
    """"""
    pass
  @property
  def seed(self)->int:
    """"""
    pass
  @seed.setter
  def seed(self,  value:int)->None:
    """"""
    pass
  @property
  def fixed_fps(self)->int:
    """"""
    pass
  @fixed_fps.setter
  def fixed_fps(self,  value:int)->None:
    """"""
    pass
  @property
  def interpolate(self)->bool:
    """"""
    pass
  @interpolate.setter
  def interpolate(self,  value:bool)->None:
    """"""
    pass
  @property
  def fract_delta(self)->bool:
    """"""
    pass
  @fract_delta.setter
  def fract_delta(self,  value:bool)->None:
    """"""
    pass
  @property
  def collision_base_size(self)->float:
    """"""
    pass
  @collision_base_size.setter
  def collision_base_size(self,  value:float)->None:
    """"""
    pass
  @property
  def visibility_rect(self)->__core__.Rect2:
    """"""
    pass
  @visibility_rect.setter
  def visibility_rect(self,  value:__core__.Rect2)->None:
    """"""
    pass
  @property
  def local_coords(self)->bool:
    """"""
    pass
  @local_coords.setter
  def local_coords(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_order(self)->int:
    """"""
    pass
  @draw_order.setter
  def draw_order(self,  value:int)->None:
    """"""
    pass
  @property
  def trail_enabled(self)->bool:
    """"""
    pass
  @trail_enabled.setter
  def trail_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def trail_lifetime(self)->float:
    """"""
    pass
  @trail_lifetime.setter
  def trail_lifetime(self,  value:float)->None:
    """"""
    pass
  @property
  def trail_sections(self)->int:
    """"""
    pass
  @trail_sections.setter
  def trail_sections(self,  value:int)->None:
    """"""
    pass
  @property
  def trail_section_subdivisions(self)->int:
    """"""
    pass
  @trail_section_subdivisions.setter
  def trail_section_subdivisions(self,  value:int)->None:
    """"""
    pass
  @property
  def process_material(self)->ParticleProcessMaterial,ShaderMaterial:
    """"""
    pass
  @process_material.setter
  def process_material(self,  value:__particleprocessmaterial__.ParticleProcessMaterial)->None:
    """"""
    pass
  def set_emitting(self, emitting:bool)->None:
    """"""
    pass

  def set_amount(self, amount:int)->None:
    """"""
    pass

  def set_lifetime(self, secs:float)->None:
    """"""
    pass

  def set_one_shot(self, secs:bool)->None:
    """"""
    pass

  def set_pre_process_time(self, secs:float)->None:
    """"""
    pass

  def set_explosiveness_ratio(self, ratio:float)->None:
    """"""
    pass

  def set_randomness_ratio(self, ratio:float)->None:
    """"""
    pass

  def set_visibility_rect(self, visibility_rect:__core__.Rect2)->None:
    """"""
    pass

  def set_use_local_coordinates(self, enable:bool)->None:
    """"""
    pass

  def set_fixed_fps(self, fps:int)->None:
    """"""
    pass

  def set_fractional_delta(self, enable:bool)->None:
    """"""
    pass

  def set_interpolate(self, enable:bool)->None:
    """"""
    pass

  def set_process_material(self, material:__material__.Material)->None:
    """"""
    pass

  def set_speed_scale(self, scale:float)->None:
    """"""
    pass

  def set_collision_base_size(self, size:float)->None:
    """"""
    pass

  def set_interp_to_end(self, interp:float)->None:
    """"""
    pass

  def request_particles_process(self, process_time:float)->None:
    """
				Requests the particles to process for extra process time during a single frame.
				Useful for particle playback, if used in combination with `use_fixed_seed` or by calling `restart` with parameter `keep_seed` set to `true`.
			"""
    pass

  def is_emitting(self)->bool:
    """"""
    pass

  def get_amount(self)->int:
    """"""
    pass

  def get_lifetime(self)->float:
    """"""
    pass

  def get_one_shot(self)->bool:
    """"""
    pass

  def get_pre_process_time(self)->float:
    """"""
    pass

  def get_explosiveness_ratio(self)->float:
    """"""
    pass

  def get_randomness_ratio(self)->float:
    """"""
    pass

  def get_visibility_rect(self)->__core__.Rect2:
    """"""
    pass

  def get_use_local_coordinates(self)->bool:
    """"""
    pass

  def get_fixed_fps(self)->int:
    """"""
    pass

  def get_fractional_delta(self)->bool:
    """"""
    pass

  def get_interpolate(self)->bool:
    """"""
    pass

  def get_process_material(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """"""
    pass

  def get_speed_scale(self)->float:
    """"""
    pass

  def get_collision_base_size(self)->float:
    """"""
    pass

  def get_interp_to_end(self)->float:
    """"""
    pass

  def set_draw_order(self, order:int )->None:
    """"""
    pass

  def get_draw_order(self)->int:
    """"""
    pass

  def set_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def capture_rect(self)->__core__.Rect2:
    """
				Returns a rectangle containing the positions of all existing particles.
				**Note:** When using threaded rendering this method synchronizes the rendering thread. Calling it often may have a negative impact on performance.
			"""
    pass

  def restart(self, keep_seed:bool=False)->None:
    """
				Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the `signal finished` signal before calling.
				**Note:** The `signal finished` signal is only emitted by `one_shot` emitters.
				If `keep_seed` is `true`, the current random seed will be preserved. Useful for seeking and playback.
			"""
    pass

  def set_sub_emitter(self, path:__core__.NodePath|str)->None:
    """"""
    pass

  def get_sub_emitter(self)->__core__.NodePath:
    """"""
    pass

  def emit_particle(self, xform:__core__.Transform2D, velocity:__core__.Vector2, color:__core__.Color, custom:__core__.Color, flags:int)->None:
    """
				Emits a single particle. Whether `xform`, `velocity`, `color` and `custom` are applied depends on the value of `flags`. See `enum EmitFlags`.
				The default ParticleProcessMaterial will overwrite `color` and use the contents of `custom` as `(rotation, age, animation, lifetime)`.
				**Note:** `emit_particle` is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
			"""
    pass

  def set_trail_enabled(self, enabled:bool)->None:
    """"""
    pass

  def set_trail_lifetime(self, secs:float)->None:
    """"""
    pass

  def is_trail_enabled(self)->bool:
    """"""
    pass

  def get_trail_lifetime(self)->float:
    """"""
    pass

  def set_trail_sections(self, sections:int)->None:
    """"""
    pass

  def get_trail_sections(self)->int:
    """"""
    pass

  def set_trail_section_subdivisions(self, subdivisions:int)->None:
    """"""
    pass

  def get_trail_section_subdivisions(self)->int:
    """"""
    pass

  def convert_from_particles(self, particles:__node__.Node)->None:
    """
				Sets this node's properties to match a given `CPUParticles2D` node.
			"""
    pass

  def set_amount_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_amount_ratio(self)->float:
    """"""
    pass

  def set_use_fixed_seed(self, use_fixed_seed:bool)->None:
    """"""
    pass

  def get_use_fixed_seed(self)->bool:
    """"""
    pass

  def set_seed(self, seed:int)->None:
    """"""
    pass

  def get_seed(self)->int:
    """"""
    pass


