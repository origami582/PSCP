from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.Resource as __resource__
import py4godot.classes.e as __e__
import py4godot.classes.E as __e__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.I as __i__
import py4godot.classes.p as __p__
import py4godot.classes.t as __t__
import py4godot.classes.v as __v__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.u as __u__
import py4godot.classes.y as __y__



class EditorSettings(__resource__.Resource):
  """
		Object that holds the project-independent editor settings. These settings are generally visible in the **Editor > Editor Settings** menu.
		Property names use slash delimiters to distinguish sections. Setting values can be of any `Variant` type. It's recommended to use `snake_case` for editor settings to be consistent with the Godot editor itself.
		Accessing the settings can be done using the following methods, such as:
		
		```gdscript
		var settings = EditorInterface.get_editor_settings()
		# `settings.set("some/property", 10)` also works as this class overrides `_set()` internally.
		settings.set_setting("some/property", 10)
		# `settings.get("some/property")` also works as this class overrides `_get()` internally.
		settings.get_setting("some/property")
		var list_of_settings = settings.get_property_list()
		```
		
		
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_editor_settings`.
	"""
  settings_changed: BuiltinSignal

  @staticmethod
  def constructor()->EditorSettings:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorSettings:pass


  def has_setting(self, name:str)->bool:
    """
				Returns `true` if the setting specified by `name` exists, `false` otherwise.
			"""
    pass

  def set_setting(self, name:str, value:Any)->None:
    """
				Sets the `value` of the setting specified by `name`. This is equivalent to using `Object.set` on the EditorSettings instance.
			"""
    pass

  def get_setting(self, name:str)->Any:
    """
				Returns the value of the setting specified by `name`. This is equivalent to using `Object.get` on the EditorSettings instance.
			"""
    pass

  def erase(self, property:str)->None:
    """
				Erases the setting whose name is specified by `property`.
			"""
    pass

  def set_initial_value(self, name:__core__.StringName|str, value:Any, update_current:bool)->None:
    """
				Sets the initial value of the setting specified by `name` to `value`. This is used to provide a value for the Revert button in the Editor Settings. If `update_current` is `true`, the setting is reset to `value` as well.
			"""
    pass

  def add_property_info(self, info:__core__.Dictionary)->None:
    """
				Adds a custom property info to a property. The dictionary must contain:
				- `name`: `String` (the name of the property)
				- `type`: `int` (see `enum Variant.Type`)
				- optionally `hint`: `int` (see `enum PropertyHint`) and `hint_string`: `String`
				
				```gdscript
				var settings = EditorInterface.get_editor_settings()
				settings.set("category/property_name", 0)

				var property_info = {
					"name": "category/property_name",
					"type": TYPE_INT,
					"hint": PROPERTY_HINT_ENUM,
					"hint_string": "one,two,three"
				}

				settings.add_property_info(property_info)
				```
				
				
			"""
    pass

  def set_project_metadata(self, section:str, key:str, data:Any)->None:
    """
				Sets project-specific metadata with the `section`, `key` and `data` specified. This metadata is stored outside the project folder and therefore won't be checked into version control. See also `get_project_metadata`.
			"""
    pass

  def get_project_metadata(self, section:str, key:str, default:Any=None)->Any:
    """
				Returns project-specific metadata for the `section` and `key` specified. If the metadata doesn't exist, `default` will be returned instead. See also `set_project_metadata`.
			"""
    pass

  def set_favorites(self, dirs:__core__.PackedStringArray)->None:
    """
				Sets the list of favorite files and directories for this project.
			"""
    pass

  def get_favorites(self)->__core__.PackedStringArray:
    """
				Returns the list of favorite files and directories for this project.
			"""
    pass

  def set_recent_dirs(self, dirs:__core__.PackedStringArray)->None:
    """
				Sets the list of recently visited folders in the file dialog for this project.
			"""
    pass

  def get_recent_dirs(self)->__core__.PackedStringArray:
    """
				Returns the list of recently visited folders in the file dialog for this project.
			"""
    pass

  def set_builtin_action_override(self, name:str, actions_list:__core__.Array)->None:
    """
				Overrides the built-in editor action `name` with the input actions defined in `actions_list`.
			"""
    pass

  def check_changed_settings_in_group(self, setting_prefix:str)->bool:
    """
				Checks if any settings with the prefix `setting_prefix` exist in the set of changed settings. See also `get_changed_settings`.
			"""
    pass

  def get_changed_settings(self)->__core__.PackedStringArray:
    """
				Gets an array of the settings which have been changed since the last save. Note that internally `changed_settings` is cleared after a successful save, so generally the most appropriate place to use this method is when processing `constant NOTIFICATION_EDITOR_SETTINGS_CHANGED`.
			"""
    pass

  def mark_setting_changed(self, setting:str)->None:
    """
				Marks the passed editor setting as being changed, see `get_changed_settings`. Only settings which exist (see `has_setting`) will be accepted.
			"""
    pass


