from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Container as __container__



class GraphElement(__container__.Container):
  """
		`GraphElement` allows to create custom elements for a `GraphEdit` graph. By default such elements can be selected, resized, and repositioned, but they cannot be connected. For a graph element that allows for connections see `GraphNode`.
	"""
  node_selected: BuiltinSignal
  node_deselected: BuiltinSignal
  raise_request: BuiltinSignal
  delete_request: BuiltinSignal
  resize_request: BuiltinSignal
  resize_end: BuiltinSignal
  dragged: BuiltinSignal
  position_offset_changed: BuiltinSignal

  @staticmethod
  def constructor()->GraphElement:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphElement:pass


  @property
  def position_offset(self)->__core__.Vector2:
    """"""
    pass
  @position_offset.setter
  def position_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def resizable(self)->bool:
    """"""
    pass
  @resizable.setter
  def resizable(self,  value:bool)->None:
    """"""
    pass
  @property
  def draggable(self)->bool:
    """"""
    pass
  @draggable.setter
  def draggable(self,  value:bool)->None:
    """"""
    pass
  @property
  def selectable(self)->bool:
    """"""
    pass
  @selectable.setter
  def selectable(self,  value:bool)->None:
    """"""
    pass
  @property
  def selected(self)->bool:
    """"""
    pass
  @selected.setter
  def selected(self,  value:bool)->None:
    """"""
    pass
  def set_resizable(self, resizable:bool)->None:
    """"""
    pass

  def is_resizable(self)->bool:
    """"""
    pass

  def set_draggable(self, draggable:bool)->None:
    """"""
    pass

  def is_draggable(self)->bool:
    """"""
    pass

  def set_selectable(self, selectable:bool)->None:
    """"""
    pass

  def is_selectable(self)->bool:
    """"""
    pass

  def set_selected(self, selected:bool)->None:
    """"""
    pass

  def is_selected(self)->bool:
    """"""
    pass

  def set_position_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_position_offset(self)->__core__.Vector2:
    """"""
    pass


