from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMesh as __navigationmesh__
import py4godot.classes.Resource as __resource__
import py4godot.classes.Mesh as __mesh__


class SamplePartitionType:
  SAMPLE_PARTITION_WATERSHED:int = 0
  SAMPLE_PARTITION_MONOTONE:int = 1
  SAMPLE_PARTITION_LAYERS:int = 2
  SAMPLE_PARTITION_MAX:int = 3
class ParsedGeometryType:
  PARSED_GEOMETRY_MESH_INSTANCES:int = 0
  PARSED_GEOMETRY_STATIC_COLLIDERS:int = 1
  PARSED_GEOMETRY_BOTH:int = 2
  PARSED_GEOMETRY_MAX:int = 3
class SourceGeometryMode:
  SOURCE_GEOMETRY_ROOT_NODE_CHILDREN:int = 0
  SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN:int = 1
  SOURCE_GEOMETRY_GROUPS_EXPLICIT:int = 2
  SOURCE_GEOMETRY_MAX:int = 3


class NavigationMesh(__resource__.Resource):
  """
		A navigation mesh is a collection of polygons that define which areas of an environment are traversable to aid agents in pathfinding through complicated spaces.
	"""

  @staticmethod
  def constructor()->NavigationMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationMesh:pass


  @property
  def vertices(self)->__core__.PackedVector3Array:
    """"""
    pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def polygons(self)->__core__.Array:
    """"""
    pass
  @polygons.setter
  def polygons(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def sample_partition_type(self)->int:
    """"""
    pass
  @sample_partition_type.setter
  def sample_partition_type(self,  value:int)->None:
    """"""
    pass
  @property
  def geometry_parsed_geometry_type(self)->int:
    """"""
    pass
  @geometry_parsed_geometry_type.setter
  def geometry_parsed_geometry_type(self,  value:int)->None:
    """"""
    pass
  @property
  def geometry_collision_mask(self)->int:
    """"""
    pass
  @geometry_collision_mask.setter
  def geometry_collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def geometry_source_geometry_mode(self)->int:
    """"""
    pass
  @geometry_source_geometry_mode.setter
  def geometry_source_geometry_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def geometry_source_group_name(self)->str:
    """"""
    pass
  @geometry_source_group_name.setter
  def geometry_source_group_name(self,  value:str)->None:
    """"""
    pass
  @property
  def cell_size(self)->float:
    """"""
    pass
  @cell_size.setter
  def cell_size(self,  value:float)->None:
    """"""
    pass
  @property
  def cell_height(self)->float:
    """"""
    pass
  @cell_height.setter
  def cell_height(self,  value:float)->None:
    """"""
    pass
  @property
  def border_size(self)->float:
    """"""
    pass
  @border_size.setter
  def border_size(self,  value:float)->None:
    """"""
    pass
  @property
  def agent_height(self)->float:
    """"""
    pass
  @agent_height.setter
  def agent_height(self,  value:float)->None:
    """"""
    pass
  @property
  def agent_radius(self)->float:
    """"""
    pass
  @agent_radius.setter
  def agent_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def agent_max_climb(self)->float:
    """"""
    pass
  @agent_max_climb.setter
  def agent_max_climb(self,  value:float)->None:
    """"""
    pass
  @property
  def agent_max_slope(self)->float:
    """"""
    pass
  @agent_max_slope.setter
  def agent_max_slope(self,  value:float)->None:
    """"""
    pass
  @property
  def region_min_size(self)->float:
    """"""
    pass
  @region_min_size.setter
  def region_min_size(self,  value:float)->None:
    """"""
    pass
  @property
  def region_merge_size(self)->float:
    """"""
    pass
  @region_merge_size.setter
  def region_merge_size(self,  value:float)->None:
    """"""
    pass
  @property
  def edge_max_length(self)->float:
    """"""
    pass
  @edge_max_length.setter
  def edge_max_length(self,  value:float)->None:
    """"""
    pass
  @property
  def edge_max_error(self)->float:
    """"""
    pass
  @edge_max_error.setter
  def edge_max_error(self,  value:float)->None:
    """"""
    pass
  @property
  def vertices_per_polygon(self)->float:
    """"""
    pass
  @vertices_per_polygon.setter
  def vertices_per_polygon(self,  value:float)->None:
    """"""
    pass
  @property
  def detail_sample_distance(self)->float:
    """"""
    pass
  @detail_sample_distance.setter
  def detail_sample_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def detail_sample_max_error(self)->float:
    """"""
    pass
  @detail_sample_max_error.setter
  def detail_sample_max_error(self,  value:float)->None:
    """"""
    pass
  @property
  def filter_low_hanging_obstacles(self)->bool:
    """"""
    pass
  @filter_low_hanging_obstacles.setter
  def filter_low_hanging_obstacles(self,  value:bool)->None:
    """"""
    pass
  @property
  def filter_ledge_spans(self)->bool:
    """"""
    pass
  @filter_ledge_spans.setter
  def filter_ledge_spans(self,  value:bool)->None:
    """"""
    pass
  @property
  def filter_walkable_low_height_spans(self)->bool:
    """"""
    pass
  @filter_walkable_low_height_spans.setter
  def filter_walkable_low_height_spans(self,  value:bool)->None:
    """"""
    pass
  @property
  def filter_baking_aabb(self)->__core__.AABB:
    """"""
    pass
  @filter_baking_aabb.setter
  def filter_baking_aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  @property
  def filter_baking_aabb_offset(self)->__core__.Vector3:
    """"""
    pass
  @filter_baking_aabb_offset.setter
  def filter_baking_aabb_offset(self,  value:__core__.Vector3)->None:
    """"""
    pass
  def set_sample_partition_type(self, sample_partition_type:int )->None:
    """"""
    pass

  def get_sample_partition_type(self)->int:
    """"""
    pass

  def set_parsed_geometry_type(self, geometry_type:int )->None:
    """"""
    pass

  def get_parsed_geometry_type(self)->int:
    """"""
    pass

  def set_collision_mask(self, mask:int)->None:
    """"""
    pass

  def get_collision_mask(self)->int:
    """"""
    pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `geometry_collision_mask`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_collision_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `geometry_collision_mask` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_source_geometry_mode(self, mask:int )->None:
    """"""
    pass

  def get_source_geometry_mode(self)->int:
    """"""
    pass

  def set_source_group_name(self, mask:__core__.StringName|str)->None:
    """"""
    pass

  def get_source_group_name(self)->__core__.StringName:
    """"""
    pass

  def set_cell_size(self, cell_size:float)->None:
    """"""
    pass

  def get_cell_size(self)->float:
    """"""
    pass

  def set_cell_height(self, cell_height:float)->None:
    """"""
    pass

  def get_cell_height(self)->float:
    """"""
    pass

  def set_border_size(self, border_size:float)->None:
    """"""
    pass

  def get_border_size(self)->float:
    """"""
    pass

  def set_agent_height(self, agent_height:float)->None:
    """"""
    pass

  def get_agent_height(self)->float:
    """"""
    pass

  def set_agent_radius(self, agent_radius:float)->None:
    """"""
    pass

  def get_agent_radius(self)->float:
    """"""
    pass

  def set_agent_max_climb(self, agent_max_climb:float)->None:
    """"""
    pass

  def get_agent_max_climb(self)->float:
    """"""
    pass

  def set_agent_max_slope(self, agent_max_slope:float)->None:
    """"""
    pass

  def get_agent_max_slope(self)->float:
    """"""
    pass

  def set_region_min_size(self, region_min_size:float)->None:
    """"""
    pass

  def get_region_min_size(self)->float:
    """"""
    pass

  def set_region_merge_size(self, region_merge_size:float)->None:
    """"""
    pass

  def get_region_merge_size(self)->float:
    """"""
    pass

  def set_edge_max_length(self, edge_max_length:float)->None:
    """"""
    pass

  def get_edge_max_length(self)->float:
    """"""
    pass

  def set_edge_max_error(self, edge_max_error:float)->None:
    """"""
    pass

  def get_edge_max_error(self)->float:
    """"""
    pass

  def set_vertices_per_polygon(self, vertices_per_polygon:float)->None:
    """"""
    pass

  def get_vertices_per_polygon(self)->float:
    """"""
    pass

  def set_detail_sample_distance(self, detail_sample_dist:float)->None:
    """"""
    pass

  def get_detail_sample_distance(self)->float:
    """"""
    pass

  def set_detail_sample_max_error(self, detail_sample_max_error:float)->None:
    """"""
    pass

  def get_detail_sample_max_error(self)->float:
    """"""
    pass

  def set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles:bool)->None:
    """"""
    pass

  def get_filter_low_hanging_obstacles(self)->bool:
    """"""
    pass

  def set_filter_ledge_spans(self, filter_ledge_spans:bool)->None:
    """"""
    pass

  def get_filter_ledge_spans(self)->bool:
    """"""
    pass

  def set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans:bool)->None:
    """"""
    pass

  def get_filter_walkable_low_height_spans(self)->bool:
    """"""
    pass

  def set_filter_baking_aabb(self, baking_aabb:__core__.AABB)->None:
    """"""
    pass

  def get_filter_baking_aabb(self)->__core__.AABB:
    """"""
    pass

  def set_filter_baking_aabb_offset(self, baking_aabb_offset:__core__.Vector3)->None:
    """"""
    pass

  def get_filter_baking_aabb_offset(self)->__core__.Vector3:
    """"""
    pass

  def set_vertices(self, vertices:__core__.PackedVector3Array)->None:
    """
				Sets the vertices that can be then indexed to create polygons with the `add_polygon` method.
			"""
    pass

  def get_vertices(self)->__core__.PackedVector3Array:
    """
				Returns a `PackedVector3Array` containing all the vertices being used to create the polygons.
			"""
    pass

  def add_polygon(self, polygon:__core__.PackedInt32Array)->None:
    """
				Adds a polygon using the indices of the vertices you get when calling `get_vertices`.
			"""
    pass

  def get_polygon_count(self)->int:
    """
				Returns the number of polygons in the navigation mesh.
			"""
    pass

  def get_polygon(self, idx:int)->__core__.PackedInt32Array:
    """
				Returns a `PackedInt32Array` containing the indices of the vertices of a created polygon.
			"""
    pass

  def clear_polygons(self)->None:
    """
				Clears the array of polygons, but it doesn't clear the array of vertices.
			"""
    pass

  def create_from_mesh(self, mesh:__mesh__.Mesh)->None:
    """
				Initializes the navigation mesh by setting the vertices and indices according to a `Mesh`.
				**Note:** The given `mesh` must be of type `constant Mesh.PRIMITIVE_TRIANGLES` and have an index array.
			"""
    pass

  def clear(self)->None:
    """
				Clears the internal arrays for vertices and polygon indices.
			"""
    pass


