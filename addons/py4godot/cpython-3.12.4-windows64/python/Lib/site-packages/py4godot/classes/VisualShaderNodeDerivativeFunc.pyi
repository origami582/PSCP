from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeDerivativeFunc as __visualshadernodederivativefunc__
import py4godot.classes.VisualShaderNode as __visualshadernode__


class OpType:
  OPERATOR_KIND_SCALAR:int = 0
  OPERATOR_KIND_VECTOR_2D:int = 1
  OPERATOR_KIND_VECTOR_3D:int = 2
  OPERATOR_KIND_VECTOR_4D:int = 3
  OPERATOR_KIND_MAX:int = 4
class Function:
  FUNC_SUM:int = 0
  FUNC_X:int = 1
  FUNC_Y:int = 2
  FUNC_MAX:int = 3
class Precision:
  PRECISION_NONE:int = 0
  PRECISION_COARSE:int = 1
  PRECISION_FINE:int = 2
  PRECISION_MAX:int = 3


class VisualShaderNodeDerivativeFunc(__visualshadernode__.VisualShaderNode):
  """
		This node is only available in `Fragment` and `Light` visual shaders.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeDerivativeFunc:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeDerivativeFunc:pass


  @property
  def op_type(self)->int:
    """"""
    pass
  @op_type.setter
  def op_type(self,  value:int)->None:
    """"""
    pass
  @property
  def function(self)->int:
    """"""
    pass
  @function.setter
  def function(self,  value:int)->None:
    """"""
    pass
  @property
  def precision(self)->int:
    """"""
    pass
  @precision.setter
  def precision(self,  value:int)->None:
    """"""
    pass
  def set_op_type(self, type:int )->None:
    """"""
    pass

  def get_op_type(self)->int:
    """"""
    pass

  def set_function(self, func:int )->None:
    """"""
    pass

  def get_function(self)->int:
    """"""
    pass

  def set_precision(self, precision:int )->None:
    """"""
    pass

  def get_precision(self)->int:
    """"""
    pass


