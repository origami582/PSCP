from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Container as __container__
import py4godot.classes.InputEvent as __inputevent__



class SubViewportContainer(__container__.Container):
  """
		A container that displays the contents of underlying `SubViewport` child nodes. It uses the combined size of the `SubViewport`s as minimum size, unless `stretch` is enabled.
		**Note:** Changing a `SubViewportContainer`'s `Control.scale` will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container).
		**Note:** The `SubViewportContainer` forwards mouse-enter and mouse-exit notifications to its sub-viewports.
	"""

  @staticmethod
  def constructor()->SubViewportContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->SubViewportContainer:pass


  @property
  def stretch(self)->bool:
    """"""
    pass
  @stretch.setter
  def stretch(self,  value:bool)->None:
    """"""
    pass
  @property
  def stretch_shrink(self)->int:
    """"""
    pass
  @stretch_shrink.setter
  def stretch_shrink(self,  value:int)->None:
    """"""
    pass
  @property
  def mouse_target(self)->bool:
    """"""
    pass
  @mouse_target.setter
  def mouse_target(self,  value:bool)->None:
    """"""
    pass
  def _propagate_input_event(self, event:__inputevent__.InputEvent)->bool:
    """
				Virtual method to be implemented by the user. If it returns `true`, the `event` is propagated to `SubViewport` children. Propagation doesn't happen if it returns `false`. If the function is not implemented, all events are propagated to SubViewports.
			"""
    pass

  def set_stretch(self, enable:bool)->None:
    """"""
    pass

  def is_stretch_enabled(self)->bool:
    """"""
    pass

  def set_stretch_shrink(self, amount:int)->None:
    """"""
    pass

  def get_stretch_shrink(self)->int:
    """"""
    pass

  def set_mouse_target(self, amount:bool)->None:
    """"""
    pass

  def is_mouse_target_enabled(self)->bool:
    """"""
    pass


