from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__


class DampMode:
  DAMP_MODE_COMBINE:int = 0
  DAMP_MODE_REPLACE:int = 1
class JointType:
  JOINT_KIND_NONE:int = 0
  JOINT_KIND_PIN:int = 1
  JOINT_KIND_CONE:int = 2
  JOINT_KIND_HINGE:int = 3
  JOINT_KIND_SLIDER:int = 4
  JOINT_KIND_6DOF:int = 5


class PhysicalBone3D(__physicsbody3d__.PhysicsBody3D):
  """
		The `PhysicalBone3D` node is a physics body that can be used to make bones in a `Skeleton3D` react to physics.
		**Note:** In order to detect physical bones with raycasts, the `SkeletonModifier3D.active` property of the parent `PhysicalBoneSimulator3D` must be `true` and the `Skeleton3D`'s bone must be assigned to `PhysicalBone3D` correctly; it means that `get_bone_id` should return a valid id (`>= 0`).
	"""

  @staticmethod
  def constructor()->PhysicalBone3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicalBone3D:pass


  @property
  def joint_type(self)->int:
    """"""
    pass
  @joint_type.setter
  def joint_type(self,  value:int)->None:
    """"""
    pass
  @property
  def joint_offset(self)->__core__.Transform3D:
    """"""
    pass
  @joint_offset.setter
  def joint_offset(self,  value:__core__.Transform3D)->None:
    """"""
    pass
  @property
  def joint_rotation(self)->__core__.Vector3:
    """"""
    pass
  @joint_rotation.setter
  def joint_rotation(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def body_offset(self)->__core__.Transform3D:
    """"""
    pass
  @body_offset.setter
  def body_offset(self,  value:__core__.Transform3D)->None:
    """"""
    pass
  @property
  def mass(self)->float:
    """"""
    pass
  @mass.setter
  def mass(self,  value:float)->None:
    """"""
    pass
  @property
  def friction(self)->float:
    """"""
    pass
  @friction.setter
  def friction(self,  value:float)->None:
    """"""
    pass
  @property
  def bounce(self)->float:
    """"""
    pass
  @bounce.setter
  def bounce(self,  value:float)->None:
    """"""
    pass
  @property
  def gravity_scale(self)->float:
    """"""
    pass
  @gravity_scale.setter
  def gravity_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def custom_integrator(self)->bool:
    """"""
    pass
  @custom_integrator.setter
  def custom_integrator(self,  value:bool)->None:
    """"""
    pass
  @property
  def linear_damp_mode(self)->int:
    """"""
    pass
  @linear_damp_mode.setter
  def linear_damp_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def linear_damp(self)->float:
    """"""
    pass
  @linear_damp.setter
  def linear_damp(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_damp_mode(self)->int:
    """"""
    pass
  @angular_damp_mode.setter
  def angular_damp_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def angular_damp(self)->float:
    """"""
    pass
  @angular_damp.setter
  def angular_damp(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_velocity(self)->__core__.Vector3:
    """"""
    pass
  @linear_velocity.setter
  def linear_velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def angular_velocity(self)->__core__.Vector3:
    """"""
    pass
  @angular_velocity.setter
  def angular_velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def can_sleep(self)->bool:
    """"""
    pass
  @can_sleep.setter
  def can_sleep(self,  value:bool)->None:
    """"""
    pass
  def _integrate_forces(self, state:__physicsdirectbodystate3d__.PhysicsDirectBodyState3D)->None:
    """
				Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it is called before the standard force integration, but the `custom_integrator` property allows you to disable the standard force integration and do fully custom force integration for a body.
			"""
    pass

  def apply_central_impulse(self, impulse:__core__.Vector3)->None:
    """
				Applies a directional impulse without affecting rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_integrate_forces" functions otherwise).
				This is equivalent to using `apply_impulse` at the body's center of mass.
			"""
    pass

  def apply_impulse(self, impulse:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None:
    """
				Applies a positioned impulse to the PhysicsBone3D.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_integrate_forces" functions otherwise).
				`position` is the offset from the PhysicsBone3D origin in global coordinates.
			"""
    pass

  def set_joint_type(self, joint_type:int )->None:
    """"""
    pass

  def get_joint_type(self)->int:
    """"""
    pass

  def set_joint_offset(self, offset:__core__.Transform3D)->None:
    """"""
    pass

  def get_joint_offset(self)->__core__.Transform3D:
    """"""
    pass

  def set_joint_rotation(self, euler:__core__.Vector3)->None:
    """"""
    pass

  def get_joint_rotation(self)->__core__.Vector3:
    """"""
    pass

  def set_body_offset(self, offset:__core__.Transform3D)->None:
    """"""
    pass

  def get_body_offset(self)->__core__.Transform3D:
    """"""
    pass

  def get_simulate_physics(self)->bool:
    """
				Returns `true` if the PhysicsBone3D is allowed to simulate physics.
			"""
    pass

  def is_simulating_physics(self)->bool:
    """
				Returns `true` if the PhysicsBone3D is currently simulating physics.
			"""
    pass

  def get_bone_id(self)->int:
    """
				Returns the unique identifier of the PhysicsBone3D.
			"""
    pass

  def set_mass(self, mass:float)->None:
    """"""
    pass

  def get_mass(self)->float:
    """"""
    pass

  def set_friction(self, friction:float)->None:
    """"""
    pass

  def get_friction(self)->float:
    """"""
    pass

  def set_bounce(self, bounce:float)->None:
    """"""
    pass

  def get_bounce(self)->float:
    """"""
    pass

  def set_gravity_scale(self, gravity_scale:float)->None:
    """"""
    pass

  def get_gravity_scale(self)->float:
    """"""
    pass

  def set_linear_damp_mode(self, linear_damp_mode:int )->None:
    """"""
    pass

  def get_linear_damp_mode(self)->int:
    """"""
    pass

  def set_angular_damp_mode(self, angular_damp_mode:int )->None:
    """"""
    pass

  def get_angular_damp_mode(self)->int:
    """"""
    pass

  def set_linear_damp(self, linear_damp:float)->None:
    """"""
    pass

  def get_linear_damp(self)->float:
    """"""
    pass

  def set_angular_damp(self, angular_damp:float)->None:
    """"""
    pass

  def get_angular_damp(self)->float:
    """"""
    pass

  def set_linear_velocity(self, linear_velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_linear_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_angular_velocity(self, angular_velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_angular_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_use_custom_integrator(self, enable:bool)->None:
    """"""
    pass

  def is_using_custom_integrator(self)->bool:
    """"""
    pass

  def set_can_sleep(self, able_to_sleep:bool)->None:
    """"""
    pass

  def is_able_to_sleep(self)->bool:
    """"""
    pass


