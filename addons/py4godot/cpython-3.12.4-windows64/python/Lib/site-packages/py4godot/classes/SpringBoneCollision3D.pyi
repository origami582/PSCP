from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.Node3D as __node3d__



class SpringBoneCollision3D(__node3d__.Node3D):
  """
		A collision can be a child of `SpringBoneSimulator3D`. If it is not a child of `SpringBoneSimulator3D`, it has no effect.
		The colliding and sliding are done in the `SpringBoneSimulator3D`'s modification process in order of its collision list which is set by `SpringBoneSimulator3D.set_collision_path`. If `SpringBoneSimulator3D.are_all_child_collisions_enabled` is `true`, the order matches `SceneTree`.
		If `bone` is set, it synchronizes with the bone pose of the ancestor `Skeleton3D`, which is done in before the `SpringBoneSimulator3D`'s modification process as the pre-process.
		**Warning:** A scaled `SpringBoneCollision3D` will likely not behave as expected. Make sure that the parent `Skeleton3D` and its bones are not scaled.
	"""

  @staticmethod
  def constructor()->SpringBoneCollision3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpringBoneCollision3D:pass


  @property
  def bone_name(self)->__core__.StringName:
    """"""
    pass
  @bone_name.setter
  def bone_name(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def bone(self)->int:
    """"""
    pass
  @bone.setter
  def bone(self,  value:int)->None:
    """"""
    pass
  @property
  def position_offset(self)->__core__.Vector3:
    """"""
    pass
  @position_offset.setter
  def position_offset(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def rotation_offset(self)->__core__.Quaternion:
    """"""
    pass
  @rotation_offset.setter
  def rotation_offset(self,  value:__core__.Quaternion)->None:
    """"""
    pass
  def get_skeleton(self)->__skeleton3d__.Skeleton3D:
    """
				Get parent `Skeleton3D` node of the parent `SpringBoneSimulator3D` if found.
			"""
    pass

  def set_bone_name(self, bone_name:str)->None:
    """"""
    pass

  def get_bone_name(self)->str:
    """"""
    pass

  def set_bone(self, bone:int)->None:
    """"""
    pass

  def get_bone(self)->int:
    """"""
    pass

  def set_position_offset(self, offset:__core__.Vector3)->None:
    """"""
    pass

  def get_position_offset(self)->__core__.Vector3:
    """"""
    pass

  def set_rotation_offset(self, offset:__core__.Quaternion)->None:
    """"""
    pass

  def get_rotation_offset(self)->__core__.Quaternion:
    """"""
    pass


