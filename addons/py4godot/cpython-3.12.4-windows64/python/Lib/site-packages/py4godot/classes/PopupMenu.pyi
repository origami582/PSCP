from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.NativeMenu as __nativemenu__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.Button as __button__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.Panel as __panel__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.Control as __control__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.Tree as __tree__
import py4godot.classes.Label as __label__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Slider as __slider__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.Shortcut as __shortcut__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Range as __range__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Popup as __popup__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Container as __container__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.LinkButton as __linkbutton__



class PopupMenu(__popup__.Popup):
  """
		`PopupMenu` is a modal window used to display a list of options. Useful for toolbars and context menus.
		The size of a `PopupMenu` can be limited by using `Window.max_size`. If the height of the list of items is larger than the maximum height of the `PopupMenu`, a `ScrollContainer` within the popup will allow the user to scroll the contents. If no maximum size is set, or if it is set to `0`, the `PopupMenu` height will be limited by its parent rect.
		All `set_*` methods allow negative item indices, i.e. `-1` to access the last item, `-2` to select the second-to-last item, and so on.
		**Incremental search:** Like `ItemList` and `Tree`, `PopupMenu` supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing `ProjectSettings.gui/timers/incremental_search_max_interval_msec`.
		**Note:** The ID values used for items are limited to 32 bits, not full 64 bits of `int`. This has a range of `-2^32` to `2^32 - 1`, i.e. `-2147483648` to `2147483647`.
	"""
  id_pressed: BuiltinSignal
  id_focused: BuiltinSignal
  index_pressed: BuiltinSignal
  menu_changed: BuiltinSignal

  @staticmethod
  def constructor()->PopupMenu:pass



  @staticmethod
  def cast(other:__object__.Object)->PopupMenu:pass


  @property
  def hide_on_item_selection(self)->bool:
    """"""
    pass
  @hide_on_item_selection.setter
  def hide_on_item_selection(self,  value:bool)->None:
    """"""
    pass
  @property
  def hide_on_checkable_item_selection(self)->bool:
    """"""
    pass
  @hide_on_checkable_item_selection.setter
  def hide_on_checkable_item_selection(self,  value:bool)->None:
    """"""
    pass
  @property
  def hide_on_state_item_selection(self)->bool:
    """"""
    pass
  @hide_on_state_item_selection.setter
  def hide_on_state_item_selection(self,  value:bool)->None:
    """"""
    pass
  @property
  def submenu_popup_delay(self)->float:
    """"""
    pass
  @submenu_popup_delay.setter
  def submenu_popup_delay(self,  value:float)->None:
    """"""
    pass
  @property
  def allow_search(self)->bool:
    """"""
    pass
  @allow_search.setter
  def allow_search(self,  value:bool)->None:
    """"""
    pass
  @property
  def system_menu_id(self)->int:
    """"""
    pass
  @system_menu_id.setter
  def system_menu_id(self,  value:int)->None:
    """"""
    pass
  @property
  def prefer_native_menu(self)->bool:
    """"""
    pass
  @prefer_native_menu.setter
  def prefer_native_menu(self,  value:bool)->None:
    """"""
    pass
  @property
  def item_count(self)->int:
    """"""
    pass
  @item_count.setter
  def item_count(self,  value:int)->None:
    """"""
    pass
  def activate_item_by_event(self, event:__inputevent__.InputEvent, for_global_only:bool=False)->bool:
    """
				Checks the provided `event` against the `PopupMenu`'s shortcuts and accelerators, and activates the first item with matching events. If `for_global_only` is `true`, only shortcuts and accelerators with `global` set to `true` will be called.
				Returns `true` if an item was successfully activated.
				**Note:** Certain `Control`s, such as `MenuButton`, will call this method automatically.
			"""
    pass

  def set_prefer_native_menu(self, enabled:bool)->None:
    """"""
    pass

  def is_prefer_native_menu(self)->bool:
    """"""
    pass

  def is_native_menu(self)->bool:
    """
				Returns `true` if the system native menu is supported and currently used by this `PopupMenu`.
			"""
    pass

  def add_item(self, label:str, id:int=-1, accel:int =0)->None:
    """
				Adds a new item with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** The provided `id` is used only in `signal id_pressed` and `signal id_focused` signals. It's not related to the `index` arguments in e.g. `set_item_checked`.
			"""
    pass

  def add_icon_item(self, texture:__texture2d__.Texture2D, label:str, id:int=-1, accel:int =0)->None:
    """
				Adds a new item with text `label` and icon `texture`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
			"""
    pass

  def add_check_item(self, label:str, id:int=-1, accel:int =0)->None:
    """
				Adds a new checkable item with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_icon_check_item(self, texture:__texture2d__.Texture2D, label:str, id:int=-1, accel:int =0)->None:
    """
				Adds a new checkable item with text `label` and icon `texture`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_radio_check_item(self, label:str, id:int=-1, accel:int =0)->None:
    """
				Adds a new radio check button with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_icon_radio_check_item(self, texture:__texture2d__.Texture2D, label:str, id:int=-1, accel:int =0)->None:
    """
				Same as `add_icon_check_item`, but uses a radio check button.
			"""
    pass

  def add_multistate_item(self, label:str, max_states:int, default_state:int=0, id:int=-1, accel:int =0)->None:
    """
				Adds a new multistate item with text `label`.
				Contrarily to normal binary items, multistate items can have more than two states, as defined by `max_states`. The default value is defined by `default_state`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				```gdscript
				func _ready():
					add_multistate_item("Item", 3, 0)

					index_pressed.connect(func(index: int):
							toggle_item_multistate(index)
							match get_item_multistate(index):
								0:
									print("First state")
								1:
									print("Second state")
								2:
									print("Third state")
						)
				```
				**Note:** Multistate items don't update their state automatically and must be done manually. See `toggle_item_multistate`, `set_item_multistate` and `get_item_multistate` for more info on how to control it.
			"""
    pass

  def add_shortcut(self, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False, allow_echo:bool=False)->None:
    """
				Adds a `Shortcut`.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				If `allow_echo` is `true`, the shortcut can be activated with echo events.
			"""
    pass

  def add_icon_shortcut(self, texture:__texture2d__.Texture2D, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False, allow_echo:bool=False)->None:
    """
				Adds a new item and assigns the specified `Shortcut` and icon `texture` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				If `allow_echo` is `true`, the shortcut can be activated with echo events.
			"""
    pass

  def add_check_shortcut(self, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False)->None:
    """
				Adds a new checkable item and assigns the specified `Shortcut` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_icon_check_shortcut(self, texture:__texture2d__.Texture2D, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False)->None:
    """
				Adds a new checkable item and assigns the specified `Shortcut` and icon `texture` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_radio_check_shortcut(self, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False)->None:
    """
				Adds a new radio check button and assigns a `Shortcut` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			"""
    pass

  def add_icon_radio_check_shortcut(self, texture:__texture2d__.Texture2D, shortcut:__shortcut__.Shortcut, id:int=-1, global_:bool=False)->None:
    """
				Same as `add_icon_check_shortcut`, but uses a radio check button.
			"""
    pass

  def add_submenu_item(self, label:str, submenu:str, id:int=-1)->None:
    """
				Adds an item that will act as a submenu of the parent `PopupMenu` node when clicked. The `submenu` argument must be the name of an existing `PopupMenu` that has been added as a child to this node. This submenu will be shown when the item is clicked, hovered for long enough, or activated using the `ui_select` or `ui_right` input actions.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
			"""
    pass

  def add_submenu_node_item(self, label:str, submenu:__popupmenu__.PopupMenu, id:int=-1)->None:
    """
				Adds an item that will act as a submenu of the parent `PopupMenu` node when clicked. This submenu will be shown when the item is clicked, hovered for long enough, or activated using the `ui_select` or `ui_right` input actions.
				`submenu` must be either child of this `PopupMenu` or has no parent node (in which case it will be automatically added as a child). If the `submenu` popup has another parent, this method will fail.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
			"""
    pass

  def set_item_text(self, index:int, text:str)->None:
    """
				Sets the text of the item at the given `index`.
			"""
    pass

  def set_item_text_direction(self, index:int, direction:int )->None:
    """
				Sets item's text base writing direction.
			"""
    pass

  def set_item_language(self, index:int, language:str)->None:
    """
				Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
			"""
    pass

  def set_item_icon(self, index:int, icon:__texture2d__.Texture2D)->None:
    """
				Replaces the `Texture2D` icon of the item at the given `index`.
			"""
    pass

  def set_item_icon_max_width(self, index:int, width:int)->None:
    """
				Sets the maximum allowed width of the icon for the item at the given `index`. This limit is applied on top of the default size of the icon and on top of `theme_item icon_max_width`. The height is adjusted according to the icon's ratio.
			"""
    pass

  def set_item_icon_modulate(self, index:int, modulate:__core__.Color)->None:
    """
				Sets a modulating `Color` of the item's icon at the given `index`.
			"""
    pass

  def set_item_checked(self, index:int, checked:bool)->None:
    """
				Sets the checkstate status of the item at the given `index`.
			"""
    pass

  def set_item_id(self, index:int, id:int)->None:
    """
				Sets the `id` of the item at the given `index`.
				The `id` is used in `signal id_pressed` and `signal id_focused` signals.
			"""
    pass

  def set_item_accelerator(self, index:int, accel:int )->None:
    """
				Sets the accelerator of the item at the given `index`. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. `accel` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
			"""
    pass

  def set_item_metadata(self, index:int, metadata:Any)->None:
    """
				Sets the metadata of an item, which may be of any type. You can later get it with `get_item_metadata`, which provides a simple way of assigning context data to items.
			"""
    pass

  def set_item_disabled(self, index:int, disabled:bool)->None:
    """
				Enables/disables the item at the given `index`. When it is disabled, it can't be selected and its action can't be invoked.
			"""
    pass

  def set_item_submenu(self, index:int, submenu:str)->None:
    """
				Sets the submenu of the item at the given `index`. The submenu is the name of a child `PopupMenu` node that would be shown when the item is clicked.
			"""
    pass

  def set_item_submenu_node(self, index:int, submenu:__popupmenu__.PopupMenu)->None:
    """
				Sets the submenu of the item at the given `index`. The submenu is a `PopupMenu` node that would be shown when the item is clicked. It must either be a child of this `PopupMenu` or has no parent (in which case it will be automatically added as a child). If the `submenu` popup has another parent, this method will fail.
			"""
    pass

  def set_item_as_separator(self, index:int, enable:bool)->None:
    """
				Mark the item at the given `index` as a separator, which means that it would be displayed as a line. If `false`, sets the type of the item to plain text.
			"""
    pass

  def set_item_as_checkable(self, index:int, enable:bool)->None:
    """
				Sets whether the item at the given `index` has a checkbox. If `false`, sets the type of the item to plain text.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
			"""
    pass

  def set_item_as_radio_checkable(self, index:int, enable:bool)->None:
    """
				Sets the type of the item at the given `index` to radio button. If `false`, sets the type of the item to plain text.
			"""
    pass

  def set_item_tooltip(self, index:int, tooltip:str)->None:
    """
				Sets the `String` tooltip of the item at the given `index`.
			"""
    pass

  def set_item_shortcut(self, index:int, shortcut:__shortcut__.Shortcut, global_:bool=False)->None:
    """
				Sets a `Shortcut` for the item at the given `index`.
			"""
    pass

  def set_item_indent(self, index:int, indent:int)->None:
    """
				Sets the horizontal offset of the item at the given `index`.
			"""
    pass

  def set_item_multistate(self, index:int, state:int)->None:
    """
				Sets the state of a multistate item. See `add_multistate_item` for details.
			"""
    pass

  def set_item_multistate_max(self, index:int, max_states:int)->None:
    """
				Sets the max states of a multistate item. See `add_multistate_item` for details.
			"""
    pass

  def set_item_shortcut_disabled(self, index:int, disabled:bool)->None:
    """
				Disables the `Shortcut` of the item at the given `index`.
			"""
    pass

  def toggle_item_checked(self, index:int)->None:
    """
				Toggles the check state of the item at the given `index`.
			"""
    pass

  def toggle_item_multistate(self, index:int)->None:
    """
				Cycle to the next state of a multistate item. See `add_multistate_item` for details.
			"""
    pass

  def get_item_text(self, index:int)->str:
    """
				Returns the text of the item at the given `index`.
			"""
    pass

  def get_item_text_direction(self, index:int)->int:
    """
				Returns item's text base writing direction.
			"""
    pass

  def get_item_language(self, index:int)->str:
    """
				Returns item's text language code.
			"""
    pass

  def get_item_icon(self, index:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns the icon of the item at the given `index`.
			"""
    pass

  def get_item_icon_max_width(self, index:int)->int:
    """
				Returns the maximum allowed width of the icon for the item at the given `index`.
			"""
    pass

  def get_item_icon_modulate(self, index:int)->__core__.Color:
    """
				Returns a `Color` modulating the item's icon at the given `index`.
			"""
    pass

  def is_item_checked(self, index:int)->bool:
    """
				Returns `true` if the item at the given `index` is checked.
			"""
    pass

  def get_item_id(self, index:int)->int:
    """
				Returns the ID of the item at the given `index`. `id` can be manually assigned, while index can not.
			"""
    pass

  def get_item_index(self, id:int)->int:
    """
				Returns the index of the item containing the specified `id`. Index is automatically assigned to each item by the engine and can not be set manually.
			"""
    pass

  def get_item_accelerator(self, index:int)->int:
    """
				Returns the accelerator of the item at the given `index`. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The return value is an integer which is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`). If no accelerator is defined for the specified `index`, `get_item_accelerator` returns `0` (corresponding to `constant @GlobalScope.KEY_NONE`).
			"""
    pass

  def get_item_metadata(self, index:int)->Any:
    """
				Returns the metadata of the specified item, which might be of any type. You can set it with `set_item_metadata`, which provides a simple way of assigning context data to items.
			"""
    pass

  def is_item_disabled(self, index:int)->bool:
    """
				Returns `true` if the item at the given `index` is disabled. When it is disabled it can't be selected, or its action invoked.
				See `set_item_disabled` for more info on how to disable an item.
			"""
    pass

  def get_item_submenu(self, index:int)->str:
    """
				Returns the submenu name of the item at the given `index`. See `add_submenu_item` for more info on how to add a submenu.
			"""
    pass

  def get_item_submenu_node(self, index:int)->__popupmenu__.PopupMenu:
    """
				Returns the submenu of the item at the given `index`, or `null` if no submenu was added. See `add_submenu_node_item` for more info on how to add a submenu.
			"""
    pass

  def is_item_separator(self, index:int)->bool:
    """
				Returns `true` if the item is a separator. If it is, it will be displayed as a line. See `add_separator` for more info on how to add a separator.
			"""
    pass

  def is_item_checkable(self, index:int)->bool:
    """
				Returns `true` if the item at the given `index` is checkable in some way, i.e. if it has a checkbox or radio button.
				**Note:** Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.
			"""
    pass

  def is_item_radio_checkable(self, index:int)->bool:
    """
				Returns `true` if the item at the given `index` has radio button-style checkability.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
			"""
    pass

  def is_item_shortcut_disabled(self, index:int)->bool:
    """
				Returns `true` if the specified item's shortcut is disabled.
			"""
    pass

  def get_item_tooltip(self, index:int)->str:
    """
				Returns the tooltip associated with the item at the given `index`.
			"""
    pass

  def get_item_shortcut(self, index:int)->__shortcut__.Shortcut:
    """
				Returns the `Shortcut` associated with the item at the given `index`.
			"""
    pass

  def get_item_indent(self, index:int)->int:
    """
				Returns the horizontal offset of the item at the given `index`.
			"""
    pass

  def get_item_multistate_max(self, index:int)->int:
    """
				Returns the max states of the item at the given `index`.
			"""
    pass

  def get_item_multistate(self, index:int)->int:
    """
				Returns the state of the item at the given `index`.
			"""
    pass

  def set_focused_item(self, index:int)->None:
    """
				Sets the currently focused item as the given `index`.
				Passing `-1` as the index makes so that no item is focused.
			"""
    pass

  def get_focused_item(self)->int:
    """
				Returns the index of the currently focused item. Returns `-1` if no item is focused.
			"""
    pass

  def set_item_count(self, count:int)->None:
    """"""
    pass

  def get_item_count(self)->int:
    """"""
    pass

  def scroll_to_item(self, index:int)->None:
    """
				Moves the scroll view to make the item at the given `index` visible.
			"""
    pass

  def remove_item(self, index:int)->None:
    """
				Removes the item at the given `index` from the menu.
				**Note:** The indices of items after the removed item will be shifted by one.
			"""
    pass

  def add_separator(self, label:str= __core__.String.new0(), id:int=-1)->None:
    """
				Adds a separator between items. Separators also occupy an index, which you can set by using the `id` parameter.
				A `label` can optionally be provided, which will appear at the center of the separator.
			"""
    pass

  def clear(self, free_submenus:bool=False)->None:
    """
				Removes all items from the `PopupMenu`. If `free_submenus` is `true`, the submenu nodes are automatically freed.
			"""
    pass

  def set_hide_on_item_selection(self, enable:bool)->None:
    """"""
    pass

  def is_hide_on_item_selection(self)->bool:
    """"""
    pass

  def set_hide_on_checkable_item_selection(self, enable:bool)->None:
    """"""
    pass

  def is_hide_on_checkable_item_selection(self)->bool:
    """"""
    pass

  def set_hide_on_state_item_selection(self, enable:bool)->None:
    """"""
    pass

  def is_hide_on_state_item_selection(self)->bool:
    """"""
    pass

  def set_submenu_popup_delay(self, seconds:float)->None:
    """"""
    pass

  def get_submenu_popup_delay(self)->float:
    """"""
    pass

  def set_allow_search(self, allow:bool)->None:
    """"""
    pass

  def get_allow_search(self)->bool:
    """"""
    pass

  def is_system_menu(self)->bool:
    """
				Returns `true` if the menu is bound to the special system menu.
			"""
    pass

  def set_system_menu(self, system_menu_id:int )->None:
    """"""
    pass

  def get_system_menu(self)->int:
    """"""
    pass


