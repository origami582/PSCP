from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.PhysicsMaterial as __physicsmaterial__



class StaticBody2D(__physicsbody2d__.PhysicsBody2D):
  """
		A static 2D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, `AnimationMixer`s (with `AnimationMixer.callback_mode_process` set to `constant AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS`), and `RemoteTransform2D`.
		When `StaticBody2D` is moved, it is teleported to its new position without affecting other physics bodies in its path. If this is not desired, use `AnimatableBody2D` instead.
		`StaticBody2D` is useful for completely static objects like floors and walls, as well as moving surfaces like conveyor belts and circular revolving platforms (by using `constant_linear_velocity` and `constant_angular_velocity`).
	"""

  @staticmethod
  def constructor()->StaticBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->StaticBody2D:pass


  @property
  def physics_material_override(self)->__physicsmaterial__.PhysicsMaterial:
    """"""
    pass
  @physics_material_override.setter
  def physics_material_override(self,  value:__physicsmaterial__.PhysicsMaterial)->None:
    """"""
    pass
  @property
  def constant_linear_velocity(self)->__core__.Vector2:
    """"""
    pass
  @constant_linear_velocity.setter
  def constant_linear_velocity(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def constant_angular_velocity(self)->float:
    """"""
    pass
  @constant_angular_velocity.setter
  def constant_angular_velocity(self,  value:float)->None:
    """"""
    pass
  def set_constant_linear_velocity(self, vel:__core__.Vector2)->None:
    """"""
    pass

  def set_constant_angular_velocity(self, vel:float)->None:
    """"""
    pass

  def get_constant_linear_velocity(self)->__core__.Vector2:
    """"""
    pass

  def get_constant_angular_velocity(self)->float:
    """"""
    pass

  def set_physics_material_override(self, physics_material_override:__physicsmaterial__.PhysicsMaterial)->None:
    """"""
    pass

  def get_physics_material_override(self)->__physicsmaterial__.PhysicsMaterial:
    """"""
    pass


