from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.SkeletonProfileHumanoid as __skeletonprofilehumanoid__
import py4godot.classes.SkeletonProfile as __skeletonprofile__


class TailDirection:
  TAIL_DIRECTION_AVERAGE_CHILDREN:int = 0
  TAIL_DIRECTION_SPECIFIC_CHILD:int = 1
  TAIL_DIRECTION_END:int = 2


class SkeletonProfile(__resource__.Resource):
  """
		This resource is used in `EditorScenePostImport`. Some parameters are referring to bones in `Skeleton3D`, `Skin`, `Animation`, and some other nodes are rewritten based on the parameters of `SkeletonProfile`.
		**Note:** These parameters need to be set only when creating a custom profile. In `SkeletonProfileHumanoid`, they are defined internally as read-only values.
	"""
  profile_updated: BuiltinSignal

  @staticmethod
  def constructor()->SkeletonProfile:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonProfile:pass


  @property
  def root_bone(self)->__core__.StringName:
    """"""
    pass
  @root_bone.setter
  def root_bone(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def scale_base_bone(self)->__core__.StringName:
    """"""
    pass
  @scale_base_bone.setter
  def scale_base_bone(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def group_size(self)->int:
    """"""
    pass
  @group_size.setter
  def group_size(self,  value:int)->None:
    """"""
    pass
  @property
  def bone_size(self)->int:
    """"""
    pass
  @bone_size.setter
  def bone_size(self,  value:int)->None:
    """"""
    pass
  def set_root_bone(self, bone_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_root_bone(self)->__core__.StringName:
    """"""
    pass

  def set_scale_base_bone(self, bone_name:__core__.StringName|str)->None:
    """"""
    pass

  def get_scale_base_bone(self)->__core__.StringName:
    """"""
    pass

  def set_group_size(self, size:int)->None:
    """"""
    pass

  def get_group_size(self)->int:
    """"""
    pass

  def get_group_name(self, group_idx:int)->__core__.StringName:
    """
				Returns the name of the group at `group_idx` that will be the drawing group in the `BoneMap` editor.
			"""
    pass

  def set_group_name(self, group_idx:int, group_name:__core__.StringName|str)->None:
    """
				Sets the name of the group at `group_idx` that will be the drawing group in the `BoneMap` editor.
			"""
    pass

  def get_texture(self, group_idx:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns the texture of the group at `group_idx` that will be the drawing group background image in the `BoneMap` editor.
			"""
    pass

  def set_texture(self, group_idx:int, texture:__texture2d__.Texture2D)->None:
    """
				Sets the texture of the group at `group_idx` that will be the drawing group background image in the `BoneMap` editor.
			"""
    pass

  def set_bone_size(self, size:int)->None:
    """"""
    pass

  def get_bone_size(self)->int:
    """"""
    pass

  def find_bone(self, bone_name:__core__.StringName|str)->int:
    """
				Returns the bone index that matches `bone_name` as its name.
			"""
    pass

  def get_bone_name(self, bone_idx:int)->__core__.StringName:
    """
				Returns the name of the bone at `bone_idx` that will be the key name in the `BoneMap`.
				In the retargeting process, the returned bone name is the bone name of the target skeleton.
			"""
    pass

  def set_bone_name(self, bone_idx:int, bone_name:__core__.StringName|str)->None:
    """
				Sets the name of the bone at `bone_idx` that will be the key name in the `BoneMap`.
				In the retargeting process, the setting bone name is the bone name of the target skeleton.
			"""
    pass

  def get_bone_parent(self, bone_idx:int)->__core__.StringName:
    """
				Returns the name of the bone which is the parent to the bone at `bone_idx`. The result is empty if the bone has no parent.
			"""
    pass

  def set_bone_parent(self, bone_idx:int, bone_parent:__core__.StringName|str)->None:
    """
				Sets the bone with name `bone_parent` as the parent of the bone at `bone_idx`. If an empty string is passed, then the bone has no parent.
			"""
    pass

  def get_tail_direction(self, bone_idx:int)->int:
    """
				Returns the tail direction of the bone at `bone_idx`.
			"""
    pass

  def set_tail_direction(self, bone_idx:int, tail_direction:int )->None:
    """
				Sets the tail direction of the bone at `bone_idx`.
				**Note:** This only specifies the method of calculation. The actual coordinates required should be stored in an external skeleton, so the calculation itself needs to be done externally.
			"""
    pass

  def get_bone_tail(self, bone_idx:int)->__core__.StringName:
    """
				Returns the name of the bone which is the tail of the bone at `bone_idx`.
			"""
    pass

  def set_bone_tail(self, bone_idx:int, bone_tail:__core__.StringName|str)->None:
    """
				Sets the bone with name `bone_tail` as the tail of the bone at `bone_idx`.
			"""
    pass

  def get_reference_pose(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the reference pose transform for bone `bone_idx`.
			"""
    pass

  def set_reference_pose(self, bone_idx:int, bone_name:__core__.Transform3D)->None:
    """
				Sets the reference pose transform for bone `bone_idx`.
			"""
    pass

  def get_handle_offset(self, bone_idx:int)->__core__.Vector2:
    """
				Returns the offset of the bone at `bone_idx` that will be the button position in the `BoneMap` editor.
				This is the offset with origin at the top left corner of the square.
			"""
    pass

  def set_handle_offset(self, bone_idx:int, handle_offset:__core__.Vector2)->None:
    """
				Sets the offset of the bone at `bone_idx` that will be the button position in the `BoneMap` editor.
				This is the offset with origin at the top left corner of the square.
			"""
    pass

  def get_group(self, bone_idx:int)->__core__.StringName:
    """
				Returns the group of the bone at `bone_idx`.
			"""
    pass

  def set_group(self, bone_idx:int, group:__core__.StringName|str)->None:
    """
				Sets the group of the bone at `bone_idx`.
			"""
    pass

  def is_required(self, bone_idx:int)->bool:
    """
				Returns whether the bone at `bone_idx` is required for retargeting.
				This value is used by the bone map editor. If this method returns `true`, and no bone is assigned, the handle color will be red on the bone map editor.
			"""
    pass

  def set_required(self, bone_idx:int, required:bool)->None:
    """
				Sets the required status for bone `bone_idx` to `required`.
			"""
    pass


