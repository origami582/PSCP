from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.u as __u__
import py4godot.classes.e as __e__
import py4godot.classes.m as __m__
import py4godot.classes.p as __p__
import py4godot.classes.R as __r__
import py4godot.classes.F as __f__
import py4godot.classes.b as __b__
import py4godot.classes.d as __d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.f as __f__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__
import py4godot.classes.s as __s__
import py4godot.classes.I as __i__
import py4godot.classes.P as __p__



class FramebufferCacheRD(__object__.Object):
  """
		Framebuffer cache manager for Rendering Device based renderers. Provides a way to create a framebuffer and reuse it in subsequent calls for as long as the used textures exists. Framebuffers will automatically be cleaned up when dependent objects are freed.
	"""

  @staticmethod
  def constructor()->FramebufferCacheRD:pass



  @staticmethod
  def cast(other:__object__.Object)->FramebufferCacheRD:pass


  @staticmethod
  def get_cache_multipass(textures:__core__.Array, passes:__core__.Array, views:int)->__core__.RID:
    """
				Creates, or obtains a cached, framebuffer. `textures` lists textures accessed. `passes` defines the subpasses and texture allocation, if left empty a single pass is created and textures are allocated depending on their usage flags. `views` defines the number of views used when rendering.
			"""
    pass


