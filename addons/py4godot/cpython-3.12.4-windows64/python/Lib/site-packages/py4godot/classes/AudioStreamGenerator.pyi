from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamGenerator as __audiostreamgenerator__


class AudioStreamGeneratorMixRate:
  MIX_RATE_OUTPUT:int = 0
  MIX_RATE_INPUT:int = 1
  MIX_RATE_CUSTOM:int = 2
  MIX_RATE_MAX:int = 3


class AudioStreamGenerator(__audiostream__.AudioStream):
  """
		`AudioStreamGenerator` is a type of audio stream that does not play back sounds on its own; instead, it expects a script to generate audio data for it. See also `AudioStreamGeneratorPlayback`.
		Here's a sample on how to use it to generate a sine wave:
		
		```gdscript
		var playback # Will hold the AudioStreamGeneratorPlayback.
		@onready var sample_hz = $AudioStreamPlayer.stream.mix_rate
		var pulse_hz = 440.0 # The frequency of the sound wave.
		var phase = 0.0

		func _ready():
			$AudioStreamPlayer.play()
			playback = $AudioStreamPlayer.get_stream_playback()
			fill_buffer()

		func fill_buffer():
			var increment = pulse_hz / sample_hz
			var frames_available = playback.get_frames_available()

			for i in range(frames_available):
				playback.push_frame(Vector2.ONE * sin(phase * TAU))
				phase = fmod(phase + increment, 1.0)
		```
		
		
		In the example above, the "AudioStreamPlayer" node must use an `AudioStreamGenerator` as its stream. The `fill_buffer` function provides audio data for approximating a sine wave.
		See also `AudioEffectSpectrumAnalyzer` for performing real-time audio spectrum analysis.
		**Note:** Due to performance constraints, this class is best used from C# or from a compiled language via GDExtension. If you still want to use this class from GDScript, consider using a lower `mix_rate` such as 11,025 Hz or 22,050 Hz.
	"""

  @staticmethod
  def constructor()->AudioStreamGenerator:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamGenerator:pass


  @property
  def mix_rate_mode(self)->int:
    """"""
    pass
  @mix_rate_mode.setter
  def mix_rate_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def mix_rate(self)->float:
    """"""
    pass
  @mix_rate.setter
  def mix_rate(self,  value:float)->None:
    """"""
    pass
  @property
  def buffer_length(self)->float:
    """"""
    pass
  @buffer_length.setter
  def buffer_length(self,  value:float)->None:
    """"""
    pass
  def set_mix_rate(self, hz:float)->None:
    """"""
    pass

  def get_mix_rate(self)->float:
    """"""
    pass

  def set_mix_rate_mode(self, mode:int )->None:
    """"""
    pass

  def get_mix_rate_mode(self)->int:
    """"""
    pass

  def set_buffer_length(self, seconds:float)->None:
    """"""
    pass

  def get_buffer_length(self)->float:
    """"""
    pass


