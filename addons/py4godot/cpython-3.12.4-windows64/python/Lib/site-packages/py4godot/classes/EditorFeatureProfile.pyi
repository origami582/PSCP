from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorFeatureProfile as __editorfeatureprofile__
import py4godot.classes.RefCounted as __refcounted__


class Feature:
  FEATURE_3D:int = 0
  FEATURE_SCRIPT:int = 1
  FEATURE_ASSET_LIB:int = 2
  FEATURE_SCENE_TREE:int = 3
  FEATURE_NODE_DOCK:int = 4
  FEATURE_FILESYSTEM_DOCK:int = 5
  FEATURE_IMPORT_DOCK:int = 6
  FEATURE_HISTORY_DOCK:int = 7
  FEATURE_GAME:int = 8
  FEATURE_MAX:int = 9


class EditorFeatureProfile(__refcounted__.RefCounted):
  """
		An editor feature profile can be used to disable specific features of the Godot editor. When disabled, the features won't appear in the editor, which makes the editor less cluttered. This is useful in education settings to reduce confusion or when working in a team. For example, artists and level designers could use a feature profile that disables the script editor to avoid accidentally making changes to files they aren't supposed to edit.
		To manage editor feature profiles visually, use **Editor > Manage Feature Profiles...** at the top of the editor window.
	"""

  @staticmethod
  def constructor()->EditorFeatureProfile:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorFeatureProfile:pass


  def set_disable_class(self, class_name:__core__.StringName|str, disable:bool)->None:
    """
				If `disable` is `true`, disables the class specified by `class_name`. When disabled, the class won't appear in the Create New Node dialog.
			"""
    pass

  def is_class_disabled(self, class_name:__core__.StringName|str)->bool:
    """
				Returns `true` if the class specified by `class_name` is disabled. When disabled, the class won't appear in the Create New Node dialog.
			"""
    pass

  def set_disable_class_editor(self, class_name:__core__.StringName|str, disable:bool)->None:
    """
				If `disable` is `true`, disables editing for the class specified by `class_name`. When disabled, the class will still appear in the Create New Node dialog but the Inspector will be read-only when selecting a node that extends the class.
			"""
    pass

  def is_class_editor_disabled(self, class_name:__core__.StringName|str)->bool:
    """
				Returns `true` if editing for the class specified by `class_name` is disabled. When disabled, the class will still appear in the Create New Node dialog but the Inspector will be read-only when selecting a node that extends the class.
			"""
    pass

  def set_disable_class_property(self, class_name:__core__.StringName|str, property:__core__.StringName|str, disable:bool)->None:
    """
				If `disable` is `true`, disables editing for `property` in the class specified by `class_name`. When a property is disabled, it won't appear in the Inspector when selecting a node that extends the class specified by `class_name`.
			"""
    pass

  def is_class_property_disabled(self, class_name:__core__.StringName|str, property:__core__.StringName|str)->bool:
    """
				Returns `true` if `property` is disabled in the class specified by `class_name`. When a property is disabled, it won't appear in the Inspector when selecting a node that extends the class specified by `class_name`.
			"""
    pass

  def set_disable_feature(self, feature:int , disable:bool)->None:
    """
				If `disable` is `true`, disables the editor feature specified in `feature`. When a feature is disabled, it will disappear from the editor entirely.
			"""
    pass

  def is_feature_disabled(self, feature:int )->bool:
    """
				Returns `true` if the `feature` is disabled. When a feature is disabled, it will disappear from the editor entirely.
			"""
    pass

  def get_feature_name(self, feature:int )->str:
    """
				Returns the specified `feature`'s human-readable name.
			"""
    pass

  def save_to_file(self, path:str)->int:
    """
				Saves the editor feature profile to a file in JSON format. It can then be imported using the feature profile manager's **Import** button or the `load_from_file` method.
				**Note:** Feature profiles created via the user interface are saved in the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			"""
    pass

  def load_from_file(self, path:str)->int:
    """
				Loads an editor feature profile from a file. The file must follow the JSON format obtained by using the feature profile manager's **Export** button or the `save_to_file` method.
				**Note:** Feature profiles created via the user interface are loaded from the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			"""
    pass


