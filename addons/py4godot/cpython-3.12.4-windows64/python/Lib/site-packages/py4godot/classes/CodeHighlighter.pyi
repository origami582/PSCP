from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SyntaxHighlighter as __syntaxhighlighter__



class CodeHighlighter(__syntaxhighlighter__.SyntaxHighlighter):
  """
		By adjusting various properties of this resource, you can change the colors of strings, comments, numbers, and other text patterns inside a `TextEdit` control.
	"""

  @staticmethod
  def constructor()->CodeHighlighter:pass



  @staticmethod
  def cast(other:__object__.Object)->CodeHighlighter:pass


  @property
  def number_color(self)->__core__.Color:
    """"""
    pass
  @number_color.setter
  def number_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def symbol_color(self)->__core__.Color:
    """"""
    pass
  @symbol_color.setter
  def symbol_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def function_color(self)->__core__.Color:
    """"""
    pass
  @function_color.setter
  def function_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def member_variable_color(self)->__core__.Color:
    """"""
    pass
  @member_variable_color.setter
  def member_variable_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def keyword_colors(self)->__core__.Dictionary:
    """"""
    pass
  @keyword_colors.setter
  def keyword_colors(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def member_keyword_colors(self)->__core__.Dictionary:
    """"""
    pass
  @member_keyword_colors.setter
  def member_keyword_colors(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  @property
  def color_regions(self)->__core__.Dictionary:
    """"""
    pass
  @color_regions.setter
  def color_regions(self,  value:__core__.Dictionary)->None:
    """"""
    pass
  def add_keyword_color(self, keyword:str, color:__core__.Color)->None:
    """
				Sets the color for a keyword.
				The keyword cannot contain any symbols except '_'.
			"""
    pass

  def remove_keyword_color(self, keyword:str)->None:
    """
				Removes the keyword.
			"""
    pass

  def has_keyword_color(self, keyword:str)->bool:
    """
				Returns `true` if the keyword exists, else `false`.
			"""
    pass

  def get_keyword_color(self, keyword:str)->__core__.Color:
    """
				Returns the color for a keyword.
			"""
    pass

  def set_keyword_colors(self, keywords:__core__.Dictionary)->None:
    """"""
    pass

  def clear_keyword_colors(self)->None:
    """
				Removes all keywords.
			"""
    pass

  def get_keyword_colors(self)->__core__.Dictionary:
    """"""
    pass

  def add_member_keyword_color(self, member_keyword:str, color:__core__.Color)->None:
    """
				Sets the color for a member keyword.
				The member keyword cannot contain any symbols except '_'.
				It will not be highlighted if preceded by a '.'.
			"""
    pass

  def remove_member_keyword_color(self, member_keyword:str)->None:
    """
				Removes the member keyword.
			"""
    pass

  def has_member_keyword_color(self, member_keyword:str)->bool:
    """
				Returns `true` if the member keyword exists, else `false`.
			"""
    pass

  def get_member_keyword_color(self, member_keyword:str)->__core__.Color:
    """
				Returns the color for a member keyword.
			"""
    pass

  def set_member_keyword_colors(self, member_keyword:__core__.Dictionary)->None:
    """"""
    pass

  def clear_member_keyword_colors(self)->None:
    """
				Removes all member keywords.
			"""
    pass

  def get_member_keyword_colors(self)->__core__.Dictionary:
    """"""
    pass

  def add_color_region(self, start_key:str, end_key:str, color:__core__.Color, line_only:bool=False)->None:
    """
				Adds a color region (such as for comments or strings) from `start_key` to `end_key`. Both keys should be symbols, and `start_key` must not be shared with other delimiters.
				If `line_only` is `true` or `end_key` is an empty `String`, the region does not carry over to the next line.
			"""
    pass

  def remove_color_region(self, start_key:str)->None:
    """
				Removes the color region that uses that start key.
			"""
    pass

  def has_color_region(self, start_key:str)->bool:
    """
				Returns `true` if the start key exists, else `false`.
			"""
    pass

  def set_color_regions(self, color_regions:__core__.Dictionary)->None:
    """"""
    pass

  def clear_color_regions(self)->None:
    """
				Removes all color regions.
			"""
    pass

  def get_color_regions(self)->__core__.Dictionary:
    """"""
    pass

  def set_function_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_function_color(self)->__core__.Color:
    """"""
    pass

  def set_number_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_number_color(self)->__core__.Color:
    """"""
    pass

  def set_symbol_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_symbol_color(self)->__core__.Color:
    """"""
    pass

  def set_member_variable_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_member_variable_color(self)->__core__.Color:
    """"""
    pass


