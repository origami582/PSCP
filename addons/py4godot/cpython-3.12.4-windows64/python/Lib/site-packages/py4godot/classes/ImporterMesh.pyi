from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.T as __t__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.e as __e__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.p as __p__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.Resource as __resource__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.d as __d__
import py4godot.classes.r as __r__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.y as __y__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__



class ImporterMesh(__resource__.Resource):
  """
		ImporterMesh is a type of `Resource` analogous to `ArrayMesh`. It contains vertex array-based geometry, divided in _surfaces_. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.
		Unlike its runtime counterpart, `ImporterMesh` contains mesh data before various import steps, such as lod and shadow mesh generation, have taken place. Modify surface data by calling `clear`, followed by `add_surface` for each surface.
	"""

  @staticmethod
  def constructor()->ImporterMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->ImporterMesh:pass


  def add_blend_shape(self, name:str)->None:
    """
				Adds name for a blend shape that will be added with `add_surface`. Must be called before surface is added.
			"""
    pass

  def get_blend_shape_count(self)->int:
    """
				Returns the number of blend shapes that the mesh holds.
			"""
    pass

  def get_blend_shape_name(self, blend_shape_idx:int)->str:
    """
				Returns the name of the blend shape at this index.
			"""
    pass

  def set_blend_shape_mode(self, mode:int )->None:
    """
				Sets the blend shape mode.
			"""
    pass

  def get_blend_shape_mode(self)->int:
    """
				Returns the blend shape mode for this Mesh.
			"""
    pass

  def add_surface(self, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array=Array[Array]([]), lods:__core__.Dictionary= __core__.Dictionary.new0(), material:__material__.Material= __material__.Material.constructor(), name:str= __core__.String.new0(), flags:int=0)->None:
    """
				Creates a new surface. `Mesh.get_surface_count` will become the `surf_idx` for this new surface.
				Surfaces are created to be rendered using a `primitive`, which may be any of the values defined in `enum Mesh.PrimitiveType`.
				The `arrays` argument is an array of arrays. Each of the `constant Mesh.ARRAY_MAX` elements contains an array with some of the mesh data for this surface as described by the corresponding member of `enum Mesh.ArrayType` or `null` if it is not used by the surface. For example, `arrays`0`` is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for `constant Mesh.ARRAY_INDEX` if it is used.
				The `blend_shapes` argument is an array of vertex data for each blend shape. Each element is an array of the same structure as `arrays`, but `constant Mesh.ARRAY_VERTEX`, `constant Mesh.ARRAY_NORMAL`, and `constant Mesh.ARRAY_TANGENT` are set if and only if they are set in `arrays` and all other entries are `null`.
				The `lods` argument is a dictionary with `float` keys and `PackedInt32Array` values. Each entry in the dictionary represents an LOD level of the surface, where the value is the `constant Mesh.ARRAY_INDEX` array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.
				The `flags` argument is the bitwise OR of, as required: One value of `enum Mesh.ArrayCustomFormat` left shifted by `ARRAY_FORMAT_CUSTOMn_SHIFT` for each custom channel in use, `constant Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE`, `constant Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS`, or `constant Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY`.
				**Note:** When using indices, it is recommended to only use points, lines, or triangles.
			"""
    pass

  def get_surface_count(self)->int:
    """
				Returns the number of surfaces that the mesh holds.
			"""
    pass

  def get_surface_primitive_type(self, surface_idx:int)->int:
    """
				Returns the primitive type of the requested surface (see `add_surface`).
			"""
    pass

  def get_surface_name(self, surface_idx:int)->str:
    """
				Gets the name assigned to this surface.
			"""
    pass

  def get_surface_arrays(self, surface_idx:int)->__core__.Array:
    """
				Returns the arrays for the vertices, normals, UVs, etc. that make up the requested surface. See `add_surface`.
			"""
    pass

  def get_surface_blend_shape_arrays(self, surface_idx:int, blend_shape_idx:int)->__core__.Array:
    """
				Returns a single set of blend shape arrays for the requested blend shape index for a surface.
			"""
    pass

  def get_surface_lod_count(self, surface_idx:int)->int:
    """
				Returns the number of lods that the mesh holds on a given surface.
			"""
    pass

  def get_surface_lod_size(self, surface_idx:int, lod_idx:int)->float:
    """
				Returns the screen ratio which activates a lod for a surface.
			"""
    pass

  def get_surface_lod_indices(self, surface_idx:int, lod_idx:int)->__core__.PackedInt32Array:
    """
				Returns the index buffer of a lod for a surface.
			"""
    pass

  def get_surface_material(self, surface_idx:int)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """
				Returns a `Material` in a given surface. Surface is rendered using this material.
			"""
    pass

  def get_surface_format(self, surface_idx:int)->int:
    """
				Returns the format of the surface that the mesh holds.
			"""
    pass

  def set_surface_name(self, surface_idx:int, name:str)->None:
    """
				Sets a name for a given surface.
			"""
    pass

  def set_surface_material(self, surface_idx:int, material:__material__.Material)->None:
    """
				Sets a `Material` for a given surface. Surface will be rendered using this material.
			"""
    pass

  def generate_lods(self, normal_merge_angle:float, normal_split_angle:float, bone_transform_array:__core__.Array)->None:
    """
				Generates all lods for this ImporterMesh.
				`normal_merge_angle` is in degrees and used in the same way as the importer settings in `lods`.
				`normal_split_angle` is not used and only remains for compatibility with older versions of the API.
				The number of generated lods can be accessed using `get_surface_lod_count`, and each LOD is available in `get_surface_lod_size` and `get_surface_lod_indices`.
				`bone_transform_array` is an `Array` which can be either empty or contain `Transform3D`s which, for each of the mesh's bone IDs, will apply mesh skinning when generating the LOD mesh variations. This is usually used to account for discrepancies in scale between the mesh itself and its skinning data.
			"""
    pass

  def get_mesh(self, base_mesh:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor())->__arraymesh__.ArrayMesh:
    """
				Returns the mesh data represented by this `ImporterMesh` as a usable `ArrayMesh`.
				This method caches the returned mesh, and subsequent calls will return the cached data until `clear` is called.
				If not yet cached and `base_mesh` is provided, `base_mesh` will be used and mutated.
			"""
    pass

  def clear(self)->None:
    """
				Removes all surfaces and blend shapes from this `ImporterMesh`.
			"""
    pass

  def set_lightmap_size_hint(self, size:__core__.Vector2i)->None:
    """
				Sets the size hint of this mesh for lightmap-unwrapping in UV-space.
			"""
    pass

  def get_lightmap_size_hint(self)->__core__.Vector2i:
    """
				Returns the size hint of this mesh for lightmap-unwrapping in UV-space.
			"""
    pass


