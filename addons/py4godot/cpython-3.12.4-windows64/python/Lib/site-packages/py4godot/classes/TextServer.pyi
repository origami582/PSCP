from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.T as __t__
import py4godot.classes.V as __v__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.D as __d__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.Image as __image__
import py4godot.classes.o as __o__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.p as __p__
import py4godot.classes.R as __r__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.y as __y__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.2 as __2__
import py4godot.classes.I as __i__
import py4godot.classes.t as __t__
import py4godot.classes.3 as __3__


class FontAntialiasing:
  FONT_ANTIALIASING_NONE:int = 0
  FONT_ANTIALIASING_GRAY:int = 1
  FONT_ANTIALIASING_LCD:int = 2
class FontLCDSubpixelLayout:
  FONT_LCD_SUBPIXEL_LAYOUT_NONE:int = 0
  FONT_LCD_SUBPIXEL_LAYOUT_HRGB:int = 1
  FONT_LCD_SUBPIXEL_LAYOUT_HBGR:int = 2
  FONT_LCD_SUBPIXEL_LAYOUT_VRGB:int = 3
  FONT_LCD_SUBPIXEL_LAYOUT_VBGR:int = 4
  FONT_LCD_SUBPIXEL_LAYOUT_MAX:int = 5
class Direction:
  DIRECTION_AUTO:int = 0
  DIRECTION_LTR:int = 1
  DIRECTION_RTL:int = 2
  DIRECTION_INHERITED:int = 3
class Orientation:
  ORIENTATION_HORIZONTAL:int = 0
  ORIENTATION_VERTICAL:int = 1
class JustificationFlag:
  JUSTIFICATION_NONE:int = 0
  JUSTIFICATION_KASHIDA:int = 1
  JUSTIFICATION_WORD_BOUND:int = 2
  JUSTIFICATION_TRIM_EDGE_SPACES:int = 4
  JUSTIFICATION_AFTER_LAST_TAB:int = 8
  JUSTIFICATION_CONSTRAIN_ELLIPSIS:int = 16
  JUSTIFICATION_SKIP_LAST_LINE:int = 32
  JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS:int = 64
  JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE:int = 128
class AutowrapMode:
  AUTOWRAP_OFF:int = 0
  AUTOWRAP_ARBITRARY:int = 1
  AUTOWRAP_WORD:int = 2
  AUTOWRAP_WORD_SMART:int = 3
class LineBreakFlag:
  BREAK_NONE:int = 0
  BREAK_MANDATORY:int = 1
  BREAK_WORD_BOUND:int = 2
  BREAK_GRAPHEME_BOUND:int = 4
  BREAK_ADAPTIVE:int = 8
  BREAK_TRIM_EDGE_SPACES:int = 16
  BREAK_TRIM_INDENT:int = 32
class VisibleCharactersBehavior:
  VC_CHARS_BEFORE_SHAPING:int = 0
  VC_CHARS_AFTER_SHAPING:int = 1
  VC_GLYPHS_AUTO:int = 2
  VC_GLYPHS_LTR:int = 3
  VC_GLYPHS_RTL:int = 4
class OverrunBehavior:
  OVERRUN_NO_TRIMMING:int = 0
  OVERRUN_TRIM_CHAR:int = 1
  OVERRUN_TRIM_WORD:int = 2
  OVERRUN_TRIM_ELLIPSIS:int = 3
  OVERRUN_TRIM_WORD_ELLIPSIS:int = 4
class TextOverrunFlag:
  OVERRUN_NO_TRIM:int = 0
  OVERRUN_TRIM:int = 1
  OVERRUN_TRIM_WORD_ONLY:int = 2
  OVERRUN_ADD_ELLIPSIS:int = 4
  OVERRUN_ENFORCE_ELLIPSIS:int = 8
  OVERRUN_JUSTIFICATION_AWARE:int = 16
class GraphemeFlag:
  GRAPHEME_IS_VALID:int = 1
  GRAPHEME_IS_RTL:int = 2
  GRAPHEME_IS_VIRTUAL:int = 4
  GRAPHEME_IS_SPACE:int = 8
  GRAPHEME_IS_BREAK_HARD:int = 16
  GRAPHEME_IS_BREAK_SOFT:int = 32
  GRAPHEME_IS_TAB:int = 64
  GRAPHEME_IS_ELONGATION:int = 128
  GRAPHEME_IS_PUNCTUATION:int = 256
  GRAPHEME_IS_UNDERSCORE:int = 512
  GRAPHEME_IS_CONNECTED:int = 1024
  GRAPHEME_IS_SAFE_TO_INSERT_TATWEEL:int = 2048
  GRAPHEME_IS_EMBEDDED_OBJECT:int = 4096
  GRAPHEME_IS_SOFT_HYPHEN:int = 8192
class Hinting:
  HINTING_NONE:int = 0
  HINTING_LIGHT:int = 1
  HINTING_NORMAL:int = 2
class SubpixelPositioning:
  SUBPIXEL_POSITIONING_DISABLED:int = 0
  SUBPIXEL_POSITIONING_AUTO:int = 1
  SUBPIXEL_POSITIONING_ONE_HALF:int = 2
  SUBPIXEL_POSITIONING_ONE_QUARTER:int = 3
  SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE:int = 20
  SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE:int = 16
class Feature:
  FEATURE_SIMPLE_LAYOUT:int = 1
  FEATURE_BIDI_LAYOUT:int = 2
  FEATURE_VERTICAL_LAYOUT:int = 4
  FEATURE_SHAPING:int = 8
  FEATURE_KASHIDA_JUSTIFICATION:int = 16
  FEATURE_BREAK_ITERATORS:int = 32
  FEATURE_FONT_BITMAP:int = 64
  FEATURE_FONT_DYNAMIC:int = 128
  FEATURE_FONT_MSDF:int = 256
  FEATURE_FONT_SYSTEM:int = 512
  FEATURE_FONT_VARIABLE:int = 1024
  FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION:int = 2048
  FEATURE_USE_SUPPORT_DATA:int = 4096
  FEATURE_UNICODE_IDENTIFIERS:int = 8192
  FEATURE_UNICODE_SECURITY:int = 16384
class ContourPointTag:
  CONTOUR_CURVE_TAG_ON:int = 1
  CONTOUR_CURVE_TAG_OFF_CONIC:int = 0
  CONTOUR_CURVE_TAG_OFF_CUBIC:int = 2
class SpacingType:
  SPACING_GLYPH:int = 0
  SPACING_SPACE:int = 1
  SPACING_TOP:int = 2
  SPACING_BOTTOM:int = 3
  SPACING_MAX:int = 4
class FontStyle:
  FONT_BOLD:int = 1
  FONT_ITALIC:int = 2
  FONT_FIXED_WIDTH:int = 4
class StructuredTextParser:
  STRUCTURED_TEXT_DEFAULT:int = 0
  STRUCTURED_TEXT_URI:int = 1
  STRUCTURED_TEXT_FILE:int = 2
  STRUCTURED_TEXT_EMAIL:int = 3
  STRUCTURED_TEXT_LIST:int = 4
  STRUCTURED_TEXT_GDSCRIPT:int = 5
  STRUCTURED_TEXT_CUSTOM:int = 6
class FixedSizeScaleMode:
  FIXED_SIZE_SCALE_DISABLE:int = 0
  FIXED_SIZE_SCALE_INTEGER_ONLY:int = 1
  FIXED_SIZE_SCALE_ENABLED:int = 2


class TextServer(__refcounted__.RefCounted):
  """
		`TextServer` is the API backend for managing fonts and rendering text.
		**Note:** This is a low-level API, consider using `TextLine`, `TextParagraph`, and `Font` classes instead.
		This is an abstract class, so to get the currently active `TextServer` instance, use the following code:
		
		```gdscript
		var ts = TextServerManager.get_primary_interface()
		```
		
		
	"""

  @staticmethod
  def constructor()->TextServer:pass



  @staticmethod
  def cast(other:__object__.Object)->TextServer:pass


  def has_feature(self, feature:int )->bool:
    """
				Returns `true` if the server supports a feature.
			"""
    pass

  def get_name(self)->str:
    """
				Returns the name of the server interface.
			"""
    pass

  def get_features(self)->int:
    """
				Returns text server features, see `enum Feature`.
			"""
    pass

  def load_support_data(self, filename:str)->bool:
    """
				Loads optional TextServer database (e.g. ICU break iterators and dictionaries).
				**Note:** This function should be called before any other TextServer functions used, otherwise it won't have any effect.
			"""
    pass

  def get_support_data_filename(self)->str:
    """
				Returns default TextServer database (e.g. ICU break iterators and dictionaries) filename.
			"""
    pass

  def get_support_data_info(self)->str:
    """
				Returns TextServer database (e.g. ICU break iterators and dictionaries) description.
			"""
    pass

  def save_support_data(self, filename:str)->bool:
    """
				Saves optional TextServer database (e.g. ICU break iterators and dictionaries) to the file.
				**Note:** This function is used by during project export, to include TextServer database.
			"""
    pass

  def get_support_data(self)->__core__.PackedByteArray:
    """
				Returns default TextServer database (e.g. ICU break iterators and dictionaries).
			"""
    pass

  def is_locale_right_to_left(self, locale:str)->bool:
    """
				Returns `true` if locale is right-to-left.
			"""
    pass

  def name_to_tag(self, name:str)->int:
    """
				Converts readable feature, variation, script, or language name to OpenType tag.
			"""
    pass

  def tag_to_name(self, tag:int)->str:
    """
				Converts OpenType tag to readable feature, variation, script, or language name.
			"""
    pass

  def has(self, rid:__core__.RID)->bool:
    """
				Returns `true` if `rid` is valid resource owned by this text server.
			"""
    pass

  def free_rid(self, rid:__core__.RID)->None:
    """
				Frees an object created by this `TextServer`.
			"""
    pass

  def create_font(self)->__core__.RID:
    """
				Creates a new, empty font cache entry resource. To free the resulting resource, use the `free_rid` method.
			"""
    pass

  def create_font_linked_variation(self, font_rid:__core__.RID)->__core__.RID:
    """
				Creates a new variation existing font which is reusing the same glyph cache and font data. To free the resulting resource, use the `free_rid` method.
			"""
    pass

  def font_set_data(self, font_rid:__core__.RID, data:__core__.PackedByteArray)->None:
    """
				Sets font source data, e.g contents of the dynamic font source file.
			"""
    pass

  def font_set_face_index(self, font_rid:__core__.RID, face_index:int)->None:
    """
				Sets an active face index in the TrueType / OpenType collection.
			"""
    pass

  def font_get_face_index(self, font_rid:__core__.RID)->int:
    """
				Returns an active face index in the TrueType / OpenType collection.
			"""
    pass

  def font_get_face_count(self, font_rid:__core__.RID)->int:
    """
				Returns number of faces in the TrueType / OpenType collection.
			"""
    pass

  def font_set_style(self, font_rid:__core__.RID, style:int)->None:
    """
				Sets the font style flags.
				**Note:** This value is used for font matching only and will not affect font rendering. Use `font_set_face_index`, `font_set_variation_coordinates`, `font_set_embolden`, or `font_set_transform` instead.
			"""
    pass

  def font_get_style(self, font_rid:__core__.RID)->int:
    """
				Returns font style flags.
			"""
    pass

  def font_set_name(self, font_rid:__core__.RID, name:str)->None:
    """
				Sets the font family name.
			"""
    pass

  def font_get_name(self, font_rid:__core__.RID)->str:
    """
				Returns font family name.
			"""
    pass

  def font_get_ot_name_strings(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns `Dictionary` with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
			"""
    pass

  def font_set_style_name(self, font_rid:__core__.RID, name:str)->None:
    """
				Sets the font style name.
			"""
    pass

  def font_get_style_name(self, font_rid:__core__.RID)->str:
    """
				Returns font style name.
			"""
    pass

  def font_set_weight(self, font_rid:__core__.RID, weight:int)->None:
    """
				Sets weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
				**Note:** This value is used for font matching only and will not affect font rendering. Use `font_set_face_index`, `font_set_variation_coordinates`, or `font_set_embolden` instead.
			"""
    pass

  def font_get_weight(self, font_rid:__core__.RID)->int:
    """
				Returns weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
			"""
    pass

  def font_set_stretch(self, font_rid:__core__.RID, weight:int)->None:
    """
				Sets font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
				**Note:** This value is used for font matching only and will not affect font rendering. Use `font_set_face_index`, `font_set_variation_coordinates`, or `font_set_transform` instead.
			"""
    pass

  def font_get_stretch(self, font_rid:__core__.RID)->int:
    """
				Returns font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
			"""
    pass

  def font_set_antialiasing(self, font_rid:__core__.RID, antialiasing:int )->None:
    """
				Sets font anti-aliasing mode.
			"""
    pass

  def font_get_antialiasing(self, font_rid:__core__.RID)->int:
    """
				Returns font anti-aliasing mode.
			"""
    pass

  def font_set_disable_embedded_bitmaps(self, font_rid:__core__.RID, disable_embedded_bitmaps:bool)->None:
    """
				If set to `true`, embedded font bitmap loading is disabled (bitmap-only and color fonts ignore this property).
			"""
    pass

  def font_get_disable_embedded_bitmaps(self, font_rid:__core__.RID)->bool:
    """
				Returns whether the font's embedded bitmap loading is disabled.
			"""
    pass

  def font_set_generate_mipmaps(self, font_rid:__core__.RID, generate_mipmaps:bool)->None:
    """
				If set to `true` font texture mipmap generation is enabled.
			"""
    pass

  def font_get_generate_mipmaps(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if font texture mipmap generation is enabled.
			"""
    pass

  def font_set_multichannel_signed_distance_field(self, font_rid:__core__.RID, msdf:bool)->None:
    """
				If set to `true`, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. MSDF rendering allows displaying the font at any scaling factor without blurriness, and without incurring a CPU cost when the font size changes (since the font no longer needs to be rasterized on the CPU). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.
				**Note:** MSDF font rendering does not render glyphs with overlapping shapes correctly. Overlapping shapes are not valid per the OpenType standard, but are still commonly found in many font files, especially those converted by Google Fonts. To avoid issues with overlapping glyphs, consider downloading the font file directly from the type foundry instead of relying on Google Fonts.
			"""
    pass

  def font_is_multichannel_signed_distance_field(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data.
			"""
    pass

  def font_set_msdf_pixel_range(self, font_rid:__core__.RID, msdf_pixel_range:int)->None:
    """
				Sets the width of the range around the shape between the minimum and maximum representable signed distance.
			"""
    pass

  def font_get_msdf_pixel_range(self, font_rid:__core__.RID)->int:
    """
				Returns the width of the range around the shape between the minimum and maximum representable signed distance.
			"""
    pass

  def font_set_msdf_size(self, font_rid:__core__.RID, msdf_size:int)->None:
    """
				Sets source font size used to generate MSDF textures.
			"""
    pass

  def font_get_msdf_size(self, font_rid:__core__.RID)->int:
    """
				Returns source font size used to generate MSDF textures.
			"""
    pass

  def font_set_fixed_size(self, font_rid:__core__.RID, fixed_size:int)->None:
    """
				Sets bitmap font fixed size. If set to value greater than zero, same cache entry will be used for all font sizes.
			"""
    pass

  def font_get_fixed_size(self, font_rid:__core__.RID)->int:
    """
				Returns bitmap font fixed size.
			"""
    pass

  def font_set_fixed_size_scale_mode(self, font_rid:__core__.RID, fixed_size_scale_mode:int )->None:
    """
				Sets bitmap font scaling mode. This property is used only if `fixed_size` is greater than zero.
			"""
    pass

  def font_get_fixed_size_scale_mode(self, font_rid:__core__.RID)->int:
    """
				Returns bitmap font scaling mode.
			"""
    pass

  def font_set_allow_system_fallback(self, font_rid:__core__.RID, allow_system_fallback:bool)->None:
    """
				If set to `true`, system fonts can be automatically used as fallbacks.
			"""
    pass

  def font_is_allow_system_fallback(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if system fonts can be automatically used as fallbacks.
			"""
    pass

  def font_set_force_autohinter(self, font_rid:__core__.RID, force_autohinter:bool)->None:
    """
				If set to `true` auto-hinting is preferred over font built-in hinting.
			"""
    pass

  def font_is_force_autohinter(self, font_rid:__core__.RID)->bool:
    """
				Returns `true` if auto-hinting is supported and preferred over font built-in hinting. Used by dynamic fonts only.
			"""
    pass

  def font_set_hinting(self, font_rid:__core__.RID, hinting:int )->None:
    """
				Sets font hinting mode. Used by dynamic fonts only.
			"""
    pass

  def font_get_hinting(self, font_rid:__core__.RID)->int:
    """
				Returns the font hinting mode. Used by dynamic fonts only.
			"""
    pass

  def font_set_subpixel_positioning(self, font_rid:__core__.RID, subpixel_positioning:int )->None:
    """
				Sets font subpixel glyph positioning mode.
			"""
    pass

  def font_get_subpixel_positioning(self, font_rid:__core__.RID)->int:
    """
				Returns font subpixel glyph positioning mode.
			"""
    pass

  def font_set_keep_rounding_remainders(self, font_rid:__core__.RID, keep_rounding_remainders:bool)->None:
    """
				Sets glyph position rounding behavior. If set to `true`, when aligning glyphs to the pixel boundaries rounding remainders are accumulated to ensure more uniform glyph distribution. This setting has no effect if subpixel positioning is enabled.
			"""
    pass

  def font_get_keep_rounding_remainders(self, font_rid:__core__.RID)->bool:
    """
				Returns glyph position rounding behavior. If set to `true`, when aligning glyphs to the pixel boundaries rounding remainders are accumulated to ensure more uniform glyph distribution. This setting has no effect if subpixel positioning is enabled.
			"""
    pass

  def font_set_embolden(self, font_rid:__core__.RID, strength:float)->None:
    """
				Sets font embolden strength. If `strength` is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
			"""
    pass

  def font_get_embolden(self, font_rid:__core__.RID)->float:
    """
				Returns font embolden strength.
			"""
    pass

  def font_set_spacing(self, font_rid:__core__.RID, spacing:int , value:int)->None:
    """
				Sets the spacing for `spacing` to `value` in pixels (not relative to the font size).
			"""
    pass

  def font_get_spacing(self, font_rid:__core__.RID, spacing:int )->int:
    """
				Returns the spacing for `spacing` in pixels (not relative to the font size).
			"""
    pass

  def font_set_baseline_offset(self, font_rid:__core__.RID, baseline_offset:float)->None:
    """
				Sets extra baseline offset (as a fraction of font height).
			"""
    pass

  def font_get_baseline_offset(self, font_rid:__core__.RID)->float:
    """
				Returns extra baseline offset (as a fraction of font height).
			"""
    pass

  def font_set_transform(self, font_rid:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets 2D transform, applied to the font outlines, can be used for slanting, flipping, and rotating glyphs.
				For example, to simulate italic typeface by slanting, apply the following transform `Transform2D(1.0, slant, 0.0, 1.0, 0.0, 0.0)`.
			"""
    pass

  def font_get_transform(self, font_rid:__core__.RID)->__core__.Transform2D:
    """
				Returns 2D transform applied to the font outlines.
			"""
    pass

  def font_set_variation_coordinates(self, font_rid:__core__.RID, variation_coordinates:__core__.Dictionary)->None:
    """
				Sets variation coordinates for the specified font cache entry. See `font_supported_variation_list` for more info.
			"""
    pass

  def font_get_variation_coordinates(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns variation coordinates for the specified font cache entry. See `font_supported_variation_list` for more info.
			"""
    pass

  def font_set_oversampling(self, font_rid:__core__.RID, oversampling:float)->None:
    """
				If set to a positive value, overrides the oversampling factor of the viewport this font is used in. See `Viewport.oversampling`. This value doesn't override the `code skip-lint`oversampling` parameter of `code skip-lint`draw_*` methods. Used by dynamic fonts only.
			"""
    pass

  def font_get_oversampling(self, font_rid:__core__.RID)->float:
    """
				Returns oversampling factor override. If set to a positive value, overrides the oversampling factor of the viewport this font is used in. See `Viewport.oversampling`. This value doesn't override the `code skip-lint`oversampling` parameter of `code skip-lint`draw_*` methods. Used by dynamic fonts only.
			"""
    pass

  def font_get_size_cache_list(self, font_rid:__core__.RID)->typedarray::Vector2i:
    """
				Returns list of the font sizes in the cache. Each size is `Vector2i` with font size and outline size.
			"""
    pass

  def font_clear_size_cache(self, font_rid:__core__.RID)->None:
    """
				Removes all font sizes from the cache entry.
			"""
    pass

  def font_remove_size_cache(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes specified font size from the cache entry.
			"""
    pass

  def font_set_ascent(self, font_rid:__core__.RID, size:int, ascent:float)->None:
    """
				Sets the font ascent (number of pixels above the baseline).
			"""
    pass

  def font_get_ascent(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns the font ascent (number of pixels above the baseline).
			"""
    pass

  def font_set_descent(self, font_rid:__core__.RID, size:int, descent:float)->None:
    """
				Sets the font descent (number of pixels below the baseline).
			"""
    pass

  def font_get_descent(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns the font descent (number of pixels below the baseline).
			"""
    pass

  def font_set_underline_position(self, font_rid:__core__.RID, size:int, underline_position:float)->None:
    """
				Sets pixel offset of the underline below the baseline.
			"""
    pass

  def font_get_underline_position(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def font_set_underline_thickness(self, font_rid:__core__.RID, size:int, underline_thickness:float)->None:
    """
				Sets thickness of the underline in pixels.
			"""
    pass

  def font_get_underline_thickness(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns thickness of the underline in pixels.
			"""
    pass

  def font_set_scale(self, font_rid:__core__.RID, size:int, scale:float)->None:
    """
				Sets scaling factor of the color bitmap font.
			"""
    pass

  def font_get_scale(self, font_rid:__core__.RID, size:int)->float:
    """
				Returns scaling factor of the color bitmap font.
			"""
    pass

  def font_get_texture_count(self, font_rid:__core__.RID, size:__core__.Vector2i)->int:
    """
				Returns number of textures used by font cache entry.
			"""
    pass

  def font_clear_textures(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes all textures from font cache entry.
				**Note:** This function will not remove glyphs associated with the texture, use `font_remove_glyph` to remove them manually.
			"""
    pass

  def font_remove_texture(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->None:
    """
				Removes specified texture from the cache entry.
				**Note:** This function will not remove glyphs associated with the texture, remove them manually, using `font_remove_glyph`.
			"""
    pass

  def font_set_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, image:__image__.Image)->None:
    """
				Sets font cache texture image data.
			"""
    pass

  def font_get_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__image__.Image:
    """
				Returns font cache texture image data.
			"""
    pass

  def font_set_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, offset:__core__.PackedInt32Array)->None:
    """
				Sets array containing glyph packing data.
			"""
    pass

  def font_get_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__core__.PackedInt32Array:
    """
				Returns array containing glyph packing data.
			"""
    pass

  def font_get_glyph_list(self, font_rid:__core__.RID, size:__core__.Vector2i)->__core__.PackedInt32Array:
    """
				Returns list of rendered glyphs in the cache entry.
			"""
    pass

  def font_clear_glyphs(self, font_rid:__core__.RID, size:__core__.Vector2i)->None:
    """
				Removes all rendered glyph information from the cache entry.
				**Note:** This function will not remove textures associated with the glyphs, use `font_remove_texture` to remove them manually.
			"""
    pass

  def font_remove_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->None:
    """
				Removes specified rendered glyph information from the cache entry.
				**Note:** This function will not remove textures associated with the glyphs, use `font_remove_texture` to remove them manually.
			"""
    pass

  def font_get_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int)->__core__.Vector2:
    """
				Returns glyph advance (offset of the next glyph).
				**Note:** Advance for glyphs outlines is the same as the base glyph advance and is not saved.
			"""
    pass

  def font_set_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int, advance:__core__.Vector2)->None:
    """
				Sets glyph advance (offset of the next glyph).
				**Note:** Advance for glyphs outlines is the same as the base glyph advance and is not saved.
			"""
    pass

  def font_get_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns glyph offset from the baseline.
			"""
    pass

  def font_set_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, offset:__core__.Vector2)->None:
    """
				Sets glyph offset from the baseline.
			"""
    pass

  def font_get_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns size of the glyph.
			"""
    pass

  def font_set_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, gl_size:__core__.Vector2)->None:
    """
				Sets size of the glyph.
			"""
    pass

  def font_get_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Rect2:
    """
				Returns rectangle in the cache texture containing the glyph.
			"""
    pass

  def font_set_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, uv_rect:__core__.Rect2)->None:
    """
				Sets rectangle in the cache texture containing the glyph.
			"""
    pass

  def font_get_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->int:
    """
				Returns index of the cache texture containing the glyph.
			"""
    pass

  def font_set_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, texture_idx:int)->None:
    """
				Sets index of the cache texture containing the glyph.
			"""
    pass

  def font_get_glyph_texture_rid(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.RID:
    """
				Returns resource ID of the cache texture containing the glyph.
				**Note:** If there are pending glyphs to render, calling this function might trigger the texture cache update.
			"""
    pass

  def font_get_glyph_texture_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2:
    """
				Returns size of the cache texture containing the glyph.
				**Note:** If there are pending glyphs to render, calling this function might trigger the texture cache update.
			"""
    pass

  def font_get_glyph_contours(self, font:__core__.RID, size:int, index:int)->__core__.Dictionary:
    """
				Returns outline contours of the glyph as a `Dictionary` with the following contents:
				`points`         - `PackedVector3Array`, containing outline points. `x` and `y` are point coordinates. `z` is the type of the point, using the `enum ContourPointTag` values.
				`contours`       - `PackedInt32Array`, containing indices the end points of each contour.
				`orientation`    - `bool`, contour orientation. If `true`, clockwise contours must be filled.
				- Two successive `constant CONTOUR_CURVE_TAG_ON` points indicate a line segment.
				- One `constant CONTOUR_CURVE_TAG_OFF_CONIC` point between two `constant CONTOUR_CURVE_TAG_ON` points indicates a single conic (quadratic) Bézier arc.
				- Two `constant CONTOUR_CURVE_TAG_OFF_CUBIC` points between two `constant CONTOUR_CURVE_TAG_ON` points indicate a single cubic Bézier arc.
				- Two successive `constant CONTOUR_CURVE_TAG_OFF_CONIC` points indicate two successive conic (quadratic) Bézier arcs with a virtual `constant CONTOUR_CURVE_TAG_ON` point at their middle.
				- Each contour is closed. The last point of a contour uses the first point of a contour as its next point, and vice versa. The first point can be `constant CONTOUR_CURVE_TAG_OFF_CONIC` point.
			"""
    pass

  def font_get_kerning_list(self, font_rid:__core__.RID, size:int)->typedarray::Vector2i:
    """
				Returns list of the kerning overrides.
			"""
    pass

  def font_clear_kerning_map(self, font_rid:__core__.RID, size:int)->None:
    """
				Removes all kerning overrides.
			"""
    pass

  def font_remove_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->None:
    """
				Removes kerning override for the pair of glyphs.
			"""
    pass

  def font_set_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i, kerning:__core__.Vector2)->None:
    """
				Sets kerning for the pair of glyphs.
			"""
    pass

  def font_get_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->__core__.Vector2:
    """
				Returns kerning for the pair of glyphs.
			"""
    pass

  def font_get_glyph_index(self, font_rid:__core__.RID, size:int, char:int, variation_selector:int)->int:
    """
				Returns the glyph index of a `char`, optionally modified by the `variation_selector`. See `font_get_char_from_glyph_index`.
			"""
    pass

  def font_get_char_from_glyph_index(self, font_rid:__core__.RID, size:int, glyph_index:int)->int:
    """
				Returns character code associated with `glyph_index`, or `0` if `glyph_index` is invalid. See `font_get_glyph_index`.
			"""
    pass

  def font_has_char(self, font_rid:__core__.RID, char:int)->bool:
    """
				Returns `true` if a Unicode `char` is available in the font.
			"""
    pass

  def font_get_supported_chars(self, font_rid:__core__.RID)->str:
    """
				Returns a string containing all the characters available in the font.
			"""
    pass

  def font_get_supported_glyphs(self, font_rid:__core__.RID)->__core__.PackedInt32Array:
    """
				Returns an array containing all glyph indices in the font.
			"""
    pass

  def font_render_range(self, font_rid:__core__.RID, size:__core__.Vector2i, start:int, end:int)->None:
    """
				Renders the range of characters to the font cache texture.
			"""
    pass

  def font_render_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, index:int)->None:
    """
				Renders specified glyph to the font cache texture.
			"""
    pass

  def font_draw_glyph(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draws single glyph into a canvas item at the position, using `font_rid` at the size `size`. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				**Note:** Glyph index is specific to the font, use glyphs indices returned by `shaped_text_get_glyphs` or `font_get_glyph_index`.
				**Note:** If there are pending glyphs to render, calling this function might trigger the texture cache update.
			"""
    pass

  def font_draw_glyph_outline(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, outline_size:int, pos:__core__.Vector2, index:int, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draws single glyph outline of size `outline_size` into a canvas item at the position, using `font_rid` at the size `size`. If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				**Note:** Glyph index is specific to the font, use glyphs indices returned by `shaped_text_get_glyphs` or `font_get_glyph_index`.
				**Note:** If there are pending glyphs to render, calling this function might trigger the texture cache update.
			"""
    pass

  def font_is_language_supported(self, font_rid:__core__.RID, language:str)->bool:
    """
				Returns `true`, if font supports given language (`url=https://en.wikipedia.org/wiki/ISO_639-1`ISO 639`/url` code).
			"""
    pass

  def font_set_language_support_override(self, font_rid:__core__.RID, language:str, supported:bool)->None:
    """
				Adds override for `font_is_language_supported`.
			"""
    pass

  def font_get_language_support_override(self, font_rid:__core__.RID, language:str)->bool:
    """
				Returns `true` if support override is enabled for the `language`.
			"""
    pass

  def font_remove_language_support_override(self, font_rid:__core__.RID, language:str)->None:
    """
				Remove language support override.
			"""
    pass

  def font_get_language_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray:
    """
				Returns list of language support overrides.
			"""
    pass

  def font_is_script_supported(self, font_rid:__core__.RID, script:str)->bool:
    """
				Returns `true`, if font supports given script (ISO 15924 code).
			"""
    pass

  def font_set_script_support_override(self, font_rid:__core__.RID, script:str, supported:bool)->None:
    """
				Adds override for `font_is_script_supported`.
			"""
    pass

  def font_get_script_support_override(self, font_rid:__core__.RID, script:str)->bool:
    """
				Returns `true` if support override is enabled for the `script`.
			"""
    pass

  def font_remove_script_support_override(self, font_rid:__core__.RID, script:str)->None:
    """
				Removes script support override.
			"""
    pass

  def font_get_script_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray:
    """
				Returns list of script support overrides.
			"""
    pass

  def font_set_opentype_feature_overrides(self, font_rid:__core__.RID, overrides:__core__.Dictionary)->None:
    """
				Sets font OpenType feature set override.
			"""
    pass

  def font_get_opentype_feature_overrides(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns font OpenType feature set override.
			"""
    pass

  def font_supported_feature_list(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns the dictionary of the supported OpenType features.
			"""
    pass

  def font_supported_variation_list(self, font_rid:__core__.RID)->__core__.Dictionary:
    """
				Returns the dictionary of the supported OpenType variation coordinates.
			"""
    pass

  def font_get_global_oversampling(self)->float:
    """
				Deprecated. This method always returns `1.0`.
			"""
    pass

  def font_set_global_oversampling(self, oversampling:float)->None:
    """
				Deprecated. This method does nothing.
			"""
    pass

  def get_hex_code_box_size(self, size:int, index:int)->__core__.Vector2:
    """
				Returns size of the replacement character (box with character hexadecimal code that is drawn in place of invalid characters).
			"""
    pass

  def draw_hex_code_box(self, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None:
    """
				Draws box displaying character hexadecimal code. Used for replacing missing characters.
			"""
    pass

  def create_shaped_text(self, direction:int =0, orientation:int =0)->__core__.RID:
    """
				Creates a new buffer for complex text layout, with the given `direction` and `orientation`. To free the resulting buffer, use `free_rid` method.
				**Note:** Direction is ignored if server does not support `constant FEATURE_BIDI_LAYOUT` feature (supported by `TextServerAdvanced`).
				**Note:** Orientation is ignored if server does not support `constant FEATURE_VERTICAL_LAYOUT` feature (supported by `TextServerAdvanced`).
			"""
    pass

  def shaped_text_clear(self, rid:__core__.RID)->None:
    """
				Clears text buffer (removes text and inline objects).
			"""
    pass

  def shaped_text_set_direction(self, shaped:__core__.RID, direction:int =0)->None:
    """
				Sets desired text direction. If set to `constant DIRECTION_AUTO`, direction will be detected based on the buffer contents and current locale.
				**Note:** Direction is ignored if server does not support `constant FEATURE_BIDI_LAYOUT` feature (supported by `TextServerAdvanced`).
			"""
    pass

  def shaped_text_get_direction(self, shaped:__core__.RID)->int:
    """
				Returns direction of the text.
			"""
    pass

  def shaped_text_get_inferred_direction(self, shaped:__core__.RID)->int:
    """
				Returns direction of the text, inferred by the BiDi algorithm.
			"""
    pass

  def shaped_text_set_bidi_override(self, shaped:__core__.RID, override:__core__.Array)->None:
    """
				Overrides BiDi for the structured text.
				Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
			"""
    pass

  def shaped_text_set_custom_punctuation(self, shaped:__core__.RID, punct:str)->None:
    """
				Sets custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
			"""
    pass

  def shaped_text_get_custom_punctuation(self, shaped:__core__.RID)->str:
    """
				Returns custom punctuation character list, used for word breaking. If set to empty string, server defaults are used.
			"""
    pass

  def shaped_text_set_custom_ellipsis(self, shaped:__core__.RID, char:int)->None:
    """
				Sets ellipsis character used for text clipping.
			"""
    pass

  def shaped_text_get_custom_ellipsis(self, shaped:__core__.RID)->int:
    """
				Returns ellipsis character used for text clipping.
			"""
    pass

  def shaped_text_set_orientation(self, shaped:__core__.RID, orientation:int =0)->None:
    """
				Sets desired text orientation.
				**Note:** Orientation is ignored if server does not support `constant FEATURE_VERTICAL_LAYOUT` feature (supported by `TextServerAdvanced`).
			"""
    pass

  def shaped_text_get_orientation(self, shaped:__core__.RID)->int:
    """
				Returns text orientation.
			"""
    pass

  def shaped_text_set_preserve_invalid(self, shaped:__core__.RID, enabled:bool)->None:
    """
				If set to `true` text buffer will display invalid characters as hexadecimal codes, otherwise nothing is displayed.
			"""
    pass

  def shaped_text_get_preserve_invalid(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if text buffer is configured to display hexadecimal codes in place of invalid characters.
				**Note:** If set to `false`, nothing is displayed in place of invalid characters.
			"""
    pass

  def shaped_text_set_preserve_control(self, shaped:__core__.RID, enabled:bool)->None:
    """
				If set to `true` text buffer will display control characters.
			"""
    pass

  def shaped_text_get_preserve_control(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if text buffer is configured to display control characters.
			"""
    pass

  def shaped_text_set_spacing(self, shaped:__core__.RID, spacing:int , value:int)->None:
    """
				Sets extra spacing added between glyphs or lines in pixels.
			"""
    pass

  def shaped_text_get_spacing(self, shaped:__core__.RID, spacing:int )->int:
    """
				Returns extra spacing added between glyphs or lines in pixels.
			"""
    pass

  def shaped_text_add_string(self, shaped:__core__.RID, text:str, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary= __core__.Dictionary.new0(), language:str= __core__.String.new0(), meta:Any=None)->bool:
    """
				Adds text span and font to draw it to the text buffer.
			"""
    pass

  def shaped_text_add_object(self, shaped:__core__.RID, key:Any, size:__core__.Vector2, inline_align:int =5, length:int=1, baseline:float=0.0)->bool:
    """
				Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
			"""
    pass

  def shaped_text_resize_object(self, shaped:__core__.RID, key:Any, size:__core__.Vector2, inline_align:int =5, baseline:float=0.0)->bool:
    """
				Sets new size and alignment of embedded object.
			"""
    pass

  def shaped_get_span_count(self, shaped:__core__.RID)->int:
    """
				Returns number of text spans added using `shaped_text_add_string` or `shaped_text_add_object`.
			"""
    pass

  def shaped_get_span_meta(self, shaped:__core__.RID, index:int)->Any:
    """
				Returns text span metadata.
			"""
    pass

  def shaped_get_span_embedded_object(self, shaped:__core__.RID, index:int)->Any:
    """
				Returns text embedded object key.
			"""
    pass

  def shaped_set_span_update_font(self, shaped:__core__.RID, index:int, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary= __core__.Dictionary.new0())->None:
    """
				Changes text span font, font size, and OpenType features, without changing the text.
			"""
    pass

  def shaped_text_substr(self, shaped:__core__.RID, start:int, length:int)->__core__.RID:
    """
				Returns text buffer for the substring of the text in the `shaped` text buffer (including inline objects).
			"""
    pass

  def shaped_text_get_parent(self, shaped:__core__.RID)->__core__.RID:
    """
				Returns the parent buffer from which the substring originates.
			"""
    pass

  def shaped_text_fit_to_width(self, shaped:__core__.RID, width:float, justification_flags:int=3)->float:
    """
				Adjusts text width to fit to specified width, returns new text width.
			"""
    pass

  def shaped_text_tab_align(self, shaped:__core__.RID, tab_stops:__core__.PackedFloat32Array)->float:
    """
				Aligns shaped text to the given tab-stops.
			"""
    pass

  def shaped_text_shape(self, shaped:__core__.RID)->bool:
    """
				Shapes buffer if it's not shaped. Returns `true` if the string is shaped successfully.
				**Note:** It is not necessary to call this function manually, buffer will be shaped automatically as soon as any of its output data is requested.
			"""
    pass

  def shaped_text_is_ready(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if buffer is successfully shaped.
			"""
    pass

  def shaped_text_has_visible_chars(self, shaped:__core__.RID)->bool:
    """
				Returns `true` if text buffer contains any visible characters.
			"""
    pass

  def shaped_text_get_glyphs(self, shaped:__core__.RID)->typedarray::Dictionary:
    """
				Returns an array of glyphs in the visual order.
			"""
    pass

  def shaped_text_sort_logical(self, shaped:__core__.RID)->typedarray::Dictionary:
    """
				Returns text glyphs in the logical order.
			"""
    pass

  def shaped_text_get_glyph_count(self, shaped:__core__.RID)->int:
    """
				Returns number of glyphs in the buffer.
			"""
    pass

  def shaped_text_get_range(self, shaped:__core__.RID)->__core__.Vector2i:
    """
				Returns substring buffer character range in the parent buffer.
			"""
    pass

  def shaped_text_get_line_breaks_adv(self, shaped:__core__.RID, width:__core__.PackedFloat32Array, start:int=0, once:bool=True, break_flags:int=3)->__core__.PackedInt32Array:
    """
				Breaks text to the lines and columns. Returns character ranges for each segment.
			"""
    pass

  def shaped_text_get_line_breaks(self, shaped:__core__.RID, width:float, start:int=0, break_flags:int=3)->__core__.PackedInt32Array:
    """
				Breaks text to the lines and returns character ranges for each line.
			"""
    pass

  def shaped_text_get_word_breaks(self, shaped:__core__.RID, grapheme_flags:int=264, skip_grapheme_flags:int=4)->__core__.PackedInt32Array:
    """
				Breaks text into words and returns array of character ranges. Use `grapheme_flags` to set what characters are used for breaking.
			"""
    pass

  def shaped_text_get_trim_pos(self, shaped:__core__.RID)->int:
    """
				Returns the position of the overrun trim.
			"""
    pass

  def shaped_text_get_ellipsis_pos(self, shaped:__core__.RID)->int:
    """
				Returns position of the ellipsis.
			"""
    pass

  def shaped_text_get_ellipsis_glyphs(self, shaped:__core__.RID)->typedarray::Dictionary:
    """
				Returns array of the glyphs in the ellipsis.
			"""
    pass

  def shaped_text_get_ellipsis_glyph_count(self, shaped:__core__.RID)->int:
    """
				Returns number of glyphs in the ellipsis.
			"""
    pass

  def shaped_text_overrun_trim_to_width(self, shaped:__core__.RID, width:float=0, overrun_trim_flags:int=0)->None:
    """
				Trims text if it exceeds the given width.
			"""
    pass

  def shaped_text_get_objects(self, shaped:__core__.RID)->__core__.Array:
    """
				Returns array of inline objects.
			"""
    pass

  def shaped_text_get_object_rect(self, shaped:__core__.RID, key:Any)->__core__.Rect2:
    """
				Returns bounding rectangle of the inline object.
			"""
    pass

  def shaped_text_get_object_range(self, shaped:__core__.RID, key:Any)->__core__.Vector2i:
    """
				Returns the character range of the inline object.
			"""
    pass

  def shaped_text_get_object_glyph(self, shaped:__core__.RID, key:Any)->int:
    """
				Returns the glyph index of the inline object.
			"""
    pass

  def shaped_text_get_size(self, shaped:__core__.RID)->__core__.Vector2:
    """
				Returns size of the text.
			"""
    pass

  def shaped_text_get_ascent(self, shaped:__core__.RID)->float:
    """
				Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
				**Note:** Overall ascent can be higher than font ascent, if some glyphs are displaced from the baseline.
			"""
    pass

  def shaped_text_get_descent(self, shaped:__core__.RID)->float:
    """
				Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
				**Note:** Overall descent can be higher than font descent, if some glyphs are displaced from the baseline.
			"""
    pass

  def shaped_text_get_width(self, shaped:__core__.RID)->float:
    """
				Returns width (for horizontal layout) or height (for vertical) of the text.
			"""
    pass

  def shaped_text_get_underline_position(self, shaped:__core__.RID)->float:
    """
				Returns pixel offset of the underline below the baseline.
			"""
    pass

  def shaped_text_get_underline_thickness(self, shaped:__core__.RID)->float:
    """
				Returns thickness of the underline.
			"""
    pass

  def shaped_text_get_carets(self, shaped:__core__.RID, position:int)->__core__.Dictionary:
    """
				Returns shapes of the carets corresponding to the character offset `position` in the text. Returned caret shape is 1 pixel wide rectangle.
			"""
    pass

  def shaped_text_get_selection(self, shaped:__core__.RID, start:int, end:int)->__core__.PackedVector2Array:
    """
				Returns selection rectangles for the specified character range.
			"""
    pass

  def shaped_text_hit_test_grapheme(self, shaped:__core__.RID, coords:float)->int:
    """
				Returns grapheme index at the specified pixel offset at the baseline, or `-1` if none is found.
			"""
    pass

  def shaped_text_hit_test_position(self, shaped:__core__.RID, coords:float)->int:
    """
				Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
			"""
    pass

  def shaped_text_get_grapheme_bounds(self, shaped:__core__.RID, pos:int)->__core__.Vector2:
    """
				Returns composite character's bounds as offsets from the start of the line.
			"""
    pass

  def shaped_text_next_grapheme_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns grapheme end position closest to the `pos`.
			"""
    pass

  def shaped_text_prev_grapheme_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns grapheme start position closest to the `pos`.
			"""
    pass

  def shaped_text_get_character_breaks(self, shaped:__core__.RID)->__core__.PackedInt32Array:
    """
				Returns array of the composite character boundaries.
			"""
    pass

  def shaped_text_next_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character end position closest to the `pos`.
			"""
    pass

  def shaped_text_prev_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character start position closest to the `pos`.
			"""
    pass

  def shaped_text_closest_character_pos(self, shaped:__core__.RID, pos:int)->int:
    """
				Returns composite character position closest to the `pos`.
			"""
    pass

  def shaped_text_draw(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float=-1, clip_r:float=-1, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draw shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout). If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				`clip_l` and `clip_r` are offsets relative to `pos`, going to the right in horizontal layout and downward in vertical layout. If `clip_l` is not negative, glyphs starting before the offset are clipped. If `clip_r` is not negative, glyphs ending after the offset are clipped.
			"""
    pass

  def shaped_text_draw_outline(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float=-1, clip_r:float=-1, outline_size:int=1, color:__core__.Color= __core__.Color.new0())->None:
    """
				Draw the outline of the shaped text into a canvas item at a given position, with `color`. `pos` specifies the leftmost point of the baseline (for horizontal layout) or topmost point of the baseline (for vertical layout). If `oversampling` is greater than zero, it is used as font oversampling factor, otherwise viewport oversampling settings are used.
				`clip_l` and `clip_r` are offsets relative to `pos`, going to the right in horizontal layout and downward in vertical layout. If `clip_l` is not negative, glyphs starting before the offset are clipped. If `clip_r` is not negative, glyphs ending after the offset are clipped.
			"""
    pass

  def shaped_text_get_dominant_direction_in_range(self, shaped:__core__.RID, start:int, end:int)->int:
    """
				Returns dominant direction of in the range of text.
			"""
    pass

  def format_number(self, number:str, language:str= __core__.String.new0())->str:
    """
				Converts a number from the Western Arabic (0..9) to the numeral systems used in `language`.
				If `language` is omitted, the active locale will be used.
			"""
    pass

  def parse_number(self, number:str, language:str= __core__.String.new0())->str:
    """
				Converts `number` from the numeral systems used in `language` to Western Arabic (0..9).
			"""
    pass

  def percent_sign(self, language:str= __core__.String.new0())->str:
    """
				Returns percent sign used in the `language`.
			"""
    pass

  def string_get_word_breaks(self, string:str, language:str= __core__.String.new0(), chars_per_line:int=0)->__core__.PackedInt32Array:
    """
				Returns an array of the word break boundaries. Elements in the returned array are the offsets of the start and end of words. Therefore the length of the array is always even.
				When `chars_per_line` is greater than zero, line break boundaries are returned instead.
				```gdscript
				var ts = TextServerManager.get_primary_interface()
				# Corresponds to the substrings "The", "Godot", "Engine", and "4".
				print(ts.string_get_word_breaks("The Godot Engine, 4")) # Prints `0, 3, 4, 9, 10, 16, 18, 19`
				# Corresponds to the substrings "The", "Godot", "Engin", and "e, 4".
				print(ts.string_get_word_breaks("The Godot Engine, 4", "en", 5)) # Prints `0, 3, 4, 9, 10, 15, 15, 19`
				# Corresponds to the substrings "The Godot" and "Engine, 4".
				print(ts.string_get_word_breaks("The Godot Engine, 4", "en", 10)) # Prints `0, 9, 10, 19`
				```
			"""
    pass

  def string_get_character_breaks(self, string:str, language:str= __core__.String.new0())->__core__.PackedInt32Array:
    """
				Returns array of the composite character boundaries.
				```gdscript
				var ts = TextServerManager.get_primary_interface()
				print(ts.string_get_character_breaks("Test ❤️‍🔥 Test")) # Prints `1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14`
				```
			"""
    pass

  def is_confusable(self, string:str, dict:__core__.PackedStringArray)->int:
    """
				Returns index of the first string in `dict` which is visually confusable with the `string`, or `-1` if none is found.
				**Note:** This method doesn't detect invisible characters, for spoof detection use it in combination with `spoof_check`.
				**Note:** Always returns `-1` if the server does not support the `constant FEATURE_UNICODE_SECURITY` feature.
			"""
    pass

  def spoof_check(self, string:str)->bool:
    """
				Returns `true` if `string` is likely to be an attempt at confusing the reader.
				**Note:** Always returns `false` if the server does not support the `constant FEATURE_UNICODE_SECURITY` feature.
			"""
    pass

  def strip_diacritics(self, string:str)->str:
    """
				Strips diacritics from the string.
				**Note:** The result may be longer or shorter than the original.
			"""
    pass

  def is_valid_identifier(self, string:str)->bool:
    """
				Returns `true` if `string` is a valid identifier.
				If the text server supports the `constant FEATURE_UNICODE_IDENTIFIERS` feature, a valid identifier must:
				- Conform to normalization form C.
				- Begin with a Unicode character of class XID_Start or `"_"`.
				- May contain Unicode characters of class XID_Continue in the other positions.
				- Use UAX #31 recommended scripts only (mixed scripts are allowed).
				If the `constant FEATURE_UNICODE_IDENTIFIERS` feature is not supported, a valid identifier must:
				- Begin with a Unicode character of class XID_Start or `"_"`.
				- May contain Unicode characters of class XID_Continue in the other positions.
			"""
    pass

  def is_valid_letter(self, unicode:int)->bool:
    """
				Returns `true` if the given code point is a valid letter, i.e. it belongs to the Unicode category "L".
			"""
    pass

  def string_to_upper(self, string:str, language:str= __core__.String.new0())->str:
    """
				Returns the string converted to uppercase.
				**Note:** Casing is locale dependent and context sensitive if server support `constant FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION` feature (supported by `TextServerAdvanced`).
				**Note:** The result may be longer or shorter than the original.
			"""
    pass

  def string_to_lower(self, string:str, language:str= __core__.String.new0())->str:
    """
				Returns the string converted to lowercase.
				**Note:** Casing is locale dependent and context sensitive if server support `constant FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION` feature (supported by `TextServerAdvanced`).
				**Note:** The result may be longer or shorter than the original.
			"""
    pass

  def string_to_title(self, string:str, language:str= __core__.String.new0())->str:
    """
				Returns the string converted to title case.
				**Note:** Casing is locale dependent and context sensitive if server support `constant FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION` feature (supported by `TextServerAdvanced`).
				**Note:** The result may be longer or shorter than the original.
			"""
    pass

  def parse_structured_text(self, parser_type:int , args:__core__.Array, text:str)->typedarray::Vector3i:
    """
				Default implementation of the BiDi algorithm override function.
			"""
    pass


