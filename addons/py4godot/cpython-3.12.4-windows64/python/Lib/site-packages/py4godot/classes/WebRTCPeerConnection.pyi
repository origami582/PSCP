from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.WebRTCPeerConnectionExtension as __webrtcpeerconnectionextension__
import py4godot.classes.WebRTCPeerConnection as __webrtcpeerconnection__
import py4godot.classes.WebRTCDataChannel as __webrtcdatachannel__
import py4godot.classes.WebRTCDataChannelExtension as __webrtcdatachannelextension__
import py4godot.classes.RefCounted as __refcounted__


class ConnectionState:
  STATE_NEW:int = 0
  STATE_CONNECTING:int = 1
  STATE_CONNECTED:int = 2
  STATE_DISCONNECTED:int = 3
  STATE_FAILED:int = 4
  STATE_CLOSED:int = 5
class GatheringState:
  GATHERING_STATE_NEW:int = 0
  GATHERING_STATE_GATHERING:int = 1
  GATHERING_STATE_COMPLETE:int = 2
class SignalingState:
  SIGNALING_STATE_STABLE:int = 0
  SIGNALING_STATE_HAVE_LOCAL_OFFER:int = 1
  SIGNALING_STATE_HAVE_REMOTE_OFFER:int = 2
  SIGNALING_STATE_HAVE_LOCAL_PRANSWER:int = 3
  SIGNALING_STATE_HAVE_REMOTE_PRANSWER:int = 4
  SIGNALING_STATE_CLOSED:int = 5


class WebRTCPeerConnection(__refcounted__.RefCounted):
  """"""
  session_description_created: BuiltinSignal
  ice_candidate_created: BuiltinSignal
  data_channel_received: BuiltinSignal

  @staticmethod
  def constructor()->WebRTCPeerConnection:pass



  @staticmethod
  def cast(other:__object__.Object)->WebRTCPeerConnection:pass


  @staticmethod
  def set_default_extension(extension_class:__core__.StringName|str)->None:
    """"""
    pass

  def initialize(self, configuration:__core__.Dictionary= __core__.Dictionary.new0())->int:
    """"""
    pass

  def create_data_channel(self, label:str, options:__core__.Dictionary= __core__.Dictionary.new0())->__webrtcdatachannel__.WebRTCDataChannel|__webrtcdatachannelextension__.WebRTCDataChannelExtension:
    """"""
    pass

  def create_offer(self)->int:
    """"""
    pass

  def set_local_description(self, type:str, sdp:str)->int:
    """"""
    pass

  def set_remote_description(self, type:str, sdp:str)->int:
    """"""
    pass

  def add_ice_candidate(self, media:str, index:int, name:str)->int:
    """"""
    pass

  def poll(self)->int:
    """"""
    pass

  def close(self)->None:
    """"""
    pass

  def get_connection_state(self)->int:
    """"""
    pass

  def get_gathering_state(self)->int:
    """"""
    pass

  def get_signaling_state(self)->int:
    """"""
    pass


