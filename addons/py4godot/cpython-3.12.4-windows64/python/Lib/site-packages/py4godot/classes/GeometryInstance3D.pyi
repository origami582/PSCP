from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.CSGShape3D as __csgshape3d__


class ShadowCastingSetting:
  SHADOW_CASTING_SETTING_OFF:int = 0
  SHADOW_CASTING_SETTING_ON:int = 1
  SHADOW_CASTING_SETTING_DOUBLE_SIDED:int = 2
  SHADOW_CASTING_SETTING_SHADOWS_ONLY:int = 3
class GIMode:
  GI_MODE_DISABLED:int = 0
  GI_MODE_STATIC:int = 1
  GI_MODE_DYNAMIC:int = 2
class LightmapScale:
  LIGHTMAP_SCALE_1X:int = 0
  LIGHTMAP_SCALE_2X:int = 1
  LIGHTMAP_SCALE_4X:int = 2
  LIGHTMAP_SCALE_8X:int = 3
  LIGHTMAP_SCALE_MAX:int = 4
class VisibilityRangeFadeMode:
  VISIBILITY_RANGE_FADE_DISABLED:int = 0
  VISIBILITY_RANGE_FADE_SELF:int = 1
  VISIBILITY_RANGE_FADE_DEPENDENCIES:int = 2


class GeometryInstance3D(__visualinstance3d__.VisualInstance3D):
  """
		Base node for geometry-based visual instances. Shares some common functionality like visibility and custom materials.
	"""

  @staticmethod
  def constructor()->GeometryInstance3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GeometryInstance3D:pass


  @property
  def material_override(self)->BaseMaterial3D,ShaderMaterial:
    """"""
    pass
  @material_override.setter
  def material_override(self,  value:__basematerial3d__.BaseMaterial3D)->None:
    """"""
    pass
  @property
  def material_overlay(self)->BaseMaterial3D,ShaderMaterial:
    """"""
    pass
  @material_overlay.setter
  def material_overlay(self,  value:__basematerial3d__.BaseMaterial3D)->None:
    """"""
    pass
  @property
  def transparency(self)->float:
    """"""
    pass
  @transparency.setter
  def transparency(self,  value:float)->None:
    """"""
    pass
  @property
  def cast_shadow(self)->int:
    """"""
    pass
  @cast_shadow.setter
  def cast_shadow(self,  value:int)->None:
    """"""
    pass
  @property
  def extra_cull_margin(self)->float:
    """"""
    pass
  @extra_cull_margin.setter
  def extra_cull_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def custom_aabb(self)->__core__.AABB:
    """"""
    pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None:
    """"""
    pass
  @property
  def lod_bias(self)->float:
    """"""
    pass
  @lod_bias.setter
  def lod_bias(self,  value:float)->None:
    """"""
    pass
  @property
  def ignore_occlusion_culling(self)->bool:
    """"""
    pass
  @ignore_occlusion_culling.setter
  def ignore_occlusion_culling(self,  value:bool)->None:
    """"""
    pass
  @property
  def gi_mode(self)->int:
    """"""
    pass
  @gi_mode.setter
  def gi_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def gi_lightmap_texel_scale(self)->float:
    """"""
    pass
  @gi_lightmap_texel_scale.setter
  def gi_lightmap_texel_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def gi_lightmap_scale(self)->int:
    """"""
    pass
  @gi_lightmap_scale.setter
  def gi_lightmap_scale(self,  value:int)->None:
    """"""
    pass
  @property
  def visibility_range_begin(self)->float:
    """"""
    pass
  @visibility_range_begin.setter
  def visibility_range_begin(self,  value:float)->None:
    """"""
    pass
  @property
  def visibility_range_begin_margin(self)->float:
    """"""
    pass
  @visibility_range_begin_margin.setter
  def visibility_range_begin_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def visibility_range_end(self)->float:
    """"""
    pass
  @visibility_range_end.setter
  def visibility_range_end(self,  value:float)->None:
    """"""
    pass
  @property
  def visibility_range_end_margin(self)->float:
    """"""
    pass
  @visibility_range_end_margin.setter
  def visibility_range_end_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def visibility_range_fade_mode(self)->int:
    """"""
    pass
  @visibility_range_fade_mode.setter
  def visibility_range_fade_mode(self,  value:int)->None:
    """"""
    pass
  def set_material_override(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material_override(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """"""
    pass

  def set_material_overlay(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material_overlay(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """"""
    pass

  def set_cast_shadows_setting(self, shadow_casting_setting:int )->None:
    """"""
    pass

  def get_cast_shadows_setting(self)->int:
    """"""
    pass

  def set_lod_bias(self, bias:float)->None:
    """"""
    pass

  def get_lod_bias(self)->float:
    """"""
    pass

  def set_transparency(self, transparency:float)->None:
    """"""
    pass

  def get_transparency(self)->float:
    """"""
    pass

  def set_visibility_range_end_margin(self, distance:float)->None:
    """"""
    pass

  def get_visibility_range_end_margin(self)->float:
    """"""
    pass

  def set_visibility_range_end(self, distance:float)->None:
    """"""
    pass

  def get_visibility_range_end(self)->float:
    """"""
    pass

  def set_visibility_range_begin_margin(self, distance:float)->None:
    """"""
    pass

  def get_visibility_range_begin_margin(self)->float:
    """"""
    pass

  def set_visibility_range_begin(self, distance:float)->None:
    """"""
    pass

  def get_visibility_range_begin(self)->float:
    """"""
    pass

  def set_visibility_range_fade_mode(self, mode:int )->None:
    """"""
    pass

  def get_visibility_range_fade_mode(self)->int:
    """"""
    pass

  def set_instance_shader_parameter(self, name:__core__.StringName|str, value:Any)->None:
    """
				Set the value of a shader uniform for this instance only (`url=$DOCS_URL/tutorials/shaders/shader_reference/shading_language.html#per-instance-uniforms`per-instance uniform`/url`). See also `ShaderMaterial.set_shader_parameter` to assign a uniform on all instances using the same `ShaderMaterial`.
				**Note:** For a shader uniform to be assignable on a per-instance basis, it _must_ be defined with `instance uniform ...` rather than `uniform ...` in the shader code.
				**Note:** `name` is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector).
				**Note:** Per-instance shader uniforms are only available in Spatial and CanvasItem shaders, but not for Fog, Sky, or Particles shaders.
			"""
    pass

  def get_instance_shader_parameter(self, name:__core__.StringName|str)->Any:
    """
				Get the value of a shader parameter as set on this instance.
			"""
    pass

  def set_extra_cull_margin(self, margin:float)->None:
    """"""
    pass

  def get_extra_cull_margin(self)->float:
    """"""
    pass

  def set_lightmap_texel_scale(self, scale:float)->None:
    """"""
    pass

  def get_lightmap_texel_scale(self)->float:
    """"""
    pass

  def set_lightmap_scale(self, scale:int )->None:
    """"""
    pass

  def get_lightmap_scale(self)->int:
    """"""
    pass

  def set_gi_mode(self, mode:int )->None:
    """"""
    pass

  def get_gi_mode(self)->int:
    """"""
    pass

  def set_ignore_occlusion_culling(self, ignore_culling:bool)->None:
    """"""
    pass

  def is_ignoring_occlusion_culling(self)->bool:
    """"""
    pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None:
    """"""
    pass

  def get_custom_aabb(self)->__core__.AABB:
    """"""
    pass


