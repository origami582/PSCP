from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shortcut as __shortcut__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.RefCounted as __refcounted__


class ContextMenuSlot:
  CONTEXT_SLOT_SCENE_TREE:int = 0
  CONTEXT_SLOT_FILESYSTEM:int = 1
  CONTEXT_SLOT_SCRIPT_EDITOR:int = 2
  CONTEXT_SLOT_FILESYSTEM_CREATE:int = 3
  CONTEXT_SLOT_SCRIPT_EDITOR_CODE:int = 4
  CONTEXT_SLOT_SCENE_TABS:int = 5
  CONTEXT_SLOT_2D_EDITOR:int = 6


class EditorContextMenuPlugin(__refcounted__.RefCounted):
  """
		`EditorContextMenuPlugin` allows for the addition of custom options in the editor's context menu.
		Currently, context menus are supported for three commonly used areas: the file system, scene tree, and editor script list panel.
	"""

  @staticmethod
  def constructor()->EditorContextMenuPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorContextMenuPlugin:pass


  def _popup_menu(self, paths:__core__.PackedStringArray)->None:
    """
				Called when creating a context menu, custom options can be added by using the `add_context_menu_item` or `add_context_menu_item_from_shortcut` functions. `paths` contains currently selected paths (depending on menu), which can be used to conditionally add options.
			"""
    pass

  def add_menu_shortcut(self, shortcut:__shortcut__.Shortcut, callback:__core__.Callable)->None:
    """
				Registers a shortcut associated with the plugin's context menu. This method should be called once (e.g. in plugin's `Object._init`). `callback` will be called when user presses the specified `shortcut` while the menu's context is in effect (e.g. FileSystem dock is focused). Callback should take single `Array` argument; array contents depend on context menu slot.
				```gdscript
				func _init():
					add_menu_shortcut(SHORTCUT, handle)
				```
			"""
    pass

  def add_context_menu_item(self, name:str, callback:__core__.Callable, icon:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None:
    """
				Add custom option to the context menu of the plugin's specified slot. When the option is activated, `callback` will be called. Callback should take single `Array` argument; array contents depend on context menu slot.
				```gdscript
				func _popup_menu(paths):
					add_context_menu_item("File Custom options", handle, ICON)
				```
				If you want to assign shortcut to the menu item, use `add_context_menu_item_from_shortcut` instead.
			"""
    pass

  def add_context_menu_item_from_shortcut(self, name:str, shortcut:__shortcut__.Shortcut, icon:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None:
    """
				Add custom option to the context menu of the plugin's specified slot. The option will have the `shortcut` assigned and reuse its callback. The shortcut has to be registered beforehand with `add_menu_shortcut`.
				```gdscript
				func _init():
					add_menu_shortcut(SHORTCUT, handle)

				func _popup_menu(paths):
					add_context_menu_item_from_shortcut("File Custom options", SHORTCUT, ICON)
				```
			"""
    pass

  def add_context_submenu_item(self, name:str, menu:__popupmenu__.PopupMenu, icon:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None:
    """
				Add a submenu to the context menu of the plugin's specified slot. The submenu is not automatically handled, you need to connect to its signals yourself. Also the submenu is freed on every popup, so provide a new `PopupMenu` every time.
				```gdscript
				func _popup_menu(paths):
					var popup_menu = PopupMenu.new()
					popup_menu.add_item("Blue")
					popup_menu.add_item("White")
					popup_menu.id_pressed.connect(_on_color_submenu_option)

					add_context_submenu_item("Set Node Color", popup_menu)
				```
			"""
    pass


