from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextureLayered as __texturelayered__



class PlaceholderTextureLayered(__texturelayered__.TextureLayered):
  """
		This class is used when loading a project that uses a `TextureLayered` subclass in 2 conditions:
		- When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly.
		- When this subclass is missing due to using a different engine version or build (e.g. modules disabled).
		**Note:** This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).
	"""

  @staticmethod
  def constructor()->PlaceholderTextureLayered:pass



  @staticmethod
  def cast(other:__object__.Object)->PlaceholderTextureLayered:pass


  @property
  def size(self)->__core__.Vector2i:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def layers(self)->int:
    """"""
    pass
  @layers.setter
  def layers(self,  value:int)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector2i)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_layers(self, layers:int)->None:
    """"""
    pass


