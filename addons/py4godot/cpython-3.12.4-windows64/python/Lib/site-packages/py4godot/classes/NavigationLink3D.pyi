from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__



class NavigationLink3D(__node3d__.Node3D):
  """
		A link between two positions on `NavigationRegion3D`s that agents can be routed through. These positions can be on the same `NavigationRegion3D` or on two different ones. Links are useful to express navigation methods other than traveling along the surface of the navigation mesh, such as ziplines, teleporters, or gaps that can be jumped across.
	"""

  @staticmethod
  def constructor()->NavigationLink3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationLink3D:pass


  @property
  def enabled(self)->bool:
    """"""
    pass
  @enabled.setter
  def enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def bidirectional(self)->bool:
    """"""
    pass
  @bidirectional.setter
  def bidirectional(self,  value:bool)->None:
    """"""
    pass
  @property
  def navigation_layers(self)->int:
    """"""
    pass
  @navigation_layers.setter
  def navigation_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def start_position(self)->__core__.Vector3:
    """"""
    pass
  @start_position.setter
  def start_position(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def end_position(self)->__core__.Vector3:
    """"""
    pass
  @end_position.setter
  def end_position(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def enter_cost(self)->float:
    """"""
    pass
  @enter_cost.setter
  def enter_cost(self,  value:float)->None:
    """"""
    pass
  @property
  def travel_cost(self)->float:
    """"""
    pass
  @travel_cost.setter
  def travel_cost(self,  value:float)->None:
    """"""
    pass
  def get_rid(self)->__core__.RID:
    """
				Returns the `RID` of this link on the `NavigationServer3D`.
			"""
    pass

  def set_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_enabled(self)->bool:
    """"""
    pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None:
    """
				Sets the `RID` of the navigation map this link should use. By default the link will automatically join the `World3D` default navigation map so this function is only required to override the default map.
			"""
    pass

  def get_navigation_map(self)->__core__.RID:
    """
				Returns the current navigation map `RID` used by this link.
			"""
    pass

  def set_bidirectional(self, bidirectional:bool)->None:
    """"""
    pass

  def is_bidirectional(self)->bool:
    """"""
    pass

  def set_navigation_layers(self, navigation_layers:int)->None:
    """"""
    pass

  def get_navigation_layers(self)->int:
    """"""
    pass

  def set_navigation_layer_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `navigation_layers` bitmask, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_navigation_layer_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `navigation_layers` bitmask is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_start_position(self, position:__core__.Vector3)->None:
    """"""
    pass

  def get_start_position(self)->__core__.Vector3:
    """"""
    pass

  def set_end_position(self, position:__core__.Vector3)->None:
    """"""
    pass

  def get_end_position(self)->__core__.Vector3:
    """"""
    pass

  def set_global_start_position(self, position:__core__.Vector3)->None:
    """
				Sets the `start_position` that is relative to the link from a global `position`.
			"""
    pass

  def get_global_start_position(self)->__core__.Vector3:
    """
				Returns the `start_position` that is relative to the link as a global position.
			"""
    pass

  def set_global_end_position(self, position:__core__.Vector3)->None:
    """
				Sets the `end_position` that is relative to the link from a global `position`.
			"""
    pass

  def get_global_end_position(self)->__core__.Vector3:
    """
				Returns the `end_position` that is relative to the link as a global position.
			"""
    pass

  def set_enter_cost(self, enter_cost:float)->None:
    """"""
    pass

  def get_enter_cost(self)->float:
    """"""
    pass

  def set_travel_cost(self, travel_cost:float)->None:
    """"""
    pass

  def get_travel_cost(self)->float:
    """"""
    pass


