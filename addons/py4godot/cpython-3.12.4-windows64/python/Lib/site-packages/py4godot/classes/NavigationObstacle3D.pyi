from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D as __node3d__



class NavigationObstacle3D(__node3d__.Node3D):
  """
		An obstacle needs a navigation map and outline `vertices` defined to work correctly. The outlines can not cross or overlap and are restricted to a plane projection. This means the y-axis of the vertices is ignored, instead the obstacle's global y-axis position is used for placement. The projected shape is extruded by the obstacles height along the y-axis.
		Obstacles can be included in the navigation mesh baking process when `affect_navigation_mesh` is enabled. They do not add walkable geometry, instead their role is to discard other source geometry inside the shape. This can be used to prevent navigation mesh from appearing in unwanted places, e.g. inside "solid" geometry or on top of it. If `carve_navigation_mesh` is enabled the baked shape will not be affected by offsets of the navigation mesh baking, e.g. the agent radius.
		With `avoidance_enabled` the obstacle can constrain the avoidance velocities of avoidance using agents. If the obstacle's vertices are wound in clockwise order, avoidance agents will be pushed in by the obstacle, otherwise, avoidance agents will be pushed out. Obstacles using vertices and avoidance can warp to a new position but should not be moved every single frame as each change requires a rebuild of the avoidance map.
	"""

  @staticmethod
  def constructor()->NavigationObstacle3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationObstacle3D:pass


  @property
  def radius(self)->float:
    """"""
    pass
  @radius.setter
  def radius(self,  value:float)->None:
    """"""
    pass
  @property
  def height(self)->float:
    """"""
    pass
  @height.setter
  def height(self,  value:float)->None:
    """"""
    pass
  @property
  def vertices(self)->__core__.PackedVector3Array:
    """"""
    pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def affect_navigation_mesh(self)->bool:
    """"""
    pass
  @affect_navigation_mesh.setter
  def affect_navigation_mesh(self,  value:bool)->None:
    """"""
    pass
  @property
  def carve_navigation_mesh(self)->bool:
    """"""
    pass
  @carve_navigation_mesh.setter
  def carve_navigation_mesh(self,  value:bool)->None:
    """"""
    pass
  @property
  def avoidance_enabled(self)->bool:
    """"""
    pass
  @avoidance_enabled.setter
  def avoidance_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def velocity(self)->__core__.Vector3:
    """"""
    pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def avoidance_layers(self)->int:
    """"""
    pass
  @avoidance_layers.setter
  def avoidance_layers(self,  value:int)->None:
    """"""
    pass
  @property
  def use_3d_avoidance(self)->bool:
    """"""
    pass
  @use_3d_avoidance.setter
  def use_3d_avoidance(self,  value:bool)->None:
    """"""
    pass
  def get_rid(self)->__core__.RID:
    """
				Returns the `RID` of this obstacle on the `NavigationServer3D`.
			"""
    pass

  def set_avoidance_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_avoidance_enabled(self)->bool:
    """"""
    pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None:
    """
				Sets the `RID` of the navigation map this NavigationObstacle node should use and also updates the `obstacle` on the NavigationServer.
			"""
    pass

  def get_navigation_map(self)->__core__.RID:
    """
				Returns the `RID` of the navigation map for this NavigationObstacle node. This function returns always the map set on the NavigationObstacle node and not the map of the abstract obstacle on the NavigationServer. If the obstacle map is changed directly with the NavigationServer API the NavigationObstacle node will not be aware of the map change. Use `set_navigation_map` to change the navigation map for the NavigationObstacle and also update the obstacle on the NavigationServer.
			"""
    pass

  def set_radius(self, radius:float)->None:
    """"""
    pass

  def get_radius(self)->float:
    """"""
    pass

  def set_height(self, height:float)->None:
    """"""
    pass

  def get_height(self)->float:
    """"""
    pass

  def set_velocity(self, velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_vertices(self, vertices:__core__.PackedVector3Array)->None:
    """"""
    pass

  def get_vertices(self)->__core__.PackedVector3Array:
    """"""
    pass

  def set_avoidance_layers(self, layers:int)->None:
    """"""
    pass

  def get_avoidance_layers(self)->int:
    """"""
    pass

  def set_avoidance_layer_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `avoidance_layers` bitmask, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_avoidance_layer_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `avoidance_layers` bitmask is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_use_3d_avoidance(self, enabled:bool)->None:
    """"""
    pass

  def get_use_3d_avoidance(self)->bool:
    """"""
    pass

  def set_affect_navigation_mesh(self, enabled:bool)->None:
    """"""
    pass

  def get_affect_navigation_mesh(self)->bool:
    """"""
    pass

  def set_carve_navigation_mesh(self, enabled:bool)->None:
    """"""
    pass

  def get_carve_navigation_mesh(self)->bool:
    """"""
    pass


