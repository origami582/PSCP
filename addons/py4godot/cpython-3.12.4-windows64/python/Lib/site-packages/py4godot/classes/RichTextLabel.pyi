from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.Button as __button__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.Panel as __panel__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.Font as __font__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.Control as __control__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.Tree as __tree__
import py4godot.classes.Label as __label__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Slider as __slider__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.RichTextEffect as __richtexteffect__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Range as __range__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.Container as __container__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.LinkButton as __linkbutton__


class ListType:
  LIST_NUMBERS:int = 0
  LIST_LETTERS:int = 1
  LIST_ROMAN:int = 2
  LIST_DOTS:int = 3
class MenuItems:
  MENU_COPY:int = 0
  MENU_SELECT_ALL:int = 1
  MENU_MAX:int = 2
class MetaUnderline:
  META_UNDERLINE_NEVER:int = 0
  META_UNDERLINE_ALWAYS:int = 1
  META_UNDERLINE_ON_HOVER:int = 2
class ImageUpdateMask:
  UPDATE_TEXTURE:int = 1
  UPDATE_SIZE:int = 2
  UPDATE_COLOR:int = 4
  UPDATE_ALIGNMENT:int = 8
  UPDATE_REGION:int = 16
  UPDATE_PAD:int = 32
  UPDATE_TOOLTIP:int = 64
  UPDATE_WIDTH_IN_PERCENT:int = 128


class RichTextLabel(__control__.Control):
  """
		A control for displaying text that can contain custom fonts, images, and basic formatting. `RichTextLabel` manages these as an internal tag stack. It also adapts itself to given width/heights.
		**Note:** `newline`, `push_paragraph`, `"\n"`, `"\r\n"`, `p` tag, and alignment tags start a new paragraph. Each paragraph is processed independently, in its own BiDi context. If you want to force line wrapping within paragraph, any other line breaking character can be used, for example, Form Feed (U+000C), Next Line (U+0085), Line Separator (U+2028).
		**Note:** Assignments to `text` clear the tag stack and reconstruct it from the property's contents. Any edits made to `text` will erase previous edits made from other manual sources such as `append_text` and the `push_*` / `pop` methods.
		**Note:** RichTextLabel doesn't support entangled BBCode tags. For example, instead of using `code skip-lint`**bold_bold italic**italic_`, use `code skip-lint`**bold_bold italic_**_italic_`.
		**Note:** `push_*/pop_*` functions won't affect BBCode.
		**Note:** While `bbcode_enabled` is enabled, alignment tags such as `code skip-lint``center`` will take priority over the `horizontal_alignment` setting which determines the default text alignment.
	"""
  meta_clicked: BuiltinSignal
  meta_hover_started: BuiltinSignal
  meta_hover_ended: BuiltinSignal
  finished: BuiltinSignal

  @staticmethod
  def constructor()->RichTextLabel:pass



  @staticmethod
  def cast(other:__object__.Object)->RichTextLabel:pass


  @property
  def bbcode_enabled(self)->bool:
    """"""
    pass
  @bbcode_enabled.setter
  def bbcode_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def text(self)->str:
    """"""
    pass
  @text.setter
  def text(self,  value:str)->None:
    """"""
    pass
  @property
  def fit_content(self)->bool:
    """"""
    pass
  @fit_content.setter
  def fit_content(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_active(self)->bool:
    """"""
    pass
  @scroll_active.setter
  def scroll_active(self,  value:bool)->None:
    """"""
    pass
  @property
  def scroll_following(self)->bool:
    """"""
    pass
  @scroll_following.setter
  def scroll_following(self,  value:bool)->None:
    """"""
    pass
  @property
  def autowrap_mode(self)->int:
    """"""
    pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def tab_size(self)->int:
    """"""
    pass
  @tab_size.setter
  def tab_size(self,  value:int)->None:
    """"""
    pass
  @property
  def context_menu_enabled(self)->bool:
    """"""
    pass
  @context_menu_enabled.setter
  def context_menu_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def shortcut_keys_enabled(self)->bool:
    """"""
    pass
  @shortcut_keys_enabled.setter
  def shortcut_keys_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def horizontal_alignment(self)->int:
    """"""
    pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def vertical_alignment(self)->int:
    """"""
    pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None:
    """"""
    pass
  @property
  def justification_flags(self)->int:
    """"""
    pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None:
    """"""
    pass
  @property
  def tab_stops(self)->__core__.PackedFloat32Array:
    """"""
    pass
  @tab_stops.setter
  def tab_stops(self,  value:__core__.PackedFloat32Array)->None:
    """"""
    pass
  @property
  def custom_effects(self)->typedarray::24/17:RichTextEffect:
    """"""
    pass
  @custom_effects.setter
  def custom_effects(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def meta_underlined(self)->bool:
    """"""
    pass
  @meta_underlined.setter
  def meta_underlined(self,  value:bool)->None:
    """"""
    pass
  @property
  def hint_underlined(self)->bool:
    """"""
    pass
  @hint_underlined.setter
  def hint_underlined(self,  value:bool)->None:
    """"""
    pass
  @property
  def threaded(self)->bool:
    """"""
    pass
  @threaded.setter
  def threaded(self,  value:bool)->None:
    """"""
    pass
  @property
  def progress_bar_delay(self)->int:
    """"""
    pass
  @progress_bar_delay.setter
  def progress_bar_delay(self,  value:int)->None:
    """"""
    pass
  @property
  def selection_enabled(self)->bool:
    """"""
    pass
  @selection_enabled.setter
  def selection_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass
  @deselect_on_focus_loss_enabled.setter
  def deselect_on_focus_loss_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass
  @drag_and_drop_selection_enabled.setter
  def drag_and_drop_selection_enabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def visible_characters(self)->int:
    """"""
    pass
  @visible_characters.setter
  def visible_characters(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_characters_behavior(self)->int:
    """"""
    pass
  @visible_characters_behavior.setter
  def visible_characters_behavior(self,  value:int)->None:
    """"""
    pass
  @property
  def visible_ratio(self)->float:
    """"""
    pass
  @visible_ratio.setter
  def visible_ratio(self,  value:float)->None:
    """"""
    pass
  @property
  def text_direction(self)->int:
    """"""
    pass
  @text_direction.setter
  def text_direction(self,  value:int)->None:
    """"""
    pass
  @property
  def language(self)->str:
    """"""
    pass
  @language.setter
  def language(self,  value:str)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override(self)->int:
    """"""
    pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None:
    """"""
    pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None:
    """"""
    pass
  def get_parsed_text(self)->str:
    """
				Returns the text without BBCode mark-up.
			"""
    pass

  def add_text(self, text:str)->None:
    """
				Adds raw non-BBCode-parsed text to the tag stack.
			"""
    pass

  def set_text(self, text:str)->None:
    """"""
    pass

  def add_image(self, image:__texture2d__.Texture2D, width:int=0, height:int=0, color:__core__.Color= __core__.Color.new0(), inline_align:int =5, region:__core__.Rect2= __core__.Rect2.new0(), key:Any=None, pad:bool=False, tooltip:str= __core__.String.new0(), size_in_percent:bool=False)->None:
    """
				Adds an image's opening and closing tags to the tag stack, optionally providing a `width` and `height` to resize the image, a `color` to tint the image and a `region` to only use parts of the image.
				If `width` or `height` is set to 0, the image size will be adjusted in order to keep the original aspect ratio.
				If `width` and `height` are not set, but `region` is, the region's rect will be used.
				`key` is an optional identifier, that can be used to modify the image via `update_image`.
				If `pad` is set, and the image is smaller than the size specified by `width` and `height`, the image padding is added to match the size instead of upscaling.
				If `width_in_percent` is set, `width` values are percentages of the control width instead of pixels.
				If `height_in_percent` is set, `height` values are percentages of the control width instead of pixels.
				`alt_text` is used as the image description for assistive apps.
			"""
    pass

  def update_image(self, key:Any, mask:int, image:__texture2d__.Texture2D, width:int=0, height:int=0, color:__core__.Color= __core__.Color.new0(), inline_align:int =5, region:__core__.Rect2= __core__.Rect2.new0(), pad:bool=False, tooltip:str= __core__.String.new0(), size_in_percent:bool=False)->None:
    """
				Updates the existing images with the key `key`. Only properties specified by `mask` bits are updated. See `add_image`.
			"""
    pass

  def newline(self)->None:
    """
				Adds a newline tag to the tag stack.
			"""
    pass

  def remove_paragraph(self, paragraph:int, no_invalidate:bool=False)->bool:
    """
				Removes a paragraph of content from the label. Returns `true` if the paragraph exists.
				The `paragraph` argument is the index of the paragraph to remove, it can take values in the interval ``0, get_paragraph_count() - 1``.
				If `no_invalidate` is set to `true`, cache for the subsequent paragraphs is not invalidated. Use it for faster updates if deleted paragraph is fully self-contained (have no unclosed tags), or this call is part of the complex edit operation and `invalidate_paragraph` will be called at the end of operation.
			"""
    pass

  def invalidate_paragraph(self, paragraph:int)->bool:
    """
				Invalidates `paragraph` and all subsequent paragraphs cache.
			"""
    pass

  def push_font(self, font:__font__.Font, font_size:int=0)->None:
    """
				Adds a `code skip-lint``font`` tag to the tag stack. Overrides default fonts for its duration.
				Passing `0` to `font_size` will use the existing default font size.
			"""
    pass

  def push_font_size(self, font_size:int)->None:
    """
				Adds a `code skip-lint``font_size`` tag to the tag stack. Overrides default font size for its duration.
			"""
    pass

  def push_normal(self)->None:
    """
				Adds a `code skip-lint``font`` tag with a normal font to the tag stack.
			"""
    pass

  def push_bold(self)->None:
    """
				Adds a `code skip-lint``font`` tag with a bold font to the tag stack. This is the same as adding a `code skip-lint`**` tag if not currently in a `code skip-lint`_` tag.
			"""
    pass

  def push_bold_italics(self)->None:
    """
				Adds a `code skip-lint``font`` tag with a bold italics font to the tag stack.
			"""
    pass

  def push_italics(self)->None:
    """
				Adds a `code skip-lint``font`` tag with an italics font to the tag stack. This is the same as adding an `code skip-lint`_` tag if not currently in a `code skip-lint`**` tag.
			"""
    pass

  def push_mono(self)->None:
    """
				Adds a `code skip-lint``font`` tag with a monospace font to the tag stack.
			"""
    pass

  def push_color(self, color:__core__.Color)->None:
    """
				Adds a `code skip-lint``color`` tag to the tag stack.
			"""
    pass

  def push_outline_size(self, outline_size:int)->None:
    """
				Adds a `code skip-lint``outline_size`` tag to the tag stack. Overrides default text outline size for its duration.
			"""
    pass

  def push_outline_color(self, color:__core__.Color)->None:
    """
				Adds a `code skip-lint``outline_color`` tag to the tag stack. Adds text outline for its duration.
			"""
    pass

  def push_paragraph(self, alignment:int , base_direction:int =0, language:str= __core__.String.new0(), st_parser:int =0, justification_flags:int=163, tab_stops:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0())->None:
    """
				Adds a `code skip-lint``p`` tag to the tag stack.
			"""
    pass

  def push_indent(self, level:int)->None:
    """
				Adds an `code skip-lint``indent`` tag to the tag stack. Multiplies `level` by current `tab_size` to determine new margin length.
			"""
    pass

  def push_list(self, level:int, type:int , capitalize:bool, bullet:str= __core__.String.new0())->None:
    """
				Adds `code skip-lint``ol`` or `code skip-lint``ul`` tag to the tag stack. Multiplies `level` by current `tab_size` to determine new margin length.
			"""
    pass

  def push_meta(self, data:Any, underline_mode:int =1, tooltip:str= __core__.String.new0())->None:
    """
				Adds a meta tag to the tag stack. Similar to the BBCode `code skip-lint``url=something`{text}`/url``, but supports non-`String` metadata types.
				If `meta_underlined` is `true`, meta tags display an underline. This behavior can be customized with `underline_mode`.
				**Note:** Meta tags do nothing by default when clicked. To assign behavior when clicked, connect `signal meta_clicked` to a function that is called when the meta tag is clicked.
			"""
    pass

  def push_hint(self, description:str)->None:
    """
				Adds a `code skip-lint``hint`` tag to the tag stack. Same as BBCode `code skip-lint``hint=something`{text}`/hint``.
			"""
    pass

  def push_language(self, language:str)->None:
    """
				Adds language code used for text shaping algorithm and Open-Type font features.
			"""
    pass

  def push_underline(self)->None:
    """
				Adds a `code skip-lint``u`` tag to the tag stack. If `color` alpha value is zero, current font color with alpha multiplied by `theme_item underline_alpha` is used.
			"""
    pass

  def push_strikethrough(self)->None:
    """
				Adds a `code skip-lint``s`` tag to the tag stack. If `color` alpha value is zero, current font color with alpha multiplied by `theme_item strikethrough_alpha` is used.
			"""
    pass

  def push_table(self, columns:int, inline_align:int =0, align_to_row:int=-1)->None:
    """
				Adds a `code skip-lint``table=columns,inline_align`` tag to the tag stack. Use `set_table_column_expand` to set column expansion ratio. Use `push_cell` to add cells. `name` is used as the table name for assistive apps.
			"""
    pass

  def push_dropcap(self, string:str, font:__font__.Font, size:int, dropcap_margins:__core__.Rect2= __core__.Rect2.new0(), color:__core__.Color= __core__.Color.new0(), outline_size:int=0, outline_color:__core__.Color= __core__.Color.new0())->None:
    """
				Adds a `code skip-lint``dropcap`` tag to the tag stack. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text.
			"""
    pass

  def set_table_column_expand(self, column:int, expand:bool, ratio:int=1, shrink:bool=True)->None:
    """
				Edits the selected column's expansion options. If `expand` is `true`, the column expands in proportion to its expansion ratio versus the other columns' ratios.
				For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.
				If `expand` is `false`, the column will not contribute to the total ratio.
			"""
    pass

  def set_cell_row_background_color(self, odd_row_bg:__core__.Color, even_row_bg:__core__.Color)->None:
    """
				Sets color of a table cell. Separate colors for alternating rows can be specified.
			"""
    pass

  def set_cell_border_color(self, color:__core__.Color)->None:
    """
				Sets color of a table cell border.
			"""
    pass

  def set_cell_size_override(self, min_size:__core__.Vector2, max_size:__core__.Vector2)->None:
    """
				Sets minimum and maximum size overrides for a table cell.
			"""
    pass

  def set_cell_padding(self, padding:__core__.Rect2)->None:
    """
				Sets inner padding of a table cell.
			"""
    pass

  def push_cell(self)->None:
    """
				Adds a `code skip-lint``cell`` tag to the tag stack. Must be inside a `code skip-lint``table`` tag. See `push_table` for details. Use `set_table_column_expand` to set column expansion ratio, `set_cell_border_color` to set cell border, `set_cell_row_background_color` to set cell background, `set_cell_size_override` to override cell size, and `set_cell_padding` to set padding.
			"""
    pass

  def push_fgcolor(self, fgcolor:__core__.Color)->None:
    """
				Adds a `code skip-lint``fgcolor`` tag to the tag stack.
				**Note:** The foreground color has padding applied by default, which is controlled using `theme_item text_highlight_h_padding` and `theme_item text_highlight_v_padding`. This can lead to overlapping highlights if foreground colors are placed on neighboring lines/columns, so consider setting those theme items to `0` if you want to avoid this.
			"""
    pass

  def push_bgcolor(self, bgcolor:__core__.Color)->None:
    """
				Adds a `code skip-lint``bgcolor`` tag to the tag stack.
				**Note:** The background color has padding applied by default, which is controlled using `theme_item text_highlight_h_padding` and `theme_item text_highlight_v_padding`. This can lead to overlapping highlights if background colors are placed on neighboring lines/columns, so consider setting those theme items to `0` if you want to avoid this.
			"""
    pass

  def push_customfx(self, effect:__richtexteffect__.RichTextEffect, env:__core__.Dictionary)->None:
    """
				Adds a custom effect tag to the tag stack. The effect does not need to be in `custom_effects`. The environment is directly passed to the effect.
			"""
    pass

  def push_context(self)->None:
    """
				Adds a context marker to the tag stack. See `pop_context`.
			"""
    pass

  def pop_context(self)->None:
    """
				Terminates tags opened after the last `push_context` call (including context marker), or all tags if there's no context marker on the stack.
			"""
    pass

  def pop(self)->None:
    """
				Terminates the current tag. Use after `push_*` methods to close BBCodes manually. Does not need to follow `add_*` methods.
			"""
    pass

  def pop_all(self)->None:
    """
				Terminates all tags opened by `push_*` methods.
			"""
    pass

  def clear(self)->None:
    """
				Clears the tag stack, causing the label to display nothing.
				**Note:** This method does not affect `text`, and its contents will show again if the label is redrawn. However, setting `text` to an empty `String` also clears the stack.
			"""
    pass

  def set_structured_text_bidi_override(self, parser:int )->None:
    """"""
    pass

  def get_structured_text_bidi_override(self)->int:
    """"""
    pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None:
    """"""
    pass

  def get_structured_text_bidi_override_options(self)->__core__.Array:
    """"""
    pass

  def set_text_direction(self, direction:int )->None:
    """"""
    pass

  def get_text_direction(self)->int:
    """"""
    pass

  def set_language(self, language:str)->None:
    """"""
    pass

  def get_language(self)->str:
    """"""
    pass

  def set_horizontal_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_horizontal_alignment(self)->int:
    """"""
    pass

  def set_vertical_alignment(self, alignment:int )->None:
    """"""
    pass

  def get_vertical_alignment(self)->int:
    """"""
    pass

  def set_justification_flags(self, justification_flags:int)->None:
    """"""
    pass

  def get_justification_flags(self)->int:
    """"""
    pass

  def set_tab_stops(self, tab_stops:__core__.PackedFloat32Array)->None:
    """"""
    pass

  def get_tab_stops(self)->__core__.PackedFloat32Array:
    """"""
    pass

  def set_autowrap_mode(self, autowrap_mode:int )->None:
    """"""
    pass

  def get_autowrap_mode(self)->int:
    """"""
    pass

  def set_meta_underline(self, enable:bool)->None:
    """"""
    pass

  def is_meta_underlined(self)->bool:
    """"""
    pass

  def set_hint_underline(self, enable:bool)->None:
    """"""
    pass

  def is_hint_underlined(self)->bool:
    """"""
    pass

  def set_scroll_active(self, active:bool)->None:
    """"""
    pass

  def is_scroll_active(self)->bool:
    """"""
    pass

  def set_scroll_follow(self, follow:bool)->None:
    """"""
    pass

  def is_scroll_following(self)->bool:
    """"""
    pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar:
    """
				Returns the vertical scrollbar.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def scroll_to_line(self, line:int)->None:
    """
				Scrolls the window's top line to match `line`.
			"""
    pass

  def scroll_to_paragraph(self, paragraph:int)->None:
    """
				Scrolls the window's top line to match first line of the `paragraph`.
			"""
    pass

  def scroll_to_selection(self)->None:
    """
				Scrolls to the beginning of the current selection.
			"""
    pass

  def set_tab_size(self, spaces:int)->None:
    """"""
    pass

  def get_tab_size(self)->int:
    """"""
    pass

  def set_fit_content(self, enabled:bool)->None:
    """"""
    pass

  def is_fit_content_enabled(self)->bool:
    """"""
    pass

  def set_selection_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_selection_enabled(self)->bool:
    """"""
    pass

  def set_context_menu_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_context_menu_enabled(self)->bool:
    """"""
    pass

  def set_shortcut_keys_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_shortcut_keys_enabled(self)->bool:
    """"""
    pass

  def set_deselect_on_focus_loss_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_deselect_on_focus_loss_enabled(self)->bool:
    """"""
    pass

  def set_drag_and_drop_selection_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_drag_and_drop_selection_enabled(self)->bool:
    """"""
    pass

  def get_selection_from(self)->int:
    """
				Returns the current selection first character index if a selection is active, `-1` otherwise. Does not include BBCodes.
			"""
    pass

  def get_selection_to(self)->int:
    """
				Returns the current selection last character index if a selection is active, `-1` otherwise. Does not include BBCodes.
			"""
    pass

  def get_selection_line_offset(self)->float:
    """
				Returns the current selection vertical line offset if a selection is active, `-1.0` otherwise.
			"""
    pass

  def select_all(self)->None:
    """
				Select all the text.
				If `selection_enabled` is `false`, no selection will occur.
			"""
    pass

  def get_selected_text(self)->str:
    """
				Returns the current selection text. Does not include BBCodes.
			"""
    pass

  def deselect(self)->None:
    """
				Clears the current selection.
			"""
    pass

  def parse_bbcode(self, bbcode:str)->None:
    """
				The assignment version of `append_text`. Clears the tag stack and inserts the new content.
			"""
    pass

  def append_text(self, bbcode:str)->None:
    """
				Parses `bbcode` and adds tags to the tag stack as needed.
				**Note:** Using this method, you can't close a tag that was opened in a previous `append_text` call. This is done to improve performance, especially when updating large RichTextLabels since rebuilding the whole BBCode every time would be slower. If you absolutely need to close a tag in a future method call, append the `text` instead of using `append_text`.
			"""
    pass

  def get_text(self)->str:
    """"""
    pass

  def is_ready(self)->bool:
    """
				If `threaded` is enabled, returns `true` if the background thread has finished text processing, otherwise always return `true`.
			"""
    pass

  def is_finished(self)->bool:
    """
				If `threaded` is enabled, returns `true` if the background thread has finished text processing, otherwise always return `true`.
			"""
    pass

  def set_threaded(self, threaded:bool)->None:
    """"""
    pass

  def is_threaded(self)->bool:
    """"""
    pass

  def set_progress_bar_delay(self, delay_ms:int)->None:
    """"""
    pass

  def get_progress_bar_delay(self)->int:
    """"""
    pass

  def set_visible_characters(self, amount:int)->None:
    """"""
    pass

  def get_visible_characters(self)->int:
    """"""
    pass

  def get_visible_characters_behavior(self)->int:
    """"""
    pass

  def set_visible_characters_behavior(self, behavior:int )->None:
    """"""
    pass

  def set_visible_ratio(self, ratio:float)->None:
    """"""
    pass

  def get_visible_ratio(self)->float:
    """"""
    pass

  def get_character_line(self, character:int)->int:
    """
				Returns the line number of the character position provided. Line and character numbers are both zero-indexed.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_character_paragraph(self, character:int)->int:
    """
				Returns the paragraph number of the character position provided. Paragraph and character numbers are both zero-indexed.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_total_character_count(self)->int:
    """
				Returns the total number of characters from text tags. Does not include BBCodes.
			"""
    pass

  def set_use_bbcode(self, enable:bool)->None:
    """"""
    pass

  def is_using_bbcode(self)->bool:
    """"""
    pass

  def get_line_count(self)->int:
    """
				Returns the total number of lines in the text. Wrapped text is counted as multiple lines.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_line_range(self, line:int)->__core__.Vector2i:
    """
				Returns the indexes of the first and last visible characters for the given `line`, as a `Vector2i`.
				**Note:** If `visible_characters_behavior` is set to `constant TextServer.VC_CHARS_BEFORE_SHAPING` only visible wrapped lines are counted.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_visible_line_count(self)->int:
    """
				Returns the number of visible lines.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_paragraph_count(self)->int:
    """
				Returns the total number of paragraphs (newlines or `p` tags in the tag stack's text tags). Considers wrapped text as one paragraph.
			"""
    pass

  def get_visible_paragraph_count(self)->int:
    """
				Returns the number of visible paragraphs. A paragraph is considered visible if at least one of its lines is visible.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_content_height(self)->int:
    """
				Returns the height of the content.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_content_width(self)->int:
    """
				Returns the width of the content.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_line_offset(self, line:int)->float:
    """
				Returns the vertical offset of the line found at the provided index.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def get_paragraph_offset(self, paragraph:int)->float:
    """
				Returns the vertical offset of the paragraph found at the provided index.
				**Note:** If `threaded` is enabled, this method returns a value for the loaded part of the document. Use `is_finished` or `signal finished` to determine whether document is fully loaded.
			"""
    pass

  def parse_expressions_for_values(self, expressions:__core__.PackedStringArray)->__core__.Dictionary:
    """
				Parses BBCode parameter `expressions` into a dictionary.
			"""
    pass

  def set_effects(self, effects:__core__.Array)->None:
    """"""
    pass

  def get_effects(self)->__core__.Array:
    """"""
    pass

  def install_effect(self, effect:Any)->None:
    """
				Installs a custom effect. This can also be done in the Inspector through the `custom_effects` property. `effect` should be a valid `RichTextEffect`.
				**Example:** With the following script extending from `RichTextEffect`:
				```gdscript
				# effect.gd
				class_name MyCustomEffect
				extends RichTextEffect

				var bbcode = "my_custom_effect"

				# ...
				```
				The above effect can be installed in `RichTextLabel` from a script:
				```gdscript
				# rich_text_label.gd
				extends RichTextLabel

				func _ready():
					install_effect(MyCustomEffect.new())

					# Alternatively, if not using `class_name` in the script that extends RichTextEffect:
					install_effect(preload("res://effect.gd").new())
				```
			"""
    pass

  def get_menu(self)->__popupmenu__.PopupMenu:
    """
				Returns the `PopupMenu` of this `RichTextLabel`. By default, this menu is displayed when right-clicking on the `RichTextLabel`.
				You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see `enum MenuItems`). For example:
				
				```gdscript
				func _ready():
					var menu = get_menu()
					# Remove "Select All" item.
					menu.remove_item(MENU_SELECT_ALL)
					# Add custom items.
					menu.add_separator()
					menu.add_item("Duplicate Text", MENU_MAX + 1)
					# Connect callback.
					menu.id_pressed.connect(_on_item_pressed)

				func _on_item_pressed(id):
					if id == MENU_MAX + 1:
						add_text("\n" + get_parsed_text())
				```
				
				
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			"""
    pass

  def is_menu_visible(self)->bool:
    """
				Returns whether the menu is visible. Use this instead of `get_menu().visible` to improve performance (so the creation of the menu is avoided).
			"""
    pass

  def menu_option(self, option:int)->None:
    """
				Executes a given action as defined in the `enum MenuItems` enum.
			"""
    pass


