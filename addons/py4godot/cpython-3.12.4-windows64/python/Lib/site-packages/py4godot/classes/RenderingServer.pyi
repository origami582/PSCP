from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.g as __g__
import py4godot.classes.i as __i__
import py4godot.classes.Image as __image__
import py4godot.classes.e as __e__
import py4godot.classes.m as __m__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.o as __o__
import py4godot.classes.l as __l__
import py4godot.classes.p as __p__
import py4godot.classes.R as __r__
import py4godot.classes.N as __n__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.f as __f__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__
import py4godot.classes.s as __s__
import py4godot.classes.I as __i__
import py4godot.classes.t as __t__
import py4godot.classes.S as __s__
import py4godot.classes.P as __p__
import py4godot.classes.3 as __3__


class TextureType:
  TEXTURE_KIND_2D:int = 0
  TEXTURE_KIND_LAYERED:int = 1
  TEXTURE_KIND_3D:int = 2
class TextureLayeredType:
  TEXTURE_LAYERED_2D_ARRAY:int = 0
  TEXTURE_LAYERED_CUBEMAP:int = 1
  TEXTURE_LAYERED_CUBEMAP_ARRAY:int = 2
class CubeMapLayer:
  CUBEMAP_LAYER_LEFT:int = 0
  CUBEMAP_LAYER_RIGHT:int = 1
  CUBEMAP_LAYER_BOTTOM:int = 2
  CUBEMAP_LAYER_TOP:int = 3
  CUBEMAP_LAYER_FRONT:int = 4
  CUBEMAP_LAYER_BACK:int = 5
class ShaderMode:
  SHADER_SPATIAL:int = 0
  SHADER_CANVAS_ITEM:int = 1
  SHADER_PARTICLES:int = 2
  SHADER_SKY:int = 3
  SHADER_FOG:int = 4
  SHADER_MAX:int = 5
class ArrayType:
  ARRAY_VERTEX:int = 0
  ARRAY_NORMAL:int = 1
  ARRAY_TANGENT:int = 2
  ARRAY_COLOR:int = 3
  ARRAY_TEX_UV:int = 4
  ARRAY_TEX_UV2:int = 5
  ARRAY_CUSTOM0:int = 6
  ARRAY_CUSTOM1:int = 7
  ARRAY_CUSTOM2:int = 8
  ARRAY_CUSTOM3:int = 9
  ARRAY_BONES:int = 10
  ARRAY_WEIGHTS:int = 11
  ARRAY_INDEX:int = 12
  ARRAY_MAX:int = 13
class ArrayCustomFormat:
  ARRAY_CUSTOM_RGBA8_UNORM:int = 0
  ARRAY_CUSTOM_RGBA8_SNORM:int = 1
  ARRAY_CUSTOM_RG_HALF:int = 2
  ARRAY_CUSTOM_RGBA_HALF:int = 3
  ARRAY_CUSTOM_R_FLOAT:int = 4
  ARRAY_CUSTOM_RG_FLOAT:int = 5
  ARRAY_CUSTOM_RGB_FLOAT:int = 6
  ARRAY_CUSTOM_RGBA_FLOAT:int = 7
  ARRAY_CUSTOM_MAX:int = 8
class ArrayFormat:
  ARRAY_FORMAT_VERTEX:int = 1
  ARRAY_FORMAT_NORMAL:int = 2
  ARRAY_FORMAT_TANGENT:int = 4
  ARRAY_FORMAT_COLOR:int = 8
  ARRAY_FORMAT_TEX_UV:int = 16
  ARRAY_FORMAT_TEX_UV2:int = 32
  ARRAY_FORMAT_CUSTOM0:int = 64
  ARRAY_FORMAT_CUSTOM1:int = 128
  ARRAY_FORMAT_CUSTOM2:int = 256
  ARRAY_FORMAT_CUSTOM3:int = 512
  ARRAY_FORMAT_BONES:int = 1024
  ARRAY_FORMAT_WEIGHTS:int = 2048
  ARRAY_FORMAT_INDEX:int = 4096
  ARRAY_FORMAT_BLEND_SHAPE_MASK:int = 7
  ARRAY_FORMAT_CUSTOM_BASE:int = 13
  ARRAY_FORMAT_CUSTOM_BITS:int = 3
  ARRAY_FORMAT_CUSTOM0_SHIFT:int = 13
  ARRAY_FORMAT_CUSTOM1_SHIFT:int = 16
  ARRAY_FORMAT_CUSTOM2_SHIFT:int = 19
  ARRAY_FORMAT_CUSTOM3_SHIFT:int = 22
  ARRAY_FORMAT_CUSTOM_MASK:int = 7
  ARRAY_COMPRESS_FLAGS_BASE:int = 25
  ARRAY_FLAG_USE_2D_VERTICES:int = 33554432
  ARRAY_FLAG_USE_DYNAMIC_UPDATE:int = 67108864
  ARRAY_FLAG_USE_8_BONE_WEIGHTS:int = 134217728
  ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY:int = 268435456
  ARRAY_FLAG_COMPRESS_ATTRIBUTES:int = 536870912
  ARRAY_FLAG_FORMAT_VERSION_BASE:int = 35
  ARRAY_FLAG_FORMAT_VERSION_SHIFT:int = 35
  ARRAY_FLAG_FORMAT_VERSION_1:int = 0
  ARRAY_FLAG_FORMAT_VERSION_2:int = 34359738368
  ARRAY_FLAG_FORMAT_CURRENT_VERSION:int = 34359738368
  ARRAY_FLAG_FORMAT_VERSION_MASK:int = 255
class PrimitiveType:
  PRIMITIVE_POINTS:int = 0
  PRIMITIVE_LINES:int = 1
  PRIMITIVE_LINE_STRIP:int = 2
  PRIMITIVE_TRIANGLES:int = 3
  PRIMITIVE_TRIANGLE_STRIP:int = 4
  PRIMITIVE_MAX:int = 5
class BlendShapeMode:
  BLEND_SHAPE_MODE_NORMALIZED:int = 0
  BLEND_SHAPE_MODE_RELATIVE:int = 1
class MultimeshTransformFormat:
  MULTIMESH_TRANSFORM_2D:int = 0
  MULTIMESH_TRANSFORM_3D:int = 1
class MultimeshPhysicsInterpolationQuality:
  MULTIMESH_INTERP_QUALITY_FAST:int = 0
  MULTIMESH_INTERP_QUALITY_HIGH:int = 1
class LightProjectorFilter:
  LIGHT_PROJECTOR_FILTER_NEAREST:int = 0
  LIGHT_PROJECTOR_FILTER_LINEAR:int = 1
  LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS:int = 2
  LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS:int = 3
  LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC:int = 4
  LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC:int = 5
class LightType:
  LIGHT_DIRECTIONAL:int = 0
  LIGHT_OMNI:int = 1
  LIGHT_SPOT:int = 2
class LightParam:
  LIGHT_PARAM_ENERGY:int = 0
  LIGHT_PARAM_INDIRECT_ENERGY:int = 1
  LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY:int = 2
  LIGHT_PARAM_SPECULAR:int = 3
  LIGHT_PARAM_RANGE:int = 4
  LIGHT_PARAM_SIZE:int = 5
  LIGHT_PARAM_ATTENUATION:int = 6
  LIGHT_PARAM_SPOT_ANGLE:int = 7
  LIGHT_PARAM_SPOT_ATTENUATION:int = 8
  LIGHT_PARAM_SHADOW_MAX_DISTANCE:int = 9
  LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET:int = 10
  LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET:int = 11
  LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET:int = 12
  LIGHT_PARAM_SHADOW_FADE_START:int = 13
  LIGHT_PARAM_SHADOW_NORMAL_BIAS:int = 14
  LIGHT_PARAM_SHADOW_BIAS:int = 15
  LIGHT_PARAM_SHADOW_PANCAKE_SIZE:int = 16
  LIGHT_PARAM_SHADOW_OPACITY:int = 17
  LIGHT_PARAM_SHADOW_BLUR:int = 18
  LIGHT_PARAM_TRANSMITTANCE_BIAS:int = 19
  LIGHT_PARAM_INTENSITY:int = 20
  LIGHT_PARAM_MAX:int = 21
class LightBakeMode:
  LIGHT_BAKE_DISABLED:int = 0
  LIGHT_BAKE_STATIC:int = 1
  LIGHT_BAKE_DYNAMIC:int = 2
class LightOmniShadowMode:
  LIGHT_OMNI_SHADOW_DUAL_PARABOLOID:int = 0
  LIGHT_OMNI_SHADOW_CUBE:int = 1
class LightDirectionalShadowMode:
  LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL:int = 0
  LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS:int = 1
  LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS:int = 2
class LightDirectionalSkyMode:
  LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY:int = 0
  LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY:int = 1
  LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY:int = 2
class ShadowQuality:
  SHADOW_QUALITY_HARD:int = 0
  SHADOW_QUALITY_SOFT_VERY_LOW:int = 1
  SHADOW_QUALITY_SOFT_LOW:int = 2
  SHADOW_QUALITY_SOFT_MEDIUM:int = 3
  SHADOW_QUALITY_SOFT_HIGH:int = 4
  SHADOW_QUALITY_SOFT_ULTRA:int = 5
  SHADOW_QUALITY_MAX:int = 6
class ReflectionProbeUpdateMode:
  REFLECTION_PROBE_UPDATE_ONCE:int = 0
  REFLECTION_PROBE_UPDATE_ALWAYS:int = 1
class ReflectionProbeAmbientMode:
  REFLECTION_PROBE_AMBIENT_DISABLED:int = 0
  REFLECTION_PROBE_AMBIENT_ENVIRONMENT:int = 1
  REFLECTION_PROBE_AMBIENT_COLOR:int = 2
class DecalTexture:
  DECAL_TEXTURE_ALBEDO:int = 0
  DECAL_TEXTURE_NORMAL:int = 1
  DECAL_TEXTURE_ORM:int = 2
  DECAL_TEXTURE_EMISSION:int = 3
  DECAL_TEXTURE_MAX:int = 4
class DecalFilter:
  DECAL_FILTER_NEAREST:int = 0
  DECAL_FILTER_LINEAR:int = 1
  DECAL_FILTER_NEAREST_MIPMAPS:int = 2
  DECAL_FILTER_LINEAR_MIPMAPS:int = 3
  DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC:int = 4
  DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC:int = 5
class VoxelGIQuality:
  VOXEL_GI_QUALITY_LOW:int = 0
  VOXEL_GI_QUALITY_HIGH:int = 1
class ParticlesMode:
  PARTICLES_MODE_2D:int = 0
  PARTICLES_MODE_3D:int = 1
class ParticlesTransformAlign:
  PARTICLES_TRANSFORM_ALIGN_DISABLED:int = 0
  PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD:int = 1
  PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY:int = 2
  PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY:int = 3
class ParticlesDrawOrder:
  PARTICLES_DRAW_ORDER_INDEX:int = 0
  PARTICLES_DRAW_ORDER_LIFETIME:int = 1
  PARTICLES_DRAW_ORDER_REVERSE_LIFETIME:int = 2
  PARTICLES_DRAW_ORDER_VIEW_DEPTH:int = 3
class ParticlesCollisionType:
  PARTICLES_COLLISION_KIND_SPHERE_ATTRACT:int = 0
  PARTICLES_COLLISION_KIND_BOX_ATTRACT:int = 1
  PARTICLES_COLLISION_KIND_VECTOR_FIELD_ATTRACT:int = 2
  PARTICLES_COLLISION_KIND_SPHERE_COLLIDE:int = 3
  PARTICLES_COLLISION_KIND_BOX_COLLIDE:int = 4
  PARTICLES_COLLISION_KIND_SDF_COLLIDE:int = 5
  PARTICLES_COLLISION_KIND_HEIGHTFIELD_COLLIDE:int = 6
class ParticlesCollisionHeightfieldResolution:
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256:int = 0
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512:int = 1
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024:int = 2
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048:int = 3
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096:int = 4
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192:int = 5
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX:int = 6
class FogVolumeShape:
  FOG_VOLUME_SHAPE_ELLIPSOID:int = 0
  FOG_VOLUME_SHAPE_CONE:int = 1
  FOG_VOLUME_SHAPE_CYLINDER:int = 2
  FOG_VOLUME_SHAPE_BOX:int = 3
  FOG_VOLUME_SHAPE_WORLD:int = 4
  FOG_VOLUME_SHAPE_MAX:int = 5
class ViewportScaling3DMode:
  VIEWPORT_SCALING_3D_MODE_BILINEAR:int = 0
  VIEWPORT_SCALING_3D_MODE_FSR:int = 1
  VIEWPORT_SCALING_3D_MODE_FSR2:int = 2
  VIEWPORT_SCALING_3D_MODE_METALFX_SPATIAL:int = 3
  VIEWPORT_SCALING_3D_MODE_METALFX_TEMPORAL:int = 4
  VIEWPORT_SCALING_3D_MODE_MAX:int = 5
class ViewportUpdateMode:
  VIEWPORT_UPDATE_DISABLED:int = 0
  VIEWPORT_UPDATE_ONCE:int = 1
  VIEWPORT_UPDATE_WHEN_VISIBLE:int = 2
  VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE:int = 3
  VIEWPORT_UPDATE_ALWAYS:int = 4
class ViewportClearMode:
  VIEWPORT_CLEAR_ALWAYS:int = 0
  VIEWPORT_CLEAR_NEVER:int = 1
  VIEWPORT_CLEAR_ONLY_NEXT_FRAME:int = 2
class ViewportEnvironmentMode:
  VIEWPORT_ENVIRONMENT_DISABLED:int = 0
  VIEWPORT_ENVIRONMENT_ENABLED:int = 1
  VIEWPORT_ENVIRONMENT_INHERIT:int = 2
  VIEWPORT_ENVIRONMENT_MAX:int = 3
class ViewportSDFOversize:
  VIEWPORT_SDF_OVERSIZE_100_PERCENT:int = 0
  VIEWPORT_SDF_OVERSIZE_120_PERCENT:int = 1
  VIEWPORT_SDF_OVERSIZE_150_PERCENT:int = 2
  VIEWPORT_SDF_OVERSIZE_200_PERCENT:int = 3
  VIEWPORT_SDF_OVERSIZE_MAX:int = 4
class ViewportSDFScale:
  VIEWPORT_SDF_SCALE_100_PERCENT:int = 0
  VIEWPORT_SDF_SCALE_50_PERCENT:int = 1
  VIEWPORT_SDF_SCALE_25_PERCENT:int = 2
  VIEWPORT_SDF_SCALE_MAX:int = 3
class ViewportMSAA:
  VIEWPORT_MSAA_DISABLED:int = 0
  VIEWPORT_MSAA_2X:int = 1
  VIEWPORT_MSAA_4X:int = 2
  VIEWPORT_MSAA_8X:int = 3
  VIEWPORT_MSAA_MAX:int = 4
class ViewportAnisotropicFiltering:
  VIEWPORT_ANISOTROPY_DISABLED:int = 0
  VIEWPORT_ANISOTROPY_2X:int = 1
  VIEWPORT_ANISOTROPY_4X:int = 2
  VIEWPORT_ANISOTROPY_8X:int = 3
  VIEWPORT_ANISOTROPY_16X:int = 4
  VIEWPORT_ANISOTROPY_MAX:int = 5
class ViewportScreenSpaceAA:
  VIEWPORT_SCREEN_SPACE_AA_DISABLED:int = 0
  VIEWPORT_SCREEN_SPACE_AA_FXAA:int = 1
  VIEWPORT_SCREEN_SPACE_AA_MAX:int = 2
class ViewportOcclusionCullingBuildQuality:
  VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW:int = 0
  VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM:int = 1
  VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH:int = 2
class ViewportRenderInfo:
  VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME:int = 0
  VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME:int = 1
  VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME:int = 2
  VIEWPORT_RENDER_INFO_MAX:int = 3
class ViewportRenderInfoType:
  VIEWPORT_RENDER_INFO_KIND_VISIBLE:int = 0
  VIEWPORT_RENDER_INFO_KIND_SHADOW:int = 1
  VIEWPORT_RENDER_INFO_KIND_CANVAS:int = 2
  VIEWPORT_RENDER_INFO_KIND_MAX:int = 3
class ViewportDebugDraw:
  VIEWPORT_DEBUG_DRAW_DISABLED:int = 0
  VIEWPORT_DEBUG_DRAW_UNSHADED:int = 1
  VIEWPORT_DEBUG_DRAW_LIGHTING:int = 2
  VIEWPORT_DEBUG_DRAW_OVERDRAW:int = 3
  VIEWPORT_DEBUG_DRAW_WIREFRAME:int = 4
  VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER:int = 5
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO:int = 6
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING:int = 7
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION:int = 8
  VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS:int = 9
  VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS:int = 10
  VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE:int = 11
  VIEWPORT_DEBUG_DRAW_SSAO:int = 12
  VIEWPORT_DEBUG_DRAW_SSIL:int = 13
  VIEWPORT_DEBUG_DRAW_PSSM_SPLITS:int = 14
  VIEWPORT_DEBUG_DRAW_DECAL_ATLAS:int = 15
  VIEWPORT_DEBUG_DRAW_SDFGI:int = 16
  VIEWPORT_DEBUG_DRAW_SDFGI_PROBES:int = 17
  VIEWPORT_DEBUG_DRAW_GI_BUFFER:int = 18
  VIEWPORT_DEBUG_DRAW_DISABLE_LOD:int = 19
  VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS:int = 20
  VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS:int = 21
  VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS:int = 22
  VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES:int = 23
  VIEWPORT_DEBUG_DRAW_OCCLUDERS:int = 24
  VIEWPORT_DEBUG_DRAW_MOTION_VECTORS:int = 25
  VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER:int = 26
class ViewportVRSMode:
  VIEWPORT_VRS_DISABLED:int = 0
  VIEWPORT_VRS_TEXTURE:int = 1
  VIEWPORT_VRS_XR:int = 2
  VIEWPORT_VRS_MAX:int = 3
class ViewportVRSUpdateMode:
  VIEWPORT_VRS_UPDATE_DISABLED:int = 0
  VIEWPORT_VRS_UPDATE_ONCE:int = 1
  VIEWPORT_VRS_UPDATE_ALWAYS:int = 2
  VIEWPORT_VRS_UPDATE_MAX:int = 3
class SkyMode:
  SKY_MODE_AUTOMATIC:int = 0
  SKY_MODE_QUALITY:int = 1
  SKY_MODE_INCREMENTAL:int = 2
  SKY_MODE_REALTIME:int = 3
class CompositorEffectFlags:
  COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR:int = 1
  COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH:int = 2
  COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS:int = 4
  COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS:int = 8
  COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR:int = 16
class CompositorEffectCallbackType:
  COMPOSITOR_EFFECT_CALLBACK_KIND_PRE_OPAQUE:int = 0
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_OPAQUE:int = 1
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_SKY:int = 2
  COMPOSITOR_EFFECT_CALLBACK_KIND_PRE_TRANSPARENT:int = 3
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_TRANSPARENT:int = 4
  COMPOSITOR_EFFECT_CALLBACK_KIND_ANY:int = -1
class EnvironmentBG:
  ENV_BG_CLEAR_COLOR:int = 0
  ENV_BG_COLOR:int = 1
  ENV_BG_SKY:int = 2
  ENV_BG_CANVAS:int = 3
  ENV_BG_KEEP:int = 4
  ENV_BG_CAMERA_FEED:int = 5
  ENV_BG_MAX:int = 6
class EnvironmentAmbientSource:
  ENV_AMBIENT_SOURCE_BG:int = 0
  ENV_AMBIENT_SOURCE_DISABLED:int = 1
  ENV_AMBIENT_SOURCE_COLOR:int = 2
  ENV_AMBIENT_SOURCE_SKY:int = 3
class EnvironmentReflectionSource:
  ENV_REFLECTION_SOURCE_BG:int = 0
  ENV_REFLECTION_SOURCE_DISABLED:int = 1
  ENV_REFLECTION_SOURCE_SKY:int = 2
class EnvironmentGlowBlendMode:
  ENV_GLOW_BLEND_MODE_ADDITIVE:int = 0
  ENV_GLOW_BLEND_MODE_SCREEN:int = 1
  ENV_GLOW_BLEND_MODE_SOFTLIGHT:int = 2
  ENV_GLOW_BLEND_MODE_REPLACE:int = 3
  ENV_GLOW_BLEND_MODE_MIX:int = 4
class EnvironmentFogMode:
  ENV_FOG_MODE_EXPONENTIAL:int = 0
  ENV_FOG_MODE_DEPTH:int = 1
class EnvironmentToneMapper:
  ENV_TONE_MAPPER_LINEAR:int = 0
  ENV_TONE_MAPPER_REINHARD:int = 1
  ENV_TONE_MAPPER_FILMIC:int = 2
  ENV_TONE_MAPPER_ACES:int = 3
  ENV_TONE_MAPPER_AGX:int = 4
class EnvironmentSSRRoughnessQuality:
  ENV_SSR_ROUGHNESS_QUALITY_DISABLED:int = 0
  ENV_SSR_ROUGHNESS_QUALITY_LOW:int = 1
  ENV_SSR_ROUGHNESS_QUALITY_MEDIUM:int = 2
  ENV_SSR_ROUGHNESS_QUALITY_HIGH:int = 3
class EnvironmentSSAOQuality:
  ENV_SSAO_QUALITY_VERY_LOW:int = 0
  ENV_SSAO_QUALITY_LOW:int = 1
  ENV_SSAO_QUALITY_MEDIUM:int = 2
  ENV_SSAO_QUALITY_HIGH:int = 3
  ENV_SSAO_QUALITY_ULTRA:int = 4
class EnvironmentSSILQuality:
  ENV_SSIL_QUALITY_VERY_LOW:int = 0
  ENV_SSIL_QUALITY_LOW:int = 1
  ENV_SSIL_QUALITY_MEDIUM:int = 2
  ENV_SSIL_QUALITY_HIGH:int = 3
  ENV_SSIL_QUALITY_ULTRA:int = 4
class EnvironmentSDFGIYScale:
  ENV_SDFGI_Y_SCALE_50_PERCENT:int = 0
  ENV_SDFGI_Y_SCALE_75_PERCENT:int = 1
  ENV_SDFGI_Y_SCALE_100_PERCENT:int = 2
class EnvironmentSDFGIRayCount:
  ENV_SDFGI_RAY_COUNT_4:int = 0
  ENV_SDFGI_RAY_COUNT_8:int = 1
  ENV_SDFGI_RAY_COUNT_16:int = 2
  ENV_SDFGI_RAY_COUNT_32:int = 3
  ENV_SDFGI_RAY_COUNT_64:int = 4
  ENV_SDFGI_RAY_COUNT_96:int = 5
  ENV_SDFGI_RAY_COUNT_128:int = 6
  ENV_SDFGI_RAY_COUNT_MAX:int = 7
class EnvironmentSDFGIFramesToConverge:
  ENV_SDFGI_CONVERGE_IN_5_FRAMES:int = 0
  ENV_SDFGI_CONVERGE_IN_10_FRAMES:int = 1
  ENV_SDFGI_CONVERGE_IN_15_FRAMES:int = 2
  ENV_SDFGI_CONVERGE_IN_20_FRAMES:int = 3
  ENV_SDFGI_CONVERGE_IN_25_FRAMES:int = 4
  ENV_SDFGI_CONVERGE_IN_30_FRAMES:int = 5
  ENV_SDFGI_CONVERGE_MAX:int = 6
class EnvironmentSDFGIFramesToUpdateLight:
  ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME:int = 0
  ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES:int = 1
  ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES:int = 2
  ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES:int = 3
  ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES:int = 4
  ENV_SDFGI_UPDATE_LIGHT_MAX:int = 5
class SubSurfaceScatteringQuality:
  SUB_SURFACE_SCATTERING_QUALITY_DISABLED:int = 0
  SUB_SURFACE_SCATTERING_QUALITY_LOW:int = 1
  SUB_SURFACE_SCATTERING_QUALITY_MEDIUM:int = 2
  SUB_SURFACE_SCATTERING_QUALITY_HIGH:int = 3
class DOFBokehShape:
  DOF_BOKEH_BOX:int = 0
  DOF_BOKEH_HEXAGON:int = 1
  DOF_BOKEH_CIRCLE:int = 2
class DOFBlurQuality:
  DOF_BLUR_QUALITY_VERY_LOW:int = 0
  DOF_BLUR_QUALITY_LOW:int = 1
  DOF_BLUR_QUALITY_MEDIUM:int = 2
  DOF_BLUR_QUALITY_HIGH:int = 3
class InstanceType:
  INSTANCE_NONE:int = 0
  INSTANCE_MESH:int = 1
  INSTANCE_MULTIMESH:int = 2
  INSTANCE_PARTICLES:int = 3
  INSTANCE_PARTICLES_COLLISION:int = 4
  INSTANCE_LIGHT:int = 5
  INSTANCE_REFLECTION_PROBE:int = 6
  INSTANCE_DECAL:int = 7
  INSTANCE_VOXEL_GI:int = 8
  INSTANCE_LIGHTMAP:int = 9
  INSTANCE_OCCLUDER:int = 10
  INSTANCE_VISIBLITY_NOTIFIER:int = 11
  INSTANCE_FOG_VOLUME:int = 12
  INSTANCE_MAX:int = 13
  INSTANCE_GEOMETRY_MASK:int = 14
class InstanceFlags:
  INSTANCE_FLAG_USE_BAKED_LIGHT:int = 0
  INSTANCE_FLAG_USE_DYNAMIC_GI:int = 1
  INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE:int = 2
  INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING:int = 3
  INSTANCE_FLAG_MAX:int = 4
class ShadowCastingSetting:
  SHADOW_CASTING_SETTING_OFF:int = 0
  SHADOW_CASTING_SETTING_ON:int = 1
  SHADOW_CASTING_SETTING_DOUBLE_SIDED:int = 2
  SHADOW_CASTING_SETTING_SHADOWS_ONLY:int = 3
class VisibilityRangeFadeMode:
  VISIBILITY_RANGE_FADE_DISABLED:int = 0
  VISIBILITY_RANGE_FADE_SELF:int = 1
  VISIBILITY_RANGE_FADE_DEPENDENCIES:int = 2
class BakeChannels:
  BAKE_CHANNEL_ALBEDO_ALPHA:int = 0
  BAKE_CHANNEL_NORMAL:int = 1
  BAKE_CHANNEL_ORM:int = 2
  BAKE_CHANNEL_EMISSION:int = 3
class CanvasTextureChannel:
  CANVAS_TEXTURE_CHANNEL_DIFFUSE:int = 0
  CANVAS_TEXTURE_CHANNEL_NORMAL:int = 1
  CANVAS_TEXTURE_CHANNEL_SPECULAR:int = 2
class NinePatchAxisMode:
  NINE_PATCH_STRETCH:int = 0
  NINE_PATCH_TILE:int = 1
  NINE_PATCH_TILE_FIT:int = 2
class CanvasItemTextureFilter:
  CANVAS_ITEM_TEXTURE_FILTER_DEFAULT:int = 0
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST:int = 1
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR:int = 2
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS:int = 3
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS:int = 4
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC:int = 5
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC:int = 6
  CANVAS_ITEM_TEXTURE_FILTER_MAX:int = 7
class CanvasItemTextureRepeat:
  CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT:int = 0
  CANVAS_ITEM_TEXTURE_REPEAT_DISABLED:int = 1
  CANVAS_ITEM_TEXTURE_REPEAT_ENABLED:int = 2
  CANVAS_ITEM_TEXTURE_REPEAT_MIRROR:int = 3
  CANVAS_ITEM_TEXTURE_REPEAT_MAX:int = 4
class CanvasGroupMode:
  CANVAS_GROUP_MODE_DISABLED:int = 0
  CANVAS_GROUP_MODE_CLIP_ONLY:int = 1
  CANVAS_GROUP_MODE_CLIP_AND_DRAW:int = 2
  CANVAS_GROUP_MODE_TRANSPARENT:int = 3
class CanvasLightMode:
  CANVAS_LIGHT_MODE_POINT:int = 0
  CANVAS_LIGHT_MODE_DIRECTIONAL:int = 1
class CanvasLightBlendMode:
  CANVAS_LIGHT_BLEND_MODE_ADD:int = 0
  CANVAS_LIGHT_BLEND_MODE_SUB:int = 1
  CANVAS_LIGHT_BLEND_MODE_MIX:int = 2
class CanvasLightShadowFilter:
  CANVAS_LIGHT_FILTER_NONE:int = 0
  CANVAS_LIGHT_FILTER_PCF5:int = 1
  CANVAS_LIGHT_FILTER_PCF13:int = 2
  CANVAS_LIGHT_FILTER_MAX:int = 3
class CanvasOccluderPolygonCullMode:
  CANVAS_OCCLUDER_POLYGON_CULL_DISABLED:int = 0
  CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE:int = 1
  CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE:int = 2
class GlobalShaderParameterType:
  GLOBAL_VAR_KIND_BOOL:int = 0
  GLOBAL_VAR_KIND_BVEC2:int = 1
  GLOBAL_VAR_KIND_BVEC3:int = 2
  GLOBAL_VAR_KIND_BVEC4:int = 3
  GLOBAL_VAR_KIND_INT:int = 4
  GLOBAL_VAR_KIND_IVEC2:int = 5
  GLOBAL_VAR_KIND_IVEC3:int = 6
  GLOBAL_VAR_KIND_IVEC4:int = 7
  GLOBAL_VAR_KIND_RECT2I:int = 8
  GLOBAL_VAR_KIND_UINT:int = 9
  GLOBAL_VAR_KIND_UVEC2:int = 10
  GLOBAL_VAR_KIND_UVEC3:int = 11
  GLOBAL_VAR_KIND_UVEC4:int = 12
  GLOBAL_VAR_KIND_FLOAT:int = 13
  GLOBAL_VAR_KIND_VEC2:int = 14
  GLOBAL_VAR_KIND_VEC3:int = 15
  GLOBAL_VAR_KIND_VEC4:int = 16
  GLOBAL_VAR_KIND_COLOR:int = 17
  GLOBAL_VAR_KIND_RECT2:int = 18
  GLOBAL_VAR_KIND_MAT2:int = 19
  GLOBAL_VAR_KIND_MAT3:int = 20
  GLOBAL_VAR_KIND_MAT4:int = 21
  GLOBAL_VAR_KIND_TRANSFORM_2D:int = 22
  GLOBAL_VAR_KIND_TRANSFORM:int = 23
  GLOBAL_VAR_KIND_SAMPLER2D:int = 24
  GLOBAL_VAR_KIND_SAMPLER2DARRAY:int = 25
  GLOBAL_VAR_KIND_SAMPLER3D:int = 26
  GLOBAL_VAR_KIND_SAMPLERCUBE:int = 27
  GLOBAL_VAR_KIND_SAMPLEREXT:int = 28
  GLOBAL_VAR_KIND_MAX:int = 29
class RenderingInfo:
  RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME:int = 0
  RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME:int = 1
  RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME:int = 2
  RENDERING_INFO_TEXTURE_MEM_USED:int = 3
  RENDERING_INFO_BUFFER_MEM_USED:int = 4
  RENDERING_INFO_VIDEO_MEM_USED:int = 5
  RENDERING_INFO_PIPELINE_COMPILATIONS_CANVAS:int = 6
  RENDERING_INFO_PIPELINE_COMPILATIONS_MESH:int = 7
  RENDERING_INFO_PIPELINE_COMPILATIONS_SURFACE:int = 8
  RENDERING_INFO_PIPELINE_COMPILATIONS_DRAW:int = 9
  RENDERING_INFO_PIPELINE_COMPILATIONS_SPECIALIZATION:int = 10
class PipelineSource:
  PIPELINE_SOURCE_CANVAS:int = 0
  PIPELINE_SOURCE_MESH:int = 1
  PIPELINE_SOURCE_SURFACE:int = 2
  PIPELINE_SOURCE_DRAW:int = 3
  PIPELINE_SOURCE_SPECIALIZATION:int = 4
  PIPELINE_SOURCE_MAX:int = 5
class Features:
  FEATURE_SHADERS:int = 0
  FEATURE_MULTITHREADED:int = 1


class RenderingServer(__object__.Object):
  """
		The rendering server is the API backend for everything visible. The whole scene system mounts on it to display. The rendering server is completely opaque: the internals are entirely implementation-specific and cannot be accessed.
		The rendering server can be used to bypass the scene/`Node` system entirely. This can improve performance in cases where the scene system is the bottleneck, but won't improve performance otherwise (for instance, if the GPU is already fully utilized).
		Resources are created using the `*_create` functions. These functions return `RID`s which are not references to the objects themselves, but opaque _pointers_ towards these objects.
		All objects are drawn to a viewport. You can use the `Viewport` attached to the `SceneTree` or you can create one yourself with `viewport_create`. When using a custom scenario or canvas, the scenario or canvas needs to be attached to the viewport using `viewport_set_scenario` or `viewport_attach_canvas`.
		**Scenarios:** In 3D, all visual objects must be associated with a scenario. The scenario is a visual representation of the world. If accessing the rendering server from a running game, the scenario can be accessed from the scene tree from any `Node3D` node with `Node3D.get_world_3d`. Otherwise, a scenario can be created with `scenario_create`.
		Similarly, in 2D, a canvas is needed to draw all canvas items.
		**3D:** In 3D, all visible objects are comprised of a resource and an instance. A resource can be a mesh, a particle system, a light, or any other 3D object. In order to be visible resources must be attached to an instance using `instance_set_base`. The instance must also be attached to the scenario using `instance_set_scenario` in order to be visible. RenderingServer methods that don't have a prefix are usually 3D-specific (but not always).
		**2D:** In 2D, all visible objects are some form of canvas item. In order to be visible, a canvas item needs to be the child of a canvas attached to a viewport, or it needs to be the child of another canvas item that is eventually attached to the canvas. 2D-specific RenderingServer methods generally start with `canvas_*`.
		**Headless mode:** Starting the engine with the `--headless` `url=$DOCS_URL/tutorials/editor/command_line_tutorial.html`command line argument`/url` disables all rendering and window management functions. Most functions from `RenderingServer` will return dummy values in this case.
	"""
  frame_pre_draw: BuiltinSignal
  frame_post_draw: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->RenderingServer:pass

  @staticmethod
  def instance()->RenderingServer:pass

  @property
  def render_loop_enabled(self)->bool:
    """"""
    pass
  @render_loop_enabled.setter
  def render_loop_enabled(self,  value:bool)->None:
    """"""
    pass
  def texture_2d_create(self, image:__image__.Image)->__core__.RID:
    """
				Creates a 2-dimensional texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_2d_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `Texture2D`.
				**Note:** Not to be confused with `RenderingDevice.texture_create`, which creates the graphics API's own texture type as opposed to the Godot-specific `Texture2D` resource.
			"""
    pass

  def texture_2d_layered_create(self, layers:__core__.Array, layered_type:int )->__core__.RID:
    """
				Creates a 2-dimensional layered texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_2d_layered_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `TextureLayered`.
			"""
    pass

  def texture_3d_create(self, format:int , width:int, height:int, depth:int, mipmaps:bool, data:__core__.Array)->__core__.RID:
    """
				**Note:** The equivalent resource is `Texture3D`.
			"""
    pass

  def texture_proxy_create(self, base:__core__.RID)->__core__.RID:
    """
				This method does nothing and always returns an invalid `RID`.
			"""
    pass

  def texture_create_from_native_handle(self, type:int , format:int , native_handle:int, width:int, height:int, depth:int, layers:int=1, layered_type:int =0)->__core__.RID:
    """
				Creates a texture based on a native handle that was created outside of Godot's renderer.
				**Note:** If using only the rendering device renderer, it's recommend to use `RenderingDevice.texture_create_from_extension` together with `RenderingServer.texture_rd_create`, rather than this method. It will give you much more control over the texture's format and usage.
			"""
    pass

  def texture_2d_update(self, texture:__core__.RID, image:__image__.Image, layer:int)->None:
    """
				Updates the texture specified by the `texture` `RID` with the data in `image`. A `layer` must also be specified, which should be `0` when updating a single-layer texture (`Texture2D`).
				**Note:** The `image` must have the same width, height and format as the current `texture` data. Otherwise, an error will be printed and the original texture won't be modified. If you need to use different width, height or format, use `texture_replace` instead.
			"""
    pass

  def texture_3d_update(self, texture:__core__.RID, data:__core__.Array)->None:
    """
				Updates the texture specified by the `texture` `RID`'s data with the data in `data`. All the texture's layers must be replaced at once.
				**Note:** The `texture` must have the same width, height, depth and format as the current texture data. Otherwise, an error will be printed and the original texture won't be modified. If you need to use different width, height, depth or format, use `texture_replace` instead.
			"""
    pass

  def texture_proxy_update(self, texture:__core__.RID, proxy_to:__core__.RID)->None:
    """
				This method does nothing.
			"""
    pass

  def texture_2d_placeholder_create(self)->__core__.RID:
    """
				Creates a placeholder for a 2-dimensional layered texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_2d_layered_*` RenderingServer functions, although it does nothing when used. See also `texture_2d_layered_placeholder_create`.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `PlaceholderTexture2D`.
			"""
    pass

  def texture_2d_layered_placeholder_create(self, layered_type:int )->__core__.RID:
    """
				Creates a placeholder for a 2-dimensional layered texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_2d_layered_*` RenderingServer functions, although it does nothing when used. See also `texture_2d_placeholder_create`.
				**Note:** The equivalent resource is `PlaceholderTextureLayered`.
			"""
    pass

  def texture_3d_placeholder_create(self)->__core__.RID:
    """
				Creates a placeholder for a 3-dimensional texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_3d_*` RenderingServer functions, although it does nothing when used.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `PlaceholderTexture3D`.
			"""
    pass

  def texture_2d_get(self, texture:__core__.RID)->__image__.Image:
    """
				Returns an `Image` instance from the given `texture` `RID`.
				**Example:** Get the test texture from `get_test_texture` and apply it to a `Sprite2D` node:
				```gdscript
				var texture_rid = RenderingServer.get_test_texture()
				var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
				$Sprite2D.texture = texture
				```
			"""
    pass

  def texture_2d_layer_get(self, texture:__core__.RID, layer:int)->__image__.Image:
    """
				Returns an `Image` instance from the given `texture` `RID` and `layer`.
			"""
    pass

  def texture_3d_get(self, texture:__core__.RID)->typedarray::Image:
    """
				Returns 3D texture data as an array of `Image`s for the specified texture `RID`.
			"""
    pass

  def texture_replace(self, texture:__core__.RID, by_texture:__core__.RID)->None:
    """
				Replaces `texture`'s texture data by the texture specified by the `by_texture` RID, without changing `texture`'s RID.
			"""
    pass

  def texture_set_size_override(self, texture:__core__.RID, width:int, height:int)->None:
    """
"""
    pass

  def texture_set_path(self, texture:__core__.RID, path:str)->None:
    """
"""
    pass

  def texture_get_path(self, texture:__core__.RID)->str:
    """
"""
    pass

  def texture_get_format(self, texture:__core__.RID)->int:
    """
				Returns the format for the texture.
			"""
    pass

  def texture_set_force_redraw_if_visible(self, texture:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def texture_rd_create(self, rd_texture:__core__.RID, layer_type:int =0)->__core__.RID:
    """
				Creates a new texture object based on a texture created directly on the `RenderingDevice`. If the texture contains layers, `layer_type` is used to define the layer type.
			"""
    pass

  def texture_get_rd_texture(self, texture:__core__.RID, srgb:bool=False)->__core__.RID:
    """
				Returns a texture `RID` that can be used with `RenderingDevice`.
			"""
    pass

  def texture_get_native_handle(self, texture:__core__.RID, srgb:bool=False)->int:
    """
				Returns the internal graphics handle for this texture object. For use when communicating with third-party APIs mostly with GDExtension.
				**Note:** This function returns a `uint64_t` which internally maps to a `GLuint` (OpenGL) or `VkImage` (Vulkan).
			"""
    pass

  def shader_create(self)->__core__.RID:
    """
				Creates an empty shader and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `shader_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `Shader`.
			"""
    pass

  def shader_set_code(self, shader:__core__.RID, code:str)->None:
    """
				Sets the shader's source code (which triggers recompilation after being changed).
			"""
    pass

  def shader_set_path_hint(self, shader:__core__.RID, path:str)->None:
    """
				Sets the path hint for the specified shader. This should generally match the `Shader` resource's `Resource.resource_path`.
			"""
    pass

  def shader_get_code(self, shader:__core__.RID)->str:
    """
				Returns a shader's source code as a string.
			"""
    pass

  def get_shader_parameter_list(self, shader:__core__.RID)->typedarray::Dictionary:
    """
				Returns the parameters of a shader.
			"""
    pass

  def shader_get_parameter_default(self, shader:__core__.RID, name:__core__.StringName|str)->Any:
    """
				Returns the default value for the specified shader uniform. This is usually the value written in the shader source code.
			"""
    pass

  def shader_set_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName|str, texture:__core__.RID, index:int=0)->None:
    """
				Sets a shader's default texture. Overwrites the texture given by name.
				**Note:** If the sampler array is used use `index` to access the specified texture.
			"""
    pass

  def shader_get_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName|str, index:int=0)->__core__.RID:
    """
				Returns a default texture from a shader searched by name.
				**Note:** If the sampler array is used use `index` to access the specified texture.
			"""
    pass

  def material_create(self)->__core__.RID:
    """
				Creates an empty material and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `material_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `Material`.
			"""
    pass

  def material_set_shader(self, shader_material:__core__.RID, shader:__core__.RID)->None:
    """
				Sets a shader material's shader.
			"""
    pass

  def material_set_param(self, material:__core__.RID, parameter:__core__.StringName|str, value:Any)->None:
    """
				Sets a material's parameter.
			"""
    pass

  def material_get_param(self, material:__core__.RID, parameter:__core__.StringName|str)->Any:
    """
				Returns the value of a certain material's parameter.
			"""
    pass

  def material_set_render_priority(self, material:__core__.RID, priority:int)->None:
    """
				Sets a material's render priority.
			"""
    pass

  def material_set_next_pass(self, material:__core__.RID, next_material:__core__.RID)->None:
    """
				Sets an object's next material.
			"""
    pass

  def mesh_create_from_surfaces(self, surfaces:__core__.Array, blend_shape_count:int=0)->__core__.RID:
    """
"""
    pass

  def mesh_create(self)->__core__.RID:
    """
				Creates a new mesh and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `mesh_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this mesh to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent resource is `Mesh`.
			"""
    pass

  def mesh_surface_get_format_offset(self, format:int, vertex_count:int, array_index:int)->int:
    """
				Returns the offset of a given attribute by `array_index` in the start of its respective buffer.
			"""
    pass

  def mesh_surface_get_format_vertex_stride(self, format:int, vertex_count:int)->int:
    """
				Returns the stride of the vertex positions for a mesh with given `format`. Note importantly that vertex positions are stored consecutively and are not interleaved with the other attributes in the vertex buffer (normals and tangents).
			"""
    pass

  def mesh_surface_get_format_normal_tangent_stride(self, format:int, vertex_count:int)->int:
    """
				Returns the stride of the combined normals and tangents for a mesh with given `format`. Note importantly that, while normals and tangents are in the vertex buffer with vertices, they are only interleaved with each other and so have a different stride than vertex positions.
			"""
    pass

  def mesh_surface_get_format_attribute_stride(self, format:int, vertex_count:int)->int:
    """
				Returns the stride of the attribute buffer for a mesh with given `format`.
			"""
    pass

  def mesh_surface_get_format_skin_stride(self, format:int, vertex_count:int)->int:
    """
				Returns the stride of the skin buffer for a mesh with given `format`.
			"""
    pass

  def mesh_add_surface(self, mesh:__core__.RID, surface:__core__.Dictionary)->None:
    """
"""
    pass

  def mesh_add_surface_from_arrays(self, mesh:__core__.RID, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array= __core__.Array.new0(), lods:__core__.Dictionary= __core__.Dictionary.new0(), compress_format:int=0)->None:
    """
"""
    pass

  def mesh_get_blend_shape_count(self, mesh:__core__.RID)->int:
    """
				Returns a mesh's blend shape count.
			"""
    pass

  def mesh_set_blend_shape_mode(self, mesh:__core__.RID, mode:int )->None:
    """
				Sets a mesh's blend shape mode.
			"""
    pass

  def mesh_get_blend_shape_mode(self, mesh:__core__.RID)->int:
    """
				Returns a mesh's blend shape mode.
			"""
    pass

  def mesh_surface_set_material(self, mesh:__core__.RID, surface:int, material:__core__.RID)->None:
    """
				Sets a mesh's surface's material.
			"""
    pass

  def mesh_surface_get_material(self, mesh:__core__.RID, surface:int)->__core__.RID:
    """
				Returns a mesh's surface's material.
			"""
    pass

  def mesh_get_surface(self, mesh:__core__.RID, surface:int)->__core__.Dictionary:
    """
"""
    pass

  def mesh_surface_get_arrays(self, mesh:__core__.RID, surface:int)->__core__.Array:
    """
				Returns a mesh's surface's buffer arrays.
			"""
    pass

  def mesh_surface_get_blend_shape_arrays(self, mesh:__core__.RID, surface:int)->typedarray::Array:
    """
				Returns a mesh's surface's arrays for blend shapes.
			"""
    pass

  def mesh_get_surface_count(self, mesh:__core__.RID)->int:
    """
				Returns a mesh's number of surfaces.
			"""
    pass

  def mesh_set_custom_aabb(self, mesh:__core__.RID, aabb:__core__.AABB)->None:
    """
				Sets a mesh's custom aabb.
			"""
    pass

  def mesh_get_custom_aabb(self, mesh:__core__.RID)->__core__.AABB:
    """
				Returns a mesh's custom aabb.
			"""
    pass

  def mesh_surface_remove(self, mesh:__core__.RID, surface:int)->None:
    """
				Removes the surface at the given index from the Mesh, shifting surfaces with higher index down by one.
			"""
    pass

  def mesh_clear(self, mesh:__core__.RID)->None:
    """
				Removes all surfaces from a mesh.
			"""
    pass

  def mesh_surface_update_vertex_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def mesh_surface_update_attribute_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def mesh_surface_update_skin_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None:
    """
"""
    pass

  def mesh_set_shadow_mesh(self, mesh:__core__.RID, shadow_mesh:__core__.RID)->None:
    """
"""
    pass

  def multimesh_create(self)->__core__.RID:
    """
				Creates a new multimesh on the RenderingServer and returns an `RID` handle. This RID will be used in all `multimesh_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this multimesh to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent resource is `MultiMesh`.
			"""
    pass

  def multimesh_allocate_data(self, multimesh:__core__.RID, instances:int, transform_format:int , color_format:bool=False, custom_data_format:bool=False, use_indirect:bool=False)->None:
    """
"""
    pass

  def multimesh_get_instance_count(self, multimesh:__core__.RID)->int:
    """
				Returns the number of instances allocated for this multimesh.
			"""
    pass

  def multimesh_set_mesh(self, multimesh:__core__.RID, mesh:__core__.RID)->None:
    """
				Sets the mesh to be drawn by the multimesh. Equivalent to `MultiMesh.mesh`.
			"""
    pass

  def multimesh_instance_set_transform(self, multimesh:__core__.RID, index:int, transform:__core__.Transform3D)->None:
    """
				Sets the `Transform3D` for this instance. Equivalent to `MultiMesh.set_instance_transform`.
			"""
    pass

  def multimesh_instance_set_transform_2d(self, multimesh:__core__.RID, index:int, transform:__core__.Transform2D)->None:
    """
				Sets the `Transform2D` for this instance. For use when multimesh is used in 2D. Equivalent to `MultiMesh.set_instance_transform_2d`.
			"""
    pass

  def multimesh_instance_set_color(self, multimesh:__core__.RID, index:int, color:__core__.Color)->None:
    """
				Sets the color by which this instance will be modulated. Equivalent to `MultiMesh.set_instance_color`.
			"""
    pass

  def multimesh_instance_set_custom_data(self, multimesh:__core__.RID, index:int, custom_data:__core__.Color)->None:
    """
				Sets the custom data for this instance. Custom data is passed as a `Color`, but is interpreted as a `vec4` in the shader. Equivalent to `MultiMesh.set_instance_custom_data`.
			"""
    pass

  def multimesh_get_mesh(self, multimesh:__core__.RID)->__core__.RID:
    """
				Returns the RID of the mesh that will be used in drawing this multimesh.
			"""
    pass

  def multimesh_get_aabb(self, multimesh:__core__.RID)->__core__.AABB:
    """
				Calculates and returns the axis-aligned bounding box that encloses all instances within the multimesh.
			"""
    pass

  def multimesh_set_custom_aabb(self, multimesh:__core__.RID, aabb:__core__.AABB)->None:
    """
				Sets the custom AABB for this MultiMesh resource.
			"""
    pass

  def multimesh_get_custom_aabb(self, multimesh:__core__.RID)->__core__.AABB:
    """
				Returns the custom AABB defined for this MultiMesh resource.
			"""
    pass

  def multimesh_instance_get_transform(self, multimesh:__core__.RID, index:int)->__core__.Transform3D:
    """
				Returns the `Transform3D` of the specified instance.
			"""
    pass

  def multimesh_instance_get_transform_2d(self, multimesh:__core__.RID, index:int)->__core__.Transform2D:
    """
				Returns the `Transform2D` of the specified instance. For use when the multimesh is set to use 2D transforms.
			"""
    pass

  def multimesh_instance_get_color(self, multimesh:__core__.RID, index:int)->__core__.Color:
    """
				Returns the color by which the specified instance will be modulated.
			"""
    pass

  def multimesh_instance_get_custom_data(self, multimesh:__core__.RID, index:int)->__core__.Color:
    """
				Returns the custom data associated with the specified instance.
			"""
    pass

  def multimesh_set_visible_instances(self, multimesh:__core__.RID, visible:int)->None:
    """
				Sets the number of instances visible at a given time. If -1, all instances that have been allocated are drawn. Equivalent to `MultiMesh.visible_instance_count`.
			"""
    pass

  def multimesh_get_visible_instances(self, multimesh:__core__.RID)->int:
    """
				Returns the number of visible instances for this multimesh.
			"""
    pass

  def multimesh_set_buffer(self, multimesh:__core__.RID, buffer:__core__.PackedFloat32Array)->None:
    """
				Set the entire data to use for drawing the `multimesh` at once to `buffer` (such as instance transforms and colors). `buffer`'s size must match the number of instances multiplied by the per-instance data size (which depends on the enabled MultiMesh fields). Otherwise, an error message is printed and nothing is rendered. See also `multimesh_get_buffer`.
				The per-instance data size and expected data order is:
				`codeblock lang=text`
				2D:
				  - Position: 8 floats (8 floats for Transform2D)
				  - Position + Vertex color: 12 floats (8 floats for Transform2D, 4 floats for Color)
				  - Position + Custom data: 12 floats (8 floats for Transform2D, 4 floats of custom data)
				  - Position + Vertex color + Custom data: 16 floats (8 floats for Transform2D, 4 floats for Color, 4 floats of custom data)
				3D:
				  - Position: 12 floats (12 floats for Transform3D)
				  - Position + Vertex color: 16 floats (12 floats for Transform3D, 4 floats for Color)
				  - Position + Custom data: 16 floats (12 floats for Transform3D, 4 floats of custom data)
				  - Position + Vertex color + Custom data: 20 floats (12 floats for Transform3D, 4 floats for Color, 4 floats of custom data)
				```
				Instance transforms are in row-major order. Specifically:
				- For `Transform2D` the float-order is: `(x.x, y.x, padding_float, origin.x, x.y, y.y, padding_float, origin.y)`.
				- For `Transform3D` the float-order is: `(basis.x.x, basis.y.x, basis.z.x, origin.x, basis.x.y, basis.y.y, basis.z.y, origin.y, basis.x.z, basis.y.z, basis.z.z, origin.z)`.
			"""
    pass

  def multimesh_get_command_buffer_rd_rid(self, multimesh:__core__.RID)->__core__.RID:
    """
				Returns the `RenderingDevice` `RID` handle of the `MultiMesh` command buffer. This `RID` is only valid if `use_indirect` is set to `true` when allocating data through `multimesh_allocate_data`. It can be used to directly modify the instance count via buffer.
				The data structure is dependent on both how many surfaces the mesh contains and whether it is indexed or not, the buffer has 5 integers in it, with the last unused if the mesh is not indexed.
				Each of the values in the buffer correspond to these options:
				`codeblock lang=text`
				Indexed:
				  0 - indexCount;
				  1 - instanceCount;
				  2 - firstIndex;
				  3 - vertexOffset;
				  4 - firstInstance;
				Non Indexed:
				  0 - vertexCount;
				  1 - instanceCount;
				  2 - firstVertex;
				  3 - firstInstance;
				  4 - unused;
				```
			"""
    pass

  def multimesh_get_buffer_rd_rid(self, multimesh:__core__.RID)->__core__.RID:
    """
				Returns the `RenderingDevice` `RID` handle of the `MultiMesh`, which can be used as any other buffer on the Rendering Device.
			"""
    pass

  def multimesh_get_buffer(self, multimesh:__core__.RID)->__core__.PackedFloat32Array:
    """
				Returns the MultiMesh data (such as instance transforms, colors, etc.). See `multimesh_set_buffer` for details on the returned data.
				**Note:** If the buffer is in the engine's internal cache, it will have to be fetched from GPU memory and possibly decompressed. This means `multimesh_get_buffer` is potentially a slow operation and should be avoided whenever possible.
			"""
    pass

  def multimesh_set_buffer_interpolated(self, multimesh:__core__.RID, buffer:__core__.PackedFloat32Array, buffer_previous:__core__.PackedFloat32Array)->None:
    """
				Alternative version of `multimesh_set_buffer` for use with physics interpolation.
				Takes both an array of current data and an array of data for the previous physics tick.
			"""
    pass

  def multimesh_set_physics_interpolated(self, multimesh:__core__.RID, interpolated:bool)->None:
    """
				Turns on and off physics interpolation for this MultiMesh resource.
			"""
    pass

  def multimesh_set_physics_interpolation_quality(self, multimesh:__core__.RID, quality:int )->None:
    """
				Sets the physics interpolation quality for the `MultiMesh`.
				A value of `constant MULTIMESH_INTERP_QUALITY_FAST` gives fast but low quality interpolation, a value of `constant MULTIMESH_INTERP_QUALITY_HIGH` gives slower but higher quality interpolation.
			"""
    pass

  def multimesh_instance_reset_physics_interpolation(self, multimesh:__core__.RID, index:int)->None:
    """
				Prevents physics interpolation for the specified instance during the current physics tick.
				This is useful when moving an instance to a new location, to give an instantaneous change rather than interpolation from the previous location.
			"""
    pass

  def skeleton_create(self)->__core__.RID:
    """
				Creates a skeleton and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `skeleton_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
			"""
    pass

  def skeleton_allocate_data(self, skeleton:__core__.RID, bones:int, is_2d_skeleton:bool=False)->None:
    """
"""
    pass

  def skeleton_get_bone_count(self, skeleton:__core__.RID)->int:
    """
				Returns the number of bones allocated for this skeleton.
			"""
    pass

  def skeleton_bone_set_transform(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform3D)->None:
    """
				Sets the `Transform3D` for a specific bone of this skeleton.
			"""
    pass

  def skeleton_bone_get_transform(self, skeleton:__core__.RID, bone:int)->__core__.Transform3D:
    """
				Returns the `Transform3D` set for a specific bone of this skeleton.
			"""
    pass

  def skeleton_bone_set_transform_2d(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform2D)->None:
    """
				Sets the `Transform2D` for a specific bone of this skeleton.
			"""
    pass

  def skeleton_bone_get_transform_2d(self, skeleton:__core__.RID, bone:int)->__core__.Transform2D:
    """
				Returns the `Transform2D` set for a specific bone of this skeleton.
			"""
    pass

  def skeleton_set_base_transform_2d(self, skeleton:__core__.RID, base_transform:__core__.Transform2D)->None:
    """
"""
    pass

  def directional_light_create(self)->__core__.RID:
    """
				Creates a directional light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this directional light to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent node is `DirectionalLight3D`.
			"""
    pass

  def omni_light_create(self)->__core__.RID:
    """
				Creates a new omni light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this omni light to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent node is `OmniLight3D`.
			"""
    pass

  def spot_light_create(self)->__core__.RID:
    """
				Creates a spot light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this spot light to an instance using `instance_set_base` using the returned RID.
			"""
    pass

  def light_set_color(self, light:__core__.RID, color:__core__.Color)->None:
    """
				Sets the color of the light. Equivalent to `Light3D.light_color`.
			"""
    pass

  def light_set_param(self, light:__core__.RID, param:int , value:float)->None:
    """
				Sets the specified 3D light parameter. Equivalent to `Light3D.set_param`.
			"""
    pass

  def light_set_shadow(self, light:__core__.RID, enabled:bool)->None:
    """
				If `true`, light will cast shadows. Equivalent to `Light3D.shadow_enabled`.
			"""
    pass

  def light_set_projector(self, light:__core__.RID, texture:__core__.RID)->None:
    """
				Sets the projector texture to use for the specified 3D light. Equivalent to `Light3D.light_projector`.
			"""
    pass

  def light_set_negative(self, light:__core__.RID, enable:bool)->None:
    """
				If `true`, the 3D light will subtract light instead of adding light. Equivalent to `Light3D.light_negative`.
			"""
    pass

  def light_set_cull_mask(self, light:__core__.RID, mask:int)->None:
    """
				Sets the cull mask for this 3D light. Lights only affect objects in the selected layers. Equivalent to `Light3D.light_cull_mask`.
			"""
    pass

  def light_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, shadow:float, length:float)->None:
    """
				Sets the distance fade for this 3D light. This acts as a form of level of detail (LOD) and can be used to improve performance. Equivalent to `Light3D.distance_fade_enabled`, `Light3D.distance_fade_begin`, `Light3D.distance_fade_shadow`, and `Light3D.distance_fade_length`.
			"""
    pass

  def light_set_reverse_cull_face_mode(self, light:__core__.RID, enabled:bool)->None:
    """
				If `true`, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with `instance_geometry_set_cast_shadows_setting`. Equivalent to `Light3D.shadow_reverse_cull_face`.
			"""
    pass

  def light_set_shadow_caster_mask(self, light:__core__.RID, mask:int)->None:
    """
				Sets the shadow caster mask for this 3D light. Shadows will only be cast using objects in the selected layers. Equivalent to `Light3D.shadow_caster_mask`.
			"""
    pass

  def light_set_bake_mode(self, light:__core__.RID, bake_mode:int )->None:
    """
				Sets the bake mode to use for the specified 3D light. Equivalent to `Light3D.light_bake_mode`.
			"""
    pass

  def light_set_max_sdfgi_cascade(self, light:__core__.RID, cascade:int)->None:
    """
				Sets the maximum SDFGI cascade in which the 3D light's indirect lighting is rendered. Higher values allow the light to be rendered in SDFGI further away from the camera.
			"""
    pass

  def light_omni_set_shadow_mode(self, light:__core__.RID, mode:int )->None:
    """
				Sets whether to use a dual paraboloid or a cubemap for the shadow map. Dual paraboloid is faster but may suffer from artifacts. Equivalent to `OmniLight3D.omni_shadow_mode`.
			"""
    pass

  def light_directional_set_shadow_mode(self, light:__core__.RID, mode:int )->None:
    """
				Sets the shadow mode for this directional light. Equivalent to `DirectionalLight3D.directional_shadow_mode`.
			"""
    pass

  def light_directional_set_blend_splits(self, light:__core__.RID, enable:bool)->None:
    """
				If `true`, this directional light will blend between shadow map splits resulting in a smoother transition between them. Equivalent to `DirectionalLight3D.directional_shadow_blend_splits`.
			"""
    pass

  def light_directional_set_sky_mode(self, light:__core__.RID, mode:int )->None:
    """
				If `true`, this light will not be used for anything except sky shaders. Use this for lights that impact your sky shader that you may want to hide from affecting the rest of the scene. For example, you may want to enable this when the sun in your sky shader falls below the horizon.
			"""
    pass

  def light_projectors_set_filter(self, filter:int )->None:
    """
				Sets the texture filter mode to use when rendering light projectors. This parameter is global and cannot be set on a per-light basis.
			"""
    pass

  def lightmaps_set_bicubic_filter(self, enable:bool)->None:
    """
				Toggles whether a bicubic filter should be used when lightmaps are sampled. This smoothens their appearance at a performance cost.
			"""
    pass

  def positional_soft_shadow_filter_set_quality(self, quality:int )->None:
    """
				Sets the filter quality for omni and spot light shadows in 3D. See also `ProjectSettings.rendering/lights_and_shadows/positional_shadow/soft_shadow_filter_quality`. This parameter is global and cannot be set on a per-viewport basis.
			"""
    pass

  def directional_soft_shadow_filter_set_quality(self, quality:int )->None:
    """
				Sets the filter `quality` for directional light shadows in 3D. See also `ProjectSettings.rendering/lights_and_shadows/directional_shadow/soft_shadow_filter_quality`. This parameter is global and cannot be set on a per-viewport basis.
			"""
    pass

  def directional_shadow_atlas_set_size(self, size:int, is_16bits:bool)->None:
    """
				Sets the `size` of the directional light shadows in 3D. See also `ProjectSettings.rendering/lights_and_shadows/directional_shadow/size`. This parameter is global and cannot be set on a per-viewport basis.
			"""
    pass

  def reflection_probe_create(self)->__core__.RID:
    """
				Creates a reflection probe and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `reflection_probe_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this reflection probe to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent node is `ReflectionProbe`.
			"""
    pass

  def reflection_probe_set_update_mode(self, probe:__core__.RID, mode:int )->None:
    """
				Sets how often the reflection probe updates. Can either be once or every frame.
			"""
    pass

  def reflection_probe_set_intensity(self, probe:__core__.RID, intensity:float)->None:
    """
				Sets the intensity of the reflection probe. Intensity modulates the strength of the reflection. Equivalent to `ReflectionProbe.intensity`.
			"""
    pass

  def reflection_probe_set_blend_distance(self, probe:__core__.RID, blend_distance:float)->None:
    """
				Sets the distance in meters over which a probe blends into the scene.
			"""
    pass

  def reflection_probe_set_ambient_mode(self, probe:__core__.RID, mode:int )->None:
    """
				Sets the reflection probe's ambient light mode. Equivalent to `ReflectionProbe.ambient_mode`.
			"""
    pass

  def reflection_probe_set_ambient_color(self, probe:__core__.RID, color:__core__.Color)->None:
    """
				Sets the reflection probe's custom ambient light color. Equivalent to `ReflectionProbe.ambient_color`.
			"""
    pass

  def reflection_probe_set_ambient_energy(self, probe:__core__.RID, energy:float)->None:
    """
				Sets the reflection probe's custom ambient light energy. Equivalent to `ReflectionProbe.ambient_color_energy`.
			"""
    pass

  def reflection_probe_set_max_distance(self, probe:__core__.RID, distance:float)->None:
    """
				Sets the max distance away from the probe an object can be before it is culled. Equivalent to `ReflectionProbe.max_distance`.
			"""
    pass

  def reflection_probe_set_size(self, probe:__core__.RID, size:__core__.Vector3)->None:
    """
				Sets the size of the area that the reflection probe will capture. Equivalent to `ReflectionProbe.size`.
			"""
    pass

  def reflection_probe_set_origin_offset(self, probe:__core__.RID, offset:__core__.Vector3)->None:
    """
				Sets the origin offset to be used when this reflection probe is in box project mode. Equivalent to `ReflectionProbe.origin_offset`.
			"""
    pass

  def reflection_probe_set_as_interior(self, probe:__core__.RID, enable:bool)->None:
    """
				If `true`, reflections will ignore sky contribution. Equivalent to `ReflectionProbe.interior`.
			"""
    pass

  def reflection_probe_set_enable_box_projection(self, probe:__core__.RID, enable:bool)->None:
    """
				If `true`, uses box projection. This can make reflections look more correct in certain situations. Equivalent to `ReflectionProbe.box_projection`.
			"""
    pass

  def reflection_probe_set_enable_shadows(self, probe:__core__.RID, enable:bool)->None:
    """
				If `true`, computes shadows in the reflection probe. This makes the reflection much slower to compute. Equivalent to `ReflectionProbe.enable_shadows`.
			"""
    pass

  def reflection_probe_set_cull_mask(self, probe:__core__.RID, layers:int)->None:
    """
				Sets the render cull mask for this reflection probe. Only instances with a matching layer will be reflected by this probe. Equivalent to `ReflectionProbe.cull_mask`.
			"""
    pass

  def reflection_probe_set_reflection_mask(self, probe:__core__.RID, layers:int)->None:
    """
				Sets the render reflection mask for this reflection probe. Only instances with a matching layer will have reflections applied from this probe. Equivalent to `ReflectionProbe.reflection_mask`.
			"""
    pass

  def reflection_probe_set_resolution(self, probe:__core__.RID, resolution:int)->None:
    """
				Sets the resolution to use when rendering the specified reflection probe. The `resolution` is specified for each cubemap face: for instance, specifying `512` will allocate 6 faces of 512×512 each (plus mipmaps for roughness levels).
			"""
    pass

  def reflection_probe_set_mesh_lod_threshold(self, probe:__core__.RID, pixels:float)->None:
    """
				Sets the mesh level of detail to use in the reflection probe rendering. Higher values will use less detailed versions of meshes that have LOD variations generated, which can improve performance. Equivalent to `ReflectionProbe.mesh_lod_threshold`.
			"""
    pass

  def decal_create(self)->__core__.RID:
    """
				Creates a decal and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `decal_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this decal to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent node is `Decal`.
			"""
    pass

  def decal_set_size(self, decal:__core__.RID, size:__core__.Vector3)->None:
    """
				Sets the `size` of the decal specified by the `decal` RID. Equivalent to `Decal.size`.
			"""
    pass

  def decal_set_texture(self, decal:__core__.RID, type:int , texture:__core__.RID)->None:
    """
				Sets the `texture` in the given texture `type` slot for the specified decal. Equivalent to `Decal.set_texture`.
			"""
    pass

  def decal_set_emission_energy(self, decal:__core__.RID, energy:float)->None:
    """
				Sets the emission `energy` in the decal specified by the `decal` RID. Equivalent to `Decal.emission_energy`.
			"""
    pass

  def decal_set_albedo_mix(self, decal:__core__.RID, albedo_mix:float)->None:
    """
				Sets the `albedo_mix` in the decal specified by the `decal` RID. Equivalent to `Decal.albedo_mix`.
			"""
    pass

  def decal_set_modulate(self, decal:__core__.RID, color:__core__.Color)->None:
    """
				Sets the color multiplier in the decal specified by the `decal` RID to `color`. Equivalent to `Decal.modulate`.
			"""
    pass

  def decal_set_cull_mask(self, decal:__core__.RID, mask:int)->None:
    """
				Sets the cull `mask` in the decal specified by the `decal` RID. Equivalent to `Decal.cull_mask`.
			"""
    pass

  def decal_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, length:float)->None:
    """
				Sets the distance fade parameters in the decal specified by the `decal` RID. Equivalent to `Decal.distance_fade_enabled`, `Decal.distance_fade_begin` and `Decal.distance_fade_length`.
			"""
    pass

  def decal_set_fade(self, decal:__core__.RID, above:float, below:float)->None:
    """
				Sets the upper fade (`above`) and lower fade (`below`) in the decal specified by the `decal` RID. Equivalent to `Decal.upper_fade` and `Decal.lower_fade`.
			"""
    pass

  def decal_set_normal_fade(self, decal:__core__.RID, fade:float)->None:
    """
				Sets the normal `fade` in the decal specified by the `decal` RID. Equivalent to `Decal.normal_fade`.
			"""
    pass

  def decals_set_filter(self, filter:int )->None:
    """
				Sets the texture `filter` mode to use when rendering decals. This parameter is global and cannot be set on a per-decal basis.
			"""
    pass

  def gi_set_use_half_resolution(self, half_resolution:bool)->None:
    """
				If `half_resolution` is `true`, renders `VoxelGI` and SDFGI (`Environment.sdfgi_enabled`) buffers at halved resolution on each axis (e.g. 960×540 when the viewport size is 1920×1080). This improves performance significantly when VoxelGI or SDFGI is enabled, at the cost of artifacts that may be visible on polygon edges. The loss in quality becomes less noticeable as the viewport resolution increases. `LightmapGI` rendering is not affected by this setting. Equivalent to `ProjectSettings.rendering/global_illumination/gi/use_half_resolution`.
			"""
    pass

  def voxel_gi_create(self)->__core__.RID:
    """
				Creates a new voxel-based global illumination object and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `voxel_gi_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `VoxelGI`.
			"""
    pass

  def voxel_gi_allocate_data(self, voxel_gi:__core__.RID, to_cell_xform:__core__.Transform3D, aabb:__core__.AABB, octree_size:__core__.Vector3i, octree_cells:__core__.PackedByteArray, data_cells:__core__.PackedByteArray, distance_field:__core__.PackedByteArray, level_counts:__core__.PackedInt32Array)->None:
    """
"""
    pass

  def voxel_gi_get_octree_size(self, voxel_gi:__core__.RID)->__core__.Vector3i:
    """
"""
    pass

  def voxel_gi_get_octree_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray:
    """
"""
    pass

  def voxel_gi_get_data_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray:
    """
"""
    pass

  def voxel_gi_get_distance_field(self, voxel_gi:__core__.RID)->__core__.PackedByteArray:
    """
"""
    pass

  def voxel_gi_get_level_counts(self, voxel_gi:__core__.RID)->__core__.PackedInt32Array:
    """
"""
    pass

  def voxel_gi_get_to_cell_xform(self, voxel_gi:__core__.RID)->__core__.Transform3D:
    """
"""
    pass

  def voxel_gi_set_dynamic_range(self, voxel_gi:__core__.RID, range:float)->None:
    """
				Sets the `VoxelGIData.dynamic_range` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_propagation(self, voxel_gi:__core__.RID, amount:float)->None:
    """
				Sets the `VoxelGIData.propagation` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_energy(self, voxel_gi:__core__.RID, energy:float)->None:
    """
				Sets the `VoxelGIData.energy` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_baked_exposure_normalization(self, voxel_gi:__core__.RID, baked_exposure:float)->None:
    """
				Used to inform the renderer what exposure normalization value was used while baking the voxel gi. This value will be used and modulated at run time to ensure that the voxel gi maintains a consistent level of exposure even if the scene-wide exposure normalization is changed at run time. For more information see `camera_attributes_set_exposure`.
			"""
    pass

  def voxel_gi_set_bias(self, voxel_gi:__core__.RID, bias:float)->None:
    """
				Sets the `VoxelGIData.bias` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_normal_bias(self, voxel_gi:__core__.RID, bias:float)->None:
    """
				Sets the `VoxelGIData.normal_bias` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_interior(self, voxel_gi:__core__.RID, enable:bool)->None:
    """
				Sets the `VoxelGIData.interior` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_use_two_bounces(self, voxel_gi:__core__.RID, enable:bool)->None:
    """
				Sets the `VoxelGIData.use_two_bounces` value to use on the specified `voxel_gi`'s `RID`.
			"""
    pass

  def voxel_gi_set_quality(self, quality:int )->None:
    """
				Sets the `ProjectSettings.rendering/global_illumination/voxel_gi/quality` value to use when rendering. This parameter is global and cannot be set on a per-VoxelGI basis.
			"""
    pass

  def lightmap_create(self)->__core__.RID:
    """
				Creates a new lightmap global illumination instance and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `lightmap_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `LightmapGI`.
			"""
    pass

  def lightmap_set_textures(self, lightmap:__core__.RID, light:__core__.RID, uses_sh:bool)->None:
    """
				Set the textures on the given `lightmap` GI instance to the texture array pointed to by the `light` RID. If the lightmap texture was baked with `LightmapGI.directional` set to `true`, then `uses_sh` must also be `true`.
			"""
    pass

  def lightmap_set_probe_bounds(self, lightmap:__core__.RID, bounds:__core__.AABB)->None:
    """
"""
    pass

  def lightmap_set_probe_interior(self, lightmap:__core__.RID, interior:bool)->None:
    """
"""
    pass

  def lightmap_set_probe_capture_data(self, lightmap:__core__.RID, points:__core__.PackedVector3Array, point_sh:__core__.PackedColorArray, tetrahedra:__core__.PackedInt32Array, bsp_tree:__core__.PackedInt32Array)->None:
    """
"""
    pass

  def lightmap_get_probe_capture_points(self, lightmap:__core__.RID)->__core__.PackedVector3Array:
    """
"""
    pass

  def lightmap_get_probe_capture_sh(self, lightmap:__core__.RID)->__core__.PackedColorArray:
    """
"""
    pass

  def lightmap_get_probe_capture_tetrahedra(self, lightmap:__core__.RID)->__core__.PackedInt32Array:
    """
"""
    pass

  def lightmap_get_probe_capture_bsp_tree(self, lightmap:__core__.RID)->__core__.PackedInt32Array:
    """
"""
    pass

  def lightmap_set_baked_exposure_normalization(self, lightmap:__core__.RID, baked_exposure:float)->None:
    """
				Used to inform the renderer what exposure normalization value was used while baking the lightmap. This value will be used and modulated at run time to ensure that the lightmap maintains a consistent level of exposure even if the scene-wide exposure normalization is changed at run time. For more information see `camera_attributes_set_exposure`.
			"""
    pass

  def lightmap_set_probe_capture_update_speed(self, speed:float)->None:
    """
"""
    pass

  def particles_create(self)->__core__.RID:
    """
				Creates a GPU-based particle system and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `particles_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach these particles to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent nodes are `GPUParticles2D` and `GPUParticles3D`.
				**Note:** All `particles_*` methods only apply to GPU-based particles, not CPU-based particles. `CPUParticles2D` and `CPUParticles3D` do not have equivalent RenderingServer functions available, as these use `MultiMeshInstance2D` and `MultiMeshInstance3D` under the hood (see `multimesh_*` methods).
			"""
    pass

  def particles_set_mode(self, particles:__core__.RID, mode:int )->None:
    """
				Sets whether the GPU particles specified by the `particles` RID should be rendered in 2D or 3D according to `mode`.
			"""
    pass

  def particles_set_emitting(self, particles:__core__.RID, emitting:bool)->None:
    """
				If `true`, particles will emit over time. Setting to `false` does not reset the particles, but only stops their emission. Equivalent to `GPUParticles3D.emitting`.
			"""
    pass

  def particles_get_emitting(self, particles:__core__.RID)->bool:
    """
				Returns `true` if particles are currently set to emitting.
			"""
    pass

  def particles_set_amount(self, particles:__core__.RID, amount:int)->None:
    """
				Sets the number of particles to be drawn and allocates the memory for them. Equivalent to `GPUParticles3D.amount`.
			"""
    pass

  def particles_set_amount_ratio(self, particles:__core__.RID, ratio:float)->None:
    """
				Sets the amount ratio for particles to be emitted. Equivalent to `GPUParticles3D.amount_ratio`.
			"""
    pass

  def particles_set_lifetime(self, particles:__core__.RID, lifetime:float)->None:
    """
				Sets the lifetime of each particle in the system. Equivalent to `GPUParticles3D.lifetime`.
			"""
    pass

  def particles_set_one_shot(self, particles:__core__.RID, one_shot:bool)->None:
    """
				If `true`, particles will emit once and then stop. Equivalent to `GPUParticles3D.one_shot`.
			"""
    pass

  def particles_set_pre_process_time(self, particles:__core__.RID, time:float)->None:
    """
				Sets the preprocess time for the particles' animation. This lets you delay starting an animation until after the particles have begun emitting. Equivalent to `GPUParticles3D.preprocess`.
			"""
    pass

  def particles_request_process_time(self, particles:__core__.RID, time:float)->None:
    """
				Requests particles to process for extra process time during a single frame.
			"""
    pass

  def particles_set_explosiveness_ratio(self, particles:__core__.RID, ratio:float)->None:
    """
				Sets the explosiveness ratio. Equivalent to `GPUParticles3D.explosiveness`.
			"""
    pass

  def particles_set_randomness_ratio(self, particles:__core__.RID, ratio:float)->None:
    """
				Sets the emission randomness ratio. This randomizes the emission of particles within their phase. Equivalent to `GPUParticles3D.randomness`.
			"""
    pass

  def particles_set_interp_to_end(self, particles:__core__.RID, factor:float)->None:
    """
				Sets the value that informs a `ParticleProcessMaterial` to rush all particles towards the end of their lifetime.
			"""
    pass

  def particles_set_emitter_velocity(self, particles:__core__.RID, velocity:__core__.Vector3)->None:
    """
				Sets the velocity of a particle node, that will be used by `ParticleProcessMaterial.inherit_velocity_ratio`.
			"""
    pass

  def particles_set_custom_aabb(self, particles:__core__.RID, aabb:__core__.AABB)->None:
    """
				Sets a custom axis-aligned bounding box for the particle system. Equivalent to `GPUParticles3D.visibility_aabb`.
			"""
    pass

  def particles_set_speed_scale(self, particles:__core__.RID, scale:float)->None:
    """
				Sets the speed scale of the particle system. Equivalent to `GPUParticles3D.speed_scale`.
			"""
    pass

  def particles_set_use_local_coordinates(self, particles:__core__.RID, enable:bool)->None:
    """
				If `true`, particles use local coordinates. If `false` they use global coordinates. Equivalent to `GPUParticles3D.local_coords`.
			"""
    pass

  def particles_set_process_material(self, particles:__core__.RID, material:__core__.RID)->None:
    """
				Sets the material for processing the particles.
				**Note:** This is not the material used to draw the materials. Equivalent to `GPUParticles3D.process_material`.
			"""
    pass

  def particles_set_fixed_fps(self, particles:__core__.RID, fps:int)->None:
    """
				Sets the frame rate that the particle system rendering will be fixed to. Equivalent to `GPUParticles3D.fixed_fps`.
			"""
    pass

  def particles_set_interpolate(self, particles:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def particles_set_fractional_delta(self, particles:__core__.RID, enable:bool)->None:
    """
				If `true`, uses fractional delta which smooths the movement of the particles. Equivalent to `GPUParticles3D.fract_delta`.
			"""
    pass

  def particles_set_collision_base_size(self, particles:__core__.RID, size:float)->None:
    """
"""
    pass

  def particles_set_transform_align(self, particles:__core__.RID, align:int )->None:
    """
"""
    pass

  def particles_set_trails(self, particles:__core__.RID, enable:bool, length_sec:float)->None:
    """
				If `enable` is `true`, enables trails for the `particles` with the specified `length_sec` in seconds. Equivalent to `GPUParticles3D.trail_enabled` and `GPUParticles3D.trail_lifetime`.
			"""
    pass

  def particles_set_trail_bind_poses(self, particles:__core__.RID, bind_poses:__core__.Array)->None:
    """
"""
    pass

  def particles_is_inactive(self, particles:__core__.RID)->bool:
    """
				Returns `true` if particles are not emitting and particles are set to inactive.
			"""
    pass

  def particles_request_process(self, particles:__core__.RID)->None:
    """
				Add particle system to list of particle systems that need to be updated. Update will take place on the next frame, or on the next call to `instances_cull_aabb`, `instances_cull_convex`, or `instances_cull_ray`.
			"""
    pass

  def particles_restart(self, particles:__core__.RID)->None:
    """
				Reset the particles on the next update. Equivalent to `GPUParticles3D.restart`.
			"""
    pass

  def particles_set_subemitter(self, particles:__core__.RID, subemitter_particles:__core__.RID)->None:
    """
"""
    pass

  def particles_emit(self, particles:__core__.RID, transform:__core__.Transform3D, velocity:__core__.Vector3, color:__core__.Color, custom:__core__.Color, emit_flags:int)->None:
    """
				Manually emits particles from the `particles` instance.
			"""
    pass

  def particles_set_draw_order(self, particles:__core__.RID, order:int )->None:
    """
				Sets the draw order of the particles. Equivalent to `GPUParticles3D.draw_order`.
			"""
    pass

  def particles_set_draw_passes(self, particles:__core__.RID, count:int)->None:
    """
				Sets the number of draw passes to use. Equivalent to `GPUParticles3D.draw_passes`.
			"""
    pass

  def particles_set_draw_pass_mesh(self, particles:__core__.RID, pass_:int, mesh:__core__.RID)->None:
    """
				Sets the mesh to be used for the specified draw pass. Equivalent to `GPUParticles3D.draw_pass_1`, `GPUParticles3D.draw_pass_2`, `GPUParticles3D.draw_pass_3`, and `GPUParticles3D.draw_pass_4`.
			"""
    pass

  def particles_get_current_aabb(self, particles:__core__.RID)->__core__.AABB:
    """
				Calculates and returns the axis-aligned bounding box that contains all the particles. Equivalent to `GPUParticles3D.capture_aabb`.
			"""
    pass

  def particles_set_emission_transform(self, particles:__core__.RID, transform:__core__.Transform3D)->None:
    """
				Sets the `Transform3D` that will be used by the particles when they first emit.
			"""
    pass

  def particles_collision_create(self)->__core__.RID:
    """
				Creates a new 3D GPU particle collision or attractor and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID can be used in most `particles_collision_*` RenderingServer functions.
				**Note:** The equivalent nodes are `GPUParticlesCollision3D` and `GPUParticlesAttractor3D`.
			"""
    pass

  def particles_collision_set_collision_type(self, particles_collision:__core__.RID, type:int )->None:
    """
				Sets the collision or attractor shape `type` for the 3D GPU particles collision or attractor specified by the `particles_collision` RID.
			"""
    pass

  def particles_collision_set_cull_mask(self, particles_collision:__core__.RID, mask:int)->None:
    """
				Sets the cull `mask` for the 3D GPU particles collision or attractor specified by the `particles_collision` RID. Equivalent to `GPUParticlesCollision3D.cull_mask` or `GPUParticlesAttractor3D.cull_mask` depending on the `particles_collision` type.
			"""
    pass

  def particles_collision_set_sphere_radius(self, particles_collision:__core__.RID, radius:float)->None:
    """
				Sets the `radius` for the 3D GPU particles sphere collision or attractor specified by the `particles_collision` RID. Equivalent to `GPUParticlesCollisionSphere3D.radius` or `GPUParticlesAttractorSphere3D.radius` depending on the `particles_collision` type.
			"""
    pass

  def particles_collision_set_box_extents(self, particles_collision:__core__.RID, extents:__core__.Vector3)->None:
    """
				Sets the `extents` for the 3D GPU particles collision by the `particles_collision` RID. Equivalent to `GPUParticlesCollisionBox3D.size`, `GPUParticlesCollisionSDF3D.size`, `GPUParticlesCollisionHeightField3D.size`, `GPUParticlesAttractorBox3D.size` or `GPUParticlesAttractorVectorField3D.size` depending on the `particles_collision` type.
			"""
    pass

  def particles_collision_set_attractor_strength(self, particles_collision:__core__.RID, strength:float)->None:
    """
				Sets the `strength` for the 3D GPU particles attractor specified by the `particles_collision` RID. Only used for attractors, not colliders. Equivalent to `GPUParticlesAttractor3D.strength`.
			"""
    pass

  def particles_collision_set_attractor_directionality(self, particles_collision:__core__.RID, amount:float)->None:
    """
				Sets the directionality `amount` for the 3D GPU particles attractor specified by the `particles_collision` RID. Only used for attractors, not colliders. Equivalent to `GPUParticlesAttractor3D.directionality`.
			"""
    pass

  def particles_collision_set_attractor_attenuation(self, particles_collision:__core__.RID, curve:float)->None:
    """
				Sets the attenuation `curve` for the 3D GPU particles attractor specified by the `particles_collision` RID. Only used for attractors, not colliders. Equivalent to `GPUParticlesAttractor3D.attenuation`.
			"""
    pass

  def particles_collision_set_field_texture(self, particles_collision:__core__.RID, texture:__core__.RID)->None:
    """
				Sets the signed distance field `texture` for the 3D GPU particles collision specified by the `particles_collision` RID. Equivalent to `GPUParticlesCollisionSDF3D.texture` or `GPUParticlesAttractorVectorField3D.texture` depending on the `particles_collision` type.
			"""
    pass

  def particles_collision_height_field_update(self, particles_collision:__core__.RID)->None:
    """
				Requests an update for the 3D GPU particle collision heightfield. This may be automatically called by the 3D GPU particle collision heightfield depending on its `GPUParticlesCollisionHeightField3D.update_mode`.
			"""
    pass

  def particles_collision_set_height_field_resolution(self, particles_collision:__core__.RID, resolution:int )->None:
    """
				Sets the heightmap `resolution` for the 3D GPU particles heightfield collision specified by the `particles_collision` RID. Equivalent to `GPUParticlesCollisionHeightField3D.resolution`.
			"""
    pass

  def particles_collision_set_height_field_mask(self, particles_collision:__core__.RID, mask:int)->None:
    """
				Sets the heightfield `mask` for the 3D GPU particles heightfield collision specified by the `particles_collision` RID. Equivalent to `GPUParticlesCollisionHeightField3D.heightfield_mask`.
			"""
    pass

  def fog_volume_create(self)->__core__.RID:
    """
				Creates a new fog volume and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `fog_volume_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `FogVolume`.
			"""
    pass

  def fog_volume_set_shape(self, fog_volume:__core__.RID, shape:int )->None:
    """
				Sets the shape of the fog volume to either `constant RenderingServer.FOG_VOLUME_SHAPE_ELLIPSOID`, `constant RenderingServer.FOG_VOLUME_SHAPE_CONE`, `constant RenderingServer.FOG_VOLUME_SHAPE_CYLINDER`, `constant RenderingServer.FOG_VOLUME_SHAPE_BOX` or `constant RenderingServer.FOG_VOLUME_SHAPE_WORLD`.
			"""
    pass

  def fog_volume_set_size(self, fog_volume:__core__.RID, size:__core__.Vector3)->None:
    """
				Sets the size of the fog volume when shape is `constant RenderingServer.FOG_VOLUME_SHAPE_ELLIPSOID`, `constant RenderingServer.FOG_VOLUME_SHAPE_CONE`, `constant RenderingServer.FOG_VOLUME_SHAPE_CYLINDER` or `constant RenderingServer.FOG_VOLUME_SHAPE_BOX`.
			"""
    pass

  def fog_volume_set_material(self, fog_volume:__core__.RID, material:__core__.RID)->None:
    """
				Sets the `Material` of the fog volume. Can be either a `FogMaterial` or a custom `ShaderMaterial`.
			"""
    pass

  def visibility_notifier_create(self)->__core__.RID:
    """
				Creates a new 3D visibility notifier object and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `visibility_notifier_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				To place in a scene, attach this notifier to an instance using `instance_set_base` using the returned RID.
				**Note:** The equivalent node is `VisibleOnScreenNotifier3D`.
			"""
    pass

  def visibility_notifier_set_aabb(self, notifier:__core__.RID, aabb:__core__.AABB)->None:
    """
"""
    pass

  def visibility_notifier_set_callbacks(self, notifier:__core__.RID, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None:
    """
"""
    pass

  def occluder_create(self)->__core__.RID:
    """
				Creates an occluder instance and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `occluder_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `Occluder3D` (not to be confused with the `OccluderInstance3D` node).
			"""
    pass

  def occluder_set_mesh(self, occluder:__core__.RID, vertices:__core__.PackedVector3Array, indices:__core__.PackedInt32Array)->None:
    """
				Sets the mesh data for the given occluder RID, which controls the shape of the occlusion culling that will be performed.
			"""
    pass

  def camera_create(self)->__core__.RID:
    """
				Creates a 3D camera and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `camera_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `Camera3D`.
			"""
    pass

  def camera_set_perspective(self, camera:__core__.RID, fovy_degrees:float, z_near:float, z_far:float)->None:
    """
				Sets camera to use perspective projection. Objects on the screen becomes smaller when they are far away.
			"""
    pass

  def camera_set_orthogonal(self, camera:__core__.RID, size:float, z_near:float, z_far:float)->None:
    """
				Sets camera to use orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.
			"""
    pass

  def camera_set_frustum(self, camera:__core__.RID, size:float, offset:__core__.Vector2, z_near:float, z_far:float)->None:
    """
				Sets camera to use frustum projection. This mode allows adjusting the `offset` argument to create "tilted frustum" effects.
			"""
    pass

  def camera_set_transform(self, camera:__core__.RID, transform:__core__.Transform3D)->None:
    """
				Sets `Transform3D` of camera.
			"""
    pass

  def camera_set_cull_mask(self, camera:__core__.RID, layers:int)->None:
    """
				Sets the cull mask associated with this camera. The cull mask describes which 3D layers are rendered by this camera. Equivalent to `Camera3D.cull_mask`.
			"""
    pass

  def camera_set_environment(self, camera:__core__.RID, env:__core__.RID)->None:
    """
				Sets the environment used by this camera. Equivalent to `Camera3D.environment`.
			"""
    pass

  def camera_set_camera_attributes(self, camera:__core__.RID, effects:__core__.RID)->None:
    """
				Sets the camera_attributes created with `camera_attributes_create` to the given camera.
			"""
    pass

  def camera_set_compositor(self, camera:__core__.RID, compositor:__core__.RID)->None:
    """
				Sets the compositor used by this camera. Equivalent to `Camera3D.compositor`.
			"""
    pass

  def camera_set_use_vertical_aspect(self, camera:__core__.RID, enable:bool)->None:
    """
				If `true`, preserves the horizontal aspect ratio which is equivalent to `constant Camera3D.KEEP_WIDTH`. If `false`, preserves the vertical aspect ratio which is equivalent to `constant Camera3D.KEEP_HEIGHT`.
			"""
    pass

  def viewport_create(self)->__core__.RID:
    """
				Creates an empty viewport and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `viewport_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `Viewport`.
			"""
    pass

  def viewport_set_use_xr(self, viewport:__core__.RID, use_xr:bool)->None:
    """
				If `true`, the viewport uses augmented or virtual reality technologies. See `XRInterface`.
			"""
    pass

  def viewport_set_size(self, viewport:__core__.RID, width:int, height:int)->None:
    """
				Sets the viewport's width and height in pixels.
			"""
    pass

  def viewport_set_active(self, viewport:__core__.RID, active:bool)->None:
    """
				If `true`, sets the viewport active, else sets it inactive.
			"""
    pass

  def viewport_set_parent_viewport(self, viewport:__core__.RID, parent_viewport:__core__.RID)->None:
    """
				Sets the viewport's parent to the viewport specified by the `parent_viewport` RID.
			"""
    pass

  def viewport_attach_to_screen(self, viewport:__core__.RID, rect:__core__.Rect2= __core__.Rect2.new0(), screen:int=0)->None:
    """
				Copies the viewport to a region of the screen specified by `rect`. If `viewport_set_render_direct_to_screen` is `true`, then the viewport does not use a framebuffer and the contents of the viewport are rendered directly to screen. However, note that the root viewport is drawn last, therefore it will draw over the screen. Accordingly, you must set the root viewport to an area that does not cover the area that you have attached this viewport to.
				For example, you can set the root viewport to not render at all with the following code:
				
				```gdscript
				func _ready():
					RenderingServer.viewport_attach_to_screen(get_viewport().get_viewport_rid(), Rect2())
					RenderingServer.viewport_attach_to_screen($Viewport.get_viewport_rid(), Rect2(0, 0, 600, 600))
				```
				
				Using this can result in significant optimization, especially on lower-end devices. However, it comes at the cost of having to manage your viewports manually. For further optimization, see `viewport_set_render_direct_to_screen`.
			"""
    pass

  def viewport_set_render_direct_to_screen(self, viewport:__core__.RID, enabled:bool)->None:
    """
				If `true`, render the contents of the viewport directly to screen. This allows a low-level optimization where you can skip drawing a viewport to the root viewport. While this optimization can result in a significant increase in speed (especially on older devices), it comes at a cost of usability. When this is enabled, you cannot read from the viewport or from the screen_texture. You also lose the benefit of certain window settings, such as the various stretch modes. Another consequence to be aware of is that in 2D the rendering happens in window coordinates, so if you have a viewport that is double the size of the window, and you set this, then only the portion that fits within the window will be drawn, no automatic scaling is possible, even if your game scene is significantly larger than the window size.
			"""
    pass

  def viewport_set_canvas_cull_mask(self, viewport:__core__.RID, canvas_cull_mask:int)->None:
    """
				Sets the rendering mask associated with this `Viewport`. Only `CanvasItem` nodes with a matching rendering visibility layer will be rendered by this `Viewport`.
			"""
    pass

  def viewport_set_scaling_3d_mode(self, viewport:__core__.RID, scaling_3d_mode:int )->None:
    """
				Sets the 3D resolution scaling mode. Bilinear scaling renders at different resolution to either undersample or supersample the viewport. FidelityFX Super Resolution 1.0, abbreviated to FSR, is an upscaling technology that produces high quality images at fast framerates by using a spatially aware upscaling algorithm. FSR is slightly more expensive than bilinear, but it produces significantly higher image quality. FSR should be used where possible.
			"""
    pass

  def viewport_set_scaling_3d_scale(self, viewport:__core__.RID, scale:float)->None:
    """
				Scales the 3D render buffer based on the viewport size uses an image filter specified in `enum ViewportScaling3DMode` to scale the output image to the full viewport size. Values lower than `1.0` can be used to speed up 3D rendering at the cost of quality (undersampling). Values greater than `1.0` are only valid for bilinear mode and can be used to improve 3D rendering quality at a high performance cost (supersampling). See also `enum ViewportMSAA` for multi-sample antialiasing, which is significantly cheaper but only smoothens the edges of polygons.
				When using FSR upscaling, AMD recommends exposing the following values as preset options to users "Ultra Quality: 0.77", "Quality: 0.67", "Balanced: 0.59", "Performance: 0.5" instead of exposing the entire scale.
			"""
    pass

  def viewport_set_fsr_sharpness(self, viewport:__core__.RID, sharpness:float)->None:
    """
				Determines how sharp the upscaled image will be when using the FSR upscaling mode. Sharpness halves with every whole number. Values go from 0.0 (sharpest) to 2.0. Values above 2.0 won't make a visible difference.
			"""
    pass

  def viewport_set_texture_mipmap_bias(self, viewport:__core__.RID, mipmap_bias:float)->None:
    """
				Affects the final texture sharpness by reading from a lower or higher mipmap (also called "texture LOD bias"). Negative values make mipmapped textures sharper but grainier when viewed at a distance, while positive values make mipmapped textures blurrier (even when up close). To get sharper textures at a distance without introducing too much graininess, set this between `-0.75` and `0.0`. Enabling temporal antialiasing (`ProjectSettings.rendering/anti_aliasing/quality/use_taa`) can help reduce the graininess visible when using negative mipmap bias.
				**Note:** When the 3D scaling mode is set to FSR 1.0, this value is used to adjust the automatic mipmap bias which is calculated internally based on the scale factor. The formula for this is `-log2(1.0 / scale) + mipmap_bias`.
			"""
    pass

  def viewport_set_anisotropic_filtering_level(self, viewport:__core__.RID, anisotropic_filtering_level:int )->None:
    """
				Sets the maximum number of samples to take when using anisotropic filtering on textures (as a power of two). A higher sample count will result in sharper textures at oblique angles, but is more expensive to compute. A value of `0` forcibly disables anisotropic filtering, even on materials where it is enabled.
				The anisotropic filtering level also affects decals and light projectors if they are configured to use anisotropic filtering. See `ProjectSettings.rendering/textures/decals/filter` and `ProjectSettings.rendering/textures/light_projectors/filter`.
				**Note:** In 3D, for this setting to have an effect, set `BaseMaterial3D.texture_filter` to `constant BaseMaterial3D.TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC` or `constant BaseMaterial3D.TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC` on materials.
				**Note:** In 2D, for this setting to have an effect, set `CanvasItem.texture_filter` to `constant CanvasItem.TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC` or `constant CanvasItem.TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC` on the `CanvasItem` node displaying the texture (or in `CanvasTexture`). However, anisotropic filtering is rarely useful in 2D, so only enable it for textures in 2D if it makes a meaningful visual difference.
			"""
    pass

  def viewport_set_update_mode(self, viewport:__core__.RID, update_mode:int )->None:
    """
				Sets when the viewport should be updated.
			"""
    pass

  def viewport_get_update_mode(self, viewport:__core__.RID)->int:
    """
				Returns the viewport's update mode.
				**Warning:** Calling this from any thread other than the rendering thread will be detrimental to performance.
			"""
    pass

  def viewport_set_clear_mode(self, viewport:__core__.RID, clear_mode:int )->None:
    """
				Sets the clear mode of a viewport.
			"""
    pass

  def viewport_get_render_target(self, viewport:__core__.RID)->__core__.RID:
    """
				Returns the render target for the viewport.
			"""
    pass

  def viewport_get_texture(self, viewport:__core__.RID)->__core__.RID:
    """
				Returns the viewport's last rendered frame.
			"""
    pass

  def viewport_set_disable_3d(self, viewport:__core__.RID, disable:bool)->None:
    """
				If `true`, the viewport's 3D elements are not rendered.
			"""
    pass

  def viewport_set_disable_2d(self, viewport:__core__.RID, disable:bool)->None:
    """
				If `true`, the viewport's canvas (i.e. 2D and GUI elements) is not rendered.
			"""
    pass

  def viewport_set_environment_mode(self, viewport:__core__.RID, mode:int )->None:
    """
				Sets the viewport's environment mode which allows enabling or disabling rendering of 3D environment over 2D canvas. When disabled, 2D will not be affected by the environment. When enabled, 2D will be affected by the environment if the environment background mode is `constant ENV_BG_CANVAS`. The default behavior is to inherit the setting from the viewport's parent. If the topmost parent is also set to `constant VIEWPORT_ENVIRONMENT_INHERIT`, then the behavior will be the same as if it was set to `constant VIEWPORT_ENVIRONMENT_ENABLED`.
			"""
    pass

  def viewport_attach_camera(self, viewport:__core__.RID, camera:__core__.RID)->None:
    """
				Sets a viewport's camera.
			"""
    pass

  def viewport_set_scenario(self, viewport:__core__.RID, scenario:__core__.RID)->None:
    """
				Sets a viewport's scenario. The scenario contains information about environment information, reflection atlas, etc.
			"""
    pass

  def viewport_attach_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None:
    """
				Sets a viewport's canvas.
			"""
    pass

  def viewport_remove_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None:
    """
				Detaches a viewport from a canvas.
			"""
    pass

  def viewport_set_snap_2d_transforms_to_pixel(self, viewport:__core__.RID, enabled:bool)->None:
    """
				If `true`, canvas item transforms (i.e. origin position) are snapped to the nearest pixel when rendering. This can lead to a crisper appearance at the cost of less smooth movement, especially when `Camera2D` smoothing is enabled. Equivalent to `ProjectSettings.rendering/2d/snap/snap_2d_transforms_to_pixel`.
			"""
    pass

  def viewport_set_snap_2d_vertices_to_pixel(self, viewport:__core__.RID, enabled:bool)->None:
    """
				If `true`, canvas item vertices (i.e. polygon points) are snapped to the nearest pixel when rendering. This can lead to a crisper appearance at the cost of less smooth movement, especially when `Camera2D` smoothing is enabled. Equivalent to `ProjectSettings.rendering/2d/snap/snap_2d_vertices_to_pixel`.
			"""
    pass

  def viewport_set_default_canvas_item_texture_filter(self, viewport:__core__.RID, filter:int )->None:
    """
				Sets the default texture filtering mode for the specified `viewport` RID.
			"""
    pass

  def viewport_set_default_canvas_item_texture_repeat(self, viewport:__core__.RID, repeat:int )->None:
    """
				Sets the default texture repeat mode for the specified `viewport` RID.
			"""
    pass

  def viewport_set_canvas_transform(self, viewport:__core__.RID, canvas:__core__.RID, offset:__core__.Transform2D)->None:
    """
				Sets the transformation of a viewport's canvas.
			"""
    pass

  def viewport_set_canvas_stacking(self, viewport:__core__.RID, canvas:__core__.RID, layer:int, sublayer:int)->None:
    """
				Sets the stacking order for a viewport's canvas.
				`layer` is the actual canvas layer, while `sublayer` specifies the stacking order of the canvas among those in the same layer.
				**Note:** `layer` should be between `constant CANVAS_LAYER_MIN` and `constant CANVAS_LAYER_MAX` (inclusive). Any other value will wrap around.
			"""
    pass

  def viewport_set_transparent_background(self, viewport:__core__.RID, enabled:bool)->None:
    """
				If `true`, the viewport renders its background as transparent.
			"""
    pass

  def viewport_set_global_canvas_transform(self, viewport:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets the viewport's global transformation matrix.
			"""
    pass

  def viewport_set_sdf_oversize_and_scale(self, viewport:__core__.RID, oversize:int , scale:int )->None:
    """
				Sets the viewport's 2D signed distance field `ProjectSettings.rendering/2d/sdf/oversize` and `ProjectSettings.rendering/2d/sdf/scale`. This is used when sampling the signed distance field in `CanvasItem` shaders as well as `GPUParticles2D` collision. This is _not_ used by SDFGI in 3D rendering.
			"""
    pass

  def viewport_set_positional_shadow_atlas_size(self, viewport:__core__.RID, size:int, use_16_bits:bool=False)->None:
    """
				Sets the `size` of the shadow atlas's images (used for omni and spot lights) on the viewport specified by the `viewport` RID. The value is rounded up to the nearest power of 2. If `use_16_bits` is `true`, use 16 bits for the omni/spot shadow depth map. Enabling this results in shadows having less precision and may result in shadow acne, but can lead to performance improvements on some devices.
				**Note:** If this is set to `0`, no positional shadows will be visible at all. This can improve performance significantly on low-end systems by reducing both the CPU and GPU load (as fewer draw calls are needed to draw the scene without shadows).
			"""
    pass

  def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport:__core__.RID, quadrant:int, subdivision:int)->None:
    """
				Sets the number of subdivisions to use in the specified shadow atlas `quadrant` for omni and spot shadows. See also `Viewport.set_positional_shadow_atlas_quadrant_subdiv`.
			"""
    pass

  def viewport_set_msaa_3d(self, viewport:__core__.RID, msaa:int )->None:
    """
				Sets the multisample antialiasing mode for 3D on the specified `viewport` RID. Equivalent to `ProjectSettings.rendering/anti_aliasing/quality/msaa_3d` or `Viewport.msaa_3d`.
			"""
    pass

  def viewport_set_msaa_2d(self, viewport:__core__.RID, msaa:int )->None:
    """
				Sets the multisample antialiasing mode for 2D/Canvas on the specified `viewport` RID. Equivalent to `ProjectSettings.rendering/anti_aliasing/quality/msaa_2d` or `Viewport.msaa_2d`.
			"""
    pass

  def viewport_set_use_hdr_2d(self, viewport:__core__.RID, enabled:bool)->None:
    """
				If `true`, 2D rendering will use a high dynamic range (HDR) format framebuffer matching the bit depth of the 3D framebuffer. When using the Forward+ renderer this will be an `RGBA16` framebuffer, while when using the Mobile renderer it will be an `RGB10_A2` framebuffer. Additionally, 2D rendering will take place in linear color space and will be converted to sRGB space immediately before blitting to the screen (if the Viewport is attached to the screen). Practically speaking, this means that the end result of the Viewport will not be clamped into the `0-1` range and can be used in 3D rendering without color space adjustments. This allows 2D rendering to take advantage of effects requiring high dynamic range (e.g. 2D glow) as well as substantially improves the appearance of effects requiring highly detailed gradients. This setting has the same effect as `Viewport.use_hdr_2d`.
				**Note:** This setting will have no effect when using the Compatibility renderer, which always renders in low dynamic range for performance reasons.
			"""
    pass

  def viewport_set_screen_space_aa(self, viewport:__core__.RID, mode:int )->None:
    """
				Sets the viewport's screen-space antialiasing mode. Equivalent to `ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa` or `Viewport.screen_space_aa`.
			"""
    pass

  def viewport_set_use_taa(self, viewport:__core__.RID, enable:bool)->None:
    """
				If `true`, use temporal antialiasing. Equivalent to `ProjectSettings.rendering/anti_aliasing/quality/use_taa` or `Viewport.use_taa`.
			"""
    pass

  def viewport_set_use_debanding(self, viewport:__core__.RID, enable:bool)->None:
    """
				If `true`, enables debanding on the specified viewport. Equivalent to `ProjectSettings.rendering/anti_aliasing/quality/use_debanding` or `Viewport.use_debanding`.
			"""
    pass

  def viewport_set_use_occlusion_culling(self, viewport:__core__.RID, enable:bool)->None:
    """
				If `true`, enables occlusion culling on the specified viewport. Equivalent to `ProjectSettings.rendering/occlusion_culling/use_occlusion_culling`.
			"""
    pass

  def viewport_set_occlusion_rays_per_thread(self, rays_per_thread:int)->None:
    """
				Sets the `ProjectSettings.rendering/occlusion_culling/occlusion_rays_per_thread` to use for occlusion culling. This parameter is global and cannot be set on a per-viewport basis.
			"""
    pass

  def viewport_set_occlusion_culling_build_quality(self, quality:int )->None:
    """
				Sets the `ProjectSettings.rendering/occlusion_culling/bvh_build_quality` to use for occlusion culling. This parameter is global and cannot be set on a per-viewport basis.
			"""
    pass

  def viewport_get_render_info(self, viewport:__core__.RID, type:int , info:int )->int:
    """
				Returns a statistic about the rendering engine which can be used for performance profiling. This is separated into render pass `type`s, each of them having the same `info`s you can query (different passes will return different values).
				See also `get_rendering_info`, which returns global information across all viewports.
				**Note:** Viewport rendering information is not available until at least 2 frames have been rendered by the engine. If rendering information is not available, `viewport_get_render_info` returns `0`. To print rendering information in `_ready()` successfully, use the following:
				```gdscript
				func _ready():
					for _i in 2:
						await get_tree().process_frame

					print(
							RenderingServer.viewport_get_render_info(get_viewport().get_viewport_rid(),
							RenderingServer.VIEWPORT_RENDER_INFO_TYPE_VISIBLE,
							RenderingServer.VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME)
					)
				```
			"""
    pass

  def viewport_set_debug_draw(self, viewport:__core__.RID, draw:int )->None:
    """
				Sets the debug draw mode of a viewport.
			"""
    pass

  def viewport_set_measure_render_time(self, viewport:__core__.RID, enable:bool)->None:
    """
				Sets the measurement for the given `viewport` RID (obtained using `Viewport.get_viewport_rid`). Once enabled, `viewport_get_measured_render_time_cpu` and `viewport_get_measured_render_time_gpu` will return values greater than `0.0` when queried with the given `viewport`.
			"""
    pass

  def viewport_get_measured_render_time_cpu(self, viewport:__core__.RID)->float:
    """
				Returns the CPU time taken to render the last frame in milliseconds. This _only_ includes time spent in rendering-related operations; scripts' `_process` functions and other engine subsystems are not included in this readout. To get a complete readout of CPU time spent to render the scene, sum the render times of all viewports that are drawn every frame plus `get_frame_setup_time_cpu`. Unlike `Engine.get_frames_per_second`, this method will accurately reflect CPU utilization even if framerate is capped via V-Sync or `Engine.max_fps`. See also `viewport_get_measured_render_time_gpu`.
				**Note:** Requires measurements to be enabled on the specified `viewport` using `viewport_set_measure_render_time`. Otherwise, this method returns `0.0`.
			"""
    pass

  def viewport_get_measured_render_time_gpu(self, viewport:__core__.RID)->float:
    """
				Returns the GPU time taken to render the last frame in milliseconds. To get a complete readout of GPU time spent to render the scene, sum the render times of all viewports that are drawn every frame. Unlike `Engine.get_frames_per_second`, this method accurately reflects GPU utilization even if framerate is capped via V-Sync or `Engine.max_fps`. See also `viewport_get_measured_render_time_cpu`.
				**Note:** Requires measurements to be enabled on the specified `viewport` using `viewport_set_measure_render_time`. Otherwise, this method returns `0.0`.
				**Note:** When GPU utilization is low enough during a certain period of time, GPUs will decrease their power state (which in turn decreases core and memory clock speeds). This can cause the reported GPU time to increase if GPU utilization is kept low enough by a framerate cap (compared to what it would be at the GPU's highest power state). Keep this in mind when benchmarking using `viewport_get_measured_render_time_gpu`. This behavior can be overridden in the graphics driver settings at the cost of higher power usage.
			"""
    pass

  def viewport_set_vrs_mode(self, viewport:__core__.RID, mode:int )->None:
    """
				Sets the Variable Rate Shading (VRS) mode for the viewport. If the GPU does not support VRS, this property is ignored. Equivalent to `ProjectSettings.rendering/vrs/mode`.
			"""
    pass

  def viewport_set_vrs_update_mode(self, viewport:__core__.RID, mode:int )->None:
    """
				Sets the update mode for Variable Rate Shading (VRS) for the viewport. VRS requires the input texture to be converted to the format usable by the VRS method supported by the hardware. The update mode defines how often this happens. If the GPU does not support VRS, or VRS is not enabled, this property is ignored.
				If set to `constant RenderingServer.VIEWPORT_VRS_UPDATE_ONCE`, the input texture is copied once and the mode is changed to `constant RenderingServer.VIEWPORT_VRS_UPDATE_DISABLED`.
			"""
    pass

  def viewport_set_vrs_texture(self, viewport:__core__.RID, texture:__core__.RID)->None:
    """
				The texture to use when the VRS mode is set to `constant RenderingServer.VIEWPORT_VRS_TEXTURE`. Equivalent to `ProjectSettings.rendering/vrs/texture`.
			"""
    pass

  def sky_create(self)->__core__.RID:
    """
				Creates an empty sky and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `sky_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
			"""
    pass

  def sky_set_radiance_size(self, sky:__core__.RID, radiance_size:int)->None:
    """
				Sets the `radiance_size` of the sky specified by the `sky` RID (in pixels). Equivalent to `Sky.radiance_size`.
			"""
    pass

  def sky_set_mode(self, sky:__core__.RID, mode:int )->None:
    """
				Sets the process `mode` of the sky specified by the `sky` RID. Equivalent to `Sky.process_mode`.
			"""
    pass

  def sky_set_material(self, sky:__core__.RID, material:__core__.RID)->None:
    """
				Sets the material that the sky uses to render the background, ambient and reflection maps.
			"""
    pass

  def sky_bake_panorama(self, sky:__core__.RID, energy:float, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image:
    """
				Generates and returns an `Image` containing the radiance map for the specified `sky` RID. This supports built-in sky material and custom sky shaders. If `bake_irradiance` is `true`, the irradiance map is saved instead of the radiance map. The radiance map is used to render reflected light, while the irradiance map is used to render ambient light. See also `environment_bake_panorama`.
				**Note:** The image is saved in linear color space without any tonemapping performed, which means it will look too dark if viewed directly in an image editor. `energy` values above `1.0` can be used to brighten the resulting image.
				**Note:** `size` should be a 2:1 aspect ratio for the generated panorama to have square pixels. For radiance maps, there is no point in using a height greater than `Sky.radiance_size`, as it won't increase detail. Irradiance maps only contain low-frequency data, so there is usually no point in going past a size of 128×64 pixels when saving an irradiance map.
			"""
    pass

  def compositor_effect_create(self)->__core__.RID:
    """
				Creates a new rendering effect and adds it to the RenderingServer. It can be accessed with the RID that is returned.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
			"""
    pass

  def compositor_effect_set_enabled(self, effect:__core__.RID, enabled:bool)->None:
    """
				Enables/disables this rendering effect.
			"""
    pass

  def compositor_effect_set_callback(self, effect:__core__.RID, callback_type:int , callback:__core__.Callable)->None:
    """
				Sets the callback type (`callback_type`) and callback method(`callback`) for this rendering effect.
			"""
    pass

  def compositor_effect_set_flag(self, effect:__core__.RID, flag:int , set:bool)->None:
    """
				Sets the flag (`flag`) for this rendering effect to `true` or `false` (`set`).
			"""
    pass

  def compositor_create(self)->__core__.RID:
    """
				Creates a new compositor and adds it to the RenderingServer. It can be accessed with the RID that is returned.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
			"""
    pass

  def compositor_set_compositor_effects(self, compositor:__core__.RID, effects:__core__.Array)->None:
    """
				Sets the compositor effects for the specified compositor RID. `effects` should be an array containing RIDs created with `compositor_effect_create`.
			"""
    pass

  def environment_create(self)->__core__.RID:
    """
				Creates an environment and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `environment_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `Environment`.
			"""
    pass

  def environment_set_background(self, env:__core__.RID, bg:int )->None:
    """
				Sets the environment's background mode. Equivalent to `Environment.background_mode`.
			"""
    pass

  def environment_set_camera_id(self, env:__core__.RID, id:int)->None:
    """
				Sets the camera ID to be used as environment background.
			"""
    pass

  def environment_set_sky(self, env:__core__.RID, sky:__core__.RID)->None:
    """
				Sets the `Sky` to be used as the environment's background when using _BGMode_ sky. Equivalent to `Environment.sky`.
			"""
    pass

  def environment_set_sky_custom_fov(self, env:__core__.RID, scale:float)->None:
    """
				Sets a custom field of view for the background `Sky`. Equivalent to `Environment.sky_custom_fov`.
			"""
    pass

  def environment_set_sky_orientation(self, env:__core__.RID, orientation:__core__.Basis)->None:
    """
				Sets the rotation of the background `Sky` expressed as a `Basis`. Equivalent to `Environment.sky_rotation`, where the rotation vector is used to construct the `Basis`.
			"""
    pass

  def environment_set_bg_color(self, env:__core__.RID, color:__core__.Color)->None:
    """
				Color displayed for clear areas of the scene. Only effective if using the `constant ENV_BG_COLOR` background mode.
			"""
    pass

  def environment_set_bg_energy(self, env:__core__.RID, multiplier:float, exposure_value:float)->None:
    """
				Sets the intensity of the background color.
			"""
    pass

  def environment_set_canvas_max_layer(self, env:__core__.RID, max_layer:int)->None:
    """
				Sets the maximum layer to use if using Canvas background mode.
			"""
    pass

  def environment_set_ambient_light(self, env:__core__.RID, color:__core__.Color, ambient:int =0, energy:float=1.0, sky_contribution:float=0.0, reflection_source:int =0)->None:
    """
				Sets the values to be used for ambient light rendering. See `Environment` for more details.
			"""
    pass

  def environment_set_glow(self, env:__core__.RID, enable:bool, levels:__core__.PackedFloat32Array, intensity:float, strength:float, mix:float, bloom_threshold:float, blend_mode:int , hdr_bleed_threshold:float, hdr_bleed_scale:float, hdr_luminance_cap:float, glow_map_strength:float, glow_map:__core__.RID)->None:
    """
				Configures glow for the specified environment RID. See `glow_*` properties in `Environment` for more information.
			"""
    pass

  def environment_set_tonemap(self, env:__core__.RID, tone_mapper:int , exposure:float, white:float)->None:
    """
				Sets the variables to be used with the "tonemap" post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_adjustment(self, env:__core__.RID, enable:bool, brightness:float, contrast:float, saturation:float, use_1d_color_correction:bool, color_correction:__core__.RID)->None:
    """
				Sets the values to be used with the "adjustments" post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_ssr(self, env:__core__.RID, enable:bool, max_steps:int, fade_in:float, fade_out:float, depth_tolerance:float)->None:
    """
				Sets the variables to be used with the screen-space reflections (SSR) post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_ssao(self, env:__core__.RID, enable:bool, radius:float, intensity:float, power:float, detail:float, horizon:float, sharpness:float, light_affect:float, ao_channel_affect:float)->None:
    """
				Sets the variables to be used with the screen-space ambient occlusion (SSAO) post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_fog(self, env:__core__.RID, enable:bool, light_color:__core__.Color, light_energy:float, sun_scatter:float, density:float, height:float, height_density:float, aerial_perspective:float, sky_affect:float, fog_mode:int =0)->None:
    """
				Configures fog for the specified environment RID. See `fog_*` properties in `Environment` for more information.
			"""
    pass

  def environment_set_sdfgi(self, env:__core__.RID, enable:bool, cascades:int, min_cell_size:float, y_scale:int , use_occlusion:bool, bounce_feedback:float, read_sky:bool, energy:float, normal_bias:float, probe_bias:float)->None:
    """
				Configures signed distance field global illumination for the specified environment RID. See `sdfgi_*` properties in `Environment` for more information.
			"""
    pass

  def environment_set_volumetric_fog(self, env:__core__.RID, enable:bool, density:float, albedo:__core__.Color, emission:__core__.Color, emission_energy:float, anisotropy:float, length:float, p_detail_spread:float, gi_inject:float, temporal_reprojection:bool, temporal_reprojection_amount:float, ambient_inject:float, sky_affect:float)->None:
    """
				Sets the variables to be used with the volumetric fog post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_glow_set_use_bicubic_upscale(self, enable:bool)->None:
    """
				If `enable` is `true`, enables bicubic upscaling for glow which improves quality at the cost of performance. Equivalent to `ProjectSettings.rendering/environment/glow/upscale_mode`.
				**Note:** This setting is only effective when using the Forward+ or Mobile rendering methods, as Compatibility uses a different glow implementation.
			"""
    pass

  def environment_set_ssr_roughness_quality(self, quality:int )->None:
    """
"""
    pass

  def environment_set_ssao_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None:
    """
				Sets the quality level of the screen-space ambient occlusion (SSAO) post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_ssil_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None:
    """
				Sets the quality level of the screen-space indirect lighting (SSIL) post-process effect. See `Environment` for more details.
			"""
    pass

  def environment_set_sdfgi_ray_count(self, ray_count:int )->None:
    """
				Sets the number of rays to throw per frame when computing signed distance field global illumination. Equivalent to `ProjectSettings.rendering/global_illumination/sdfgi/probe_ray_count`.
			"""
    pass

  def environment_set_sdfgi_frames_to_converge(self, frames:int )->None:
    """
				Sets the number of frames to use for converging signed distance field global illumination. Equivalent to `ProjectSettings.rendering/global_illumination/sdfgi/frames_to_converge`.
			"""
    pass

  def environment_set_sdfgi_frames_to_update_light(self, frames:int )->None:
    """
				Sets the update speed for dynamic lights' indirect lighting when computing signed distance field global illumination. Equivalent to `ProjectSettings.rendering/global_illumination/sdfgi/frames_to_update_lights`.
			"""
    pass

  def environment_set_volumetric_fog_volume_size(self, size:int, depth:int)->None:
    """
				Sets the resolution of the volumetric fog's froxel buffer. `size` is modified by the screen's aspect ratio and then used to set the width and height of the buffer. While `depth` is directly used to set the depth of the buffer.
			"""
    pass

  def environment_set_volumetric_fog_filter_active(self, active:bool)->None:
    """
				Enables filtering of the volumetric fog scattering buffer. This results in much smoother volumes with very few under-sampling artifacts.
			"""
    pass

  def environment_bake_panorama(self, environment:__core__.RID, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image:
    """
				Generates and returns an `Image` containing the radiance map for the specified `environment` RID's sky. This supports built-in sky material and custom sky shaders. If `bake_irradiance` is `true`, the irradiance map is saved instead of the radiance map. The radiance map is used to render reflected light, while the irradiance map is used to render ambient light. See also `sky_bake_panorama`.
				**Note:** The image is saved in linear color space without any tonemapping performed, which means it will look too dark if viewed directly in an image editor.
				**Note:** `size` should be a 2:1 aspect ratio for the generated panorama to have square pixels. For radiance maps, there is no point in using a height greater than `Sky.radiance_size`, as it won't increase detail. Irradiance maps only contain low-frequency data, so there is usually no point in going past a size of 128×64 pixels when saving an irradiance map.
			"""
    pass

  def screen_space_roughness_limiter_set_active(self, enable:bool, amount:float, limit:float)->None:
    """
				Sets the screen-space roughness limiter parameters, such as whether it should be enabled and its thresholds. Equivalent to `ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/enabled`, `ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/amount` and `ProjectSettings.rendering/anti_aliasing/screen_space_roughness_limiter/limit`.
			"""
    pass

  def sub_surface_scattering_set_quality(self, quality:int )->None:
    """
				Sets `ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_quality` to use when rendering materials that have subsurface scattering enabled.
			"""
    pass

  def sub_surface_scattering_set_scale(self, scale:float, depth_scale:float)->None:
    """
				Sets the `ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_scale` and `ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_depth_scale` to use when rendering materials that have subsurface scattering enabled.
			"""
    pass

  def camera_attributes_create(self)->__core__.RID:
    """
				Creates a camera attributes object and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `camera_attributes_` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `CameraAttributes`.
			"""
    pass

  def camera_attributes_set_dof_blur_quality(self, quality:int , use_jitter:bool)->None:
    """
				Sets the quality level of the DOF blur effect to `quality`. `use_jitter` can be used to jitter samples taken during the blur pass to hide artifacts at the cost of looking more fuzzy.
			"""
    pass

  def camera_attributes_set_dof_blur_bokeh_shape(self, shape:int )->None:
    """
				Sets the shape of the DOF bokeh pattern to `shape`. Different shapes may be used to achieve artistic effect, or to meet performance targets.
			"""
    pass

  def camera_attributes_set_dof_blur(self, camera_attributes:__core__.RID, far_enable:bool, far_distance:float, far_transition:float, near_enable:bool, near_distance:float, near_transition:float, amount:float)->None:
    """
				Sets the parameters to use with the DOF blur effect. These parameters take on the same meaning as their counterparts in `CameraAttributesPractical`.
			"""
    pass

  def camera_attributes_set_exposure(self, camera_attributes:__core__.RID, multiplier:float, normalization:float)->None:
    """
				Sets the exposure values that will be used by the renderers. The normalization amount is used to bake a given Exposure Value (EV) into rendering calculations to reduce the dynamic range of the scene.
				The normalization factor can be calculated from exposure value (EV100) as follows:
				```gdscript
				func get_exposure_normalization(ev100: float):
					return 1.0 / (pow(2.0, ev100) * 1.2)
				```
				The exposure value can be calculated from aperture (in f-stops), shutter speed (in seconds), and sensitivity (in ISO) as follows:
				```gdscript
				func get_exposure(aperture: float, shutter_speed: float, sensitivity: float):
					return log((aperture * aperture) / shutter_speed * (100.0 / sensitivity)) / log(2)
				```
			"""
    pass

  def camera_attributes_set_auto_exposure(self, camera_attributes:__core__.RID, enable:bool, min_sensitivity:float, max_sensitivity:float, speed:float, scale:float)->None:
    """
				Sets the parameters to use with the auto-exposure effect. These parameters take on the same meaning as their counterparts in `CameraAttributes` and `CameraAttributesPractical`.
			"""
    pass

  def scenario_create(self)->__core__.RID:
    """
				Creates a scenario and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `scenario_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				The scenario is the 3D world that all the visual instances exist in.
			"""
    pass

  def scenario_set_environment(self, scenario:__core__.RID, environment:__core__.RID)->None:
    """
				Sets the environment that will be used with this scenario. See also `Environment`.
			"""
    pass

  def scenario_set_fallback_environment(self, scenario:__core__.RID, environment:__core__.RID)->None:
    """
				Sets the fallback environment to be used by this scenario. The fallback environment is used if no environment is set. Internally, this is used by the editor to provide a default environment.
			"""
    pass

  def scenario_set_camera_attributes(self, scenario:__core__.RID, effects:__core__.RID)->None:
    """
				Sets the camera attributes (`effects`) that will be used with this scenario. See also `CameraAttributes`.
			"""
    pass

  def scenario_set_compositor(self, scenario:__core__.RID, compositor:__core__.RID)->None:
    """
				Sets the compositor (`compositor`) that will be used with this scenario. See also `Compositor`.
			"""
    pass

  def instance_create2(self, base:__core__.RID, scenario:__core__.RID)->__core__.RID:
    """
				Creates a visual instance, adds it to the RenderingServer, and sets both base and scenario. It can be accessed with the RID that is returned. This RID will be used in all `instance_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method. This is a shorthand for using `instance_create` and setting the base and scenario manually.
			"""
    pass

  def instance_create(self)->__core__.RID:
    """
				Creates a visual instance and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `instance_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				An instance is a way of placing a 3D object in the scenario. Objects like particles, meshes, reflection probes and decals need to be associated with an instance to be visible in the scenario using `instance_set_base`.
				**Note:** The equivalent node is `VisualInstance3D`.
			"""
    pass

  def instance_set_base(self, instance:__core__.RID, base:__core__.RID)->None:
    """
				Sets the base of the instance. A base can be any of the 3D objects that are created in the RenderingServer that can be displayed. For example, any of the light types, mesh, multimesh, particle system, reflection probe, decal, lightmap, voxel GI and visibility notifiers are all types that can be set as the base of an instance in order to be displayed in the scenario.
			"""
    pass

  def instance_set_scenario(self, instance:__core__.RID, scenario:__core__.RID)->None:
    """
				Sets the scenario that the instance is in. The scenario is the 3D world that the objects will be displayed in.
			"""
    pass

  def instance_set_layer_mask(self, instance:__core__.RID, mask:int)->None:
    """
				Sets the render layers that this instance will be drawn to. Equivalent to `VisualInstance3D.layers`.
			"""
    pass

  def instance_set_pivot_data(self, instance:__core__.RID, sorting_offset:float, use_aabb_center:bool)->None:
    """
				Sets the sorting offset and switches between using the bounding box or instance origin for depth sorting.
			"""
    pass

  def instance_set_transform(self, instance:__core__.RID, transform:__core__.Transform3D)->None:
    """
				Sets the world space transform of the instance. Equivalent to `Node3D.global_transform`.
			"""
    pass

  def instance_set_interpolated(self, instance:__core__.RID, interpolated:bool)->None:
    """"""
    pass

  def instance_reset_physics_interpolation(self, instance:__core__.RID)->None:
    """"""
    pass

  def instance_attach_object_instance_id(self, instance:__core__.RID, id:int)->None:
    """
				Attaches a unique Object ID to instance. Object ID must be attached to instance for proper culling with `instances_cull_aabb`, `instances_cull_convex`, and `instances_cull_ray`.
			"""
    pass

  def instance_set_blend_shape_weight(self, instance:__core__.RID, shape:int, weight:float)->None:
    """
				Sets the weight for a given blend shape associated with this instance.
			"""
    pass

  def instance_set_surface_override_material(self, instance:__core__.RID, surface:int, material:__core__.RID)->None:
    """
				Sets the override material of a specific surface. Equivalent to `MeshInstance3D.set_surface_override_material`.
			"""
    pass

  def instance_set_visible(self, instance:__core__.RID, visible:bool)->None:
    """
				Sets whether an instance is drawn or not. Equivalent to `Node3D.visible`.
			"""
    pass

  def instance_geometry_set_transparency(self, instance:__core__.RID, transparency:float)->None:
    """
				Sets the transparency for the given geometry instance. Equivalent to `GeometryInstance3D.transparency`.
				A transparency of `0.0` is fully opaque, while `1.0` is fully transparent. Values greater than `0.0` (exclusive) will force the geometry's materials to go through the transparent pipeline, which is slower to render and can exhibit rendering issues due to incorrect transparency sorting. However, unlike using a transparent material, setting `transparency` to a value greater than `0.0` (exclusive) will _not_ disable shadow rendering.
				In spatial shaders, `1.0 - transparency` is set as the default value of the `ALPHA` built-in.
				**Note:** `transparency` is clamped between `0.0` and `1.0`, so this property cannot be used to make transparent materials more opaque than they originally are.
			"""
    pass

  def instance_set_custom_aabb(self, instance:__core__.RID, aabb:__core__.AABB)->None:
    """
				Sets a custom AABB to use when culling objects from the view frustum. Equivalent to setting `GeometryInstance3D.custom_aabb`.
			"""
    pass

  def instance_attach_skeleton(self, instance:__core__.RID, skeleton:__core__.RID)->None:
    """
				Attaches a skeleton to an instance. Removes the previous skeleton from the instance.
			"""
    pass

  def instance_set_extra_visibility_margin(self, instance:__core__.RID, margin:float)->None:
    """
				Sets a margin to increase the size of the AABB when culling objects from the view frustum. This allows you to avoid culling objects that fall outside the view frustum. Equivalent to `GeometryInstance3D.extra_cull_margin`.
			"""
    pass

  def instance_set_visibility_parent(self, instance:__core__.RID, parent:__core__.RID)->None:
    """
				Sets the visibility parent for the given instance. Equivalent to `Node3D.visibility_parent`.
			"""
    pass

  def instance_set_ignore_culling(self, instance:__core__.RID, enabled:bool)->None:
    """
				If `true`, ignores both frustum and occlusion culling on the specified 3D geometry instance. This is not the same as `GeometryInstance3D.ignore_occlusion_culling`, which only ignores occlusion culling and leaves frustum culling intact.
			"""
    pass

  def instance_geometry_set_flag(self, instance:__core__.RID, flag:int , enabled:bool)->None:
    """
				Sets the `flag` for a given `instance` to `enabled`.
			"""
    pass

  def instance_geometry_set_cast_shadows_setting(self, instance:__core__.RID, shadow_casting_setting:int )->None:
    """
				Sets the shadow casting setting. Equivalent to `GeometryInstance3D.cast_shadow`.
			"""
    pass

  def instance_geometry_set_material_override(self, instance:__core__.RID, material:__core__.RID)->None:
    """
				Sets a material that will override the material for all surfaces on the mesh associated with this instance. Equivalent to `GeometryInstance3D.material_override`.
			"""
    pass

  def instance_geometry_set_material_overlay(self, instance:__core__.RID, material:__core__.RID)->None:
    """
				Sets a material that will be rendered for all surfaces on top of active materials for the mesh associated with this instance. Equivalent to `GeometryInstance3D.material_overlay`.
			"""
    pass

  def instance_geometry_set_visibility_range(self, instance:__core__.RID, min:float, max:float, min_margin:float, max_margin:float, fade_mode:int )->None:
    """
				Sets the visibility range values for the given geometry instance. Equivalent to `GeometryInstance3D.visibility_range_begin` and related properties.
			"""
    pass

  def instance_geometry_set_lightmap(self, instance:__core__.RID, lightmap:__core__.RID, lightmap_uv_scale:__core__.Rect2, lightmap_slice:int)->None:
    """
				Sets the lightmap GI instance to use for the specified 3D geometry instance. The lightmap UV scale for the specified instance (equivalent to `GeometryInstance3D.gi_lightmap_scale`) and lightmap atlas slice must also be specified.
			"""
    pass

  def instance_geometry_set_lod_bias(self, instance:__core__.RID, lod_bias:float)->None:
    """
				Sets the level of detail bias to use when rendering the specified 3D geometry instance. Higher values result in higher detail from further away. Equivalent to `GeometryInstance3D.lod_bias`.
			"""
    pass

  def instance_geometry_set_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str, value:Any)->None:
    """
				Sets the per-instance shader uniform on the specified 3D geometry instance. Equivalent to `GeometryInstance3D.set_instance_shader_parameter`.
			"""
    pass

  def instance_geometry_get_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str)->Any:
    """
				Returns the value of the per-instance shader uniform from the specified 3D geometry instance. Equivalent to `GeometryInstance3D.get_instance_shader_parameter`.
				**Note:** Per-instance shader parameter names are case-sensitive.
			"""
    pass

  def instance_geometry_get_shader_parameter_default_value(self, instance:__core__.RID, parameter:__core__.StringName|str)->Any:
    """
				Returns the default value of the per-instance shader uniform from the specified 3D geometry instance. Equivalent to `GeometryInstance3D.get_instance_shader_parameter`.
			"""
    pass

  def instance_geometry_get_shader_parameter_list(self, instance:__core__.RID)->typedarray::Dictionary:
    """
				Returns a dictionary of per-instance shader uniform names of the per-instance shader uniform from the specified 3D geometry instance. The returned dictionary is in PropertyInfo format, with the keys `name`, `class_name`, `type`, `hint`, `hint_string` and `usage`. Equivalent to `GeometryInstance3D.get_instance_shader_parameter`.
			"""
    pass

  def instances_cull_aabb(self, aabb:__core__.AABB, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array:
    """
				Returns an array of object IDs intersecting with the provided AABB. Only 3D nodes that inherit from `VisualInstance3D` are considered, such as `MeshInstance3D` or `DirectionalLight3D`. Use `@GlobalScope.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World3D` you want to query. This forces an update for all resources queued to update.
				**Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.
			"""
    pass

  def instances_cull_ray(self, from_:__core__.Vector3, to:__core__.Vector3, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array:
    """
				Returns an array of object IDs intersecting with the provided 3D ray. Only 3D nodes that inherit from `VisualInstance3D` are considered, such as `MeshInstance3D` or `DirectionalLight3D`. Use `@GlobalScope.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World3D` you want to query. This forces an update for all resources queued to update.
				**Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.
			"""
    pass

  def instances_cull_convex(self, convex:__core__.Array, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array:
    """
				Returns an array of object IDs intersecting with the provided convex shape. Only 3D nodes that inherit from `VisualInstance3D` are considered, such as `MeshInstance3D` or `DirectionalLight3D`. Use `@GlobalScope.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World3D` you want to query. This forces an update for all resources queued to update.
				**Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision.
			"""
    pass

  def bake_render_uv2(self, base:__core__.RID, material_overrides:__core__.Array, image_size:__core__.Vector2i)->typedarray::Image:
    """
				Bakes the material data of the Mesh passed in the `base` parameter with optional `material_overrides` to a set of `Image`s of size `image_size`. Returns an array of `Image`s containing material properties as specified in `enum BakeChannels`.
			"""
    pass

  def canvas_create(self)->__core__.RID:
    """
				Creates a canvas and returns the assigned `RID`. It can be accessed with the RID that is returned. This RID will be used in all `canvas_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				Canvas has no `Resource` or `Node` equivalent.
			"""
    pass

  def canvas_set_item_mirroring(self, canvas:__core__.RID, item:__core__.RID, mirroring:__core__.Vector2)->None:
    """
				A copy of the canvas item will be drawn with a local offset of the `mirroring`.
				**Note:** This is equivalent to calling `canvas_set_item_repeat` like `canvas_set_item_repeat(item, mirroring, 1)`, with an additional check ensuring `canvas` is a parent of `item`.
			"""
    pass

  def canvas_set_item_repeat(self, item:__core__.RID, repeat_size:__core__.Vector2, repeat_times:int)->None:
    """
				A copy of the canvas item will be drawn with a local offset of the `repeat_size` by the number of times of the `repeat_times`. As the `repeat_times` increases, the copies will spread away from the origin texture.
			"""
    pass

  def canvas_set_modulate(self, canvas:__core__.RID, color:__core__.Color)->None:
    """
				Modulates all colors in the given canvas.
			"""
    pass

  def canvas_set_disable_scale(self, disable:bool)->None:
    """
"""
    pass

  def canvas_texture_create(self)->__core__.RID:
    """
				Creates a canvas texture and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_texture_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method. See also `texture_2d_create`.
				**Note:** The equivalent resource is `CanvasTexture` and is only meant to be used in 2D rendering, not 3D.
			"""
    pass

  def canvas_texture_set_channel(self, canvas_texture:__core__.RID, channel:int , texture:__core__.RID)->None:
    """
				Sets the `channel`'s `texture` for the canvas texture specified by the `canvas_texture` RID. Equivalent to `CanvasTexture.diffuse_texture`, `CanvasTexture.normal_texture` and `CanvasTexture.specular_texture`.
			"""
    pass

  def canvas_texture_set_shading_parameters(self, canvas_texture:__core__.RID, base_color:__core__.Color, shininess:float)->None:
    """
				Sets the `base_color` and `shininess` to use for the canvas texture specified by the `canvas_texture` RID. Equivalent to `CanvasTexture.specular_color` and `CanvasTexture.specular_shininess`.
			"""
    pass

  def canvas_texture_set_texture_filter(self, canvas_texture:__core__.RID, filter:int )->None:
    """
				Sets the texture `filter` mode to use for the canvas texture specified by the `canvas_texture` RID.
			"""
    pass

  def canvas_texture_set_texture_repeat(self, canvas_texture:__core__.RID, repeat:int )->None:
    """
				Sets the texture `repeat` mode to use for the canvas texture specified by the `canvas_texture` RID.
			"""
    pass

  def canvas_item_create(self)->__core__.RID:
    """
				Creates a new CanvasItem instance and returns its `RID`. It can be accessed with the RID that is returned. This RID will be used in all `canvas_item_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `CanvasItem`.
			"""
    pass

  def canvas_item_set_parent(self, item:__core__.RID, parent:__core__.RID)->None:
    """
				Sets a parent `CanvasItem` to the `CanvasItem`. The item will inherit transform, modulation and visibility from its parent, like `CanvasItem` nodes in the scene tree.
			"""
    pass

  def canvas_item_set_default_texture_filter(self, item:__core__.RID, filter:int )->None:
    """
				Sets the default texture filter mode for the canvas item specified by the `item` RID. Equivalent to `CanvasItem.texture_filter`.
			"""
    pass

  def canvas_item_set_default_texture_repeat(self, item:__core__.RID, repeat:int )->None:
    """
				Sets the default texture repeat mode for the canvas item specified by the `item` RID. Equivalent to `CanvasItem.texture_repeat`.
			"""
    pass

  def canvas_item_set_visible(self, item:__core__.RID, visible:bool)->None:
    """
				Sets the visibility of the `CanvasItem`.
			"""
    pass

  def canvas_item_set_light_mask(self, item:__core__.RID, mask:int)->None:
    """
				Sets the light `mask` for the canvas item specified by the `item` RID. Equivalent to `CanvasItem.light_mask`.
			"""
    pass

  def canvas_item_set_visibility_layer(self, item:__core__.RID, visibility_layer:int)->None:
    """
				Sets the rendering visibility layer associated with this `CanvasItem`. Only `Viewport` nodes with a matching rendering mask will render this `CanvasItem`.
			"""
    pass

  def canvas_item_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets the `transform` of the canvas item specified by the `item` RID. This affects where and how the item will be drawn. Child canvas items' transforms are multiplied by their parent's transform. Equivalent to `Node2D.transform`.
			"""
    pass

  def canvas_item_set_clip(self, item:__core__.RID, clip:bool)->None:
    """
				If `clip` is `true`, makes the canvas item specified by the `item` RID not draw anything outside of its rect's coordinates. This clipping is fast, but works only with axis-aligned rectangles. This means that rotation is ignored by the clipping rectangle. For more advanced clipping shapes, use `canvas_item_set_canvas_group_mode` instead.
				**Note:** The equivalent node functionality is found in `Label.clip_text`, `RichTextLabel` (always enabled) and more.
			"""
    pass

  def canvas_item_set_distance_field_mode(self, item:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, enables multichannel signed distance field rendering mode for the canvas item specified by the `item` RID. This is meant to be used for font rendering, or with specially generated images using `url=https://github.com/Chlumsky/msdfgen`msdfgen`/url`.
			"""
    pass

  def canvas_item_set_custom_rect(self, item:__core__.RID, use_custom_rect:bool, rect:__core__.Rect2= __core__.Rect2.new0())->None:
    """
				If `use_custom_rect` is `true`, sets the custom visibility rectangle (used for culling) to `rect` for the canvas item specified by `item`. Setting a custom visibility rect can reduce CPU load when drawing lots of 2D instances. If `use_custom_rect` is `false`, automatically computes a visibility rectangle based on the canvas item's draw commands.
			"""
    pass

  def canvas_item_set_modulate(self, item:__core__.RID, color:__core__.Color)->None:
    """
				Multiplies the color of the canvas item specified by the `item` RID, while affecting its children. See also `canvas_item_set_self_modulate`. Equivalent to `CanvasItem.modulate`.
			"""
    pass

  def canvas_item_set_self_modulate(self, item:__core__.RID, color:__core__.Color)->None:
    """
				Multiplies the color of the canvas item specified by the `item` RID, without affecting its children. See also `canvas_item_set_modulate`. Equivalent to `CanvasItem.self_modulate`.
			"""
    pass

  def canvas_item_set_draw_behind_parent(self, item:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, draws the canvas item specified by the `item` RID behind its parent. Equivalent to `CanvasItem.show_behind_parent`.
			"""
    pass

  def canvas_item_set_interpolated(self, item:__core__.RID, interpolated:bool)->None:
    """
				If `interpolated` is `true`, turns on physics interpolation for the canvas item.
			"""
    pass

  def canvas_item_reset_physics_interpolation(self, item:__core__.RID)->None:
    """
				Prevents physics interpolation for the current physics tick.
				This is useful when moving a canvas item to a new location, to give an instantaneous change rather than interpolation from the previous location.
			"""
    pass

  def canvas_item_transform_physics_interpolation(self, item:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Transforms both the current and previous stored transform for a canvas item.
				This allows transforming a canvas item without creating a "glitch" in the interpolation, which is particularly useful for large worlds utilizing a shifting origin.
			"""
    pass

  def canvas_item_add_line(self, item:__core__.RID, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None:
    """
				Draws a line on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_line`.
			"""
    pass

  def canvas_item_add_polyline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None:
    """
				Draws a 2D polyline on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_polyline` and `CanvasItem.draw_polyline_colors`.
			"""
    pass

  def canvas_item_add_multiline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None:
    """
				Draws a 2D multiline on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_multiline` and `CanvasItem.draw_multiline_colors`.
			"""
    pass

  def canvas_item_add_rect(self, item:__core__.RID, rect:__core__.Rect2, color:__core__.Color, antialiased:bool=False)->None:
    """
				Draws a rectangle on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_rect`.
			"""
    pass

  def canvas_item_add_circle(self, item:__core__.RID, pos:__core__.Vector2, radius:float, color:__core__.Color, antialiased:bool=False)->None:
    """
				Draws a circle on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_circle`.
			"""
    pass

  def canvas_item_add_texture_rect(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, tile:bool=False, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None:
    """
				Draws a 2D textured rectangle on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_texture_rect` and `Texture2D.draw_rect`.
			"""
    pass

  def canvas_item_add_msdf_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), outline_size:int=0, px_range:float=1.0, scale:float=1.0)->None:
    """
				See also `CanvasItem.draw_msdf_texture_rect_region`.
			"""
    pass

  def canvas_item_add_lcd_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color)->None:
    """
				See also `CanvasItem.draw_lcd_texture_rect_region`.
			"""
    pass

  def canvas_item_add_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None:
    """
				Draws the specified region of a 2D textured rectangle on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_texture_rect_region` and `Texture2D.draw_rect_region`.
			"""
    pass

  def canvas_item_add_nine_patch(self, item:__core__.RID, rect:__core__.Rect2, source:__core__.Rect2, texture:__core__.RID, topleft:__core__.Vector2, bottomright:__core__.Vector2, x_axis_mode:int =0, y_axis_mode:int =0, draw_center:bool=True, modulate:__core__.Color= __core__.Color.new0())->None:
    """
				Draws a nine-patch rectangle on the `CanvasItem` pointed to by the `item` `RID`.
			"""
    pass

  def canvas_item_add_primitive(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array, texture:__core__.RID)->None:
    """
				Draws a 2D primitive on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_primitive`.
			"""
    pass

  def canvas_item_add_polygon(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__core__.RID= __core__.RID.new0())->None:
    """
				Draws a 2D polygon on the `CanvasItem` pointed to by the `item` `RID`. If you need more flexibility (such as being able to use bones), use `canvas_item_add_triangle_array` instead. See also `CanvasItem.draw_polygon`.
				**Note:** If you frequently redraw the same polygon with a large number of vertices, consider pre-calculating the triangulation with `Geometry2D.triangulate_polygon` and using `CanvasItem.draw_mesh`, `CanvasItem.draw_multimesh`, or `canvas_item_add_triangle_array`.
			"""
    pass

  def canvas_item_add_triangle_array(self, item:__core__.RID, indices:__core__.PackedInt32Array, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), bones:__core__.PackedInt32Array= __core__.PackedInt32Array.new0(), weights:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0(), texture:__core__.RID= __core__.RID.new0(), count:int=-1)->None:
    """
				Draws a triangle array on the `CanvasItem` pointed to by the `item` `RID`. This is internally used by `Line2D` and `StyleBoxFlat` for rendering. `canvas_item_add_triangle_array` is highly flexible, but more complex to use than `canvas_item_add_polygon`.
				**Note:** If `count` is set to a non-negative value, only the first `count * 3` indices (corresponding to `code skip-lint`count` triangles) will be drawn. Otherwise, all indices are drawn.
			"""
    pass

  def canvas_item_add_mesh(self, item:__core__.RID, mesh:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), modulate:__core__.Color= __core__.Color.new0(), texture:__core__.RID= __core__.RID.new0())->None:
    """
				Draws a mesh created with `mesh_create` with given `transform`, `modulate` color, and `texture`. This is used internally by `MeshInstance2D`.
			"""
    pass

  def canvas_item_add_multimesh(self, item:__core__.RID, mesh:__core__.RID, texture:__core__.RID= __core__.RID.new0())->None:
    """
				Draws a 2D `MultiMesh` on the `CanvasItem` pointed to by the `item` `RID`. See also `CanvasItem.draw_multimesh`.
			"""
    pass

  def canvas_item_add_particles(self, item:__core__.RID, particles:__core__.RID, texture:__core__.RID)->None:
    """
				Draws particles on the `CanvasItem` pointed to by the `item` `RID`.
			"""
    pass

  def canvas_item_add_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets a `Transform2D` that will be used to transform subsequent canvas item commands.
			"""
    pass

  def canvas_item_add_clip_ignore(self, item:__core__.RID, ignore:bool)->None:
    """
				If `ignore` is `true`, ignore clipping on items drawn with this canvas item until this is called again with `ignore` set to `false`.
			"""
    pass

  def canvas_item_add_animation_slice(self, item:__core__.RID, animation_length:float, slice_begin:float, slice_end:float, offset:float=0.0)->None:
    """
				Subsequent drawing commands will be ignored unless they fall within the specified animation slice. This is a faster way to implement animations that loop on background rather than redrawing constantly.
			"""
    pass

  def canvas_item_set_sort_children_by_y(self, item:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, child nodes with the lowest Y position are drawn before those with a higher Y position. Y-sorting only affects children that inherit from the canvas item specified by the `item` RID, not the canvas item itself. Equivalent to `CanvasItem.y_sort_enabled`.
			"""
    pass

  def canvas_item_set_z_index(self, item:__core__.RID, z_index:int)->None:
    """
				Sets the `CanvasItem`'s Z index, i.e. its draw order (lower indexes are drawn first).
			"""
    pass

  def canvas_item_set_z_as_relative_to_parent(self, item:__core__.RID, enabled:bool)->None:
    """
				If this is enabled, the Z index of the parent will be added to the children's Z index.
			"""
    pass

  def canvas_item_set_copy_to_backbuffer(self, item:__core__.RID, enabled:bool, rect:__core__.Rect2)->None:
    """
				Sets the `CanvasItem` to copy a rect to the backbuffer.
			"""
    pass

  def canvas_item_attach_skeleton(self, item:__core__.RID, skeleton:__core__.RID)->None:
    """
				Attaches a skeleton to the `CanvasItem`. Removes the previous skeleton.
			"""
    pass

  def canvas_item_clear(self, item:__core__.RID)->None:
    """
				Clears the `CanvasItem` and removes all commands in it.
			"""
    pass

  def canvas_item_set_draw_index(self, item:__core__.RID, index:int)->None:
    """
				Sets the index for the `CanvasItem`.
			"""
    pass

  def canvas_item_set_material(self, item:__core__.RID, material:__core__.RID)->None:
    """
				Sets a new `material` to the canvas item specified by the `item` RID. Equivalent to `CanvasItem.material`.
			"""
    pass

  def canvas_item_set_use_parent_material(self, item:__core__.RID, enabled:bool)->None:
    """
				Sets if the `CanvasItem` uses its parent's material.
			"""
    pass

  def canvas_item_set_instance_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str, value:Any)->None:
    """
				Sets the per-instance shader uniform on the specified canvas item instance. Equivalent to `CanvasItem.set_instance_shader_parameter`.
			"""
    pass

  def canvas_item_get_instance_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str)->Any:
    """
				Returns the value of the per-instance shader uniform from the specified canvas item instance. Equivalent to `CanvasItem.get_instance_shader_parameter`.
			"""
    pass

  def canvas_item_get_instance_shader_parameter_default_value(self, instance:__core__.RID, parameter:__core__.StringName|str)->Any:
    """
				Returns the default value of the per-instance shader uniform from the specified canvas item instance. Equivalent to `CanvasItem.get_instance_shader_parameter`.
			"""
    pass

  def canvas_item_get_instance_shader_parameter_list(self, instance:__core__.RID)->typedarray::Dictionary:
    """
				Returns a dictionary of per-instance shader uniform names of the per-instance shader uniform from the specified canvas item instance.
				The returned dictionary is in PropertyInfo format, with the keys `name`, `class_name`, `type`, `hint`, `hint_string`, and `usage`.
			"""
    pass

  def canvas_item_set_visibility_notifier(self, item:__core__.RID, enable:bool, area:__core__.Rect2, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None:
    """
				Sets the given `CanvasItem` as visibility notifier. `area` defines the area of detecting visibility. `enter_callable` is called when the `CanvasItem` enters the screen, `exit_callable` is called when the `CanvasItem` exits the screen. If `enable` is `false`, the item will no longer function as notifier.
				This method can be used to manually mimic `VisibleOnScreenNotifier2D`.
			"""
    pass

  def canvas_item_set_canvas_group_mode(self, item:__core__.RID, mode:int , clear_margin:float=5.0, fit_empty:bool=False, fit_margin:float=0.0, blur_mipmaps:bool=False)->None:
    """
				Sets the canvas group mode used during 2D rendering for the canvas item specified by the `item` RID. For faster but more limited clipping, use `canvas_item_set_clip` instead.
				**Note:** The equivalent node functionality is found in `CanvasGroup` and `CanvasItem.clip_children`.
			"""
    pass

  def debug_canvas_item_get_rect(self, item:__core__.RID)->__core__.Rect2:
    """
				Returns the bounding rectangle for a canvas item in local space, as calculated by the renderer. This bound is used internally for culling.
				**Warning:** This function is intended for debugging in the editor, and will pass through and return a zero `Rect2` in exported projects.
			"""
    pass

  def canvas_light_create(self)->__core__.RID:
    """
				Creates a canvas light and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_light_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `Light2D`.
			"""
    pass

  def canvas_light_attach_to_canvas(self, light:__core__.RID, canvas:__core__.RID)->None:
    """
				Attaches the canvas light to the canvas. Removes it from its previous canvas.
			"""
    pass

  def canvas_light_set_enabled(self, light:__core__.RID, enabled:bool)->None:
    """
				Enables or disables a canvas light.
			"""
    pass

  def canvas_light_set_texture_scale(self, light:__core__.RID, scale:float)->None:
    """
				Sets the scale factor of a `PointLight2D`'s texture. Equivalent to `PointLight2D.texture_scale`.
			"""
    pass

  def canvas_light_set_transform(self, light:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets the canvas light's `Transform2D`.
			"""
    pass

  def canvas_light_set_texture(self, light:__core__.RID, texture:__core__.RID)->None:
    """
				Sets the texture to be used by a `PointLight2D`. Equivalent to `PointLight2D.texture`.
			"""
    pass

  def canvas_light_set_texture_offset(self, light:__core__.RID, offset:__core__.Vector2)->None:
    """
				Sets the offset of a `PointLight2D`'s texture. Equivalent to `PointLight2D.offset`.
			"""
    pass

  def canvas_light_set_color(self, light:__core__.RID, color:__core__.Color)->None:
    """
				Sets the color for a light.
			"""
    pass

  def canvas_light_set_height(self, light:__core__.RID, height:float)->None:
    """
				Sets a canvas light's height.
			"""
    pass

  def canvas_light_set_energy(self, light:__core__.RID, energy:float)->None:
    """
				Sets a canvas light's energy.
			"""
    pass

  def canvas_light_set_z_range(self, light:__core__.RID, min_z:int, max_z:int)->None:
    """
				Sets the Z range of objects that will be affected by this light. Equivalent to `Light2D.range_z_min` and `Light2D.range_z_max`.
			"""
    pass

  def canvas_light_set_layer_range(self, light:__core__.RID, min_layer:int, max_layer:int)->None:
    """
				The layer range that gets rendered with this light.
			"""
    pass

  def canvas_light_set_item_cull_mask(self, light:__core__.RID, mask:int)->None:
    """
				The light mask. See `LightOccluder2D` for more information on light masks.
			"""
    pass

  def canvas_light_set_item_shadow_cull_mask(self, light:__core__.RID, mask:int)->None:
    """
				The binary mask used to determine which layers this canvas light's shadows affects. See `LightOccluder2D` for more information on light masks.
			"""
    pass

  def canvas_light_set_mode(self, light:__core__.RID, mode:int )->None:
    """
				Sets the mode of the canvas light.
			"""
    pass

  def canvas_light_set_shadow_enabled(self, light:__core__.RID, enabled:bool)->None:
    """
				Enables or disables the canvas light's shadow.
			"""
    pass

  def canvas_light_set_shadow_filter(self, light:__core__.RID, filter:int )->None:
    """
				Sets the canvas light's shadow's filter.
			"""
    pass

  def canvas_light_set_shadow_color(self, light:__core__.RID, color:__core__.Color)->None:
    """
				Sets the color of the canvas light's shadow.
			"""
    pass

  def canvas_light_set_shadow_smooth(self, light:__core__.RID, smooth:float)->None:
    """
				Smoothens the shadow. The lower, the smoother.
			"""
    pass

  def canvas_light_set_blend_mode(self, light:__core__.RID, mode:int )->None:
    """
				Sets the blend mode for the given canvas light to `mode`. Equivalent to `Light2D.blend_mode`.
			"""
    pass

  def canvas_light_set_interpolated(self, light:__core__.RID, interpolated:bool)->None:
    """
				If `interpolated` is `true`, turns on physics interpolation for the canvas light.
			"""
    pass

  def canvas_light_reset_physics_interpolation(self, light:__core__.RID)->None:
    """
				Prevents physics interpolation for the current physics tick.
				This is useful when moving a canvas item to a new location, to give an instantaneous change rather than interpolation from the previous location.
			"""
    pass

  def canvas_light_transform_physics_interpolation(self, light:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Transforms both the current and previous stored transform for a canvas light.
				This allows transforming a light without creating a "glitch" in the interpolation, which is particularly useful for large worlds utilizing a shifting origin.
			"""
    pass

  def canvas_light_occluder_create(self)->__core__.RID:
    """
				Creates a light occluder and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_light_occluder_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent node is `LightOccluder2D`.
			"""
    pass

  def canvas_light_occluder_attach_to_canvas(self, occluder:__core__.RID, canvas:__core__.RID)->None:
    """
				Attaches a light occluder to the canvas. Removes it from its previous canvas.
			"""
    pass

  def canvas_light_occluder_set_enabled(self, occluder:__core__.RID, enabled:bool)->None:
    """
				Enables or disables light occluder.
			"""
    pass

  def canvas_light_occluder_set_polygon(self, occluder:__core__.RID, polygon:__core__.RID)->None:
    """
				Sets a light occluder's polygon.
			"""
    pass

  def canvas_light_occluder_set_as_sdf_collision(self, occluder:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def canvas_light_occluder_set_transform(self, occluder:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets a light occluder's `Transform2D`.
			"""
    pass

  def canvas_light_occluder_set_light_mask(self, occluder:__core__.RID, mask:int)->None:
    """
				The light mask. See `LightOccluder2D` for more information on light masks.
			"""
    pass

  def canvas_light_occluder_set_interpolated(self, occluder:__core__.RID, interpolated:bool)->None:
    """
				If `interpolated` is `true`, turns on physics interpolation for the light occluder.
			"""
    pass

  def canvas_light_occluder_reset_physics_interpolation(self, occluder:__core__.RID)->None:
    """
				Prevents physics interpolation for the current physics tick.
				This is useful when moving an occluder to a new location, to give an instantaneous change rather than interpolation from the previous location.
			"""
    pass

  def canvas_light_occluder_transform_physics_interpolation(self, occluder:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Transforms both the current and previous stored transform for a light occluder.
				This allows transforming an occluder without creating a "glitch" in the interpolation, which is particularly useful for large worlds utilizing a shifting origin.
			"""
    pass

  def canvas_occluder_polygon_create(self)->__core__.RID:
    """
				Creates a new light occluder polygon and adds it to the RenderingServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_occluder_polygon_*` RenderingServer functions.
				Once finished with your RID, you will want to free the RID using the RenderingServer's `free_rid` method.
				**Note:** The equivalent resource is `OccluderPolygon2D`.
			"""
    pass

  def canvas_occluder_polygon_set_shape(self, occluder_polygon:__core__.RID, shape:__core__.PackedVector2Array, closed:bool)->None:
    """
				Sets the shape of the occluder polygon.
			"""
    pass

  def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon:__core__.RID, mode:int )->None:
    """
				Sets an occluder polygon's cull mode.
			"""
    pass

  def canvas_set_shadow_texture_size(self, size:int)->None:
    """
				Sets the `ProjectSettings.rendering/2d/shadow_atlas/size` to use for `Light2D` shadow rendering (in pixels). The value is rounded up to the nearest power of 2.
			"""
    pass

  def global_shader_parameter_add(self, name:__core__.StringName|str, type:int , default_value:Any)->None:
    """
				Creates a new global shader uniform.
				**Note:** Global shader parameter names are case-sensitive.
			"""
    pass

  def global_shader_parameter_remove(self, name:__core__.StringName|str)->None:
    """
				Removes the global shader uniform specified by `name`.
			"""
    pass

  def global_shader_parameter_get_list(self)->typedarray::StringName:
    """
				Returns the list of global shader uniform names.
				**Note:** `global_shader_parameter_get` has a large performance penalty as the rendering thread needs to synchronize with the calling thread, which is slow. Do not use this method during gameplay to avoid stuttering. If you need to read values in a script after setting them, consider creating an autoload where you store the values you need to query at the same time you're setting them as global parameters.
			"""
    pass

  def global_shader_parameter_set(self, name:__core__.StringName|str, value:Any)->None:
    """
				Sets the global shader uniform `name` to `value`.
			"""
    pass

  def global_shader_parameter_set_override(self, name:__core__.StringName|str, value:Any)->None:
    """
				Overrides the global shader uniform `name` with `value`. Equivalent to the `ShaderGlobalsOverride` node.
			"""
    pass

  def global_shader_parameter_get(self, name:__core__.StringName|str)->Any:
    """
				Returns the value of the global shader uniform specified by `name`.
				**Note:** `global_shader_parameter_get` has a large performance penalty as the rendering thread needs to synchronize with the calling thread, which is slow. Do not use this method during gameplay to avoid stuttering. If you need to read values in a script after setting them, consider creating an autoload where you store the values you need to query at the same time you're setting them as global parameters.
			"""
    pass

  def global_shader_parameter_get_type(self, name:__core__.StringName|str)->int:
    """
				Returns the type associated to the global shader uniform specified by `name`.
				**Note:** `global_shader_parameter_get` has a large performance penalty as the rendering thread needs to synchronize with the calling thread, which is slow. Do not use this method during gameplay to avoid stuttering. If you need to read values in a script after setting them, consider creating an autoload where you store the values you need to query at the same time you're setting them as global parameters.
			"""
    pass

  def free_rid(self, rid:__core__.RID)->None:
    """
				Tries to free an object in the RenderingServer. To avoid memory leaks, this should be called after using an object as memory management does not occur automatically when using RenderingServer directly.
			"""
    pass

  def request_frame_drawn_callback(self, callable:__core__.Callable)->None:
    """
				Schedules a callback to the given callable after a frame has been drawn.
			"""
    pass

  def has_changed(self)->bool:
    """
				Returns `true` if changes have been made to the RenderingServer's data. `force_draw` is usually called if this happens.
			"""
    pass

  def get_rendering_info(self, info:int )->int:
    """
				Returns a statistic about the rendering engine which can be used for performance profiling. See also `viewport_get_render_info`, which returns information specific to a viewport.
				**Note:** Only 3D rendering is currently taken into account by some of these values, such as the number of draw calls.
				**Note:** Rendering information is not available until at least 2 frames have been rendered by the engine. If rendering information is not available, `get_rendering_info` returns `0`. To print rendering information in `_ready()` successfully, use the following:
				```gdscript
				func _ready():
					for _i in 2:
						await get_tree().process_frame

					print(RenderingServer.get_rendering_info(RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME))
				```
			"""
    pass

  def get_video_adapter_name(self)->str:
    """
				Returns the name of the video adapter (e.g. "GeForce GTX 1080/PCIe/SSE2").
				**Note:** When running a headless or server binary, this function returns an empty string.
				**Note:** On the web platform, some browsers such as Firefox may report a different, fixed GPU name such as "GeForce GTX 980" (regardless of the user's actual GPU model). This is done to make fingerprinting more difficult.
			"""
    pass

  def get_video_adapter_vendor(self)->str:
    """
				Returns the vendor of the video adapter (e.g. "NVIDIA Corporation").
				**Note:** When running a headless or server binary, this function returns an empty string.
			"""
    pass

  def get_video_adapter_type(self)->int:
    """
				Returns the type of the video adapter. Since dedicated graphics cards from a given generation will _usually_ be significantly faster than integrated graphics made in the same generation, the device type can be used as a basis for automatic graphics settings adjustment. However, this is not always true, so make sure to provide users with a way to manually override graphics settings.
				**Note:** When using the OpenGL rendering driver or when running in headless mode, this function always returns `constant RenderingDevice.DEVICE_TYPE_OTHER`.
			"""
    pass

  def get_video_adapter_api_version(self)->str:
    """
				Returns the version of the graphics video adapter _currently in use_ (e.g. "1.2.189" for Vulkan, "3.3.0 NVIDIA 510.60.02" for OpenGL). This version may be different from the actual latest version supported by the hardware, as Godot may not always request the latest version. See also `OS.get_video_adapter_driver_info`.
				**Note:** When running a headless or server binary, this function returns an empty string.
			"""
    pass

  def get_current_rendering_driver_name(self)->str:
    """
				Returns the name of the current rendering driver. This can be `vulkan`, `d3d12`, `metal`, `opengl3`, `opengl3_es`, or `opengl3_angle`. See also `get_current_rendering_method`.
				The rendering driver is determined by `ProjectSettings.rendering/rendering_device/driver`, the `--rendering-driver` command line argument that overrides this project setting, or an automatic fallback that is applied depending on the hardware.
			"""
    pass

  def get_current_rendering_method(self)->str:
    """
				Returns the name of the current rendering method. This can be `forward_plus`, `mobile`, or `gl_compatibility`. See also `get_current_rendering_driver_name`.
				The rendering method is determined by `ProjectSettings.rendering/renderer/rendering_method`, the `--rendering-method` command line argument that overrides this project setting, or an automatic fallback that is applied depending on the hardware.
			"""
    pass

  def make_sphere_mesh(self, latitudes:int, longitudes:int, radius:float)->__core__.RID:
    """
				Returns a mesh of a sphere with the given number of horizontal subdivisions, vertical subdivisions and radius. See also `get_test_cube`.
			"""
    pass

  def get_test_cube(self)->__core__.RID:
    """
				Returns the RID of the test cube. This mesh will be created and returned on the first call to `get_test_cube`, then it will be cached for subsequent calls. See also `make_sphere_mesh`.
			"""
    pass

  def get_test_texture(self)->__core__.RID:
    """
				Returns the RID of a 256×256 texture with a testing pattern on it (in `constant Image.FORMAT_RGB8` format). This texture will be created and returned on the first call to `get_test_texture`, then it will be cached for subsequent calls. See also `get_white_texture`.
				**Example:** Get the test texture and apply it to a `Sprite2D` node:
				```gdscript
				var texture_rid = RenderingServer.get_test_texture()
				var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
				$Sprite2D.texture = texture
				```
			"""
    pass

  def get_white_texture(self)->__core__.RID:
    """
				Returns the ID of a 4×4 white texture (in `constant Image.FORMAT_RGB8` format). This texture will be created and returned on the first call to `get_white_texture`, then it will be cached for subsequent calls. See also `get_test_texture`.
				**Example:** Get the white texture and apply it to a `Sprite2D` node:
				```gdscript
				var texture_rid = RenderingServer.get_white_texture()
				var texture = ImageTexture.create_from_image(RenderingServer.texture_2d_get(texture_rid))
				$Sprite2D.texture = texture
				```
			"""
    pass

  def set_boot_image(self, image:__image__.Image, color:__core__.Color, scale:bool, use_filter:bool=True)->None:
    """
				Sets a boot image. The color defines the background color. If `scale` is `true`, the image will be scaled to fit the screen size. If `use_filter` is `true`, the image will be scaled with linear interpolation. If `use_filter` is `false`, the image will be scaled with nearest-neighbor interpolation.
			"""
    pass

  def get_default_clear_color(self)->__core__.Color:
    """
				Returns the default clear color which is used when a specific clear color has not been selected. See also `set_default_clear_color`.
			"""
    pass

  def set_default_clear_color(self, color:__core__.Color)->None:
    """
				Sets the default clear color which is used when a specific clear color has not been selected. See also `get_default_clear_color`.
			"""
    pass

  def has_os_feature(self, feature:str)->bool:
    """
				Returns `true` if the OS supports a certain `feature`. Features might be `s3tc`, `etc`, and `etc2`.
			"""
    pass

  def set_debug_generate_wireframes(self, generate:bool)->None:
    """
				If `generate` is `true`, generates debug wireframes for all meshes that are loaded when using the Compatibility renderer. By default, the engine does not generate debug wireframes at runtime, since they slow down loading of assets and take up VRAM.
				**Note:** You must call this method before loading any meshes when using the Compatibility renderer, otherwise wireframes will not be used.
			"""
    pass

  def is_render_loop_enabled(self)->bool:
    """"""
    pass

  def set_render_loop_enabled(self, enabled:bool)->None:
    """"""
    pass

  def get_frame_setup_time_cpu(self)->float:
    """
				Returns the time taken to setup rendering on the CPU in milliseconds. This value is shared across all viewports and does _not_ require `viewport_set_measure_render_time` to be enabled on a viewport to be queried. See also `viewport_get_measured_render_time_cpu`.
			"""
    pass

  def force_sync(self)->None:
    """
				Forces a synchronization between the CPU and GPU, which may be required in certain cases. Only call this when needed, as CPU-GPU synchronization has a performance cost.
			"""
    pass

  def force_draw(self, swap_buffers:bool=True, frame_step:float=0.0)->None:
    """
				Forces redrawing of all viewports at once. Must be called from the main thread.
			"""
    pass

  def get_rendering_device(self)->__renderingdevice__.RenderingDevice:
    """
				Returns the global RenderingDevice.
				**Note:** When using the OpenGL rendering driver or when running in headless mode, this function always returns `null`.
			"""
    pass

  def create_local_rendering_device(self)->__renderingdevice__.RenderingDevice:
    """
				Creates a RenderingDevice that can be used to do draw and compute operations on a separate thread. Cannot draw to the screen nor share data with the global RenderingDevice.
				**Note:** When using the OpenGL rendering driver or when running in headless mode, this function always returns `null`.
			"""
    pass

  def is_on_render_thread(self)->bool:
    """
				Returns `true` if our code is currently executing on the rendering thread.
			"""
    pass

  def call_on_render_thread(self, callable:__core__.Callable)->None:
    """
				As the RenderingServer actual logic may run on a separate thread, accessing its internals from the main (or any other) thread will result in errors. To make it easier to run code that can safely access the rendering internals (such as `RenderingDevice` and similar RD classes), push a callable via this function so it will be executed on the render thread.
			"""
    pass

  def has_feature(self, feature:int )->bool:
    """
				This method does nothing and always returns `false`.
			"""
    pass


