from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D as __shape2d__



class ConvexPolygonShape2D(__shape2d__.Shape2D):
  """
		A 2D convex polygon shape, intended for use in physics. Used internally in `CollisionPolygon2D` when it's in `constant CollisionPolygon2D.BUILD_SOLIDS` mode.
		`ConvexPolygonShape2D` is _solid_, which means it detects collisions from objects that are fully inside it, unlike `ConcavePolygonShape2D` which is hollow. This makes it more suitable for both detection and physics.
		**Convex decomposition:** A concave polygon can be split up into several convex polygons. This allows dynamic physics bodies to have complex concave collisions (at a performance cost) and can be achieved by using several `ConvexPolygonShape2D` nodes or by using the `CollisionPolygon2D` node in `constant CollisionPolygon2D.BUILD_SOLIDS` mode. To generate a collision polygon from a sprite, select the `Sprite2D` node, go to the **Sprite2D** menu that appears above the viewport, and choose **Create Polygon2D Sibling**.
		**Performance:** `ConvexPolygonShape2D` is faster to check collisions against compared to `ConcavePolygonShape2D`, but it is slower than primitive collision shapes such as `CircleShape2D` and `RectangleShape2D`. Its use should generally be limited to medium-sized objects that cannot have their collision accurately represented by primitive shapes.
	"""

  @staticmethod
  def constructor()->ConvexPolygonShape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->ConvexPolygonShape2D:pass


  @property
  def points(self)->__core__.PackedVector2Array:
    """"""
    pass
  @points.setter
  def points(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  def set_point_cloud(self, point_cloud:__core__.PackedVector2Array)->None:
    """
				Based on the set of points provided, this assigns the `points` property using the convex hull algorithm, removing all unneeded points. See `Geometry2D.convex_hull` for details.
			"""
    pass

  def set_points(self, points:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_points(self)->__core__.PackedVector2Array:
    """"""
    pass


