from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node as __node__
import py4godot.classes.Resource as __resource__
import py4godot.classes.RefCounted as __refcounted__


class InternalImportCategory:
  INTERNAL_IMPORT_CATEGORY_NODE:int = 0
  INTERNAL_IMPORT_CATEGORY_MESH_3D_NODE:int = 1
  INTERNAL_IMPORT_CATEGORY_MESH:int = 2
  INTERNAL_IMPORT_CATEGORY_MATERIAL:int = 3
  INTERNAL_IMPORT_CATEGORY_ANIMATION:int = 4
  INTERNAL_IMPORT_CATEGORY_ANIMATION_NODE:int = 5
  INTERNAL_IMPORT_CATEGORY_SKELETON_3D_NODE:int = 6
  INTERNAL_IMPORT_CATEGORY_MAX:int = 7


class EditorScenePostImportPlugin(__refcounted__.RefCounted):
  """
		This plugin type exists to modify the process of importing scenes, allowing to change the content as well as add importer options at every stage of the process.
	"""

  @staticmethod
  def constructor()->EditorScenePostImportPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorScenePostImportPlugin:pass


  def _get_internal_import_options(self, category:int)->None:
    """
				Override to add internal import options. These will appear in the 3D scene import dialog. Add options via `add_import_option` and `add_import_option_advanced`.
			"""
    pass

  def _get_internal_option_visibility(self, category:int, for_animation:bool, option:str)->Any:
    """
				Should return `true` to show the given option, `false` to hide the given option, or `null` to ignore.
			"""
    pass

  def _get_internal_option_update_view_required(self, category:int, option:str)->Any:
    """
				Should return `true` if the 3D view of the import dialog needs to update when changing the given option.
			"""
    pass

  def _internal_process(self, category:int, base_node:__node__.Node, node:__node__.Node, resource:__resource__.Resource)->None:
    """
				Process a specific node or resource for a given category.
			"""
    pass

  def _get_import_options(self, path:str)->None:
    """
				Override to add general import options. These will appear in the main import dock on the editor. Add options via `add_import_option` and `add_import_option_advanced`.
			"""
    pass

  def _get_option_visibility(self, path:str, for_animation:bool, option:str)->Any:
    """
				Should return `true` to show the given option, `false` to hide the given option, or `null` to ignore.
			"""
    pass

  def _pre_process(self, scene:__node__.Node)->None:
    """
				Pre-process the scene. This function is called right after the scene format loader loaded the scene and no changes have been made.
				Pre-process may be used to adjust internal import options in the `"nodes"`, `"meshes"`, `"animations"` or `"materials"` keys inside `get_option_value("_subresources")`.
			"""
    pass

  def _post_process(self, scene:__node__.Node)->None:
    """
				Post-process the scene. This function is called after the final scene has been configured.
			"""
    pass

  def get_option_value(self, name:__core__.StringName|str)->Any:
    """
				Query the value of an option. This function can only be called from those querying visibility, or processing.
			"""
    pass

  def add_import_option(self, name:str, value:Any)->None:
    """
				Add a specific import option (name and default value only). This function can only be called from `_get_import_options` and `_get_internal_import_options`.
			"""
    pass

  def add_import_option_advanced(self, type:int , name:str, default_value:Any, hint:int =0, hint_string:str= __core__.String.new0(), usage_flags:int=6)->None:
    """
				Add a specific import option. This function can only be called from `_get_import_options` and `_get_internal_import_options`.
			"""
    pass


