from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh as __primitivemesh__



class TorusMesh(__primitivemesh__.PrimitiveMesh):
  """
		Class representing a torus `PrimitiveMesh`.
	"""

  @staticmethod
  def constructor()->TorusMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->TorusMesh:pass


  @property
  def inner_radius(self)->float:
    """"""
    pass
  @inner_radius.setter
  def inner_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def outer_radius(self)->float:
    """"""
    pass
  @outer_radius.setter
  def outer_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def rings(self)->int:
    """"""
    pass
  @rings.setter
  def rings(self,  value:int)->None:
    """"""
    pass
  @property
  def ring_segments(self)->int:
    """"""
    pass
  @ring_segments.setter
  def ring_segments(self,  value:int)->None:
    """"""
    pass
  def set_inner_radius(self, radius:float)->None:
    """"""
    pass

  def get_inner_radius(self)->float:
    """"""
    pass

  def set_outer_radius(self, radius:float)->None:
    """"""
    pass

  def get_outer_radius(self)->float:
    """"""
    pass

  def set_rings(self, rings:int)->None:
    """"""
    pass

  def get_rings(self)->int:
    """"""
    pass

  def set_ring_segments(self, rings:int)->None:
    """"""
    pass

  def get_ring_segments(self)->int:
    """"""
    pass


