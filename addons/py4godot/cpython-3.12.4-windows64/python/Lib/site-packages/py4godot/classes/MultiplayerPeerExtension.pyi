from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.WebSocketMultiplayerPeer as __websocketmultiplayerpeer__
import py4godot.classes.WebRTCMultiplayerPeer as __webrtcmultiplayerpeer__
import py4godot.classes.OfflineMultiplayerPeer as __offlinemultiplayerpeer__
import py4godot.classes.MultiplayerPeerExtension as __multiplayerpeerextension__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.ENetMultiplayerPeer as __enetmultiplayerpeer__



class MultiplayerPeerExtension(__multiplayerpeer__.MultiplayerPeer):
  """
		This class is designed to be inherited from a GDExtension plugin to implement custom networking layers for the multiplayer API (such as WebRTC). All the methods below **must** be implemented to have a working custom multiplayer implementation. See also `MultiplayerAPI`.
	"""

  @staticmethod
  def constructor()->MultiplayerPeerExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerPeerExtension:pass


  def _get_available_packet_count(self)->int:
    """
				Called when the available packet count is internally requested by the `MultiplayerAPI`.
			"""
    pass

  def _get_max_packet_size(self)->int:
    """
				Called when the maximum allowed packet size (in bytes) is requested by the `MultiplayerAPI`.
			"""
    pass

  def _get_packet_script(self)->__core__.PackedByteArray:
    """
				Called when a packet needs to be received by the `MultiplayerAPI`, if `_get_packet` isn't implemented. Use this when extending this class via GDScript.
			"""
    pass

  def _put_packet_script(self, p_buffer:__core__.PackedByteArray)->int:
    """
				Called when a packet needs to be sent by the `MultiplayerAPI`, if `_put_packet` isn't implemented. Use this when extending this class via GDScript.
			"""
    pass

  def _get_packet_channel(self)->int:
    """
				Called to get the channel over which the next available packet was received. See `MultiplayerPeer.get_packet_channel`.
			"""
    pass

  def _get_packet_mode(self)->int:
    """
				Called to get the transfer mode the remote peer used to send the next available packet. See `MultiplayerPeer.get_packet_mode`.
			"""
    pass

  def _set_transfer_channel(self, p_channel:int)->None:
    """
				Called when the channel to use is set for this `MultiplayerPeer` (see `MultiplayerPeer.transfer_channel`).
			"""
    pass

  def _get_transfer_channel(self)->int:
    """
				Called when the transfer channel to use is read on this `MultiplayerPeer` (see `MultiplayerPeer.transfer_channel`).
			"""
    pass

  def _set_transfer_mode(self, p_mode:int )->None:
    """
				Called when the transfer mode is set on this `MultiplayerPeer` (see `MultiplayerPeer.transfer_mode`).
			"""
    pass

  def _get_transfer_mode(self)->int:
    """
				Called when the transfer mode to use is read on this `MultiplayerPeer` (see `MultiplayerPeer.transfer_mode`).
			"""
    pass

  def _set_target_peer(self, p_peer:int)->None:
    """
				Called when the target peer to use is set for this `MultiplayerPeer` (see `MultiplayerPeer.set_target_peer`).
			"""
    pass

  def _get_packet_peer(self)->int:
    """
				Called when the ID of the `MultiplayerPeer` who sent the most recent packet is requested (see `MultiplayerPeer.get_packet_peer`).
			"""
    pass

  def _is_server(self)->bool:
    """
				Called when the "is server" status is requested on the `MultiplayerAPI`. See `MultiplayerAPI.is_server`.
			"""
    pass

  def _poll(self)->None:
    """
				Called when the `MultiplayerAPI` is polled. See `MultiplayerAPI.poll`.
			"""
    pass

  def _close(self)->None:
    """
				Called when the multiplayer peer should be immediately closed (see `MultiplayerPeer.close`).
			"""
    pass

  def _disconnect_peer(self, p_peer:int, p_force:bool)->None:
    """
				Called when the connected `p_peer` should be forcibly disconnected (see `MultiplayerPeer.disconnect_peer`).
			"""
    pass

  def _get_unique_id(self)->int:
    """
				Called when the unique ID of this `MultiplayerPeer` is requested (see `MultiplayerPeer.get_unique_id`). The value must be between `1` and `2147483647`.
			"""
    pass

  def _set_refuse_new_connections(self, p_enable:bool)->None:
    """
				Called when the "refuse new connections" status is set on this `MultiplayerPeer` (see `MultiplayerPeer.refuse_new_connections`).
			"""
    pass

  def _is_refusing_new_connections(self)->bool:
    """
				Called when the "refuse new connections" status is requested on this `MultiplayerPeer` (see `MultiplayerPeer.refuse_new_connections`).
			"""
    pass

  def _is_server_relay_supported(self)->bool:
    """
				Called to check if the server can act as a relay in the current configuration. See `MultiplayerPeer.is_server_relay_supported`.
			"""
    pass

  def _get_connection_status(self)->int:
    """
				Called when the connection status is requested on the `MultiplayerPeer` (see `MultiplayerPeer.get_connection_status`).
			"""
    pass


