from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.A as __a__
import py4godot.classes.e as __e__
import py4godot.classes.E as __e__
import py4godot.classes.d as __d__
import py4godot.classes.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.T as __t__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.c as __c__
import py4godot.classes.t as __t__
import py4godot.classes.r as __r__
import py4godot.classes.p as __p__
import py4godot.classes.ENetConnection as __enetconnection__
import py4godot.classes.N as __n__
import py4godot.classes.a as __a__
import py4godot.classes.k as __k__
import py4godot.classes.y as __y__
import py4godot.classes.P as __p__


class CompressionMode:
  COMPRESS_NONE:int = 0
  COMPRESS_RANGE_CODER:int = 1
  COMPRESS_FASTLZ:int = 2
  COMPRESS_ZLIB:int = 3
  COMPRESS_ZSTD:int = 4
class EventType:
  EVENT_ERROR:int = -1
  EVENT_NONE:int = 0
  EVENT_CONNECT:int = 1
  EVENT_DISCONNECT:int = 2
  EVENT_RECEIVE:int = 3
class HostStatistic:
  HOST_TOTAL_SENT_DATA:int = 0
  HOST_TOTAL_SENT_PACKETS:int = 1
  HOST_TOTAL_RECEIVED_DATA:int = 2
  HOST_TOTAL_RECEIVED_PACKETS:int = 3


class ENetConnection(__refcounted__.RefCounted):
  """"""

  @staticmethod
  def constructor()->ENetConnection:pass



  @staticmethod
  def cast(other:__object__.Object)->ENetConnection:pass


  def create_host_bound(self, bind_address:str, bind_port:int, max_peers:int=32, max_channels:int=0, in_bandwidth:int=0, out_bandwidth:int=0)->int:
    """"""
    pass

  def create_host(self, max_peers:int=32, max_channels:int=0, in_bandwidth:int=0, out_bandwidth:int=0)->int:
    """"""
    pass

  def destroy(self)->None:
    """"""
    pass

  def connect_to_host(self, address:str, port:int, channels:int=0, data:int=0)->__enetpacketpeer__.ENetPacketPeer:
    """"""
    pass

  def service(self, timeout:int=0)->__core__.Array:
    """"""
    pass

  def flush(self)->None:
    """"""
    pass

  def bandwidth_limit(self, in_bandwidth:int=0, out_bandwidth:int=0)->None:
    """"""
    pass

  def channel_limit(self, limit:int)->None:
    """"""
    pass

  def broadcast(self, channel:int, packet:__core__.PackedByteArray, flags:int)->None:
    """"""
    pass

  def compress(self, mode:int )->None:
    """"""
    pass

  def dtls_server_setup(self, server_options:__tlsoptions__.TLSOptions)->int:
    """"""
    pass

  def dtls_client_setup(self, hostname:str, client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int:
    """"""
    pass

  def refuse_new_connections(self, refuse:bool)->None:
    """"""
    pass

  def pop_statistic(self, statistic:int )->float:
    """"""
    pass

  def get_max_channels(self)->int:
    """"""
    pass

  def get_local_port(self)->int:
    """"""
    pass

  def get_peers(self)->typedarray::ENetPacketPeer:
    """"""
    pass

  def socket_send(self, destination_address:str, destination_port:int, packet:__core__.PackedByteArray)->None:
    """"""
    pass


