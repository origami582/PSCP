from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.PlaneMesh as __planemesh__


class Orientation:
  FACE_X:int = 0
  FACE_Y:int = 1
  FACE_Z:int = 2


class PlaneMesh(__primitivemesh__.PrimitiveMesh):
  """
		Class representing a planar `PrimitiveMesh`. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Z axes; this default rotation isn't suited for use with billboarded materials. For billboarded materials, change `orientation` to `constant FACE_Z`.
		**Note:** When using a large textured `PlaneMesh` (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase `subdivide_depth` and `subdivide_width` until you no longer notice UV jittering.
	"""

  @staticmethod
  def constructor()->PlaneMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->PlaneMesh:pass


  @property
  def size(self)->__core__.Vector2:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def subdivide_width(self)->int:
    """"""
    pass
  @subdivide_width.setter
  def subdivide_width(self,  value:int)->None:
    """"""
    pass
  @property
  def subdivide_depth(self)->int:
    """"""
    pass
  @subdivide_depth.setter
  def subdivide_depth(self,  value:int)->None:
    """"""
    pass
  @property
  def center_offset(self)->__core__.Vector3:
    """"""
    pass
  @center_offset.setter
  def center_offset(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def orientation(self)->int:
    """"""
    pass
  @orientation.setter
  def orientation(self,  value:int)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector2)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector2:
    """"""
    pass

  def set_subdivide_width(self, subdivide:int)->None:
    """"""
    pass

  def get_subdivide_width(self)->int:
    """"""
    pass

  def set_subdivide_depth(self, subdivide:int)->None:
    """"""
    pass

  def get_subdivide_depth(self)->int:
    """"""
    pass

  def set_center_offset(self, offset:__core__.Vector3)->None:
    """"""
    pass

  def get_center_offset(self)->__core__.Vector3:
    """"""
    pass

  def set_orientation(self, orientation:int )->None:
    """"""
    pass

  def get_orientation(self)->int:
    """"""
    pass


