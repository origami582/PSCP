from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TileSetSource as __tilesetsource__
import py4godot.classes.PackedScene as __packedscene__



class TileSetScenesCollectionSource(__tilesetsource__.TileSetSource):
  """
		When placed on a `TileMapLayer`, tiles from `TileSetScenesCollectionSource` will automatically instantiate an associated scene at the cell's position in the TileMapLayer.
		Scenes are instantiated as children of the `TileMapLayer` after it enters the tree, at the end of the frame (their creation is deferred). If you add/remove a scene tile in the `TileMapLayer` that is already inside the tree, the `TileMapLayer` will automatically instantiate/free the scene accordingly.
		**Note:** Scene tiles all occupy one tile slot and instead use alternate tile ID to identify scene index. `TileSetSource.get_tiles_count` will always return `1`. Use `get_scene_tiles_count` to get a number of scenes in a `TileSetScenesCollectionSource`.
		Use this code if you want to find the scene path at a given tile in `TileMapLayer`:
		
		```gdscript
		var source_id = tile_map_layer.get_cell_source_id(Vector2i(x, y))
		if source_id > -1:
			var scene_source = tile_map_layer.tile_set.get_source(source_id)
			if scene_source is TileSetScenesCollectionSource:
				var alt_id = tile_map_layer.get_cell_alternative_tile(Vector2i(x, y))
				# The assigned PackedScene.
				var scene = scene_source.get_scene_tile_scene(alt_id)
		```
		
		
	"""

  @staticmethod
  def constructor()->TileSetScenesCollectionSource:pass



  @staticmethod
  def cast(other:__object__.Object)->TileSetScenesCollectionSource:pass


  def get_scene_tiles_count(self)->int:
    """
				Returns the number or scene tiles this TileSet source has.
			"""
    pass

  def get_scene_tile_id(self, index:int)->int:
    """
				Returns the scene tile ID of the scene tile at `index`.
			"""
    pass

  def has_scene_tile_id(self, id:int)->bool:
    """
				Returns whether this TileSet source has a scene tile with `id`.
			"""
    pass

  def create_scene_tile(self, packed_scene:__packedscene__.PackedScene, id_override:int=-1)->int:
    """
				Creates a scene-based tile out of the given scene.
				Returns a newly generated unique ID.
			"""
    pass

  def set_scene_tile_id(self, id:int, new_id:int)->None:
    """
				Changes a scene tile's ID from `id` to `new_id`. This will fail if there is already a tile with an ID equal to `new_id`.
			"""
    pass

  def set_scene_tile_scene(self, id:int, packed_scene:__packedscene__.PackedScene)->None:
    """
				Assigns a `PackedScene` resource to the scene tile with `id`. This will fail if the scene does not extend `CanvasItem`, as positioning properties are needed to place the scene on the `TileMapLayer`.
			"""
    pass

  def get_scene_tile_scene(self, id:int)->__packedscene__.PackedScene:
    """
				Returns the `PackedScene` resource of scene tile with `id`.
			"""
    pass

  def set_scene_tile_display_placeholder(self, id:int, display_placeholder:bool)->None:
    """
				Sets whether or not the scene tile with `id` should display a placeholder in the editor. This might be useful for scenes that are not visible.
			"""
    pass

  def get_scene_tile_display_placeholder(self, id:int)->bool:
    """
				Returns whether the scene tile with `id` displays a placeholder in the editor.
			"""
    pass

  def remove_scene_tile(self, id:int)->None:
    """
				Remove the scene tile with `id`.
			"""
    pass

  def get_next_scene_tile_id(self)->int:
    """
				Returns the scene ID a following call to `create_scene_tile` would return.
			"""
    pass


