from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh as __primitivemesh__



class BoxMesh(__primitivemesh__.PrimitiveMesh):
  """
		Generate an axis-aligned box `PrimitiveMesh`.
		The box's UV layout is arranged in a 3Ã—2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to `Vector3(3, 2, 1)`. This is equivalent to adding `UV *= vec2(3.0, 2.0)` in a vertex shader.
		**Note:** When using a large textured `BoxMesh` (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase `subdivide_depth`, `subdivide_height` and `subdivide_width` until you no longer notice UV jittering.
	"""

  @staticmethod
  def constructor()->BoxMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->BoxMesh:pass


  @property
  def size(self)->__core__.Vector3:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def subdivide_width(self)->int:
    """"""
    pass
  @subdivide_width.setter
  def subdivide_width(self,  value:int)->None:
    """"""
    pass
  @property
  def subdivide_height(self)->int:
    """"""
    pass
  @subdivide_height.setter
  def subdivide_height(self,  value:int)->None:
    """"""
    pass
  @property
  def subdivide_depth(self)->int:
    """"""
    pass
  @subdivide_depth.setter
  def subdivide_depth(self,  value:int)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector3:
    """"""
    pass

  def set_subdivide_width(self, subdivide:int)->None:
    """"""
    pass

  def get_subdivide_width(self)->int:
    """"""
    pass

  def set_subdivide_height(self, divisions:int)->None:
    """"""
    pass

  def get_subdivide_height(self)->int:
    """"""
    pass

  def set_subdivide_depth(self, divisions:int)->None:
    """"""
    pass

  def get_subdivide_depth(self)->int:
    """"""
    pass


