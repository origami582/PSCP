from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.d as __d__
import py4godot.classes.PhysicsServer3DRenderingServerHandler as __physicsserver3drenderingserverhandler__
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.PhysicsDirectBodyState3DExtension as __physicsdirectbodystate3dextension__
import py4godot.classes.y as __y__
import py4godot.classes.PhysicsDirectSpaceState3DExtension as __physicsdirectspacestate3dextension__
import py4godot.classes.PhysicsServer3D as __physicsserver3d__
import py4godot.classes.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__
import py4godot.classes.PhysicsServer3DExtension as __physicsserver3dextension__
import py4godot.classes.e as __e__
import py4godot.classes.I as __i__
import py4godot.classes.p as __p__
import py4godot.classes.R as __r__
import py4godot.classes.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__



class PhysicsServer3DExtension(__physicsserver3d__.PhysicsServer3D):
  """
		This class extends `PhysicsServer3D` by providing additional virtual methods that can be overridden. When these methods are overridden, they will be called instead of the internal methods of the physics server.
		Intended for use with GDExtension to create custom implementations of `PhysicsServer3D`.
	"""

  @staticmethod
  def constructor()->PhysicsServer3DExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer3DExtension:pass


  def _world_boundary_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _separation_ray_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _sphere_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _box_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _capsule_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _cylinder_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _convex_polygon_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _concave_polygon_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _heightmap_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _custom_shape_create(self)->__core__.RID:
    """
"""
    pass

  def _shape_set_data(self, shape:__core__.RID, data:Any)->None:
    """
"""
    pass

  def _shape_set_custom_solver_bias(self, shape:__core__.RID, bias:float)->None:
    """
"""
    pass

  def _shape_set_margin(self, shape:__core__.RID, margin:float)->None:
    """
"""
    pass

  def _shape_get_margin(self, shape:__core__.RID)->float:
    """
"""
    pass

  def _shape_get_type(self, shape:__core__.RID)->int:
    """
"""
    pass

  def _shape_get_data(self, shape:__core__.RID)->Any:
    """
"""
    pass

  def _shape_get_custom_solver_bias(self, shape:__core__.RID)->float:
    """
"""
    pass

  def _space_create(self)->__core__.RID:
    """
"""
    pass

  def _space_set_active(self, space:__core__.RID, active:bool)->None:
    """
"""
    pass

  def _space_is_active(self, space:__core__.RID)->bool:
    """
"""
    pass

  def _space_set_param(self, space:__core__.RID, param:int , value:float)->None:
    """
"""
    pass

  def _space_get_param(self, space:__core__.RID, param:int )->float:
    """
"""
    pass

  def _space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate3d__.PhysicsDirectSpaceState3D|__physicsdirectspacestate3dextension__.PhysicsDirectSpaceState3DExtension:
    """
"""
    pass

  def _space_set_debug_contacts(self, space:__core__.RID, max_contacts:int)->None:
    """
"""
    pass

  def _space_get_contacts(self, space:__core__.RID)->__core__.PackedVector3Array:
    """
"""
    pass

  def _space_get_contact_count(self, space:__core__.RID)->int:
    """
"""
    pass

  def _area_create(self)->__core__.RID:
    """
"""
    pass

  def _area_set_space(self, area:__core__.RID, space:__core__.RID)->None:
    """
"""
    pass

  def _area_get_space(self, area:__core__.RID)->__core__.RID:
    """
"""
    pass

  def _area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D, disabled:bool)->None:
    """
"""
    pass

  def _area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
"""
    pass

  def _area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None:
    """
"""
    pass

  def _area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
"""
    pass

  def _area_get_shape_count(self, area:__core__.RID)->int:
    """
"""
    pass

  def _area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID:
    """
"""
    pass

  def _area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform3D:
    """
"""
    pass

  def _area_remove_shape(self, area:__core__.RID, shape_idx:int)->None:
    """
"""
    pass

  def _area_clear_shapes(self, area:__core__.RID)->None:
    """
"""
    pass

  def _area_attach_object_instance_id(self, area:__core__.RID, id:int)->None:
    """
"""
    pass

  def _area_get_object_instance_id(self, area:__core__.RID)->int:
    """
"""
    pass

  def _area_set_param(self, area:__core__.RID, param:int , value:Any)->None:
    """
"""
    pass

  def _area_set_transform(self, area:__core__.RID, transform:__core__.Transform3D)->None:
    """
"""
    pass

  def _area_get_param(self, area:__core__.RID, param:int )->Any:
    """
"""
    pass

  def _area_get_transform(self, area:__core__.RID)->__core__.Transform3D:
    """
"""
    pass

  def _area_set_collision_layer(self, area:__core__.RID, layer:int)->None:
    """
"""
    pass

  def _area_get_collision_layer(self, area:__core__.RID)->int:
    """
"""
    pass

  def _area_set_collision_mask(self, area:__core__.RID, mask:int)->None:
    """
"""
    pass

  def _area_get_collision_mask(self, area:__core__.RID)->int:
    """
"""
    pass

  def _area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None:
    """
"""
    pass

  def _area_set_ray_pickable(self, area:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def _area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
"""
    pass

  def _area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None:
    """
"""
    pass

  def _body_create(self)->__core__.RID:
    """
"""
    pass

  def _body_set_space(self, body:__core__.RID, space:__core__.RID)->None:
    """
"""
    pass

  def _body_get_space(self, body:__core__.RID)->__core__.RID:
    """
"""
    pass

  def _body_set_mode(self, body:__core__.RID, mode:int )->None:
    """
"""
    pass

  def _body_get_mode(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D, disabled:bool)->None:
    """
"""
    pass

  def _body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None:
    """
"""
    pass

  def _body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None:
    """
"""
    pass

  def _body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None:
    """
"""
    pass

  def _body_get_shape_count(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID:
    """
"""
    pass

  def _body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform3D:
    """
"""
    pass

  def _body_remove_shape(self, body:__core__.RID, shape_idx:int)->None:
    """
"""
    pass

  def _body_clear_shapes(self, body:__core__.RID)->None:
    """
"""
    pass

  def _body_attach_object_instance_id(self, body:__core__.RID, id:int)->None:
    """
"""
    pass

  def _body_get_object_instance_id(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_set_enable_continuous_collision_detection(self, body:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def _body_is_continuous_collision_detection_enabled(self, body:__core__.RID)->bool:
    """
"""
    pass

  def _body_set_collision_layer(self, body:__core__.RID, layer:int)->None:
    """
"""
    pass

  def _body_get_collision_layer(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_set_collision_mask(self, body:__core__.RID, mask:int)->None:
    """
"""
    pass

  def _body_get_collision_mask(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_set_collision_priority(self, body:__core__.RID, priority:float)->None:
    """
"""
    pass

  def _body_get_collision_priority(self, body:__core__.RID)->float:
    """
"""
    pass

  def _body_set_user_flags(self, body:__core__.RID, flags:int)->None:
    """
"""
    pass

  def _body_get_user_flags(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_set_param(self, body:__core__.RID, param:int , value:Any)->None:
    """
"""
    pass

  def _body_get_param(self, body:__core__.RID, param:int )->Any:
    """
"""
    pass

  def _body_reset_mass_properties(self, body:__core__.RID)->None:
    """
"""
    pass

  def _body_set_state(self, body:__core__.RID, state:int , value:Any)->None:
    """
"""
    pass

  def _body_get_state(self, body:__core__.RID, state:int )->Any:
    """
"""
    pass

  def _body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None:
    """
"""
    pass

  def _body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector3, position:__core__.Vector3)->None:
    """
"""
    pass

  def _body_apply_torque_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None:
    """
"""
    pass

  def _body_apply_central_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
"""
    pass

  def _body_apply_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3)->None:
    """
"""
    pass

  def _body_apply_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
"""
    pass

  def _body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
"""
    pass

  def _body_add_constant_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3)->None:
    """
"""
    pass

  def _body_add_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
"""
    pass

  def _body_set_constant_force(self, body:__core__.RID, force:__core__.Vector3)->None:
    """
"""
    pass

  def _body_get_constant_force(self, body:__core__.RID)->__core__.Vector3:
    """
"""
    pass

  def _body_set_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None:
    """
"""
    pass

  def _body_get_constant_torque(self, body:__core__.RID)->__core__.Vector3:
    """
"""
    pass

  def _body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector3)->None:
    """
"""
    pass

  def _body_set_axis_lock(self, body:__core__.RID, axis:int , lock:bool)->None:
    """
"""
    pass

  def _body_is_axis_locked(self, body:__core__.RID, axis:int )->bool:
    """
"""
    pass

  def _body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
"""
    pass

  def _body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None:
    """
"""
    pass

  def _body_get_collision_exceptions(self, body:__core__.RID)->typedarray::RID:
    """
"""
    pass

  def _body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None:
    """
"""
    pass

  def _body_get_max_contacts_reported(self, body:__core__.RID)->int:
    """
"""
    pass

  def _body_set_contacts_reported_depth_threshold(self, body:__core__.RID, threshold:float)->None:
    """
"""
    pass

  def _body_get_contacts_reported_depth_threshold(self, body:__core__.RID)->float:
    """
"""
    pass

  def _body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def _body_is_omitting_force_integration(self, body:__core__.RID)->bool:
    """
"""
    pass

  def _body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None:
    """
"""
    pass

  def _body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:Any)->None:
    """
"""
    pass

  def _body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def _body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate3d__.PhysicsDirectBodyState3D|__physicsdirectbodystate3dextension__.PhysicsDirectBodyState3DExtension:
    """
"""
    pass

  def _soft_body_create(self)->__core__.RID:
    """
"""
    pass

  def _soft_body_update_rendering_server(self, body:__core__.RID, rendering_server_handler:__physicsserver3drenderingserverhandler__.PhysicsServer3DRenderingServerHandler)->None:
    """
"""
    pass

  def _soft_body_set_space(self, body:__core__.RID, space:__core__.RID)->None:
    """
"""
    pass

  def _soft_body_get_space(self, body:__core__.RID)->__core__.RID:
    """
"""
    pass

  def _soft_body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None:
    """
"""
    pass

  def _soft_body_set_collision_layer(self, body:__core__.RID, layer:int)->None:
    """
"""
    pass

  def _soft_body_get_collision_layer(self, body:__core__.RID)->int:
    """
"""
    pass

  def _soft_body_set_collision_mask(self, body:__core__.RID, mask:int)->None:
    """
"""
    pass

  def _soft_body_get_collision_mask(self, body:__core__.RID)->int:
    """
"""
    pass

  def _soft_body_add_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None:
    """
"""
    pass

  def _soft_body_remove_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None:
    """
"""
    pass

  def _soft_body_get_collision_exceptions(self, body:__core__.RID)->typedarray::RID:
    """
"""
    pass

  def _soft_body_set_state(self, body:__core__.RID, state:int , variant:Any)->None:
    """
"""
    pass

  def _soft_body_get_state(self, body:__core__.RID, state:int )->Any:
    """
"""
    pass

  def _soft_body_set_transform(self, body:__core__.RID, transform:__core__.Transform3D)->None:
    """
"""
    pass

  def _soft_body_set_simulation_precision(self, body:__core__.RID, simulation_precision:int)->None:
    """
"""
    pass

  def _soft_body_get_simulation_precision(self, body:__core__.RID)->int:
    """
"""
    pass

  def _soft_body_set_total_mass(self, body:__core__.RID, total_mass:float)->None:
    """
"""
    pass

  def _soft_body_get_total_mass(self, body:__core__.RID)->float:
    """
"""
    pass

  def _soft_body_set_linear_stiffness(self, body:__core__.RID, linear_stiffness:float)->None:
    """
"""
    pass

  def _soft_body_get_linear_stiffness(self, body:__core__.RID)->float:
    """
"""
    pass

  def _soft_body_set_pressure_coefficient(self, body:__core__.RID, pressure_coefficient:float)->None:
    """
"""
    pass

  def _soft_body_get_pressure_coefficient(self, body:__core__.RID)->float:
    """
"""
    pass

  def _soft_body_set_damping_coefficient(self, body:__core__.RID, damping_coefficient:float)->None:
    """
"""
    pass

  def _soft_body_get_damping_coefficient(self, body:__core__.RID)->float:
    """
"""
    pass

  def _soft_body_set_drag_coefficient(self, body:__core__.RID, drag_coefficient:float)->None:
    """
"""
    pass

  def _soft_body_get_drag_coefficient(self, body:__core__.RID)->float:
    """
"""
    pass

  def _soft_body_set_mesh(self, body:__core__.RID, mesh:__core__.RID)->None:
    """
"""
    pass

  def _soft_body_get_bounds(self, body:__core__.RID)->__core__.AABB:
    """
"""
    pass

  def _soft_body_move_point(self, body:__core__.RID, point_index:int, global_position:__core__.Vector3)->None:
    """
"""
    pass

  def _soft_body_get_point_global_position(self, body:__core__.RID, point_index:int)->__core__.Vector3:
    """
"""
    pass

  def _soft_body_remove_all_pinned_points(self, body:__core__.RID)->None:
    """
"""
    pass

  def _soft_body_pin_point(self, body:__core__.RID, point_index:int, pin:bool)->None:
    """
"""
    pass

  def _soft_body_is_point_pinned(self, body:__core__.RID, point_index:int)->bool:
    """
"""
    pass

  def _joint_create(self)->__core__.RID:
    """
"""
    pass

  def _joint_clear(self, joint:__core__.RID)->None:
    """
"""
    pass

  def _joint_make_pin(self, joint:__core__.RID, body_A:__core__.RID, local_A:__core__.Vector3, body_B:__core__.RID, local_B:__core__.Vector3)->None:
    """
"""
    pass

  def _pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
"""
    pass

  def _pin_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
"""
    pass

  def _pin_joint_set_local_a(self, joint:__core__.RID, local_A:__core__.Vector3)->None:
    """
"""
    pass

  def _pin_joint_get_local_a(self, joint:__core__.RID)->__core__.Vector3:
    """
"""
    pass

  def _pin_joint_set_local_b(self, joint:__core__.RID, local_B:__core__.Vector3)->None:
    """
"""
    pass

  def _pin_joint_get_local_b(self, joint:__core__.RID)->__core__.Vector3:
    """
"""
    pass

  def _joint_make_hinge(self, joint:__core__.RID, body_A:__core__.RID, hinge_A:__core__.Transform3D, body_B:__core__.RID, hinge_B:__core__.Transform3D)->None:
    """
"""
    pass

  def _joint_make_hinge_simple(self, joint:__core__.RID, body_A:__core__.RID, pivot_A:__core__.Vector3, axis_A:__core__.Vector3, body_B:__core__.RID, pivot_B:__core__.Vector3, axis_B:__core__.Vector3)->None:
    """
"""
    pass

  def _hinge_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
"""
    pass

  def _hinge_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
"""
    pass

  def _hinge_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None:
    """
"""
    pass

  def _hinge_joint_get_flag(self, joint:__core__.RID, flag:int )->bool:
    """
"""
    pass

  def _joint_make_slider(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
"""
    pass

  def _slider_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
"""
    pass

  def _slider_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
"""
    pass

  def _joint_make_cone_twist(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
"""
    pass

  def _cone_twist_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None:
    """
"""
    pass

  def _cone_twist_joint_get_param(self, joint:__core__.RID, param:int )->float:
    """
"""
    pass

  def _joint_make_generic_6dof(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None:
    """
"""
    pass

  def _generic_6dof_joint_set_param(self, joint:__core__.RID, axis:int , param:int , value:float)->None:
    """
"""
    pass

  def _generic_6dof_joint_get_param(self, joint:__core__.RID, axis:int , param:int )->float:
    """
"""
    pass

  def _generic_6dof_joint_set_flag(self, joint:__core__.RID, axis:int , flag:int , enable:bool)->None:
    """
"""
    pass

  def _generic_6dof_joint_get_flag(self, joint:__core__.RID, axis:int , flag:int )->bool:
    """
"""
    pass

  def _joint_get_type(self, joint:__core__.RID)->int:
    """
"""
    pass

  def _joint_set_solver_priority(self, joint:__core__.RID, priority:int)->None:
    """
"""
    pass

  def _joint_get_solver_priority(self, joint:__core__.RID)->int:
    """
"""
    pass

  def _joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None:
    """
"""
    pass

  def _joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool:
    """
"""
    pass

  def _free_rid(self, rid:__core__.RID)->None:
    """
"""
    pass

  def _set_active(self, active:bool)->None:
    """
"""
    pass

  def _init(self)->None:
    """
"""
    pass

  def _step(self, step:float)->None:
    """
"""
    pass

  def _sync(self)->None:
    """
"""
    pass

  def _flush_queries(self)->None:
    """
"""
    pass

  def _end_sync(self)->None:
    """
"""
    pass

  def _finish(self)->None:
    """
"""
    pass

  def _is_flushing_queries(self)->bool:
    """
"""
    pass

  def _get_process_info(self, process_info:int )->int:
    """
"""
    pass

  def body_test_motion_is_excluding_body(self, body:__core__.RID)->bool:
    """
"""
    pass

  def body_test_motion_is_excluding_object(self, object:int)->bool:
    """
"""
    pass


