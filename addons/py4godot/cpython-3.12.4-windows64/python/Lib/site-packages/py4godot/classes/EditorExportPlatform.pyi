from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorExportPlatformPC as __editorexportplatformpc__
import py4godot.classes.EditorExportPlatformLinuxBSD as __editorexportplatformlinuxbsd__
import py4godot.classes.EditorExportPlatformWindows as __editorexportplatformwindows__
import py4godot.classes.EditorExportPlatformMacOS as __editorexportplatformmacos__
import py4godot.classes.EditorExportPreset as __editorexportpreset__
import py4godot.classes.EditorExportPlatformExtension as __editorexportplatformextension__
import py4godot.classes.EditorExportPlatformIOS as __editorexportplatformios__
import py4godot.classes.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.EditorExportPlatformAndroid as __editorexportplatformandroid__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.EditorExportPlatformWeb as __editorexportplatformweb__


class ExportMessageType:
  EXPORT_MESSAGE_NONE:int = 0
  EXPORT_MESSAGE_INFO:int = 1
  EXPORT_MESSAGE_WARNING:int = 2
  EXPORT_MESSAGE_ERROR:int = 3
class DebugFlags:
  DEBUG_FLAG_DUMB_CLIENT:int = 1
  DEBUG_FLAG_REMOTE_DEBUG:int = 2
  DEBUG_FLAG_REMOTE_DEBUG_LOCALHOST:int = 4
  DEBUG_FLAG_VIEW_COLLISIONS:int = 8
  DEBUG_FLAG_VIEW_NAVIGATION:int = 16


class EditorExportPlatform(__refcounted__.RefCounted):
  """
		Base resource that provides the functionality of exporting a release build of a project to a platform, from the editor. Stores platform-specific metadata such as the name and supported features of the platform, and performs the exporting of projects, PCK files, and ZIP files. Uses an export template for the platform provided at the time of project exporting.
		Used in scripting by `EditorExportPlugin` to configure platform-specific customization of scenes and resources. See `EditorExportPlugin._begin_customize_scenes` and `EditorExportPlugin._begin_customize_resources` for more details.
	"""

  @staticmethod
  def constructor()->EditorExportPlatform:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPlatform:pass


  def get_os_name(self)->str:
    """
				Returns the name of the export operating system handled by this `EditorExportPlatform` class, as a friendly string. Possible return values are `Windows`, `Linux`, `macOS`, `Android`, `iOS`, and `Web`.
			"""
    pass

  def create_preset(self)->__editorexportpreset__.EditorExportPreset:
    """
				Create a new preset for this platform.
			"""
    pass

  def find_export_template(self, template_file_name:str)->__core__.Dictionary:
    """
				Locates export template for the platform, and returns `Dictionary` with the following keys: `path: String` and `error: String`. This method is provided for convenience and custom export platforms aren't required to use it or keep export templates stored in the same way official templates are.
			"""
    pass

  def get_current_presets(self)->__core__.Array:
    """
				Returns array of `EditorExportPreset`s for this platform.
			"""
    pass

  def save_pack(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, embed:bool=False)->__core__.Dictionary:
    """
				Saves PCK archive and returns `Dictionary` with the following keys: `result: Error`, `so_files: Array` (array of the shared/static objects which contains dictionaries with the following keys: `path: String`, `tags: PackedStringArray`, and `target_folder: String`).
				If `embed` is `true`, PCK content is appended to the end of `path` file and return `Dictionary` additionally include following keys: `embedded_start: int` (embedded PCK offset) and `embedded_size: int` (embedded PCK size).
			"""
    pass

  def save_zip(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary:
    """
				Saves ZIP archive and returns `Dictionary` with the following keys: `result: Error`, `so_files: Array` (array of the shared/static objects which contains dictionaries with the following keys: `path: String`, `tags: PackedStringArray`, and `target_folder: String`).
			"""
    pass

  def save_pack_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary:
    """
				Saves patch PCK archive and returns `Dictionary` with the following keys: `result: Error`, `so_files: Array` (array of the shared/static objects which contains dictionaries with the following keys: `path: String`, `tags: PackedStringArray`, and `target_folder: String`).
			"""
    pass

  def save_zip_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary:
    """
				Saves patch ZIP archive and returns `Dictionary` with the following keys: `result: Error`, `so_files: Array` (array of the shared/static objects which contains dictionaries with the following keys: `path: String`, `tags: PackedStringArray`, and `target_folder: String`).
			"""
    pass

  def gen_export_flags(self, flags:int)->__core__.PackedStringArray:
    """
				Generates array of command line arguments for the default export templates for the debug flags and editor settings.
			"""
    pass

  def export_project_files(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, save_cb:__core__.Callable, shared_cb:__core__.Callable= __core__.Callable.new0())->int:
    """
				Exports project files for the specified preset. This method can be used to implement custom export format, other than PCK and ZIP. One of the callbacks is called for each exported file.
				`save_cb` is called for all exported files and have the following arguments: `file_path: String`, `file_data: PackedByteArray`, `file_index: int`, `file_count: int`, `encryption_include_filters: PackedStringArray`, `encryption_exclude_filters: PackedStringArray`, `encryption_key: PackedByteArray`.
				`shared_cb` is called for exported native shared/static libraries and have the following arguments: `file_path: String`, `tags: PackedStringArray`, `target_folder: String`.
				**Note:** `file_index` and `file_count` are intended for progress tracking only and aren't necessarily unique and precise.
			"""
    pass

  def export_project(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int:
    """
				Creates a full project at `path` for the specified `preset`.
			"""
    pass

  def export_pack(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int:
    """
				Creates a PCK archive at `path` for the specified `preset`.
			"""
    pass

  def export_zip(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int:
    """
				Create a ZIP archive at `path` for the specified `preset`.
			"""
    pass

  def export_pack_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray= __core__.PackedStringArray.new0(), flags:int=0)->int:
    """
				Creates a patch PCK archive at `path` for the specified `preset`, containing only the files that have changed since the last patch.
				**Note:** `patches` is an optional override of the set of patches defined in the export preset. When empty the patches defined in the export preset will be used instead.
			"""
    pass

  def export_zip_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray= __core__.PackedStringArray.new0(), flags:int=0)->int:
    """
				Create a patch ZIP archive at `path` for the specified `preset`, containing only the files that have changed since the last patch.
				**Note:** `patches` is an optional override of the set of patches defined in the export preset. When empty the patches defined in the export preset will be used instead.
			"""
    pass

  def clear_messages(self)->None:
    """
				Clears the export log.
			"""
    pass

  def add_message(self, type:int , category:str, message:str)->None:
    """
				Adds a message to the export log that will be displayed when exporting ends.
			"""
    pass

  def get_message_count(self)->int:
    """
				Returns number of messages in the export log.
			"""
    pass

  def get_message_type(self, index:int)->int:
    """
				Returns message type, for the message with `index`.
			"""
    pass

  def get_message_category(self, index:int)->str:
    """
				Returns message category, for the message with `index`.
			"""
    pass

  def get_message_text(self, index:int)->str:
    """
				Returns message text, for the message with `index`.
			"""
    pass

  def get_worst_message_type(self)->int:
    """
				Returns most severe message type currently present in the export log.
			"""
    pass

  def ssh_run_on_remote(self, host:str, port:str, ssh_arg:__core__.PackedStringArray, cmd_args:str, output:__core__.Array= __core__.Array.new0(), port_fwd:int=-1)->int:
    """
				Executes specified command on the remote host via SSH protocol and returns command output in the `output`.
			"""
    pass

  def ssh_run_on_remote_no_wait(self, host:str, port:str, ssh_args:__core__.PackedStringArray, cmd_args:str, port_fwd:int=-1)->int:
    """
				Executes specified command on the remote host via SSH protocol and returns process ID (on the remote host) without waiting for command to finish.
			"""
    pass

  def ssh_push_to_remote(self, host:str, port:str, scp_args:__core__.PackedStringArray, src_file:str, dst_file:str)->int:
    """
				Uploads specified file over SCP protocol to the remote host.
			"""
    pass

  def get_internal_export_files(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool)->__core__.Dictionary:
    """
				Returns additional files that should always be exported regardless of preset configuration, and are not part of the project source. The returned `Dictionary` contains filename keys (`String`) and their corresponding raw data (`PackedByteArray`).
			"""
    pass

  @staticmethod
  def get_forced_export_files()->__core__.PackedStringArray:
    """
				Returns array of core file names that always should be exported regardless of preset config.
			"""
    pass


