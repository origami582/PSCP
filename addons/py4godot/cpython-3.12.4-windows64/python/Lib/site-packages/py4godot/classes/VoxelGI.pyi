from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.Node as __node__
import py4godot.classes.CameraAttributes as __cameraattributes__
import py4godot.classes.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.VoxelGIData as __voxelgidata__
import py4godot.classes.CameraAttributesPractical as __cameraattributespractical__


class Subdiv:
  SUBDIV_64:int = 0
  SUBDIV_128:int = 1
  SUBDIV_256:int = 2
  SUBDIV_512:int = 3
  SUBDIV_MAX:int = 4


class VoxelGI(__visualinstance3d__.VisualInstance3D):
  """
		`VoxelGI`s are used to provide high-quality real-time indirect light and reflections to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. `VoxelGI`s need to be baked before having a visible effect. However, once baked, dynamic objects will receive light from them. Furthermore, lights can be fully dynamic or baked.
		**Note:** `VoxelGI` is only supported in the Forward+ rendering method, not Mobile or Compatibility.
		**Procedural generation:** `VoxelGI` can be baked in an exported project, which makes it suitable for procedurally generated or user-built levels as long as all the geometry is generated in advance. For games where geometry is generated at any time during gameplay, SDFGI is more suitable (see `Environment.sdfgi_enabled`).
		**Performance:** `VoxelGI` is relatively demanding on the GPU and is not suited to low-end hardware such as integrated graphics (consider `LightmapGI` instead). To improve performance, adjust `ProjectSettings.rendering/global_illumination/voxel_gi/quality` and enable `ProjectSettings.rendering/global_illumination/gi/use_half_resolution` in the Project Settings. To provide a fallback for low-end hardware, consider adding an option to disable `VoxelGI` in your project's options menus. A `VoxelGI` node can be disabled by hiding it.
		**Note:** Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh. To further prevent light leaks, you can also strategically place temporary `MeshInstance3D` nodes with their `GeometryInstance3D.gi_mode` set to `constant GeometryInstance3D.GI_MODE_STATIC`. These temporary nodes can then be hidden after baking the `VoxelGI` node.
	"""

  @staticmethod
  def constructor()->VoxelGI:pass



  @staticmethod
  def cast(other:__object__.Object)->VoxelGI:pass


  @property
  def subdiv(self)->int:
    """"""
    pass
  @subdiv.setter
  def subdiv(self,  value:int)->None:
    """"""
    pass
  @property
  def size(self)->__core__.Vector3:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def camera_attributes(self)->CameraAttributesPractical,CameraAttributesPhysical:
    """"""
    pass
  @camera_attributes.setter
  def camera_attributes(self,  value:__cameraattributespractical__.CameraAttributesPractical)->None:
    """"""
    pass
  @property
  def data(self)->__voxelgidata__.VoxelGIData:
    """"""
    pass
  @data.setter
  def data(self,  value:__voxelgidata__.VoxelGIData)->None:
    """"""
    pass
  def set_probe_data(self, data:__voxelgidata__.VoxelGIData)->None:
    """"""
    pass

  def get_probe_data(self)->__voxelgidata__.VoxelGIData:
    """"""
    pass

  def set_subdiv(self, subdiv:int )->None:
    """"""
    pass

  def get_subdiv(self)->int:
    """"""
    pass

  def set_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector3:
    """"""
    pass

  def set_camera_attributes(self, camera_attributes:__cameraattributes__.CameraAttributes)->None:
    """"""
    pass

  def get_camera_attributes(self)->__cameraattributespractical__.CameraAttributesPractical|__cameraattributes__.CameraAttributes|__cameraattributesphysical__.CameraAttributesPhysical:
    """"""
    pass

  def bake(self, from_node:__node__.Node= __node__.Node.constructor(), create_visual_debug:bool=False)->None:
    """
				Bakes the effect from all `GeometryInstance3D`s marked with `constant GeometryInstance3D.GI_MODE_STATIC` and `Light3D`s marked with either `constant Light3D.BAKE_STATIC` or `constant Light3D.BAKE_DYNAMIC`. If `create_visual_debug` is `true`, after baking the light, this will generate a `MultiMesh` that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the `VoxelGI`'s data and debug any issues that may be occurring.
				**Note:** `bake` works from the editor and in exported projects. This makes it suitable for procedurally generated or user-built levels. Baking a `VoxelGI` node generally takes from 5 to 20 seconds in most scenes. Reducing `subdiv` can speed up baking.
				**Note:** `GeometryInstance3D`s and `Light3D`s must be fully ready before `bake` is called. If you are procedurally creating those and some meshes or lights are missing from your baked `VoxelGI`, use `call_deferred("bake")` instead of calling `bake` directly.
			"""
    pass

  def debug_bake(self)->None:
    """
				Calls `bake` with `create_visual_debug` enabled.
			"""
    pass


