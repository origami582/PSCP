from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.Object.Object as __object__
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.VisualShaderNodeDeterminant as __visualshadernodedeterminant__
import py4godot.classes.AudioStreamGeneratorPlayback as __audiostreamgeneratorplayback__
import py4godot.classes.PhysicsDirectBodyState2DExtension as __physicsdirectbodystate2dextension__
import py4godot.classes.NavigationServer3D as __navigationserver3d__
import py4godot.classes.SurfaceTool as __surfacetool__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.VisualShaderNodeParticleEmitter as __visualshadernodeparticleemitter__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.LightmapGIData as __lightmapgidata__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.AudioEffectAmplify as __audioeffectamplify__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.VisualShaderNodeTransformVecMult as __visualshadernodetransformvecmult__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.InputEventJoypadMotion as __inputeventjoypadmotion__
import py4godot.classes.MultiplayerSynchronizer as __multiplayersynchronizer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.ResourcePreloader as __resourcepreloader__
import py4godot.classes.ImageFormatLoaderExtension as __imageformatloaderextension__
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.VisualShaderNodeTextureSDF as __visualshadernodetexturesdf__
import py4godot.classes.TileSet as __tileset__
import py4godot.classes.OccluderPolygon2D as __occluderpolygon2d__
import py4godot.classes.DTLSServer as __dtlsserver__
import py4godot.classes.PackedDataContainer as __packeddatacontainer__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.EditorExportPlatformWindows as __editorexportplatformwindows__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.StreamPeer as __streampeer__
import py4godot.classes.WebSocketPeer as __websocketpeer__
import py4godot.classes.NoiseTexture3D as __noisetexture3d__
import py4godot.classes.Slider as __slider__
import py4godot.classes.AnimationNodeBlend2 as __animationnodeblend2__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.RichTextEffect as __richtexteffect__
import py4godot.classes.VisualShaderNodeTransformOp as __visualshadernodetransformop__
import py4godot.classes.PacketPeerExtension as __packetpeerextension__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.ParallaxBackground as __parallaxbackground__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.GLTFObjectModelProperty as __gltfobjectmodelproperty__
import py4godot.classes.SkeletonModification2DPhysicalBones as __skeletonmodification2dphysicalbones__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.Thread as __thread__
import py4godot.classes.VisualShaderNodeInput as __visualshadernodeinput__
import py4godot.classes.VisualShaderNodeLinearSceneDepth as __visualshadernodelinearscenedepth__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.RDTextureView as __rdtextureview__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.SceneTree as __scenetree__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.PhysicsDirectSpaceState2DExtension as __physicsdirectspacestate2dextension__
import py4godot.classes.ResourceFormatSaver as __resourceformatsaver__
import py4godot.classes.MultiplayerPeerExtension as __multiplayerpeerextension__
import py4godot.classes.VisualShaderNodeFrame as __visualshadernodeframe__
import py4godot.classes.VisualShaderNodeSwitch as __visualshadernodeswitch__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.RDPipelineMultisampleState as __rdpipelinemultisamplestate__
import py4godot.classes.PackedDataContainerRef as __packeddatacontainerref__
import py4godot.classes.VisualShaderNodeParticleAccelerator as __visualshadernodeparticleaccelerator__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.PhysicsDirectBodyState2D as __physicsdirectbodystate2d__
import py4godot.classes.SkinReference as __skinreference__
import py4godot.classes.VisualShaderNodeVec4Constant as __visualshadernodevec4constant__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.VisualShaderNodeIs as __visualshadernodeis__
import py4godot.classes.VisualShaderNodeCurveXYZTexture as __visualshadernodecurvexyztexture__
import py4godot.classes.VisualShaderNodeIntFunc as __visualshadernodeintfunc__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.NavigationMeshGenerator as __navigationmeshgenerator__
import py4godot.classes.Texture as __texture__
import py4godot.classes.RDSamplerState as __rdsamplerstate__
import py4godot.classes.Lightmapper as __lightmapper__
import py4godot.classes.EditorNode3DGizmoPlugin as __editornode3dgizmoplugin__
import py4godot.classes.GLTFSpecGloss as __gltfspecgloss__
import py4godot.classes.VisualShaderNodeCubemapParameter as __visualshadernodecubemapparameter__
import py4godot.classes.XRPositionalTracker as __xrpositionaltracker__
import py4godot.classes.JavaScriptBridge as __javascriptbridge__
import py4godot.classes.OpenXRAPIExtension as __openxrapiextension__
import py4godot.classes.VisualShaderNodeTransformDecompose as __visualshadernodetransformdecompose__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GLTFNode as __gltfnode__
import py4godot.classes.ResourceImporterImage as __resourceimporterimage__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.CryptoKey as __cryptokey__
import py4godot.classes.Mutex as __mutex__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.ResourceFormatLoader as __resourceformatloader__
import py4godot.classes.NavigationPathQueryParameters2D as __navigationpathqueryparameters2d__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.VisualShaderNodeDistanceFade as __visualshadernodedistancefade__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.VisualShaderNodeBillboard as __visualshadernodebillboard__
import py4godot.classes.AnimationNodeTimeScale as __animationnodetimescale__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.XRTracker as __xrtracker__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.TileSetSource as __tilesetsource__
import py4godot.classes.Shape2D as __shape2d__
import py4godot.classes.VisualShaderNodeDerivativeFunc as __visualshadernodederivativefunc__
import py4godot.classes.VisualShaderNodeGroupBase as __visualshadernodegroupbase__
import py4godot.classes.CameraFeed as __camerafeed__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.OpenXRBindingModifier as __openxrbindingmodifier__
import py4godot.classes.SpriteFrames as __spriteframes__
import py4godot.classes.ResourceImporterBitMap as __resourceimporterbitmap__
import py4godot.classes.VisualShaderNodeTextureSDFNormal as __visualshadernodetexturesdfnormal__
import py4godot.classes.VisualShaderNodeTextureParameter as __visualshadernodetextureparameter__
import py4godot.classes.EngineDebugger as __enginedebugger__
import py4godot.classes.BoxOccluder3D as __boxoccluder3d__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.EditorExportPlatformIOS as __editorexportplatformios__
import py4godot.classes.IP as __ip__
import py4godot.classes.RenderSceneDataExtension as __renderscenedataextension__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.FontVariation as __fontvariation__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.GLTFSkin as __gltfskin__
import py4godot.classes.SkeletonModification2DStackHolder as __skeletonmodification2dstackholder__
import py4godot.classes.AudioStreamPlaybackInteractive as __audiostreamplaybackinteractive__
import py4godot.classes.VisualShaderNodeParticleMultiplyByAxisAngle as __visualshadernodeparticlemultiplybyaxisangle__
import py4godot.classes.VisualShaderNodeParameter as __visualshadernodeparameter__
import py4godot.classes.AudioEffectPhaser as __audioeffectphaser__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.VisualShaderNodeRotationByAxis as __visualshadernoderotationbyaxis__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.VisualShaderNodeColorOp as __visualshadernodecolorop__
import py4godot.classes.AudioEffectHighPassFilter as __audioeffecthighpassfilter__
import py4godot.classes.MobileVRInterface as __mobilevrinterface__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.VisualShaderNodeIntOp as __visualshadernodeintop__
import py4godot.classes.VisualShaderNodeParticleRandomness as __visualshadernodeparticlerandomness__
import py4godot.classes.AnimationPlayer as __animationplayer__
import py4godot.classes.SeparationRayShape2D as __separationrayshape2d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.VisualShaderNodeVectorLen as __visualshadernodevectorlen__
import py4godot.classes.CharFXTransform as __charfxtransform__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.ShaderIncludeDB as __shaderincludedb__
import py4godot.classes.AnimationNodeTransition as __animationnodetransition__
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.PhysicsDirectSpaceState3DExtension as __physicsdirectspacestate3dextension__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.CanvasLayer as __canvaslayer__
import py4godot.classes.SceneReplicationConfig as __scenereplicationconfig__
import py4godot.classes.VisualShaderNodeColorParameter as __visualshadernodecolorparameter__
import py4godot.classes.OpenXRHapticVibration as __openxrhapticvibration__
import py4godot.classes.EditorSceneFormatImporter as __editorsceneformatimporter__
import py4godot.classes.Shape3D as __shape3d__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.PacketPeerStream as __packetpeerstream__
import py4godot.classes.InputEventAction as __inputeventaction__
import py4godot.classes.KinematicCollision3D as __kinematiccollision3d__
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.PlaceholderTextureLayered as __placeholdertexturelayered__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.ResourceImporterTextureAtlas as __resourceimportertextureatlas__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.SeparationRayShape3D as __separationrayshape3d__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.VisualShaderNodeMix as __visualshadernodemix__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.VisualShaderNodeSmoothStep as __visualshadernodesmoothstep__
import py4godot.classes.FBXDocument as __fbxdocument__
import py4godot.classes.EditorExportPlatformPC as __editorexportplatformpc__
import py4godot.classes.AnimationNodeAdd3 as __animationnodeadd3__
import py4godot.classes.Node as __node__
import py4godot.classes.RenderSceneBuffersConfiguration as __renderscenebuffersconfiguration__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.VisualShaderNodeParticleEmit as __visualshadernodeparticleemit__
import py4godot.classes.OS as __os__
import py4godot.classes.VisualShaderNodeTexture2DArrayParameter as __visualshadernodetexture2darrayparameter__
import py4godot.classes.EditorImportPlugin as __editorimportplugin__
import py4godot.classes.VideoStreamPlayback as __videostreamplayback__
import py4godot.classes.VisualShaderNodeParticleConeVelocity as __visualshadernodeparticleconevelocity__
import py4godot.classes.StyleBoxEmpty as __styleboxempty__
import py4godot.classes.Window as __window__
import py4godot.classes.EditorScenePostImportPlugin as __editorscenepostimportplugin__
import py4godot.classes.Decal as __decal__
import py4godot.classes.OpenXRAnalogThresholdModifier as __openxranalogthresholdmodifier__
import py4godot.classes.BoxShape3D as __boxshape3d__
import py4godot.classes.CameraServer as __cameraserver__
import py4godot.classes.GLTFMesh as __gltfmesh__
import py4godot.classes.NavigationMesh as __navigationmesh__
import py4godot.classes.VisualShaderNodeTexture as __visualshadernodetexture__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.RDFramebufferPass as __rdframebufferpass__
import py4godot.classes.Resource as __resource__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.World3D as __world3d__
import py4godot.classes.GDExtensionManager as __gdextensionmanager__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.ColorPalette as __colorpalette__
import py4godot.classes.FramebufferCacheRD as __framebuffercacherd__
import py4godot.classes.RDPipelineDepthStencilState as __rdpipelinedepthstencilstate__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.Cubemap as __cubemap__
import py4godot.classes.TileMapPattern as __tilemappattern__
import py4godot.classes.VisualShaderNodeTexture3DParameter as __visualshadernodetexture3dparameter__
import py4godot.classes.VisualShaderNodeCubemap as __visualshadernodecubemap__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.TreeItem as __treeitem__
import py4godot.classes.AudioSamplePlayback as __audiosampleplayback__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__
import py4godot.classes.GLTFCamera as __gltfcamera__
import py4godot.classes.EditorPaths as __editorpaths__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.Texture2DArrayRD as __texture2darrayrd__
import py4godot.classes.WebXRInterface as __webxrinterface__
import py4godot.classes.OpenXRInteractionProfile as __openxrinteractionprofile__
import py4godot.classes.NavigationMeshSourceGeometryData3D as __navigationmeshsourcegeometrydata3d__
import py4godot.classes.NavigationAgent2D as __navigationagent2d__
import py4godot.classes.VoxelGIData as __voxelgidata__
import py4godot.classes.XRInterfaceExtension as __xrinterfaceextension__
import py4godot.classes.VisualShaderNodeTransformParameter as __visualshadernodetransformparameter__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.ImageFormatLoader as __imageformatloader__
import py4godot.classes.StreamPeerTCP as __streampeertcp__
import py4godot.classes.VisualShaderNodeTransformConstant as __visualshadernodetransformconstant__
import py4godot.classes.EditorScenePostImport as __editorscenepostimport__
import py4godot.classes.AnimationNodeStateMachineTransition as __animationnodestatemachinetransition__
import py4godot.classes.AnimationTree as __animationtree__
import py4godot.classes.OpenXRIPBindingModifier as __openxripbindingmodifier__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.ResourceImporterCSVTranslation as __resourceimportercsvtranslation__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.GLTFAnimation as __gltfanimation__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.XRPose as __xrpose__
import py4godot.classes.CompressedTextureLayered as __compressedtexturelayered__
import py4godot.classes.OpenXRActionSet as __openxractionset__
import py4godot.classes.VisualShaderNodeTexture3D as __visualshadernodetexture3d__
import py4godot.classes.VisualShaderNodeResizableBase as __visualshadernoderesizablebase__
import py4godot.classes.RDVertexAttribute as __rdvertexattribute__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.AudioEffectStereoEnhance as __audioeffectstereoenhance__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.JavaScriptObject as __javascriptobject__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.Tree as __tree__
import py4godot.classes.OggPacketSequencePlayback as __oggpacketsequenceplayback__
import py4godot.classes.WorldBoundaryShape3D as __worldboundaryshape3d__
import py4godot.classes.VisualShaderNodeVectorDistance as __visualshadernodevectordistance__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.ResourceImporterWAV as __resourceimporterwav__
import py4godot.classes.TileData as __tiledata__
import py4godot.classes.AudioEffectBandPassFilter as __audioeffectbandpassfilter__
import py4godot.classes.VisualShaderNodeTexture2DParameter as __visualshadernodetexture2dparameter__
import py4godot.classes.AudioEffectNotchFilter as __audioeffectnotchfilter__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.AudioEffectChorus as __audioeffectchorus__
import py4godot.classes.Texture3DRD as __texture3drd__
import py4godot.classes.RenderData as __renderdata__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.EditorFileSystemImportFormatSupportQuery as __editorfilesystemimportformatsupportquery__
import py4godot.classes.JavaClass as __javaclass__
import py4godot.classes.RandomNumberGenerator as __randomnumbergenerator__
import py4godot.classes.VisualShaderNodeVectorOp as __visualshadernodevectorop__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.PlaceholderTexture3D as __placeholdertexture3d__
import py4godot.classes.SyntaxHighlighter as __syntaxhighlighter__
import py4godot.classes.PackedScene as __packedscene__
import py4godot.classes.AudioStreamPlaylist as __audiostreamplaylist__
import py4godot.classes.Shader as __shader__
import py4godot.classes.TextServerManager as __textservermanager__
import py4godot.classes.SphereOccluder3D as __sphereoccluder3d__
import py4godot.classes.JNISingleton as __jnisingleton__
import py4godot.classes.JSON as __json__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.WebRTCDataChannelExtension as __webrtcdatachannelextension__
import py4godot.classes.StyleBoxTexture as __styleboxtexture__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.AudioEffectRecord as __audioeffectrecord__
import py4godot.classes.EditorResourceTooltipPlugin as __editorresourcetooltipplugin__
import py4godot.classes.EditorExportPlatformExtension as __editorexportplatformextension__
import py4godot.classes.AudioStreamPlayer as __audiostreamplayer__
import py4godot.classes.Sky as __sky__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.Curve as __curve__
import py4godot.classes.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__
import py4godot.classes.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.PhysicsServer3DExtension as __physicsserver3dextension__
import py4godot.classes.Tweener as __tweener__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.ResourceLoader as __resourceloader__
import py4godot.classes.VisualShaderNodeWorldPositionFromDepth as __visualshadernodeworldpositionfromdepth__
import py4godot.classes.MultiMesh as __multimesh__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.VisualShaderNodeIntParameter as __visualshadernodeintparameter__
import py4godot.classes.Environment as __environment__
import py4godot.classes.VisualShaderNodeFaceForward as __visualshadernodefaceforward__
import py4godot.classes.XRVRS as __xrvrs__
import py4godot.classes.VisualShader as __visualshader__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.AudioServer as __audioserver__
import py4godot.classes.Texture3D as __texture3d__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.ResourceUID as __resourceuid__
import py4godot.classes.Semaphore as __semaphore__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.VisualShaderNodeFloatOp as __visualshadernodefloatop__
import py4godot.classes.HeightMapShape3D as __heightmapshape3d__
import py4godot.classes.VisualShaderNodeConstant as __visualshadernodeconstant__
import py4godot.classes.RectangleShape2D as __rectangleshape2d__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.CompressedCubemap as __compressedcubemap__
import py4godot.classes.WorkerThreadPool as __workerthreadpool__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.Time as __time__
import py4godot.classes.VisualShaderNodeExpression as __visualshadernodeexpression__
import py4godot.classes.OpenXRHapticBase as __openxrhapticbase__
import py4godot.classes.VisualShaderNodeParticleRingEmitter as __visualshadernodeparticleringemitter__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.GLTFBufferView as __gltfbufferview__
import py4godot.classes.AStarGrid2D as __astargrid2d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.PhysicsTestMotionResult3D as __physicstestmotionresult3d__
import py4godot.classes.TileSetScenesCollectionSource as __tilesetscenescollectionsource__
import py4godot.classes.AudioEffectDistortion as __audioeffectdistortion__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.EditorDebuggerPlugin as __editordebuggerplugin__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.SubtweenTweener as __subtweentweener__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.Translation as __translation__
import py4godot.classes.VisualShaderNodeCompare as __visualshadernodecompare__
import py4godot.classes.PolygonOccluder3D as __polygonoccluder3d__
import py4godot.classes.MeshLibrary as __meshlibrary__
import py4godot.classes.CameraAttributesPractical as __cameraattributespractical__
import py4godot.classes.EditorDebuggerSession as __editordebuggersession__
import py4godot.classes.RDPipelineRasterizationState as __rdpipelinerasterizationstate__
import py4godot.classes.GLTFState as __gltfstate__
import py4godot.classes.Skin as __skin__
import py4godot.classes.VisualShaderNodeSDFToScreenUV as __visualshadernodesdftoscreenuv__
import py4godot.classes.XRInterface as __xrinterface__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.ResourceImporterDynamicFont as __resourceimporterdynamicfont__
import py4godot.classes.MethodTweener as __methodtweener__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.EditorExportPlatformWeb as __editorexportplatformweb__
import py4godot.classes.ENetMultiplayerPeer as __enetmultiplayerpeer__
import py4godot.classes.ClassDB as __classdb__
import py4godot.classes.InputEventFromWindow as __inputeventfromwindow__
import py4godot.classes.PhysicsTestMotionResult2D as __physicstestmotionresult2d__
import py4godot.classes.AudioEffectLowPassFilter as __audioeffectlowpassfilter__
import py4godot.classes.VisualShaderNodeParticleBoxEmitter as __visualshadernodeparticleboxemitter__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.Curve3D as __curve3d__
import py4godot.classes.ScriptLanguage as __scriptlanguage__
import py4godot.classes.CallbackTweener as __callbacktweener__
import py4godot.classes.Occluder3D as __occluder3d__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.JSONRPC as __jsonrpc__
import py4godot.classes.VisualShaderNodeColorFunc as __visualshadernodecolorfunc__
import py4godot.classes.AnimationNodeOutput as __animationnodeoutput__
import py4godot.classes.CapsuleShape3D as __capsuleshape3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.RDTextureFormat as __rdtextureformat__
import py4godot.classes.Tween as __tween__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.JavaObject as __javaobject__
import py4godot.classes.AudioEffectEQ21 as __audioeffecteq21__
import py4godot.classes.ProjectSettings as __projectsettings__
import py4godot.classes.UDPServer as __udpserver__
import py4godot.classes.EditorInspectorPlugin as __editorinspectorplugin__
import py4godot.classes.GLTFDocument as __gltfdocument__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.AudioStreamPlaybackResampled as __audiostreamplaybackresampled__
import py4godot.classes.VisualShaderNodeOutput as __visualshadernodeoutput__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.StreamPeerTLS as __streampeertls__
import py4godot.classes.XRControllerTracker as __xrcontrollertracker__
import py4godot.classes.AESContext as __aescontext__
import py4godot.classes.EditorScript as __editorscript__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.EngineProfiler as __engineprofiler__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.IntervalTweener as __intervaltweener__
import py4godot.classes.ConcavePolygonShape2D as __concavepolygonshape2d__
import py4godot.classes.CompositorEffect as __compositoreffect__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.SceneState as __scenestate__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.SceneTreeTimer as __scenetreetimer__
import py4godot.classes.ResourceImporterLayeredTexture as __resourceimporterlayeredtexture__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.ResourceImporterImageFont as __resourceimporterimagefont__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.AudioEffectLowShelfFilter as __audioeffectlowshelffilter__
import py4godot.classes.GLTFPhysicsBody as __gltfphysicsbody__
import py4godot.classes.AnimationLibrary as __animationlibrary__
import py4godot.classes.VisualShaderNodeParticleMeshEmitter as __visualshadernodeparticlemeshemitter__
import py4godot.classes.OfflineMultiplayerPeer as __offlinemultiplayerpeer__
import py4godot.classes.PlaceholderTexture2DArray as __placeholdertexture2darray__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.VisualShaderNodeGlobalExpression as __visualshadernodeglobalexpression__
import py4godot.classes.VisualShaderNodeParticleSphereEmitter as __visualshadernodeparticlesphereemitter__
import py4godot.classes.WorldEnvironment as __worldenvironment__
import py4godot.classes.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.FileAccess as __fileaccess__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.NavigationPolygon as __navigationpolygon__
import py4godot.classes.Material as __material__
import py4godot.classes.SkeletonModification2DCCDIK as __skeletonmodification2dccdik__
import py4godot.classes.CircleShape2D as __circleshape2d__
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.GLTFTexture as __gltftexture__
import py4godot.classes.VisualShaderNodeClamp as __visualshadernodeclamp__
import py4godot.classes.AudioBusLayout as __audiobuslayout__
import py4godot.classes.CameraAttributes as __cameraattributes__
import py4godot.classes.ShaderInclude as __shaderinclude__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.OpenXRAction as __openxraction__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.VisualShaderNodeUVPolarCoord as __visualshadernodeuvpolarcoord__
import py4godot.classes.VisualShaderNodeUVFunc as __visualshadernodeuvfunc__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.EditorSceneFormatImporterBlend as __editorsceneformatimporterblend__
import py4godot.classes.KinematicCollision2D as __kinematiccollision2d__
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.ResourceSaver as __resourcesaver__
import py4godot.classes.VisualShaderNodeVaryingSetter as __visualshadernodevaryingsetter__
import py4godot.classes.PhysicsServer3DRenderingServerHandler as __physicsserver3drenderingserverhandler__
import py4godot.classes.ImporterMesh as __importermesh__
import py4godot.classes.StreamPeerExtension as __streampeerextension__
import py4godot.classes.DisplayServer as __displayserver__
import py4godot.classes.VisualShaderNodeOuterProduct as __visualshadernodeouterproduct__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.EditorExportPlatformLinuxBSD as __editorexportplatformlinuxbsd__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.TranslationDomain as __translationdomain__
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.AudioEffectReverb as __audioeffectreverb__
import py4godot.classes.AudioEffectCapture as __audioeffectcapture__
import py4godot.classes.AudioStreamPlaybackOggVorbis as __audiostreamplaybackoggvorbis__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.VisualShaderNodeStep as __visualshadernodestep__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.AudioEffectSpectrumAnalyzer as __audioeffectspectrumanalyzer__
import py4godot.classes.FastNoiseLite as __fastnoiselite__
import py4godot.classes.EditorResourceConversionPlugin as __editorresourceconversionplugin__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.VisualShaderNodeUIntConstant as __visualshadernodeuintconstant__
import py4godot.classes.LightmapperRD as __lightmapperrd__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.Geometry2D as __geometry2d__
import py4godot.classes.OptimizedTranslation as __optimizedtranslation__
import py4godot.classes.PlaceholderCubemap as __placeholdercubemap__
import py4godot.classes.SkeletonProfile as __skeletonprofile__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.AudioEffectHighShelfFilter as __audioeffecthighshelffilter__
import py4godot.classes.Node3DGizmo as __node3dgizmo__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.Script as __script__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.TextureCubemapArrayRD as __texturecubemaparrayrd__
import py4godot.classes.Control as __control__
import py4godot.classes.TileSetAtlasSource as __tilesetatlassource__
import py4godot.classes.EditorTranslationParserPlugin as __editortranslationparserplugin__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.AnimationNodeSub2 as __animationnodesub2__
import py4godot.classes.PhysicsMaterial as __physicsmaterial__
import py4godot.classes.AudioStreamMP3 as __audiostreammp3__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.InputEventScreenTouch as __inputeventscreentouch__
import py4godot.classes.ResourceImporterTexture as __resourceimportertexture__
import py4godot.classes.StreamPeerGZIP as __streampeergzip__
import py4godot.classes.VisualShaderNodeVec3Parameter as __visualshadernodevec3parameter__
import py4godot.classes.ConvexPolygonShape3D as __convexpolygonshape3d__
import py4godot.classes.VisualShaderNodeTextureParameterTriplanar as __visualshadernodetextureparametertriplanar__
import py4godot.classes.AudioEffectDelay as __audioeffectdelay__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.PhysicsDirectSpaceState2D as __physicsdirectspacestate2d__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.WorldBoundaryShape2D as __worldboundaryshape2d__
import py4godot.classes.SkeletonModification2DJiggle as __skeletonmodification2djiggle__
import py4godot.classes.MissingResource as __missingresource__
import py4godot.classes.SkeletonProfileHumanoid as __skeletonprofilehumanoid__
import py4godot.classes.AudioStreamPlayback as __audiostreamplayback__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.CodeHighlighter as __codehighlighter__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.AnimationMixer as __animationmixer__
import py4godot.classes.VisualShaderNodeVec3Constant as __visualshadernodevec3constant__
import py4godot.classes.SkeletonModification2DFABRIK as __skeletonmodification2dfabrik__
import py4godot.classes.PropertyTweener as __propertytweener__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.PolygonPathFinder as __polygonpathfinder__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.XRFaceTracker as __xrfacetracker__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.VisualShaderNodeFresnel as __visualshadernodefresnel__
import py4godot.classes.NavigationMeshSourceGeometryData2D as __navigationmeshsourcegeometrydata2d__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.ResourceImporterMP3 as __resourceimportermp3__
import py4godot.classes.Gradient as __gradient__
import py4godot.classes.InputEventGesture as __inputeventgesture__
import py4godot.classes.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.InputEventKey as __inputeventkey__
import py4godot.classes.RDUniform as __rduniform__
import py4godot.classes.OpenXRInteractionProfileMetadata as __openxrinteractionprofilemetadata__
import py4godot.classes.PhysicsShapeQueryParameters2D as __physicsshapequeryparameters2d__
import py4godot.classes.EditorSceneFormatImporterGLTF as __editorsceneformatimportergltf__
import py4godot.classes.ResourceImporterOggVorbis as __resourceimporteroggvorbis__
import py4godot.classes.StyleBoxFlat as __styleboxflat__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.VisualShaderNodeVec2Constant as __visualshadernodevec2constant__
import py4godot.classes.OggPacketSequence as __oggpacketsequence__
import py4godot.classes.InputEventMouseMotion as __inputeventmousemotion__
import py4godot.classes.LabelSettings as __labelsettings__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.OpenXRIPBinding as __openxripbinding__
import py4godot.classes.VisualShaderNodeDotProduct as __visualshadernodedotproduct__
import py4godot.classes.WebRTCPeerConnection as __webrtcpeerconnection__
import py4godot.classes.StyleBoxLine as __styleboxline__
import py4godot.classes.OpenXRExtensionWrapperExtension as __openxrextensionwrapperextension__
import py4godot.classes.ResourceImporterOBJ as __resourceimporterobj__
import py4godot.classes.EditorVCSInterface as __editorvcsinterface__
import py4godot.classes.GLTFSkeleton as __gltfskeleton__
import py4godot.classes.QuadOccluder3D as __quadoccluder3d__
import py4godot.classes.VisualShaderNodeCustom as __visualshadernodecustom__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.PhysicsServer3D as __physicsserver3d__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.ButtonGroup as __buttongroup__
import py4godot.classes.VisualShaderNodeVec2Parameter as __visualshadernodevec2parameter__
import py4godot.classes.JavaClassWrapper as __javaclasswrapper__
import py4godot.classes.VisualShaderNodeColorConstant as __visualshadernodecolorconstant__
import py4godot.classes.InputEventShortcut as __inputeventshortcut__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.AudioStreamPlaybackSynchronized as __audiostreamplaybacksynchronized__
import py4godot.classes.AnimationNodeOneShot as __animationnodeoneshot__
import py4godot.classes.HTTPClient as __httpclient__
import py4godot.classes.AudioEffectInstance as __audioeffectinstance__
import py4godot.classes.Input as __input__
import py4godot.classes.ScriptLanguageExtension as __scriptlanguageextension__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.EditorResourcePreview as __editorresourcepreview__
import py4godot.classes.Button as __button__
import py4godot.classes.GLTFAccessor as __gltfaccessor__
import py4godot.classes.AudioEffectFilter as __audioeffectfilter__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.RenderSceneBuffers as __renderscenebuffers__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.GLTFPhysicsShape as __gltfphysicsshape__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.VisualShaderNodeCurveTexture as __visualshadernodecurvetexture__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.AudioStreamPlaybackPlaylist as __audiostreamplaybackplaylist__
import py4godot.classes.Panel as __panel__
import py4godot.classes.ResourceImporterScene as __resourceimporterscene__
import py4godot.classes.CylinderShape3D as __cylindershape3d__
import py4godot.classes.PhysicsServer3DManager as __physicsserver3dmanager__
import py4godot.classes.GLTFTextureSampler as __gltftexturesampler__
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.NavigationServer2D as __navigationserver2d__
import py4godot.classes.AudioStreamMicrophone as __audiostreammicrophone__
import py4godot.classes.PhysicsShapeQueryParameters3D as __physicsshapequeryparameters3d__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.PlaceholderCubemapArray as __placeholdercubemaparray__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.InputEventScreenDrag as __inputeventscreendrag__
import py4godot.classes.PhysicsPointQueryParameters2D as __physicspointqueryparameters2d__
import py4godot.classes.WeakRef as __weakref__
import py4godot.classes.SegmentShape2D as __segmentshape2d__
import py4godot.classes.InputEventJoypadButton as __inputeventjoypadbutton__
import py4godot.classes.TextureCubemapRD as __texturecubemaprd__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.EditorPlugin as __editorplugin__
import py4godot.classes.OpenXRActionMap as __openxractionmap__
import py4godot.classes.AudioEffectLimiter as __audioeffectlimiter__
import py4godot.classes.PhysicsTestMotionParameters2D as __physicstestmotionparameters2d__
import py4godot.classes.AudioStreamInteractive as __audiostreaminteractive__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CubemapArray as __cubemaparray__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.Label as __label__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.PhysicsRayQueryParameters2D as __physicsrayqueryparameters2d__
import py4godot.classes.RenderDataRD as __renderdatard__
import py4godot.classes.SkeletonModification2DLookAt as __skeletonmodification2dlookat__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.WebSocketMultiplayerPeer as __websocketmultiplayerpeer__
import py4godot.classes.UPNP as __upnp__
import py4godot.classes.VisualShaderNodeRandomRange as __visualshadernoderandomrange__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.AnimationNodeAdd2 as __animationnodeadd2__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.FBXState as __fbxstate__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.AudioEffectEQ6 as __audioeffecteq6__
import py4godot.classes.GDScript as __gdscript__
import py4godot.classes.MeshConvexDecompositionSettings as __meshconvexdecompositionsettings__
import py4godot.classes.VisualShaderNodeBooleanParameter as __visualshadernodebooleanparameter__
import py4godot.classes.InputEventMagnifyGesture as __inputeventmagnifygesture__
import py4godot.classes.EditorResourcePreviewGenerator as __editorresourcepreviewgenerator__
import py4godot.classes.BitMap as __bitmap__
import py4godot.classes.Shortcut as __shortcut__
import py4godot.classes.ENetConnection as __enetconnection__
import py4godot.classes.GridMapEditorPlugin as __gridmapeditorplugin__
import py4godot.classes.MultiplayerAPIExtension as __multiplayerapiextension__
import py4godot.classes.RDShaderSource as __rdshadersource__
import py4godot.classes.AnimationNode as __animationnode__
import py4godot.classes.InputMap as __inputmap__
import py4godot.classes.AStar2D as __astar2d__
import py4godot.classes.EditorExportPlatformAndroid as __editorexportplatformandroid__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.VisualShaderNodeScreenUVToSDF as __visualshadernodescreenuvtosdf__
import py4godot.classes.AudioEffectPitchShift as __audioeffectpitchshift__
import py4godot.classes.CapsuleShape2D as __capsuleshape2d__
import py4godot.classes.VisualShaderNodeVectorFunc as __visualshadernodevectorfunc__
import py4godot.classes.PCKPacker as __pckpacker__
import py4godot.classes.AudioStreamSynchronized as __audiostreamsynchronized__
import py4godot.classes.UPNPDevice as __upnpdevice__
import py4godot.classes.RenderSceneData as __renderscenedata__
import py4godot.classes.Compositor as __compositor__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.VisualShaderNodeUIntOp as __visualshadernodeuintop__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.VisualShaderNodeVec4Parameter as __visualshadernodevec4parameter__
import py4godot.classes.EditorFileSystemDirectory as __editorfilesystemdirectory__
import py4godot.classes.ResourceImporterShaderFile as __resourceimportershaderfile__
import py4godot.classes.InputEventMouseButton as __inputeventmousebutton__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.RDAttachmentFormat as __rdattachmentformat__
import py4godot.classes.ConvexPolygonShape2D as __convexpolygonshape2d__
import py4godot.classes.XRHandTracker as __xrhandtracker__
import py4godot.classes.VisualShaderNodeFloatConstant as __visualshadernodefloatconstant__
import py4godot.classes.EditorFeatureProfile as __editorfeatureprofile__
import py4godot.classes.VisualShaderNodeVaryingGetter as __visualshadernodevaryinggetter__
import py4godot.classes.XRBodyTracker as __xrbodytracker__
import py4godot.classes.VisualShaderNodeSample3D as __visualshadernodesample3d__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.TextParagraph as __textparagraph__
import py4godot.classes.AudioEffectEQ as __audioeffecteq__
import py4godot.classes.PacketPeer as __packetpeer__
import py4godot.classes.Curve2D as __curve2d__
import py4godot.classes.PhysicsServer2DExtension as __physicsserver2dextension__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.EditorInterface as __editorinterface__
import py4godot.classes.EditorContextMenuPlugin as __editorcontextmenuplugin__
import py4godot.classes.GDScriptSyntaxHighlighter as __gdscriptsyntaxhighlighter__
import py4godot.classes.ConfigFile as __configfile__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.BoneMap as __bonemap__
import py4godot.classes.AudioEffectHardLimiter as __audioeffecthardlimiter__
import py4godot.classes.NativeMenu as __nativemenu__
import py4godot.classes.InputEventMIDI as __inputeventmidi__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.ZIPReader as __zipreader__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.SkeletonModificationStack2D as __skeletonmodificationstack2d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.WebRTCPeerConnectionExtension as __webrtcpeerconnectionextension__
import py4godot.classes.AudioSample as __audiosample__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.MainLoop as __mainloop__
import py4godot.classes.VideoStreamTheora as __videostreamtheora__
import py4godot.classes.Image as __image__
import py4godot.classes.NavigationPathQueryResult2D as __navigationpathqueryresult2d__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.Font as __font__
import py4godot.classes.GLTFDocumentExtension as __gltfdocumentextension__
import py4godot.classes.VisualShaderNodeComment as __visualshadernodecomment__
import py4godot.classes.VisualShaderNodeTransformFunc as __visualshadernodetransformfunc__
import py4godot.classes.TextLine as __textline__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.ImageTexture3D as __imagetexture3d__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.InputEventPanGesture as __inputeventpangesture__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.AnimationNodeStateMachinePlayback as __animationnodestatemachineplayback__
import py4godot.classes.AudioEffectSpectrumAnalyzerInstance as __audioeffectspectrumanalyzerinstance__
import py4godot.classes.TextureLayered as __texturelayered__
import py4godot.classes.PacketPeerUDP as __packetpeerudp__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.EditorNode3DGizmo as __editornode3dgizmo__
import py4godot.classes.EditorSyntaxHighlighter as __editorsyntaxhighlighter__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.VisualShaderNodeSDFRaymarch as __visualshadernodesdfraymarch__
import py4godot.classes.InstancePlaceholder as __instanceplaceholder__
import py4godot.classes.DirAccess as __diraccess__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.Texture2DArray as __texture2darray__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__
import py4godot.classes.MissingNode as __missingnode__
import py4godot.classes.RDPipelineSpecializationConstant as __rdpipelinespecializationconstant__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.GDExtension as __gdextension__
import py4godot.classes.VideoStream as __videostream__
import py4godot.classes.AnimationNodeBlend3 as __animationnodeblend3__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.VisualShaderNodeIntConstant as __visualshadernodeintconstant__
import py4godot.classes.MovieWriter as __moviewriter__
import py4godot.classes.CompressedTexture2DArray as __compressedtexture2darray__
import py4godot.classes.AudioStreamOggVorbis as __audiostreamoggvorbis__
import py4godot.classes.World2D as __world2d__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.AudioStreamGenerator as __audiostreamgenerator__
import py4godot.classes.NavigationAgent3D as __navigationagent3d__
import py4godot.classes.SubViewport as __subviewport__
import py4godot.classes.EditorUndoRedoManager as __editorundoredomanager__
import py4godot.classes.Theme as __theme__
import py4godot.classes.MeshDataTool as __meshdatatool__
import py4godot.classes.VisualShaderNodeParticleOutput as __visualshadernodeparticleoutput__
import py4godot.classes.AudioStreamRandomizer as __audiostreamrandomizer__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.RegEx as __regex__
import py4godot.classes.VisualShaderNodeBooleanConstant as __visualshadernodebooleanconstant__
import py4godot.classes.VisualShaderNodeRemap as __visualshadernoderemap__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Expression as __expression__
import py4godot.classes.Range as __range__
import py4godot.classes.VisualShaderNodeReroute as __visualshadernodereroute__
import py4godot.classes.GLTFLight as __gltflight__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ArrayOccluder3D as __arrayoccluder3d__
import py4godot.classes.AudioEffectBandLimitFilter as __audioeffectbandlimitfilter__
import py4godot.classes.AudioEffectPanner as __audioeffectpanner__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.RenderDataExtension as __renderdataextension__
import py4godot.classes.HashingContext as __hashingcontext__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.TranslationServer as __translationserver__
import py4godot.classes.PhysicsServer2D as __physicsserver2d__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.Popup as __popup__
import py4godot.classes.RenderSceneBuffersRD as __renderscenebuffersrd__
import py4godot.classes.XMLParser as __xmlparser__
import py4godot.classes.ThemeDB as __themedb__
import py4godot.classes.VisualShaderNodeUIntParameter as __visualshadernodeuintparameter__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.XRServer as __xrserver__
import py4godot.classes.RDPipelineColorBlendStateAttachment as __rdpipelinecolorblendstateattachment__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.OpenXRDpadBindingModifier as __openxrdpadbindingmodifier__
import py4godot.classes.PhysicsDirectBodyState3DExtension as __physicsdirectbodystate3dextension__
import py4godot.classes.Container as __container__
import py4godot.classes.NavigationPathQueryParameters3D as __navigationpathqueryparameters3d__
import py4godot.classes.PhysicsRayQueryParameters3D as __physicsrayqueryparameters3d__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.ImageTextureLayered as __imagetexturelayered__
import py4godot.classes.EditorSceneFormatImporterFBX2GLTF as __editorsceneformatimporterfbx2gltf__
import py4godot.classes.StatusIndicator as __statusindicator__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.VisualShaderNodeProximityFade as __visualshadernodeproximityfade__
import py4godot.classes.VisualShaderNodeUIntFunc as __visualshadernodeuintfunc__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.Animation as __animation__
import py4godot.classes.PacketPeerDTLS as __packetpeerdtls__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.EditorSettings as __editorsettings__
import py4godot.classes.PhysicsServer2DManager as __physicsserver2dmanager__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__
import py4godot.classes.VisualShaderNodeScreenNormalWorldSpace as __visualshadernodescreennormalworldspace__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.RegExMatch as __regexmatch__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.StyleBox as __stylebox__
import py4godot.classes.VisualShaderNodeVectorRefract as __visualshadernodevectorrefract__
import py4godot.classes.ConcavePolygonShape3D as __concavepolygonshape3d__
import py4godot.classes.TextureLayeredRD as __texturelayeredrd__
import py4godot.classes.AStar3D as __astar3d__
import py4godot.classes.AnimationNodeTimeSeek as __animationnodetimeseek__
import py4godot.classes.UndoRedo as __undoredo__
import py4godot.classes.EditorExportPreset as __editorexportpreset__
import py4godot.classes.OpenXRInterface as __openxrinterface__
import py4godot.classes.RenderSceneBuffersExtension as __renderscenebuffersextension__
import py4godot.classes.TriangleMesh as __trianglemesh__
import py4godot.classes.ResourceImporter as __resourceimporter__
import py4godot.classes.AudioStreamWAV as __audiostreamwav__
import py4godot.classes.VisualShaderNodeMultiplyAdd as __visualshadernodemultiplyadd__
import py4godot.classes.VisualShaderNodeFloatFunc as __visualshadernodefloatfunc__
import py4godot.classes.WebRTCDataChannel as __webrtcdatachannel__
import py4godot.classes.PhysicsTestMotionParameters3D as __physicstestmotionparameters3d__
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeExtension as __animationnodeextension__
import py4godot.classes.Noise as __noise__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.Crypto as __crypto__
import py4godot.classes.AudioEffectEQ10 as __audioeffecteq10__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Object as __object__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.ScriptExtension as __scriptextension__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.EditorSceneFormatImporterUFBX as __editorsceneformatimporterufbx__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.AudioEffectCompressor as __audioeffectcompressor__
import py4godot.classes.HMACContext as __hmaccontext__
import py4godot.classes.Engine as __engine__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.SceneMultiplayer as __scenemultiplayer__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.ResourceImporterBMFont as __resourceimporterbmfont__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.VisualShaderNodeVectorCompose as __visualshadernodevectorcompose__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.EncodedObjectAsID as __encodedobjectasid__
import py4godot.classes.HTTPRequest as __httprequest__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.UniformSetCacheRD as __uniformsetcacherd__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.VisualShaderNodeTransformCompose as __visualshadernodetransformcompose__
import py4godot.classes.SkeletonModification2DTwoBoneIK as __skeletonmodification2dtwoboneik__
import py4godot.classes.VisualShaderNodeTexture2DArray as __visualshadernodetexture2darray__
import py4godot.classes.RenderSceneDataRD as __renderscenedatard__
import py4godot.classes.Marshalls as __marshalls__
import py4godot.classes.VisualShaderNodeFloatParameter as __visualshadernodefloatparameter__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.Geometry3D as __geometry3d__
import py4godot.classes.Performance as __performance__
import py4godot.classes.RDShaderFile as __rdshaderfile__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.OpenXRActionBindingModifier as __openxractionbindingmodifier__
import py4godot.classes.VisualShaderNodeVectorBase as __visualshadernodevectorbase__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.X509Certificate as __x509certificate__
import py4godot.classes.VisualShaderNodeVarying as __visualshadernodevarying__
import py4godot.classes.EditorFileSystem as __editorfilesystem__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.VisualShaderNodeVectorDecompose as __visualshadernodevectordecompose__
import py4godot.classes.CompressedTexture3D as __compressedtexture3d__
import py4godot.classes.InputEventWithModifiers as __inputeventwithmodifiers__
import py4godot.classes.GLTFDocumentExtensionConvertImporterMesh as __gltfdocumentextensionconvertimportermesh__
import py4godot.classes.Timer as __timer__
import py4godot.classes.WebRTCMultiplayerPeer as __webrtcmultiplayerpeer__
import py4godot.classes.EditorExportPlugin as __editorexportplugin__
import py4godot.classes.VisualShaderNodeParameterRef as __visualshadernodeparameterref__
import py4godot.classes.RDShaderSPIRV as __rdshaderspirv__
import py4godot.classes.AudioStreamPlaybackPolyphonic as __audiostreamplaybackpolyphonic__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.RDPipelineColorBlendState as __rdpipelinecolorblendstate__
import py4godot.classes.NavigationPathQueryResult3D as __navigationpathqueryresult3d__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.EditorExportPlatformMacOS as __editorexportplatformmacos__
import py4godot.classes.TCPServer as __tcpserver__
import py4godot.classes.MultiplayerSpawner as __multiplayerspawner__
import py4godot.classes.ZIPPacker as __zippacker__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.ShaderGlobalsOverride as __shaderglobalsoverride__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.StreamPeerBuffer as __streampeerbuffer__
import py4godot.classes.SphereShape3D as __sphereshape3d__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.PhysicsPointQueryParameters3D as __physicspointqueryparameters3d__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.VisualShaderNodeIf as __visualshadernodeif__
import py4godot.classes.CompressedCubemapArray as __compressedcubemaparray__
import py4godot.classes.EditorSelection as __editorselection__
import py4godot.classes.InputEventMouse as __inputeventmouse__
import py4godot.classes.AudioStreamPolyphonic as __audiostreampolyphonic__



class String(VariantTypeWrapper4):
  """
		This is the built-in string Variant type (and the one used by GDScript). Strings may contain any number of Unicode characters, and expose methods useful for manipulating and generating strings. Strings are reference-counted and use a copy-on-write approach (every modification to a string returns a new `String`), so passing them around is cheap in resources.
		Some string methods have corresponding variations. Variations suffixed with `n` (`countn`, `findn`, `replacen`, etc.) are **case-insensitive** (they make no distinction between uppercase and lowercase letters). Method variations prefixed with `r` (`rfind`, `rsplit`, etc.) are reversed, and start from the end of the string, instead of the beginning.
		To convert any `Variant` to or from a string, see `@GlobalScope.str`, `@GlobalScope.str_to_var`, and `@GlobalScope.var_to_str`.
		**Note:** In a boolean context, a string will evaluate to `false` if it is empty (`""`). Otherwise, a string will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->String:pass


  @staticmethod
  def new0() -> str:pass
  @staticmethod
  def new1(from_:str) -> str:pass
  @staticmethod
  def new2(from_:StringName|str) -> str:pass
  @staticmethod
  def new3(from_:NodePath|str) -> str:pass



  def casecmp_to(self, to:str)->int:
    """
				Performs a case-sensitive comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" and "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order.
				If the character comparison reaches the end of one string, but the other string contains more characters, then it will use length as the deciding factor: `1` will be returned if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is always `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `nocasecmp_to`, `filecasecmp_to`, and `naturalcasecmp_to`.
			"""
    pass

  def nocasecmp_to(self, to:str)->int:
    """
				Performs a **case-insensitive** comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
				If the character comparison reaches the end of one string, but the other string contains more characters, then it will use length as the deciding factor: `1` will be returned if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is always `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `casecmp_to`, `filenocasecmp_to`, and `naturalnocasecmp_to`.
			"""
    pass

  def naturalcasecmp_to(self, to:str)->int:
    """
				Performs a **case-sensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order.
				When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be ``"1", "2", "3", ...``, not ``"1", "10", "2", "3", ...``.
				If the character comparison reaches the end of one string, but the other string contains more characters, then it will use length as the deciding factor: `1` will be returned if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is always `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `naturalnocasecmp_to`, `filecasecmp_to`, and `nocasecmp_to`.
			"""
    pass

  def naturalnocasecmp_to(self, to:str)->int:
    """
				Performs a **case-insensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
				When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be ``"1", "2", "3", ...``, not ``"1", "10", "2", "3", ...``.
				If the character comparison reaches the end of one string, but the other string contains more characters, then it will use length as the deciding factor: `1` will be returned if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is always `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `naturalcasecmp_to`, `filenocasecmp_to`, and `casecmp_to`.
			"""
    pass

  def filecasecmp_to(self, to:str)->int:
    """
				Like `naturalcasecmp_to` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `filenocasecmp_to`, `naturalcasecmp_to`, and `casecmp_to`.
			"""
    pass

  def filenocasecmp_to(self, to:str)->int:
    """
				Like `naturalnocasecmp_to` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `filecasecmp_to`, `naturalnocasecmp_to`, and `nocasecmp_to`.
			"""
    pass

  def length(self)->int:
    """
				Returns the number of characters in the string. Empty strings (`""`) always return `0`. See also `is_empty`.
			"""
    pass

  def substr(self, from_:int, len_:int=-1)->str:
    """
				Returns part of the string from the position `from` with length `len`. If `len` is `-1` (as by default), returns the rest of the string starting from the given position.
			"""
    pass

  def get_slice(self, delimiter:str, slice:int)->str:
    """
				Splits the string using a `delimiter` and returns the substring at index `slice`. Returns the original string if `delimiter` does not occur in the string. Returns an empty string if the `slice` does not exist.
				This is faster than `split`, if you only need one substring.
				```gdscript
				print("i/am/example/hi".get_slice("/", 2)) # Prints "example"
				```
			"""
    pass

  def get_slicec(self, delimiter:int, slice:int)->str:
    """
				Splits the string using a Unicode character with code `delimiter` and returns the substring at index `slice`. Returns an empty string if the `slice` does not exist.
				This is faster than `split`, if you only need one substring.
			"""
    pass

  def get_slice_count(self, delimiter:str)->int:
    """
				Returns the total number of slices when the string is split with the given `delimiter` (see `split`).
			"""
    pass

  def find(self, what:str, from_:int=0)->int:
    """
				Returns the index of the **first** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the string.
				
				```gdscript
				print("Team".find("I")) # Prints -1

				print("Potato".find("t"))    # Prints 2
				print("Potato".find("t", 3)) # Prints 4
				print("Potato".find("t", 5)) # Prints -1
				```
				
				
				**Note:** If you just want to know whether the string contains `what`, use `contains`. In GDScript, you may also use the `in` operator.
			"""
    pass

  def findn(self, what:str, from_:int=0)->int:
    """
				Returns the index of the **first** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the end of the string.
			"""
    pass

  def count(self, what:str, from_:int=0, to:int=0)->int:
    """
				Returns the number of occurrences of the substring `what` between `from` and `to` positions. If `to` is 0, the search continues until the end of the string.
			"""
    pass

  def countn(self, what:str, from_:int=0, to:int=0)->int:
    """
				Returns the number of occurrences of the substring `what` between `from` and `to` positions, **ignoring case**. If `to` is 0, the search continues until the end of the string.
			"""
    pass

  def rfind(self, what:str, from_:int=-1)->int:
    """
				Returns the index of the **last** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the string. This method is the reverse of `find`.
			"""
    pass

  def rfindn(self, what:str, from_:int=-1)->int:
    """
				Returns the index of the **last** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the beginning of the string. This method is the reverse of `findn`.
			"""
    pass

  def match(self, expr:str)->bool:
    """
				Does a simple expression match (also called "glob" or "globbing"), where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
			"""
    pass

  def matchn(self, expr:str)->bool:
    """
				Does a simple **case-insensitive** expression match, where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
			"""
    pass

  def begins_with(self, text:str)->bool:
    """
				Returns `true` if the string begins with the given `text`. See also `ends_with`.
			"""
    pass

  def ends_with(self, text:str)->bool:
    """
				Returns `true` if the string ends with the given `text`. See also `begins_with`.
			"""
    pass

  def is_subsequence_of(self, text:str)->bool:
    """
				Returns `true` if all characters of this string can be found in `text` in their original order. This is not the same as `contains`.
				```gdscript
				var text = "Wow, incredible!"

				print("inedible".is_subsequence_of(text)) # Prints true
				print("Word!".is_subsequence_of(text))    # Prints true
				print("Window".is_subsequence_of(text))   # Prints false
				print("".is_subsequence_of(text))         # Prints true
				```
			"""
    pass

  def is_subsequence_ofn(self, text:str)->bool:
    """
				Returns `true` if all characters of this string can be found in `text` in their original order, **ignoring case**. This is not the same as `containsn`.
			"""
    pass

  def bigrams(self)->PackedStringArray:
    """
				Returns an array containing the bigrams (pairs of consecutive characters) of this string.
				```gdscript
				print("Get up!".bigrams()) # Prints `"Ge", "et", "t ", " u", "up", "p!"`
				```
			"""
    pass

  def similarity(self, text:str)->float:
    """
				Returns the similarity index (`url=https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient`Sørensen-Dice coefficient`/url`) of this string compared to another. A result of `1.0` means totally similar, while `0.0` means totally dissimilar.
				```gdscript
				print("ABC123".similarity("ABC123")) # Prints 1.0
				print("ABC123".similarity("XYZ456")) # Prints 0.0
				print("ABC123".similarity("123ABC")) # Prints 0.8
				print("ABC123".similarity("abc123")) # Prints 0.4
				```
			"""
    pass

  def format(self, values:Any, placeholder:str= String.new0())->str:
    """
				Formats the string by replacing all occurrences of `placeholder` with the elements of `values`.
				`values` can be a `Dictionary`, an `Array`, or an `Object`. Any underscores in `placeholder` will be replaced with the corresponding keys in advance. Array elements use their index as keys.
				```gdscript
				# Prints "Waiting for Godot is a play by Samuel Beckett, and Godot Engine is named after it."
				var use_array_values = "Waiting for {0} is a play by {1}, and {0} Engine is named after it."
				print(use_array_values.format(`"Godot", "Samuel Beckett"`))

				# Prints "User 42 is Godot."
				print("User {id} is {name}.".format({"id": 42, "name": "Godot"}))
				```
				Some additional handling is performed when `values` is an `Array`. If `placeholder` does not contain an underscore, the elements of the `values` array will be used to replace one occurrence of the placeholder in order; If an element of `values` is another 2-element array, it'll be interpreted as a key-value pair.
				```gdscript
				# Prints "User 42 is Godot."
				print("User {} is {}.".format(`42, "Godot"`, "{}"))
				print("User {id} is {name}.".format(``"id", 42`, `"name", "Godot"``))
				```
				When passing an `Object`, the property names from `Object.get_property_list` are used as keys.
				```gdscript
				# Prints "Visible true, position (0, 0)"
				var node = Node2D.new()
				print("Visible {visible}, position {position}".format(node))
				```
				See also the `url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html`GDScript format string`/url` tutorial.
				**Note:** Each replacement is done sequentially for each element of `values`, **not** all at once. This means that if any element is inserted and it contains another placeholder, it may be changed by the next replacement. While this can be very useful, it often causes unexpected results. If not necessary, make sure `values`'s elements do not contain placeholders.
				```gdscript
				print("{0} {1}".format(`"{1}", "x"`))           # Prints "x x"
				print("{0} {1}".format(`"x", "{0}"`))           # Prints "x {0}"
				print("{a} {b}".format({"a": "{b}", "b": "c"})) # Prints "c c"
				print("{a} {b}".format({"b": "c", "a": "{b}"})) # Prints "{b} c"
				```
				**Note:** In C#, it's recommended to `url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated`interpolate strings with "$"`/url`, instead.
			"""
    pass

  def replace(self, what:str, forwhat:str)->str:
    """
				Replaces all occurrences of `what` inside the string with the given `forwhat`.
			"""
    pass

  def replacen(self, what:str, forwhat:str)->str:
    """
				Replaces all **case-insensitive** occurrences of `what` inside the string with the given `forwhat`.
			"""
    pass

  def repeat(self, count:int)->str:
    """
				Repeats this string a number of times. `count` needs to be greater than `0`. Otherwise, returns an empty string.
			"""
    pass

  def reverse(self)->str:
    """
				Returns the copy of this string in reverse order. This operation works on unicode codepoints, rather than sequences of codepoints, and may break things like compound letters or emojis.
			"""
    pass

  def insert(self, position:int, what:str)->str:
    """
				Inserts `what` at the given `position` in the string.
			"""
    pass

  def erase(self, position:int, chars:int=1)->str:
    """
				Returns a string with `chars` characters erased starting from `position`. If `chars` goes beyond the string's length given the specified `position`, fewer characters will be erased from the returned string. Returns an empty string if either `position` or `chars` is negative. Returns the original string unmodified if `chars` is `0`.
			"""
    pass

  def capitalize(self)->str:
    """
				Changes the appearance of the string: replaces underscores (`_`) with spaces, adds spaces before uppercase letters in the middle of a word, converts all letters to lowercase, then converts the first one and each one following a space to uppercase.
				
				```gdscript
				"move_local_x".capitalize()   # Returns "Move Local X"
				"sceneFile_path".capitalize() # Returns "Scene File Path"
				"2D, FPS, PNG".capitalize()   # Returns "2d, Fps, Png"
				```
				
				
			"""
    pass

  def to_camel_case(self)->str:
    """
				Returns the string converted to `camelCase`.
			"""
    pass

  def to_pascal_case(self)->str:
    """
				Returns the string converted to `PascalCase`.
			"""
    pass

  def to_snake_case(self)->str:
    """
				Returns the string converted to `snake_case`.
				**Note:** Numbers followed by a _single_ letter are not separated in the conversion to keep some words (such as "2D") together.
				
				```gdscript
				"Node2D".to_snake_case()               # Returns "node_2d"
				"2nd place".to_snake_case()            # Returns "2_nd_place"
				"Texture3DAssetFolder".to_snake_case() # Returns "texture_3d_asset_folder"
				```
				
				
			"""
    pass

  def split(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray:
    """
				Splits the string using a `delimiter` and returns an array of the substrings. If `delimiter` is an empty string, each substring will be a single character. This method is the opposite of `join`.
				If `allow_empty` is `false`, empty strings between adjacent delimiters are excluded from the array.
				If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split.
				
				```gdscript
				var some_array = "One,Two,Three,Four".split(",", true, 2)

				print(some_array.size()) # Prints 3
				print(some_array`0`)     # Prints "One"
				print(some_array`1`)     # Prints "Two"
				print(some_array`2`)     # Prints "Three,Four"
				```
				
				
				**Note:** If you only need one substring from the array, consider using `get_slice` which is faster. If you need to split strings with more complex rules, use the `RegEx` class instead.
			"""
    pass

  def rsplit(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray:
    """
				Splits the string using a `delimiter` and returns an array of the substrings, starting from the end of the string. The splits in the returned array appear in the same order as the original string. If `delimiter` is an empty string, each substring will be a single character.
				If `allow_empty` is `false`, empty strings between adjacent delimiters are excluded from the array.
				If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split, which is mostly identical to `split`.
				
				```gdscript
				var some_string = "One,Two,Three,Four"
				var some_array = some_string.rsplit(",", true, 1)

				print(some_array.size()) # Prints 2
				print(some_array`0`)     # Prints "One,Two,Three"
				print(some_array`1`)     # Prints "Four"
				```
				
				
			"""
    pass

  def split_floats(self, delimiter:str, allow_empty:bool=True)->PackedFloat64Array:
    """
				Splits the string into floats by using a `delimiter` and returns a `PackedFloat64Array`.
				If `allow_empty` is `false`, empty or invalid `float` conversions between adjacent delimiters are excluded.
				```gdscript
				var a = "1,2,4.5".split_floats(",")         # a is `1.0, 2.0, 4.5`
				var c = "1| ||4.5".split_floats("|")        # c is `1.0, 0.0, 0.0, 4.5`
				var b = "1| ||4.5".split_floats("|", false) # b is `1.0, 4.5`
				```
			"""
    pass

  def join(self, parts:PackedStringArray)->str:
    """
				Returns the concatenation of `parts`' elements, with each element separated by the string calling this method. This method is the opposite of `split`.
				
				```gdscript
				var fruits = `"Apple", "Orange", "Pear", "Kiwi"`

				print(", ".join(fruits))  # Prints "Apple, Orange, Pear, Kiwi"
				print("---".join(fruits)) # Prints "Apple---Orange---Pear---Kiwi"
				```
				
				
			"""
    pass

  def to_upper(self)->str:
    """
				Returns the string converted to `UPPERCASE`.
			"""
    pass

  def to_lower(self)->str:
    """
				Returns the string converted to `lowercase`.
			"""
    pass

  def left(self, length:int)->str:
    """
				Returns the first `length` characters from the beginning of the string. If `length` is negative, strips the last `length` characters from the string's end.
				```gdscript
				print("Hello World!".left(3))  # Prints "Hel"
				print("Hello World!".left(-4)) # Prints "Hello Wo"
				```
			"""
    pass

  def right(self, length:int)->str:
    """
				Returns the last `length` characters from the end of the string. If `length` is negative, strips the first `length` characters from the string's beginning.
				```gdscript
				print("Hello World!".right(3))  # Prints "ld!"
				print("Hello World!".right(-4)) # Prints "o World!"
				```
			"""
    pass

  def strip_edges(self, left:bool=True, right:bool=True)->str:
    """
				Strips all non-printable characters from the beginning and the end of the string. These include spaces, tabulations (`\t`), and newlines (`\n` `\r`).
				If `left` is `false`, ignores the string's beginning. Likewise, if `right` is `false`, ignores the string's end.
			"""
    pass

  def strip_escapes(self)->str:
    """
				Strips all escape characters from the string. These include all non-printable control characters of the first page of the ASCII table (values from 0 to 31), such as tabulation (`\t`) and newline (`\n`, `\r`) characters, but _not_ spaces.
			"""
    pass

  def lstrip(self, chars:str)->str:
    """
				Removes a set of characters defined in `chars` from the string's beginning. See also `rstrip`.
				**Note:** `chars` is not a prefix. Use `trim_prefix` to remove a single prefix, rather than a set of characters.
			"""
    pass

  def rstrip(self, chars:str)->str:
    """
				Removes a set of characters defined in `chars` from the string's end. See also `lstrip`.
				**Note:** `chars` is not a suffix. Use `trim_suffix` to remove a single suffix, rather than a set of characters.
			"""
    pass

  def get_extension(self)->str:
    """
				If the string is a valid file name or path, returns the file extension without the leading period (`.`). Otherwise, returns an empty string.
				```gdscript
				var a = "/path/to/file.txt".get_extension() # a is "txt"
				var b = "cool.txt".get_extension()          # b is "txt"
				var c = "cool.font.tres".get_extension()    # c is "tres"
				var d = ".pack1".get_extension()            # d is "pack1"

				var e = "file.txt.".get_extension()  # e is ""
				var f = "file.txt..".get_extension() # f is ""
				var g = "txt".get_extension()        # g is ""
				var h = "".get_extension()           # h is ""
				```
			"""
    pass

  def get_basename(self)->str:
    """
				If the string is a valid file path, returns the full file path, without the extension.
				```gdscript
				var base = "/path/to/file.txt".get_basename() # base is "/path/to/file"
				```
			"""
    pass

  def path_join(self, file:str)->str:
    """
				Concatenates `path` at the end of the string as a subpath, adding `/` if necessary.
				**Example:** `"this/is".path_join("path") == "this/is/path"`.
			"""
    pass

  def unicode_at(self, at:int)->int:
    """
				Returns the character code at position `at`.
				See also `chr`, `@GDScript.char`, and `@GDScript.ord`.
			"""
    pass

  def indent(self, prefix:str)->str:
    """
				Indents every line of the string with the given `prefix`. Empty lines are not indented. See also `dedent` to remove indentation.
				For example, the string can be indented with two tabulations using `"\t\t"`, or four spaces using `"    "`.
			"""
    pass

  def dedent(self)->str:
    """
				Returns a copy of the string with indentation (leading tabs and spaces) removed. See also `indent` to add indentation.
			"""
    pass

  def hash(self)->int:
    """
				Returns the 32-bit hash value representing the string's contents.
				**Note:** Strings with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. On the contrary, strings with different hash values are guaranteed to be different.
			"""
    pass

  def md5_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/MD5`MD5 hash`/url` of the string as another `String`.
			"""
    pass

  def sha1_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-1`SHA-1`/url` hash of the string as another `String`.
			"""
    pass

  def sha256_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-2`SHA-256`/url` hash of the string as another `String`.
			"""
    pass

  def md5_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/MD5`MD5 hash`/url` of the string as a `PackedByteArray`.
			"""
    pass

  def sha1_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-1`SHA-1`/url` hash of the string as a `PackedByteArray`.
			"""
    pass

  def sha256_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-2`SHA-256`/url` hash of the string as a `PackedByteArray`.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the string's length is `0` (`""`). See also `length`.
			"""
    pass

  def contains(self, what:str)->bool:
    """
				Returns `true` if the string contains `what`. In GDScript, this corresponds to the `in` operator.
				
				```gdscript
				print("Node".contains("de")) # Prints true
				print("team".contains("I"))  # Prints false
				print("I" in "team")         # Prints false
				```
				
				
				If you need to know where `what` is within the string, use `find`. See also `containsn`.
			"""
    pass

  def containsn(self, what:str)->bool:
    """
				Returns `true` if the string contains `what`, **ignoring case**.
				If you need to know where `what` is within the string, use `findn`. See also `contains`.
			"""
    pass

  def is_absolute_path(self)->bool:
    """
				Returns `true` if the string is a path to a file or directory, and its starting point is explicitly defined. This method is the opposite of `is_relative_path`.
				This includes all paths starting with `"res://"`, `"user://"`, `"C:\"`, `"/"`, etc.
			"""
    pass

  def is_relative_path(self)->bool:
    """
				Returns `true` if the string is a path, and its starting point is dependent on context. The path could begin from the current directory, or the current `Node` (if the string is derived from a `NodePath`), and may sometimes be prefixed with `"./"`. This method is the opposite of `is_absolute_path`.
			"""
    pass

  def simplify_path(self)->str:
    """
				If the string is a valid file path, converts the string into a canonical path. This is the shortest possible path, without `"./"`, and all the unnecessary `".."` and `"/"`.
				```gdscript
				var simple_path = "./path/to///../file".simplify_path()
				print(simple_path) # Prints "path/file"
				```
			"""
    pass

  def get_base_dir(self)->str:
    """
				If the string is a valid file path, returns the base directory name.
				```gdscript
				var dir_path = "/path/to/file.txt".get_base_dir() # dir_path is "/path/to"
				```
			"""
    pass

  def get_file(self)->str:
    """
				If the string is a valid file path, returns the file name, including the extension.
				```gdscript
				var file = "/path/to/icon.png".get_file() # file is "icon.png"
				```
			"""
    pass

  def xml_escape(self, escape_quotes:bool=False)->str:
    """
				Returns a copy of the string with special characters escaped using the XML standard. If `escape_quotes` is `true`, the single quote (`'`) and double quote (`"`) characters are also escaped.
			"""
    pass

  def xml_unescape(self)->str:
    """
				Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.
			"""
    pass

  def uri_encode(self)->str:
    """
				Encodes the string to URL-friendly format. This method is meant to properly encode the parameters in a URL when sending an HTTP request. See also `uri_decode`.
				
				```gdscript
				var prefix = "$DOCS_URL/?highlight="
				var url = prefix + "Godot Engine:docs".uri_encode()

				print(url) # Prints "$DOCS_URL/?highlight=Godot%20Engine%3%docs"
				```
				
				
			"""
    pass

  def uri_decode(self)->str:
    """
				Decodes the string from its URL-encoded format. This method is meant to properly decode the parameters in a URL when receiving an HTTP request. See also `uri_encode`.
				
				```gdscript
				var url = "$DOCS_URL/?highlight=Godot%20Engine%3%docs"
				print(url.uri_decode()) # Prints "$DOCS_URL/?highlight=Godot Engine:docs"
				```
				
				
				**Note:** This method decodes `+` as space.
			"""
    pass

  def c_escape(self)->str:
    """
				Returns a copy of the string with special characters escaped using the C language standard.
			"""
    pass

  def c_unescape(self)->str:
    """
				Returns a copy of the string with escaped characters replaced by their meanings. Supported escape sequences are `\'`, `\"`, `\\`, `\a`, `\b`, `\f`, `\n`, `\r`, `\t`, `\v`.
				**Note:** Unlike the GDScript parser, this method doesn't support the `\uXXXX` escape sequence.
			"""
    pass

  def json_escape(self)->str:
    """
				Returns a copy of the string with special characters escaped using the JSON standard. Because it closely matches the C standard, it is possible to use `c_unescape` to unescape the string, if necessary.
			"""
    pass

  def validate_node_name(self)->str:
    """
				Returns a copy of the string with all characters that are not allowed in `Node.name` (`.` `:` `@` `/` `"` `%`) replaced with underscores.
			"""
    pass

  def validate_filename(self)->str:
    """
				Returns a copy of the string with all characters that are not allowed in `is_valid_filename` replaced with underscores.
			"""
    pass

  def is_valid_ascii_identifier(self)->bool:
    """
				Returns `true` if this string is a valid ASCII identifier. A valid ASCII identifier may contain only letters, digits, and underscores (`_`), and the first character may not be a digit.
				```gdscript
				print("node_2d".is_valid_ascii_identifier())    # Prints true
				print("TYPE_FLOAT".is_valid_ascii_identifier()) # Prints true
				print("1st_method".is_valid_ascii_identifier()) # Prints false
				print("MyMethod#2".is_valid_ascii_identifier()) # Prints false
				```
				See also `is_valid_unicode_identifier`.
			"""
    pass

  def is_valid_unicode_identifier(self)->bool:
    """
				Returns `true` if this string is a valid Unicode identifier.
				A valid Unicode identifier must begin with a Unicode character of class `XID_Start` or `"_"`, and may contain Unicode characters of class `XID_Continue` in the other positions.
				```gdscript
				print("node_2d".is_valid_unicode_identifier())      # Prints true
				print("1st_method".is_valid_unicode_identifier())   # Prints false
				print("MyMethod#2".is_valid_unicode_identifier())   # Prints false
				print("állóképesség".is_valid_unicode_identifier()) # Prints true
				print("выносливость".is_valid_unicode_identifier()) # Prints true
				print("体力".is_valid_unicode_identifier())         # Prints true
				```
				See also `is_valid_ascii_identifier`.
				**Note:** This method checks identifiers the same way as GDScript. See `TextServer.is_valid_identifier` for more advanced checks.
			"""
    pass

  def is_valid_identifier(self)->bool:
    """
				Returns `true` if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (`_`), and the first character may not be a digit.
				```gdscript
				print("node_2d".is_valid_identifier())    # Prints true
				print("TYPE_FLOAT".is_valid_identifier()) # Prints true
				print("1st_method".is_valid_identifier()) # Prints false
				print("MyMethod#2".is_valid_identifier()) # Prints false
				```
			"""
    pass

  def is_valid_int(self)->bool:
    """
				Returns `true` if this string represents a valid integer. A valid integer only contains digits, and may be prefixed with a positive (`+`) or negative (`-`) sign. See also `to_int`.
				```gdscript
				print("7".is_valid_int())    # Prints true
				print("1.65".is_valid_int()) # Prints false
				print("Hi".is_valid_int())   # Prints false
				print("+3".is_valid_int())   # Prints true
				print("-12".is_valid_int())  # Prints true
				```
			"""
    pass

  def is_valid_float(self)->bool:
    """
				Returns `true` if this string represents a valid floating-point number. A valid float may contain only digits, one decimal point (`.`), and the exponent letter (`e`). It may also be prefixed with a positive (`+`) or negative (`-`) sign. Any valid integer is also a valid float (see `is_valid_int`). See also `to_float`.
				```gdscript
				print("1.7".is_valid_float())   # Prints true
				print("24".is_valid_float())    # Prints true
				print("7e3".is_valid_float())   # Prints true
				print("Hello".is_valid_float()) # Prints false
				```
			"""
    pass

  def is_valid_hex_number(self, with_prefix:bool=False)->bool:
    """
				Returns `true` if this string is a valid hexadecimal number. A valid hexadecimal number only contains digits or letters `A` to `F` (either uppercase or lowercase), and may be prefixed with a positive (`+`) or negative (`-`) sign.
				If `with_prefix` is `true`, the hexadecimal number needs to prefixed by `"0x"` to be considered valid.
				```gdscript
				print("A08E".is_valid_hex_number())    # Prints true
				print("-AbCdEf".is_valid_hex_number()) # Prints true
				print("2.5".is_valid_hex_number())     # Prints false

				print("0xDEADC0DE".is_valid_hex_number(true)) # Prints true
				```
			"""
    pass

  def is_valid_html_color(self)->bool:
    """
				Returns `true` if this string is a valid color in hexadecimal HTML notation. The string must be a hexadecimal value (see `is_valid_hex_number`) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). Other HTML notations for colors, such as names or `hsl()`, are not considered valid. See also `Color.html`.
			"""
    pass

  def is_valid_ip_address(self)->bool:
    """
				Returns `true` if this string represents a well-formatted IPv4 or IPv6 address. This method considers `url=https://en.wikipedia.org/wiki/Reserved_IP_addresses`reserved IP addresses`/url` such as `"0.0.0.0"` and `"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"` as valid.
			"""
    pass

  def is_valid_filename(self)->bool:
    """
				Returns `true` if this string is a valid file name. A valid file name cannot be empty, begin or end with space characters, or contain characters that are not allowed (`:` `/` `\` `?` `*` `"` `|` `%` `<` `>`).
			"""
    pass

  def to_int(self)->int:
    """
				Converts the string representing an integer number into an `int`. This method removes any non-number character and stops at the first decimal point (`.`). See also `is_valid_int`.
				```gdscript
				var a = "123".to_int()    # a is 123
				var b = "x1y2z3".to_int() # b is 123
				var c = "-1.2.3".to_int() # c is -1
				var d = "Hello!".to_int() # d is 0
				```
			"""
    pass

  def to_float(self)->float:
    """
				Converts the string representing a decimal number into a `float`. This method stops on the first non-number character, except the first decimal point (`.`) and the exponent letter (`e`). See also `is_valid_float`.
				```gdscript
				var a = "12.35".to_float()  # a is 12.35
				var b = "1.2.3".to_float()  # b is 1.2
				var c = "12xy3".to_float()  # c is 12.0
				var d = "1e3".to_float()    # d is 1000.0
				var e = "Hello!".to_float() # e is 0.0
				```
			"""
    pass

  def hex_to_int(self)->int:
    """
				Converts the string representing a hexadecimal number into an `int`. The string may be optionally prefixed with `"0x"`, and an additional `-` prefix for negative numbers.
				
				```gdscript
				print("0xff".hex_to_int()) # Prints 255
				print("ab".hex_to_int())   # Prints 171
				```
				
				
			"""
    pass

  def bin_to_int(self)->int:
    """
				Converts the string representing a binary number into an `int`. The string may optionally be prefixed with `"0b"`, and an additional `-` prefix for negative numbers.
				
				```gdscript
				print("101".bin_to_int())   # Prints 5
				print("0b101".bin_to_int()) # Prints 5
				print("-0b10".bin_to_int()) # Prints -2
				```
				
				
			"""
    pass

  def lpad(self, min_length:int, character:str= String.new0())->str:
    """
				Formats the string to be at least `min_length` long by adding `character`s to the left of the string, if necessary. See also `rpad`.
			"""
    pass

  def rpad(self, min_length:int, character:str= String.new0())->str:
    """
				Formats the string to be at least `min_length` long, by adding `character`s to the right of the string, if necessary. See also `lpad`.
			"""
    pass

  def pad_decimals(self, digits:int)->str:
    """
				Formats the string representing a number to have an exact number of `digits` _after_ the decimal point.
			"""
    pass

  def pad_zeros(self, digits:int)->str:
    """
				Formats the string representing a number to have an exact number of `digits` _before_ the decimal point.
			"""
    pass

  def trim_prefix(self, prefix:str)->str:
    """
				Removes the given `prefix` from the start of the string, or returns the string unchanged.
			"""
    pass

  def trim_suffix(self, suffix:str)->str:
    """
				Removes the given `suffix` from the end of the string, or returns the string unchanged.
			"""
    pass

  def to_ascii_buffer(self)->PackedByteArray:
    """
				Converts the string to an `url=https://en.wikipedia.org/wiki/ASCII`ASCII`/url`/Latin-1 encoded `PackedByteArray`. This method is slightly faster than `to_utf8_buffer`, but replaces all unsupported characters with spaces. This is the inverse of `PackedByteArray.get_string_from_ascii`.
			"""
    pass

  def to_utf8_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-8`UTF-8`/url` encoded `PackedByteArray`. This method is slightly slower than `to_ascii_buffer`, but supports all UTF-8 characters. For most cases, prefer using this method. This is the inverse of `PackedByteArray.get_string_from_utf8`.
			"""
    pass

  def to_utf16_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-16`UTF-16`/url` encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_utf16`.
			"""
    pass

  def to_utf32_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-32`UTF-32`/url` encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_utf32`.
			"""
    pass

  def hex_decode(self)->PackedByteArray:
    """
				Decodes a hexadecimal string as a `PackedByteArray`.
				
				```gdscript
				var text = "hello world"
				var encoded = text.to_utf8_buffer().hex_encode() # outputs "68656c6c6f20776f726c64"
				print(encoded.hex_decode().get_string_from_utf8())
				```
				
				
			"""
    pass

  def to_wchar_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/Wide_character`wide character`/url` (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_wchar`.
			"""
    pass

  @staticmethod
  def num_scientific(number:float)->str:
    """
				Converts the given `number` to a string representation, in scientific notation.
				
				```gdscript
				var n = -5.2e8
				print(n)                        # Prints -520000000
				print(String.num_scientific(n)) # Prints -5.2e+08
				```
				
				
				**Note:** In C#, this method is not implemented. To achieve similar results, see C#'s `url=https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings`Standard numeric format strings`/url`.
			"""
    pass

  @staticmethod
  def num(number:float, decimals:int=-1)->str:
    """
				Converts a `float` to a string representation of a decimal number, with the number of decimal places specified in `decimals`.
				If `decimals` is `-1` as by default, the string representation may only have up to 14 significant digits, with digits before the decimal point having priority over digits after.
				Trailing zeros are not included in the string. The last digit is rounded, not truncated.
				```gdscript
				String.num(3.141593)     # Returns "3.141593"
				String.num(3.141593, 3)  # Returns "3.142"
				String.num(3.14159300)   # Returns "3.141593"

				# Here, the last digit will be rounded up,
				# which reduces the total digit count, since trailing zeros are removed:
				String.num(42.129999, 5) # Returns "42.13"

				# If `decimals` is not specified, the maximum number of significant digits is 14:
				String.num(-0.0000012345432123454321)     # Returns "-0.00000123454321"
				String.num(-10000.0000012345432123454321) # Returns "-10000.0000012345"
				```
			"""
    pass

  @staticmethod
  def num_int64(number:int, base:int=10, capitalize_hex:bool=False)->str:
    """
				Converts the given `number` to a string representation, with the given `base`.
				By default, `base` is set to decimal (`10`). Other common bases in programming include binary (`2`), `url=https://en.wikipedia.org/wiki/Octal`octal`/url` (`8`), hexadecimal (`16`).
				If `capitalize_hex` is `true`, digits higher than 9 are represented in uppercase.
			"""
    pass

  @staticmethod
  def num_uint64(number:int, base:int=10, capitalize_hex:bool=False)->str:
    """
				Converts the given unsigned `int` to a string representation, with the given `base`.
				By default, `base` is set to decimal (`10`). Other common bases in programming include binary (`2`), `url=https://en.wikipedia.org/wiki/Octal`octal`/url` (`8`), hexadecimal (`16`).
				If `capitalize_hex` is `true`, digits higher than 9 are represented in uppercase.
			"""
    pass

  @staticmethod
  def chr(char:int)->str:
    """
				Returns a single Unicode character from the integer `code`. You may use `url=https://unicodelookup.com/`unicodelookup.com`/url` or `url=https://www.unicode.org/charts/`unicode.org`/url` as points of reference.
				```gdscript
				print(String.chr(65))     # Prints "A"
				print(String.chr(129302)) # Prints "🤖" (robot face emoji)
				```
				See also `unicode_at`, `@GDScript.char`, and `@GDScript.ord`.
			"""
    pass

  @staticmethod
  def humanize_size(size:int)->str:
    """
				Converts `size` which represents a number of bytes into a human-readable form.
				The result is in `url=https://en.wikipedia.org/wiki/Binary_prefix#IEC_prefixes`IEC prefix format`/url`, which may end in either `"B"`, `"KiB"`, `"MiB"`, `"GiB"`, `"TiB"`, `"PiB"`, or `"EiB"`.
			"""
    pass

  def __eq__(self, other:Any|str|StringName|str) -> bool: pass
  def __ne__(self, other:Any|str|StringName|str) -> bool: pass
  def __mod__(self, other:Any|bool|int|float|str|Vector2|Vector2i|Rect2|Rect2i|Vector3|Vector3i|Transform2D|Vector4|Vector4i|Plane|Quaternion|AABB|Basis|Transform3D|Projection|Color|StringName|str|NodePath|str|__object__.Object|Callable|Signal|Dictionary|Array|PackedByteArray|PackedInt32Array|PackedInt64Array|PackedFloat32Array|PackedFloat64Array|PackedStringArray|PackedVector2Array|PackedVector3Array|PackedColorArray|PackedVector4Array) -> String: pass
  def __lt__(self, other:str) -> bool: pass
  def __le__(self, other:str) -> bool: pass
  def __gt__(self, other:str) -> bool: pass
  def __ge__(self, other:str) -> bool: pass
  def __add__(self, other:str|StringName|str) -> String: pass




class Vector2(VariantTypeWrapper4):
  """
		A 2-element structure that can be used to represent 2D coordinates or any other pair of numeric values.
		It uses floating-point coordinates. By default, these floating-point values use 32-bit precision, unlike `float` which is always 64-bit. If double precision is needed, compile the engine with the option `precision=double`.
		See `Vector2i` for its integer counterpart.
		**Note:** In a boolean context, a Vector2 will evaluate to `false` if it's equal to `Vector2(0, 0)`. Otherwise, a Vector2 will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector2:pass


  @staticmethod
  def new0() -> Vector2:pass
  @staticmethod
  def new1(from_:Vector2) -> Vector2:pass
  @staticmethod
  def new2(from_:Vector2i) -> Vector2:pass
  @staticmethod
  def new3(x:float, y:float) -> Vector2:pass

  def __neg__(self):pass
  def __truediv__(self):pass


  @property
  def x(self)->float:
    """"""
    pass
  def get_x(self)->float:
    """"""
    pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:
    """"""
    pass
  def get_y(self)->float:
    """"""
    pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  def angle(self)->float:
    """
				Returns this vector's angle with respect to the positive X axis, or `(1, 0)` vector, in radians.
				For example, `Vector2.RIGHT.angle()` will return zero, `Vector2.DOWN.angle()` will return `PI / 2` (a quarter turn, or 90 degrees), and `Vector2(1, -1).angle()` will return `-PI / 4` (a negative eighth turn, or -45 degrees).
				`url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle.png`Illustration of the returned angle.`/url`
				Equivalent to the result of `@GlobalScope.atan2` when called with the vector's `y` and `x` as parameters: `atan2(y, x)`.
			"""
    pass

  def angle_to(self, to:Vector2)->float:
    """
				Returns the signed angle to the given vector, in radians.
				`url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle_to.png`Illustration of the returned angle.`/url`
			"""
    pass

  def angle_to_point(self, to:Vector2)->float:
    """
				Returns the angle between the line connecting the two points and the X axis, in radians.
				`a.angle_to_point(b)` is equivalent of doing `(b - a).angle()`.
				`url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/vector2_angle_to_point.png`Illustration of the returned angle.`/url`
			"""
    pass

  def direction_to(self, to:Vector2)->Vector2:
    """
				Returns the normalized vector pointing from this vector to `to`. This is equivalent to using `(b - a).normalized()`.
			"""
    pass

  def distance_to(self, to:Vector2)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector2)->float:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->float:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def limit_length(self, length:float=1.0)->Vector2:
    """
				Returns the vector with a maximum length by limiting its length to `length`. If the vector is non-finite, the result is undefined.
			"""
    pass

  def normalized(self)->Vector2:
    """
				Returns the result of scaling the vector to unit length. Equivalent to `v / v.length()`. Returns `(0, 0)` if `v.length() == 0`. See also `is_normalized`.
				**Note:** This function may return incorrect values if the input vector length is near zero.
			"""
    pass

  def is_normalized(self)->bool:
    """
				Returns `true` if the vector is normalized, i.e. its length is approximately equal to 1.
			"""
    pass

  def is_equal_approx(self, to:Vector2)->bool:
    """
				Returns `true` if this vector and `to` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_zero_approx(self)->bool:
    """
				Returns `true` if this vector's values are approximately zero, by running `@GlobalScope.is_zero_approx` on each component.
				This method is faster than using `is_equal_approx` with one value as a zero vector.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this vector is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def posmod(self, mod:float)->Vector2:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `mod`.
			"""
    pass

  def posmodv(self, modv:Vector2)->Vector2:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `modv`'s components.
			"""
    pass

  def project(self, b:Vector2)->Vector2:
    """
				Returns a new vector resulting from projecting this vector onto the given vector `b`. The resulting new vector is parallel to `b`. See also `slide`.
				**Note:** If the vector `b` is a zero vector, the components of the resulting new vector will be `constant @GDScript.NAN`.
			"""
    pass

  def lerp(self, to:Vector2, weight:float)->Vector2:
    """
				Returns the result of the linear interpolation between this vector and `to` by amount `weight`. `weight` is on the range of `0.0` to `1.0`, representing the amount of interpolation.
			"""
    pass

  def slerp(self, to:Vector2, weight:float)->Vector2:
    """
				Returns the result of spherical linear interpolation between this vector and `to`, by amount `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
				This method also handles interpolating the lengths if the input vectors have different lengths. For the special case of one or both input vectors having zero length, this method behaves like `lerp`.
			"""
    pass

  def cubic_interpolate(self, b:Vector2, pre_a:Vector2, post_b:Vector2, weight:float)->Vector2:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
			"""
    pass

  def cubic_interpolate_in_time(self, b:Vector2, pre_a:Vector2, post_b:Vector2, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector2:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
				It can perform smoother interpolation than `cubic_interpolate` by the time values.
			"""
    pass

  def bezier_interpolate(self, control_1:Vector2, control_2:Vector2, end:Vector2, t:float)->Vector2:
    """
				Returns the point at the given `t` on the `url=https://en.wikipedia.org/wiki/B%C3%A9zier_curve`Bézier curve`/url` defined by this vector and the given `control_1`, `control_2`, and `end` points.
			"""
    pass

  def bezier_derivative(self, control_1:Vector2, control_2:Vector2, end:Vector2, t:float)->Vector2:
    """
				Returns the derivative at the given `t` on the `url=https://en.wikipedia.org/wiki/B%C3%A9zier_curve`Bézier curve`/url` defined by this vector and the given `control_1`, `control_2`, and `end` points.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_Y`.
			"""
    pass

  def move_toward(self, to:Vector2, delta:float)->Vector2:
    """
				Returns a new vector moved toward `to` by the fixed `delta` amount. Will not go past the final value.
			"""
    pass

  def rotated(self, angle:float)->Vector2:
    """
				Returns the result of rotating this vector by `angle` (in radians). See also `@GlobalScope.deg_to_rad`.
			"""
    pass

  def orthogonal(self)->Vector2:
    """
				Returns a perpendicular vector rotated 90 degrees counter-clockwise compared to the original, with the same length.
			"""
    pass

  def floor(self)->Vector2:
    """
				Returns a new vector with all components rounded down (towards negative infinity).
			"""
    pass

  def ceil(self)->Vector2:
    """
				Returns a new vector with all components rounded up (towards positive infinity).
			"""
    pass

  def round(self)->Vector2:
    """
				Returns a new vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			"""
    pass

  def aspect(self)->float:
    """
				Returns the aspect ratio of this vector, the ratio of `x` to `y`.
			"""
    pass

  def dot(self, with_:Vector2)->float:
    """
				Returns the dot product of this vector and `with`. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.
				The dot product will be `0` for a right angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.
				When using unit (normalized) vectors, the result will always be between `-1.0` (180 degree angle) when the vectors are facing opposite directions, and `1.0` (0 degree angle) when the vectors are aligned.
				**Note:** `a.dot(b)` is equivalent to `b.dot(a)`.
			"""
    pass

  def slide(self, n:Vector2)->Vector2:
    """
				Returns a new vector resulting from sliding this vector along a line with normal `n`. The resulting new vector is perpendicular to `n`, and is equivalent to this vector minus its projection on `n`. See also `project`.
				**Note:** The vector `n` must be normalized. See also `normalized`.
			"""
    pass

  def bounce(self, n:Vector2)->Vector2:
    """
				Returns the vector "bounced off" from a line defined by the given normal `n` perpendicular to the line.
				**Note:** `bounce` performs the operation that most engines and frameworks call `code skip-lint`reflect()`.
			"""
    pass

  def reflect(self, line:Vector2)->Vector2:
    """
				Returns the result of reflecting the vector from a line defined by the given direction vector `line`.
				**Note:** `reflect` differs from what other engines and frameworks call `code skip-lint`reflect()`. In other engines, `code skip-lint`reflect()` takes a normal direction which is a direction perpendicular to the line. In Godot, you specify the direction of the line directly. See also `bounce` which does what most engines call `code skip-lint`reflect()`.
			"""
    pass

  def cross(self, with_:Vector2)->float:
    """
				Returns the 2D analog of the cross product for this vector and `with`.
				This is the signed area of the parallelogram formed by the two vectors. If the second vector is clockwise from the first vector, then the cross product is the positive area. If counter-clockwise, the cross product is the negative area. If the two vectors are parallel this returns zero, making it useful for testing if two vectors are parallel.
				**Note:** Cross product is not defined in 2D mathematically. This method embeds the 2D vectors in the XY plane of 3D space and uses their cross product's Z component as the analog.
			"""
    pass

  def abs(self)->Vector2:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def sign(self)->Vector2:
    """
				Returns a new vector with each component set to `1.0` if it's positive, `-1.0` if it's negative, and `0.0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def clamp(self, min:Vector2, max:Vector2)->Vector2:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampf(self, min:float, max:float)->Vector2:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def snapped(self, step:Vector2)->Vector2:
    """
				Returns a new vector with each component snapped to the nearest multiple of the corresponding component in `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def snappedf(self, step:float)->Vector2:
    """
				Returns a new vector with each component snapped to the nearest multiple of `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def min(self, with_:Vector2)->Vector2:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector2(minf(x, with.x), minf(y, with.y))`.
			"""
    pass

  def minf(self, with_:float)->Vector2:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector2(minf(x, with), minf(y, with))`.
			"""
    pass

  def max(self, with_:Vector2)->Vector2:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector2(maxf(x, with.x), maxf(y, with.y))`.
			"""
    pass

  def maxf(self, with_:float)->Vector2:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector2(maxf(x, with), maxf(y, with))`.
			"""
    pass

  @staticmethod
  def from_angle(angle:float)->Vector2:
    """
				Creates a `Vector2` rotated to the given `angle` in radians. This is equivalent to doing `Vector2(cos(angle), sin(angle))` or `Vector2.RIGHT.rotated(angle)`.
				```gdscript
				print(Vector2.from_angle(0)) # Prints (1.0, 0.0)
				print(Vector2(1, 0).angle()) # Prints 0.0, which is the angle used above.
				print(Vector2.from_angle(PI / 2)) # Prints (0.0, 1.0)
				```
				**Note:** The length of the returned `Vector2` is _approximately_ `1.0`, but is is not guaranteed to be exactly `1.0` due to floating-point precision issues. Call `normalized` on the returned `Vector2` if you require a unit vector.
			"""
    pass

  def __eq__(self, other:Any|Vector2) -> bool: pass
  def __ne__(self, other:Any|Vector2) -> bool: pass
  def __mul__(self, other:int|float|Vector2|Transform2D) -> Vector2: pass
  def __div__(self, other:int|float|Vector2) -> Vector2: pass
  def __lt__(self, other:Vector2) -> bool: pass
  def __le__(self, other:Vector2) -> bool: pass
  def __gt__(self, other:Vector2) -> bool: pass
  def __ge__(self, other:Vector2) -> bool: pass
  def __add__(self, other:Vector2) -> Vector2: pass
  def __sub__(self, other:Vector2) -> Vector2: pass




class Vector2i(VariantTypeWrapper4):
  """
		A 2-element structure that can be used to represent 2D grid coordinates or any other pair of integers.
		It uses integer coordinates and is therefore preferable to `Vector2` when exact precision is required. Note that the values are limited to 32 bits, and unlike `Vector2` this cannot be configured with an engine build option. Use `int` or `PackedInt64Array` if 64-bit values are needed.
		**Note:** In a boolean context, a Vector2i will evaluate to `false` if it's equal to `Vector2i(0, 0)`. Otherwise, a Vector2i will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector2i:pass


  @staticmethod
  def new0() -> Vector2i:pass
  @staticmethod
  def new1(from_:Vector2i) -> Vector2i:pass
  @staticmethod
  def new2(from_:Vector2) -> Vector2i:pass
  @staticmethod
  def new3(x:int, y:int) -> Vector2i:pass



  @property
  def x(self)->int:
    """"""
    pass
  def get_x(self)->int:
    """"""
    pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:
    """"""
    pass
  def get_y(self)->int:
    """"""
    pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  def aspect(self)->float:
    """
				Returns the aspect ratio of this vector, the ratio of `x` to `y`.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_Y`.
			"""
    pass

  def distance_to(self, to:Vector2i)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector2i)->int:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->int:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def sign(self)->Vector2i:
    """
				Returns a new vector with each component set to `1` if it's positive, `-1` if it's negative, and `0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def abs(self)->Vector2i:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def clamp(self, min:Vector2i, max:Vector2i)->Vector2i:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampi(self, min:int, max:int)->Vector2i:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def snapped(self, step:Vector2i)->Vector2i:
    """
				Returns a new vector with each component snapped to the closest multiple of the corresponding component in `step`.
			"""
    pass

  def snappedi(self, step:int)->Vector2i:
    """
				Returns a new vector with each component snapped to the closest multiple of `step`.
			"""
    pass

  def min(self, with_:Vector2i)->Vector2i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector2i(mini(x, with.x), mini(y, with.y))`.
			"""
    pass

  def mini(self, with_:int)->Vector2i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector2i(mini(x, with), mini(y, with))`.
			"""
    pass

  def max(self, with_:Vector2i)->Vector2i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector2i(maxi(x, with.x), maxi(y, with.y))`.
			"""
    pass

  def maxi(self, with_:int)->Vector2i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector2i(maxi(x, with), maxi(y, with))`.
			"""
    pass

  def __eq__(self, other:Any|Vector2i) -> bool: pass
  def __ne__(self, other:Any|Vector2i) -> bool: pass
  def __mul__(self, other:int|float|Vector2i) -> Vector2i: pass
  def __div__(self, other:int|float|Vector2i) -> Vector2i: pass
  def __mod__(self, other:int|Vector2i) -> Vector2i: pass
  def __lt__(self, other:Vector2i) -> bool: pass
  def __le__(self, other:Vector2i) -> bool: pass
  def __gt__(self, other:Vector2i) -> bool: pass
  def __ge__(self, other:Vector2i) -> bool: pass
  def __add__(self, other:Vector2i) -> Vector2i: pass
  def __sub__(self, other:Vector2i) -> Vector2i: pass



class Rect2(VariantTypeWrapper4):
  """
		The `Rect2` built-in `Variant` type represents an axis-aligned rectangle in a 2D space. It is defined by its `position` and `size`, which are `Vector2`. It is frequently used for fast overlap tests (see `intersects`). Although `Rect2` itself is axis-aligned, it can be combined with `Transform2D` to represent a rotated or skewed rectangle.
		For integer coordinates, use `Rect2i`. The 3D equivalent to `Rect2` is `AABB`.
		**Note:** Negative values for `size` are not supported. With negative size, most `Rect2` methods do not work correctly. Use `abs` to get an equivalent `Rect2` with a non-negative size.
		**Note:** In a boolean context, a `Rect2` evaluates to `false` if both `position` and `size` are zero (equal to `constant Vector2.ZERO`). Otherwise, it always evaluates to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Rect2:pass


  @staticmethod
  def new0() -> Rect2:pass
  @staticmethod
  def new1(from_:Rect2) -> Rect2:pass
  @staticmethod
  def new2(from_:Rect2i) -> Rect2:pass
  @staticmethod
  def new3(position:Vector2, size:Vector2) -> Rect2:pass
  @staticmethod
  def new4(x:float, y:float, width:float, height:float) -> Rect2:pass



  @property
  def position(self)->Vector2:
    """"""
    pass
  def get_position(self)->Vector2:
    """"""
    pass

  @position.setter
  def position(self, value:Vector2)->None:pass
  def set_position(self, value:Vector2)->None:pass
  @property
  def size(self)->Vector2:
    """"""
    pass
  def get_size(self)->Vector2:
    """"""
    pass

  @size.setter
  def size(self, value:Vector2)->None:pass
  def set_size(self, value:Vector2)->None:pass
  def get_center(self)->Vector2:
    """
				Returns the center point of the rectangle. This is the same as `position + (size / 2.0)`.
			"""
    pass

  def get_area(self)->float:
    """
				Returns the rectangle's area. This is equivalent to `size.x * size.y`. See also `has_area`.
			"""
    pass

  def has_area(self)->bool:
    """
				Returns `true` if this rectangle has positive width and height. See also `get_area`.
			"""
    pass

  def has_point(self, point:Vector2)->bool:
    """
				Returns `true` if the rectangle contains the given `point`. By convention, points on the right and bottom edges are **not** included.
				**Note:** This method is not reliable for `Rect2` with a _negative_ `size`. Use `abs` first to get a valid rectangle.
			"""
    pass

  def is_equal_approx(self, rect:Rect2)->bool:
    """
				Returns `true` if this rectangle and `rect` are approximately equal, by calling `Vector2.is_equal_approx` on the `position` and the `size`.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this rectangle's values are finite, by calling `Vector2.is_finite` on the `position` and the `size`.
			"""
    pass

  def intersects(self, b:Rect2, include_borders:bool=False)->bool:
    """
				Returns `true` if this rectangle overlaps with the `b` rectangle. The edges of both rectangles are excluded, unless `include_borders` is `true`.
			"""
    pass

  def encloses(self, b:Rect2)->bool:
    """
				Returns `true` if this rectangle _completely_ encloses the `b` rectangle.
			"""
    pass

  def intersection(self, b:Rect2)->Rect2:
    """
				Returns the intersection between this rectangle and `b`. If the rectangles do not intersect, returns an empty `Rect2`.
				
				```gdscript
				var rect1 = Rect2(0, 0, 5, 10)
				var rect2 = Rect2(2, 0, 8, 4)

				var a = rect1.intersection(rect2) # a is Rect2(2, 0, 3, 4)
				```
				
				
				**Note:** If you only need to know whether two rectangles are overlapping, use `intersects`, instead.
			"""
    pass

  def merge(self, b:Rect2)->Rect2:
    """
				Returns a `Rect2` that encloses both this rectangle and `b` around the edges. See also `encloses`.
			"""
    pass

  def expand(self, to:Vector2)->Rect2:
    """
				Returns a copy of this rectangle expanded to align the edges with the given `to` point, if necessary.
				
				```gdscript
				var rect = Rect2(0, 0, 5, 2)

				rect = rect.expand(Vector2(10, 0)) # rect is Rect2(0, 0, 10, 2)
				rect = rect.expand(Vector2(-5, 5)) # rect is Rect2(-5, 0, 15, 5)
				```
				
				
			"""
    pass

  def get_support(self, direction:Vector2)->Vector2:
    """
				Returns the vertex's position of this rect that's the farthest in the given direction. This point is commonly known as the support point in collision detection algorithms.
			"""
    pass

  def grow(self, amount:float)->Rect2:
    """
				Returns a copy of this rectangle extended on all sides by the given `amount`. A negative `amount` shrinks the rectangle instead. See also `grow_individual` and `grow_side`.
				
				```gdscript
				var a = Rect2(4, 4, 8, 8).grow(4) # a is Rect2(0, 0, 16, 16)
				var b = Rect2(0, 0, 8, 4).grow(2) # b is Rect2(-2, -2, 12, 8)
				```
				
				
			"""
    pass

  def grow_side(self, side:int, amount:float)->Rect2:
    """
				Returns a copy of this rectangle with its `side` extended by the given `amount` (see `enum Side` constants). A negative `amount` shrinks the rectangle, instead. See also `grow` and `grow_individual`.
			"""
    pass

  def grow_individual(self, left:float, top:float, right:float, bottom:float)->Rect2:
    """
				Returns a copy of this rectangle with its `left`, `top`, `right`, and `bottom` sides extended by the given amounts. Negative values shrink the sides, instead. See also `grow` and `grow_side`.
			"""
    pass

  def abs(self)->Rect2:
    """
				Returns a `Rect2` equivalent to this rectangle, with its width and height modified to be non-negative values, and with its `position` being the top-left corner of the rectangle.
				
				```gdscript
				var rect = Rect2(25, 25, -100, -50)
				var absolute = rect.abs() # absolute is Rect2(-75, -25, 100, 50)
				```
				
				
				**Note:** It's recommended to use this method when `size` is negative, as most other methods in Godot assume that the `position` is the top-left corner, and the `end` is the bottom-right corner.
			"""
    pass

  def __eq__(self, other:Any|Rect2) -> bool: pass
  def __ne__(self, other:Any|Rect2) -> bool: pass
  def __mul__(self, other:Transform2D) -> Rect2: pass



class Rect2i(VariantTypeWrapper4):
  """
		The `Rect2i` built-in `Variant` type represents an axis-aligned rectangle in a 2D space, using integer coordinates. It is defined by its `position` and `size`, which are `Vector2i`. Because it does not rotate, it is frequently used for fast overlap tests (see `intersects`).
		For floating-point coordinates, see `Rect2`.
		**Note:** Negative values for `size` are not supported. With negative size, most `Rect2i` methods do not work correctly. Use `abs` to get an equivalent `Rect2i` with a non-negative size.
		**Note:** In a boolean context, a `Rect2i` evaluates to `false` if both `position` and `size` are zero (equal to `constant Vector2i.ZERO`). Otherwise, it always evaluates to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Rect2i:pass


  @staticmethod
  def new0() -> Rect2i:pass
  @staticmethod
  def new1(from_:Rect2i) -> Rect2i:pass
  @staticmethod
  def new2(from_:Rect2) -> Rect2i:pass
  @staticmethod
  def new3(position:Vector2i, size:Vector2i) -> Rect2i:pass
  @staticmethod
  def new4(x:int, y:int, width:int, height:int) -> Rect2i:pass



  @property
  def position(self)->Vector2i:
    """"""
    pass
  def get_position(self)->Vector2i:
    """"""
    pass

  @position.setter
  def position(self, value:Vector2i)->None:pass
  def set_position(self, value:Vector2i)->None:pass
  @property
  def size(self)->Vector2i:
    """"""
    pass
  def get_size(self)->Vector2i:
    """"""
    pass

  @size.setter
  def size(self, value:Vector2i)->None:pass
  def set_size(self, value:Vector2i)->None:pass
  def get_center(self)->Vector2i:
    """
				Returns the center point of the rectangle. This is the same as `position + (size / 2)`.
				**Note:** If the `size` is odd, the result will be rounded towards `position`.
			"""
    pass

  def get_area(self)->int:
    """
				Returns the rectangle's area. This is equivalent to `size.x * size.y`. See also `has_area`.
			"""
    pass

  def has_area(self)->bool:
    """
				Returns `true` if this rectangle has positive width and height. See also `get_area`.
			"""
    pass

  def has_point(self, point:Vector2i)->bool:
    """
				Returns `true` if the rectangle contains the given `point`. By convention, points on the right and bottom edges are **not** included.
				**Note:** This method is not reliable for `Rect2i` with a _negative_ `size`. Use `abs` first to get a valid rectangle.
			"""
    pass

  def intersects(self, b:Rect2i)->bool:
    """
				Returns `true` if this rectangle overlaps with the `b` rectangle. The edges of both rectangles are excluded.
			"""
    pass

  def encloses(self, b:Rect2i)->bool:
    """
				Returns `true` if this `Rect2i` completely encloses another one.
			"""
    pass

  def intersection(self, b:Rect2i)->Rect2i:
    """
				Returns the intersection between this rectangle and `b`. If the rectangles do not intersect, returns an empty `Rect2i`.
				
				```gdscript
				var a = Rect2i(0, 0, 5, 10)
				var b = Rect2i(2, 0, 8, 4)

				var c = a.intersection(b) # c is Rect2i(2, 0, 3, 4)
				```
				
				
				**Note:** If you only need to know whether two rectangles are overlapping, use `intersects`, instead.
			"""
    pass

  def merge(self, b:Rect2i)->Rect2i:
    """
				Returns a `Rect2i` that encloses both this rectangle and `b` around the edges. See also `encloses`.
			"""
    pass

  def expand(self, to:Vector2i)->Rect2i:
    """
				Returns a copy of this rectangle expanded to align the edges with the given `to` point, if necessary.
				
				```gdscript
				var rect = Rect2i(0, 0, 5, 2)

				rect = rect.expand(Vector2i(10, 0)) # rect is Rect2i(0, 0, 10, 2)
				rect = rect.expand(Vector2i(-5, 5)) # rect is Rect2i(-5, 0, 15, 5)
				```
				
				
			"""
    pass

  def grow(self, amount:int)->Rect2i:
    """
				Returns a copy of this rectangle extended on all sides by the given `amount`. A negative `amount` shrinks the rectangle instead. See also `grow_individual` and `grow_side`.
				
				```gdscript
				var a = Rect2i(4, 4, 8, 8).grow(4) # a is Rect2i(0, 0, 16, 16)
				var b = Rect2i(0, 0, 8, 4).grow(2) # b is Rect2i(-2, -2, 12, 8)
				```
				
				
			"""
    pass

  def grow_side(self, side:int, amount:int)->Rect2i:
    """
				Returns a copy of this rectangle with its `side` extended by the given `amount` (see `enum Side` constants). A negative `amount` shrinks the rectangle, instead. See also `grow` and `grow_individual`.
			"""
    pass

  def grow_individual(self, left:int, top:int, right:int, bottom:int)->Rect2i:
    """
				Returns a copy of this rectangle with its `left`, `top`, `right`, and `bottom` sides extended by the given amounts. Negative values shrink the sides, instead. See also `grow` and `grow_side`.
			"""
    pass

  def abs(self)->Rect2i:
    """
				Returns a `Rect2i` equivalent to this rectangle, with its width and height modified to be non-negative values, and with its `position` being the top-left corner of the rectangle.
				
				```gdscript
				var rect = Rect2i(25, 25, -100, -50)
				var absolute = rect.abs() # absolute is Rect2i(-75, -25, 100, 50)
				```
				
				
				**Note:** It's recommended to use this method when `size` is negative, as most other methods in Godot assume that the `position` is the top-left corner, and the `end` is the bottom-right corner.
			"""
    pass

  def __eq__(self, other:Any|Rect2i) -> bool: pass
  def __ne__(self, other:Any|Rect2i) -> bool: pass




class Vector3(VariantTypeWrapper4):
  """
		A 3-element structure that can be used to represent 3D coordinates or any other triplet of numeric values.
		It uses floating-point coordinates. By default, these floating-point values use 32-bit precision, unlike `float` which is always 64-bit. If double precision is needed, compile the engine with the option `precision=double`.
		See `Vector3i` for its integer counterpart.
		**Note:** In a boolean context, a Vector3 will evaluate to `false` if it's equal to `Vector3(0, 0, 0)`. Otherwise, a Vector3 will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector3:pass


  @staticmethod
  def new0() -> Vector3:pass
  @staticmethod
  def new1(from_:Vector3) -> Vector3:pass
  @staticmethod
  def new2(from_:Vector3i) -> Vector3:pass
  @staticmethod
  def new3(x:float, y:float, z:float) -> Vector3:pass

  def __neg__(self):pass
  def __truediv__(self):pass


  @property
  def x(self)->float:
    """"""
    pass
  def get_x(self)->float:
    """"""
    pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:
    """"""
    pass
  def get_y(self)->float:
    """"""
    pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:
    """"""
    pass
  def get_z(self)->float:
    """"""
    pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_Z`.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def angle_to(self, to:Vector3)->float:
    """
				Returns the unsigned minimum angle to the given vector, in radians.
			"""
    pass

  def signed_angle_to(self, to:Vector3, axis:Vector3)->float:
    """
				Returns the signed angle to the given vector, in radians. The sign of the angle is positive in a counter-clockwise direction and negative in a clockwise direction when viewed from the side specified by the `axis`.
			"""
    pass

  def direction_to(self, to:Vector3)->Vector3:
    """
				Returns the normalized vector pointing from this vector to `to`. This is equivalent to using `(b - a).normalized()`.
			"""
    pass

  def distance_to(self, to:Vector3)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector3)->float:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->float:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def limit_length(self, length:float=1.0)->Vector3:
    """
				Returns the vector with a maximum length by limiting its length to `length`. If the vector is non-finite, the result is undefined.
			"""
    pass

  def normalized(self)->Vector3:
    """
				Returns the result of scaling the vector to unit length. Equivalent to `v / v.length()`. Returns `(0, 0, 0)` if `v.length() == 0`. See also `is_normalized`.
				**Note:** This function may return incorrect values if the input vector length is near zero.
			"""
    pass

  def is_normalized(self)->bool:
    """
				Returns `true` if the vector is normalized, i.e. its length is approximately equal to 1.
			"""
    pass

  def is_equal_approx(self, to:Vector3)->bool:
    """
				Returns `true` if this vector and `to` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_zero_approx(self)->bool:
    """
				Returns `true` if this vector's values are approximately zero, by running `@GlobalScope.is_zero_approx` on each component.
				This method is faster than using `is_equal_approx` with one value as a zero vector.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this vector is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def inverse(self)->Vector3:
    """
				Returns the inverse of the vector. This is the same as `Vector3(1.0 / v.x, 1.0 / v.y, 1.0 / v.z)`.
			"""
    pass

  def clamp(self, min:Vector3, max:Vector3)->Vector3:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampf(self, min:float, max:float)->Vector3:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def snapped(self, step:Vector3)->Vector3:
    """
				Returns a new vector with each component snapped to the nearest multiple of the corresponding component in `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def snappedf(self, step:float)->Vector3:
    """
				Returns a new vector with each component snapped to the nearest multiple of `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def rotated(self, axis:Vector3, angle:float)->Vector3:
    """
				Returns the result of rotating this vector around a given axis by `angle` (in radians). The axis must be a normalized vector. See also `@GlobalScope.deg_to_rad`.
			"""
    pass

  def lerp(self, to:Vector3, weight:float)->Vector3:
    """
				Returns the result of the linear interpolation between this vector and `to` by amount `weight`. `weight` is on the range of `0.0` to `1.0`, representing the amount of interpolation.
			"""
    pass

  def slerp(self, to:Vector3, weight:float)->Vector3:
    """
				Returns the result of spherical linear interpolation between this vector and `to`, by amount `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
				This method also handles interpolating the lengths if the input vectors have different lengths. For the special case of one or both input vectors having zero length, this method behaves like `lerp`.
			"""
    pass

  def cubic_interpolate(self, b:Vector3, pre_a:Vector3, post_b:Vector3, weight:float)->Vector3:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
			"""
    pass

  def cubic_interpolate_in_time(self, b:Vector3, pre_a:Vector3, post_b:Vector3, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector3:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
				It can perform smoother interpolation than `cubic_interpolate` by the time values.
			"""
    pass

  def bezier_interpolate(self, control_1:Vector3, control_2:Vector3, end:Vector3, t:float)->Vector3:
    """
				Returns the point at the given `t` on the `url=https://en.wikipedia.org/wiki/B%C3%A9zier_curve`Bézier curve`/url` defined by this vector and the given `control_1`, `control_2`, and `end` points.
			"""
    pass

  def bezier_derivative(self, control_1:Vector3, control_2:Vector3, end:Vector3, t:float)->Vector3:
    """
				Returns the derivative at the given `t` on the `url=https://en.wikipedia.org/wiki/B%C3%A9zier_curve`Bézier curve`/url` defined by this vector and the given `control_1`, `control_2`, and `end` points.
			"""
    pass

  def move_toward(self, to:Vector3, delta:float)->Vector3:
    """
				Returns a new vector moved toward `to` by the fixed `delta` amount. Will not go past the final value.
			"""
    pass

  def dot(self, with_:Vector3)->float:
    """
				Returns the dot product of this vector and `with`. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.
				The dot product will be `0` for a right angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.
				When using unit (normalized) vectors, the result will always be between `-1.0` (180 degree angle) when the vectors are facing opposite directions, and `1.0` (0 degree angle) when the vectors are aligned.
				**Note:** `a.dot(b)` is equivalent to `b.dot(a)`.
			"""
    pass

  def cross(self, with_:Vector3)->Vector3:
    """
				Returns the cross product of this vector and `with`.
				This returns a vector perpendicular to both this and `with`, which would be the normal vector of the plane defined by the two vectors. As there are two such vectors, in opposite directions, this method returns the vector defined by a right-handed coordinate system. If the two vectors are parallel this returns an empty vector, making it useful for testing if two vectors are parallel.
			"""
    pass

  def outer(self, with_:Vector3)->Basis:
    """
				Returns the outer product with `with`.
			"""
    pass

  def abs(self)->Vector3:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def floor(self)->Vector3:
    """
				Returns a new vector with all components rounded down (towards negative infinity).
			"""
    pass

  def ceil(self)->Vector3:
    """
				Returns a new vector with all components rounded up (towards positive infinity).
			"""
    pass

  def round(self)->Vector3:
    """
				Returns a new vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			"""
    pass

  def posmod(self, mod:float)->Vector3:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `mod`.
			"""
    pass

  def posmodv(self, modv:Vector3)->Vector3:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `modv`'s components.
			"""
    pass

  def project(self, b:Vector3)->Vector3:
    """
				Returns a new vector resulting from projecting this vector onto the given vector `b`. The resulting new vector is parallel to `b`. See also `slide`.
				**Note:** If the vector `b` is a zero vector, the components of the resulting new vector will be `constant @GDScript.NAN`.
			"""
    pass

  def slide(self, n:Vector3)->Vector3:
    """
				Returns a new vector resulting from sliding this vector along a plane with normal `n`. The resulting new vector is perpendicular to `n`, and is equivalent to this vector minus its projection on `n`. See also `project`.
				**Note:** The vector `n` must be normalized. See also `normalized`.
			"""
    pass

  def bounce(self, n:Vector3)->Vector3:
    """
				Returns the vector "bounced off" from a plane defined by the given normal `n`.
				**Note:** `bounce` performs the operation that most engines and frameworks call `code skip-lint`reflect()`.
			"""
    pass

  def reflect(self, n:Vector3)->Vector3:
    """
				Returns the result of reflecting the vector through a plane defined by the given normal vector `n`.
				**Note:** `reflect` differs from what other engines and frameworks call `code skip-lint`reflect()`. In other engines, `code skip-lint`reflect()` returns the result of the vector reflected by the given plane. The reflection thus passes through the given normal. While in Godot the reflection passes through the plane and can be thought of as bouncing off the normal. See also `bounce` which does what most engines call `code skip-lint`reflect()`.
			"""
    pass

  def sign(self)->Vector3:
    """
				Returns a new vector with each component set to `1.0` if it's positive, `-1.0` if it's negative, and `0.0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def octahedron_encode(self)->Vector2:
    """
				Returns the octahedral-encoded (oct32) form of this `Vector3` as a `Vector2`. Since a `Vector2` occupies 1/3 less memory compared to `Vector3`, this form of compression can be used to pass greater amounts of `normalized` `Vector3`s without increasing storage or memory requirements. See also `octahedron_decode`.
				**Note:** `octahedron_encode` can only be used for `normalized` vectors. `octahedron_encode` does _not_ check whether this `Vector3` is normalized, and will return a value that does not decompress to the original value if the `Vector3` is not normalized.
				**Note:** Octahedral compression is _lossy_, although visual differences are rarely perceptible in real world scenarios.
			"""
    pass

  def min(self, with_:Vector3)->Vector3:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector3(minf(x, with.x), minf(y, with.y), minf(z, with.z))`.
			"""
    pass

  def minf(self, with_:float)->Vector3:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector3(minf(x, with), minf(y, with), minf(z, with))`.
			"""
    pass

  def max(self, with_:Vector3)->Vector3:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector3(maxf(x, with.x), maxf(y, with.y), maxf(z, with.z))`.
			"""
    pass

  def maxf(self, with_:float)->Vector3:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector3(maxf(x, with), maxf(y, with), maxf(z, with))`.
			"""
    pass

  @staticmethod
  def octahedron_decode(uv:Vector2)->Vector3:
    """
				Returns the `Vector3` from an octahedral-compressed form created using `octahedron_encode` (stored as a `Vector2`).
			"""
    pass

  def __eq__(self, other:Any|Vector3) -> bool: pass
  def __ne__(self, other:Any|Vector3) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Quaternion|Basis|Transform3D) -> Vector3: pass
  def __div__(self, other:int|float|Vector3) -> Vector3: pass
  def __lt__(self, other:Vector3) -> bool: pass
  def __le__(self, other:Vector3) -> bool: pass
  def __gt__(self, other:Vector3) -> bool: pass
  def __ge__(self, other:Vector3) -> bool: pass
  def __add__(self, other:Vector3) -> Vector3: pass
  def __sub__(self, other:Vector3) -> Vector3: pass




class Vector3i(VariantTypeWrapper4):
  """
		A 3-element structure that can be used to represent 3D grid coordinates or any other triplet of integers.
		It uses integer coordinates and is therefore preferable to `Vector3` when exact precision is required. Note that the values are limited to 32 bits, and unlike `Vector3` this cannot be configured with an engine build option. Use `int` or `PackedInt64Array` if 64-bit values are needed.
		**Note:** In a boolean context, a Vector3i will evaluate to `false` if it's equal to `Vector3i(0, 0, 0)`. Otherwise, a Vector3i will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector3i:pass


  @staticmethod
  def new0() -> Vector3i:pass
  @staticmethod
  def new1(from_:Vector3i) -> Vector3i:pass
  @staticmethod
  def new2(from_:Vector3) -> Vector3i:pass
  @staticmethod
  def new3(x:int, y:int, z:int) -> Vector3i:pass



  @property
  def x(self)->int:
    """"""
    pass
  def get_x(self)->int:
    """"""
    pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:
    """"""
    pass
  def get_y(self)->int:
    """"""
    pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  @property
  def z(self)->int:
    """"""
    pass
  def get_z(self)->int:
    """"""
    pass

  @z.setter
  def z(self, value:int)->None:pass
  def set_z(self, value:int)->None:pass
  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_Z`.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def distance_to(self, to:Vector3i)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector3i)->int:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->int:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def sign(self)->Vector3i:
    """
				Returns a new vector with each component set to `1` if it's positive, `-1` if it's negative, and `0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def abs(self)->Vector3i:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def clamp(self, min:Vector3i, max:Vector3i)->Vector3i:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampi(self, min:int, max:int)->Vector3i:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def snapped(self, step:Vector3i)->Vector3i:
    """
				Returns a new vector with each component snapped to the closest multiple of the corresponding component in `step`.
			"""
    pass

  def snappedi(self, step:int)->Vector3i:
    """
				Returns a new vector with each component snapped to the closest multiple of `step`.
			"""
    pass

  def min(self, with_:Vector3i)->Vector3i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector3i(mini(x, with.x), mini(y, with.y), mini(z, with.z))`.
			"""
    pass

  def mini(self, with_:int)->Vector3i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector3i(mini(x, with), mini(y, with), mini(z, with))`.
			"""
    pass

  def max(self, with_:Vector3i)->Vector3i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector3i(maxi(x, with.x), maxi(y, with.y), maxi(z, with.z))`.
			"""
    pass

  def maxi(self, with_:int)->Vector3i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector3i(maxi(x, with), maxi(y, with), maxi(z, with))`.
			"""
    pass

  def __eq__(self, other:Any|Vector3i) -> bool: pass
  def __ne__(self, other:Any|Vector3i) -> bool: pass
  def __mul__(self, other:int|float|Vector3i) -> Vector3i: pass
  def __div__(self, other:int|float|Vector3i) -> Vector3i: pass
  def __mod__(self, other:int|Vector3i) -> Vector3i: pass
  def __lt__(self, other:Vector3i) -> bool: pass
  def __le__(self, other:Vector3i) -> bool: pass
  def __gt__(self, other:Vector3i) -> bool: pass
  def __ge__(self, other:Vector3i) -> bool: pass
  def __add__(self, other:Vector3i) -> Vector3i: pass
  def __sub__(self, other:Vector3i) -> Vector3i: pass



class Transform2D(VariantTypeWrapper4):
  """
		The `Transform2D` built-in `Variant` type is a 2×3 `url=https://en.wikipedia.org/wiki/Matrix_(mathematics)`matrix`/url` representing a transformation in 2D space. It contains three `Vector2` values: `x`, `y`, and `origin`. Together, they can represent translation, rotation, scale, and skew.
		The `x` and `y` axes form a 2×2 matrix, known as the transform's **basis**. The length of each axis (`Vector2.length`) influences the transform's scale, while the direction of all axes influence the rotation. Usually, both axes are perpendicular to one another. However, when you rotate one axis individually, the transform becomes skewed. Applying a skewed transform to a 2D sprite will make the sprite appear distorted.
		For a general introduction, see the `url=$DOCS_URL/tutorials/math/matrices_and_transforms.html`Matrices and transforms`/url` tutorial.
		**Note:** Unlike `Transform3D`, there is no 2D equivalent to the `Basis` type. All mentions of "basis" refer to the `x` and `y` components of `Transform2D`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Transform2D:pass


  @staticmethod
  def new0() -> Transform2D:pass
  @staticmethod
  def new1(from_:Transform2D) -> Transform2D:pass
  @staticmethod
  def new2(rotation:float, position:Vector2) -> Transform2D:pass
  @staticmethod
  def new3(rotation:float, scale:Vector2, skew:float, position:Vector2) -> Transform2D:pass
  @staticmethod
  def new4(x_axis:Vector2, y_axis:Vector2, origin:Vector2) -> Transform2D:pass



  @property
  def x(self)->Vector2:
    """"""
    pass
  def get_x(self)->Vector2:
    """"""
    pass

  @x.setter
  def x(self, value:Vector2)->None:pass
  def set_x(self, value:Vector2)->None:pass
  @property
  def y(self)->Vector2:
    """"""
    pass
  def get_y(self)->Vector2:
    """"""
    pass

  @y.setter
  def y(self, value:Vector2)->None:pass
  def set_y(self, value:Vector2)->None:pass
  @property
  def origin(self)->Vector2:
    """"""
    pass
  def get_origin(self)->Vector2:
    """"""
    pass

  @origin.setter
  def origin(self, value:Vector2)->None:pass
  def set_origin(self, value:Vector2)->None:pass
  def inverse(self)->Transform2D:
    """
				Returns the `url=https://en.wikipedia.org/wiki/Invertible_matrix`inverted version of this transform`/url`.
				**Note:** For this method to return correctly, the transform's basis needs to be _orthonormal_ (see `orthonormalized`). That means the basis should only represent a rotation. If it does not, use `affine_inverse` instead.
			"""
    pass

  def affine_inverse(self)->Transform2D:
    """
				Returns the inverted version of this transform. Unlike `inverse`, this method works with almost any basis, including non-uniform ones, but is slower.
				**Note:** For this method to return correctly, the transform's basis needs to have a determinant that is not exactly `0.0` (see `determinant`).
			"""
    pass

  def get_rotation(self)->float:
    """
				Returns this transform's rotation (in radians). This is equivalent to `x`'s angle (see `Vector2.angle`).
			"""
    pass

  def get_origin(self)->Vector2:
    """
				Returns this transform's translation. Equivalent to `origin`.
			"""
    pass

  def get_scale(self)->Vector2:
    """
				Returns the length of both `x` and `y`, as a `Vector2`. If this transform's basis is not skewed, this value is the scaling factor. It is not affected by rotation.
				
				```gdscript
				var my_transform = Transform2D(
					Vector2(2, 0),
					Vector2(0, 4),
					Vector2(0, 0)
				)
				# Rotating the Transform2D in any way preserves its scale.
				my_transform = my_transform.rotated(TAU / 2)

				print(my_transform.get_scale()) # Prints (2.0, 4.0)
				```
				
				
				**Note:** If the value returned by `determinant` is negative, the scale is also negative.
			"""
    pass

  def get_skew(self)->float:
    """
				Returns this transform's skew (in radians).
			"""
    pass

  def orthonormalized(self)->Transform2D:
    """
				Returns a copy of this transform with its basis orthonormalized. An orthonormal basis is both _orthogonal_ (the axes are perpendicular to each other) and _normalized_ (the axes have a length of `1.0`), which also means it can only represent a rotation.
			"""
    pass

  def rotated(self, angle:float)->Transform2D:
    """
				Returns a copy of this transform rotated by the given `angle` (in radians).
				If `angle` is positive, the transform is rotated clockwise.
				This method is an optimized version of multiplying the given transform `X` with a corresponding rotation transform `R` from the left, i.e., `R * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def rotated_local(self, angle:float)->Transform2D:
    """
				Returns a copy of the transform rotated by the given `angle` (in radians).
				This method is an optimized version of multiplying the given transform `X` with a corresponding rotation transform `R` from the right, i.e., `X * R`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def scaled(self, scale:Vector2)->Transform2D:
    """
				Returns a copy of the transform scaled by the given `scale` factor.
				This method is an optimized version of multiplying the given transform `X` with a corresponding scaling transform `S` from the left, i.e., `S * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def scaled_local(self, scale:Vector2)->Transform2D:
    """
				Returns a copy of the transform scaled by the given `scale` factor.
				This method is an optimized version of multiplying the given transform `X` with a corresponding scaling transform `S` from the right, i.e., `X * S`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def translated(self, offset:Vector2)->Transform2D:
    """
				Returns a copy of the transform translated by the given `offset`.
				This method is an optimized version of multiplying the given transform `X` with a corresponding translation transform `T` from the left, i.e., `T * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def translated_local(self, offset:Vector2)->Transform2D:
    """
				Returns a copy of the transform translated by the given `offset`.
				This method is an optimized version of multiplying the given transform `X` with a corresponding translation transform `T` from the right, i.e., `X * T`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def determinant(self)->float:
    """
				Returns the `url=https://en.wikipedia.org/wiki/Determinant`determinant`/url` of this transform basis's matrix. For advanced math, this number can be used to determine a few attributes:
				- If the determinant is exactly `0.0`, the basis is not invertible (see `inverse`).
				- If the determinant is a negative number, the basis represents a negative scale.
				**Note:** If the basis's scale is the same for every axis, its determinant is always that scale by the power of 2.
			"""
    pass

  def basis_xform(self, v:Vector2)->Vector2:
    """
				Returns a copy of the `v` vector, transformed (multiplied) by the transform basis's matrix. Unlike the multiplication operator (`*`), this method ignores the `origin`.
			"""
    pass

  def basis_xform_inv(self, v:Vector2)->Vector2:
    """
				Returns a copy of the `v` vector, transformed (multiplied) by the inverse transform basis's matrix (see `inverse`). This method ignores the `origin`.
				**Note:** This method assumes that this transform's basis is _orthonormal_ (see `orthonormalized`). If the basis is not orthonormal, `transform.affine_inverse().basis_xform(vector)` should be used instead (see `affine_inverse`).
			"""
    pass

  def interpolate_with(self, xform:Transform2D, weight:float)->Transform2D:
    """
				Returns the result of the linear interpolation between this transform and `xform` by the given `weight`.
				The `weight` should be between `0.0` and `1.0` (inclusive). Values outside this range are allowed and can be used to perform _extrapolation_ instead.
			"""
    pass

  def is_conformal(self)->bool:
    """
				Returns `true` if this transform's basis is conformal. A conformal basis is both _orthogonal_ (the axes are perpendicular to each other) and _uniform_ (the axes share the same length). This method can be especially useful during physics calculations.
			"""
    pass

  def is_equal_approx(self, xform:Transform2D)->bool:
    """
				Returns `true` if this transform and `xform` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this transform is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def looking_at(self, target:Vector2= Vector2.new0())->Transform2D:
    """
				Returns a copy of the transform rotated such that the rotated X-axis points towards the `target` position, in global space.
			"""
    pass

  def __eq__(self, other:Any|Transform2D) -> bool: pass
  def __ne__(self, other:Any|Transform2D) -> bool: pass
  def __mul__(self, other:int|float|Vector2|Rect2|Transform2D|PackedVector2Array) -> Transform2D: pass
  def __div__(self, other:int|float) -> Transform2D: pass


class Axis:
  AXIS_X:int = 0
  AXIS_Y:int = 1
  AXIS_Z:int = 2
  AXIS_W:int = 3


class Vector4(VariantTypeWrapper4):
  """
		A 4-element structure that can be used to represent 4D coordinates or any other quadruplet of numeric values.
		It uses floating-point coordinates. By default, these floating-point values use 32-bit precision, unlike `float` which is always 64-bit. If double precision is needed, compile the engine with the option `precision=double`.
		See `Vector4i` for its integer counterpart.
		**Note:** In a boolean context, a Vector4 will evaluate to `false` if it's equal to `Vector4(0, 0, 0, 0)`. Otherwise, a Vector4 will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector4:pass


  @staticmethod
  def new0() -> Vector4:pass
  @staticmethod
  def new1(from_:Vector4) -> Vector4:pass
  @staticmethod
  def new2(from_:Vector4i) -> Vector4:pass
  @staticmethod
  def new3(x:float, y:float, z:float, w:float) -> Vector4:pass



  @property
  def x(self)->float:
    """"""
    pass
  def get_x(self)->float:
    """"""
    pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:
    """"""
    pass
  def get_y(self)->float:
    """"""
    pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:
    """"""
    pass
  def get_z(self)->float:
    """"""
    pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  @property
  def w(self)->float:
    """"""
    pass
  def get_w(self)->float:
    """"""
    pass

  @w.setter
  def w(self, value:float)->None:pass
  def set_w(self, value:float)->None:pass
  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_W`.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->float:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def abs(self)->Vector4:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def sign(self)->Vector4:
    """
				Returns a new vector with each component set to `1.0` if it's positive, `-1.0` if it's negative, and `0.0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def floor(self)->Vector4:
    """
				Returns a new vector with all components rounded down (towards negative infinity).
			"""
    pass

  def ceil(self)->Vector4:
    """
				Returns a new vector with all components rounded up (towards positive infinity).
			"""
    pass

  def round(self)->Vector4:
    """
				Returns a new vector with all components rounded to the nearest integer, with halfway cases rounded away from zero.
			"""
    pass

  def lerp(self, to:Vector4, weight:float)->Vector4:
    """
				Returns the result of the linear interpolation between this vector and `to` by amount `weight`. `weight` is on the range of `0.0` to `1.0`, representing the amount of interpolation.
			"""
    pass

  def cubic_interpolate(self, b:Vector4, pre_a:Vector4, post_b:Vector4, weight:float)->Vector4:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
			"""
    pass

  def cubic_interpolate_in_time(self, b:Vector4, pre_a:Vector4, post_b:Vector4, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector4:
    """
				Performs a cubic interpolation between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `weight`. `weight` is on the range of 0.0 to 1.0, representing the amount of interpolation.
				It can perform smoother interpolation than `cubic_interpolate` by the time values.
			"""
    pass

  def posmod(self, mod:float)->Vector4:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `mod`.
			"""
    pass

  def posmodv(self, modv:Vector4)->Vector4:
    """
				Returns a vector composed of the `@GlobalScope.fposmod` of this vector's components and `modv`'s components.
			"""
    pass

  def snapped(self, step:Vector4)->Vector4:
    """
				Returns a new vector with each component snapped to the nearest multiple of the corresponding component in `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def snappedf(self, step:float)->Vector4:
    """
				Returns a new vector with each component snapped to the nearest multiple of `step`. This can also be used to round the components to an arbitrary number of decimals.
			"""
    pass

  def clamp(self, min:Vector4, max:Vector4)->Vector4:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampf(self, min:float, max:float)->Vector4:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def normalized(self)->Vector4:
    """
				Returns the result of scaling the vector to unit length. Equivalent to `v / v.length()`. Returns `(0, 0, 0, 0)` if `v.length() == 0`. See also `is_normalized`.
				**Note:** This function may return incorrect values if the input vector length is near zero.
			"""
    pass

  def is_normalized(self)->bool:
    """
				Returns `true` if the vector is normalized, i.e. its length is approximately equal to 1.
			"""
    pass

  def direction_to(self, to:Vector4)->Vector4:
    """
				Returns the normalized vector pointing from this vector to `to`. This is equivalent to using `(b - a).normalized()`.
			"""
    pass

  def distance_to(self, to:Vector4)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector4)->float:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def dot(self, with_:Vector4)->float:
    """
				Returns the dot product of this vector and `with`.
			"""
    pass

  def inverse(self)->Vector4:
    """
				Returns the inverse of the vector. This is the same as `Vector4(1.0 / v.x, 1.0 / v.y, 1.0 / v.z, 1.0 / v.w)`.
			"""
    pass

  def is_equal_approx(self, to:Vector4)->bool:
    """
				Returns `true` if this vector and `to` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_zero_approx(self)->bool:
    """
				Returns `true` if this vector's values are approximately zero, by running `@GlobalScope.is_zero_approx` on each component.
				This method is faster than using `is_equal_approx` with one value as a zero vector.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this vector is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def min(self, with_:Vector4)->Vector4:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector4(minf(x, with.x), minf(y, with.y), minf(z, with.z), minf(w, with.w))`.
			"""
    pass

  def minf(self, with_:float)->Vector4:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector4(minf(x, with), minf(y, with), minf(z, with), minf(w, with))`.
			"""
    pass

  def max(self, with_:Vector4)->Vector4:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector4(maxf(x, with.x), maxf(y, with.y), maxf(z, with.z), maxf(w, with.w))`.
			"""
    pass

  def maxf(self, with_:float)->Vector4:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector4(maxf(x, with), maxf(y, with), maxf(z, with), maxf(w, with))`.
			"""
    pass

  def __eq__(self, other:Any|Vector4) -> bool: pass
  def __ne__(self, other:Any|Vector4) -> bool: pass
  def __mul__(self, other:int|float|Vector4|Projection) -> Vector4: pass
  def __div__(self, other:int|float|Vector4) -> Vector4: pass
  def __lt__(self, other:Vector4) -> bool: pass
  def __le__(self, other:Vector4) -> bool: pass
  def __gt__(self, other:Vector4) -> bool: pass
  def __ge__(self, other:Vector4) -> bool: pass
  def __add__(self, other:Vector4) -> Vector4: pass
  def __sub__(self, other:Vector4) -> Vector4: pass




class Vector4i(VariantTypeWrapper4):
  """
		A 4-element structure that can be used to represent 4D grid coordinates or any other quadruplet of integers.
		It uses integer coordinates and is therefore preferable to `Vector4` when exact precision is required. Note that the values are limited to 32 bits, and unlike `Vector4` this cannot be configured with an engine build option. Use `int` or `PackedInt64Array` if 64-bit values are needed.
		**Note:** In a boolean context, a Vector4i will evaluate to `false` if it's equal to `Vector4i(0, 0, 0, 0)`. Otherwise, a Vector4i will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector4i:pass


  @staticmethod
  def new0() -> Vector4i:pass
  @staticmethod
  def new1(from_:Vector4i) -> Vector4i:pass
  @staticmethod
  def new2(from_:Vector4) -> Vector4i:pass
  @staticmethod
  def new3(x:int, y:int, z:int, w:int) -> Vector4i:pass



  @property
  def x(self)->int:
    """"""
    pass
  def get_x(self)->int:
    """"""
    pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:
    """"""
    pass
  def get_y(self)->int:
    """"""
    pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  @property
  def z(self)->int:
    """"""
    pass
  def get_z(self)->int:
    """"""
    pass

  @z.setter
  def z(self, value:int)->None:pass
  def set_z(self, value:int)->None:pass
  @property
  def w(self)->int:
    """"""
    pass
  def get_w(self)->int:
    """"""
    pass

  @w.setter
  def w(self, value:int)->None:pass
  def set_w(self, value:int)->None:pass
  def min_axis_index(self)->int:
    """
				Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_W`.
			"""
    pass

  def max_axis_index(self)->int:
    """
				Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns `constant AXIS_X`.
			"""
    pass

  def length(self)->float:
    """
				Returns the length (magnitude) of this vector.
			"""
    pass

  def length_squared(self)->int:
    """
				Returns the squared length (squared magnitude) of this vector.
				This method runs faster than `length`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def sign(self)->Vector4i:
    """
				Returns a new vector with each component set to `1` if it's positive, `-1` if it's negative, and `0` if it's zero. The result is identical to calling `@GlobalScope.sign` on each component.
			"""
    pass

  def abs(self)->Vector4i:
    """
				Returns a new vector with all components in absolute values (i.e. positive).
			"""
    pass

  def clamp(self, min:Vector4i, max:Vector4i)->Vector4i:
    """
				Returns a new vector with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def clampi(self, min:int, max:int)->Vector4i:
    """
				Returns a new vector with all components clamped between `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def snapped(self, step:Vector4i)->Vector4i:
    """
				Returns a new vector with each component snapped to the closest multiple of the corresponding component in `step`.
			"""
    pass

  def snappedi(self, step:int)->Vector4i:
    """
				Returns a new vector with each component snapped to the closest multiple of `step`.
			"""
    pass

  def min(self, with_:Vector4i)->Vector4i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector4i(mini(x, with.x), mini(y, with.y), mini(z, with.z), mini(w, with.w))`.
			"""
    pass

  def mini(self, with_:int)->Vector4i:
    """
				Returns the component-wise minimum of this and `with`, equivalent to `Vector4i(mini(x, with), mini(y, with), mini(z, with), mini(w, with))`.
			"""
    pass

  def max(self, with_:Vector4i)->Vector4i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector4i(maxi(x, with.x), maxi(y, with.y), maxi(z, with.z), maxi(w, with.w))`.
			"""
    pass

  def maxi(self, with_:int)->Vector4i:
    """
				Returns the component-wise maximum of this and `with`, equivalent to `Vector4i(maxi(x, with), maxi(y, with), maxi(z, with), maxi(w, with))`.
			"""
    pass

  def distance_to(self, to:Vector4i)->float:
    """
				Returns the distance between this vector and `to`.
			"""
    pass

  def distance_squared_to(self, to:Vector4i)->int:
    """
				Returns the squared distance between this vector and `to`.
				This method runs faster than `distance_to`, so prefer it if you need to compare vectors or need the squared distance for some formula.
			"""
    pass

  def __eq__(self, other:Any|Vector4i) -> bool: pass
  def __ne__(self, other:Any|Vector4i) -> bool: pass
  def __mul__(self, other:int|float|Vector4i) -> Vector4i: pass
  def __div__(self, other:int|float|Vector4i) -> Vector4i: pass
  def __mod__(self, other:int|Vector4i) -> Vector4i: pass
  def __lt__(self, other:Vector4i) -> bool: pass
  def __le__(self, other:Vector4i) -> bool: pass
  def __gt__(self, other:Vector4i) -> bool: pass
  def __ge__(self, other:Vector4i) -> bool: pass
  def __add__(self, other:Vector4i) -> Vector4i: pass
  def __sub__(self, other:Vector4i) -> Vector4i: pass



class Plane(VariantTypeWrapper4):
  """
		Represents a normalized plane equation. `normal` is the normal of the plane (a, b, c normalized), and `d` is the distance from the origin to the plane (in the direction of "normal"). "Over" or "Above" the plane is considered the side of the plane towards where the normal is pointing.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Plane:pass


  @staticmethod
  def new0() -> Plane:pass
  @staticmethod
  def new1(from_:Plane) -> Plane:pass
  @staticmethod
  def new2(normal:Vector3) -> Plane:pass
  @staticmethod
  def new3(normal:Vector3, d:float) -> Plane:pass
  @staticmethod
  def new4(normal:Vector3, point:Vector3) -> Plane:pass
  @staticmethod
  def new5(point1:Vector3, point2:Vector3, point3:Vector3) -> Plane:pass
  @staticmethod
  def new6(a:float, b:float, c:float, d:float) -> Plane:pass



  @property
  def normal(self)->Vector3:
    """"""
    pass
  def get_normal(self)->Vector3:
    """"""
    pass

  @normal.setter
  def normal(self, value:Vector3)->None:pass
  def set_normal(self, value:Vector3)->None:pass
  @property
  def d(self)->float:
    """"""
    pass
  def get_d(self)->float:
    """"""
    pass

  @d.setter
  def d(self, value:float)->None:pass
  def set_d(self, value:float)->None:pass
  def normalized(self)->Plane:
    """
				Returns a copy of the plane, with normalized `normal` (so it's a unit vector). Returns `Plane(0, 0, 0, 0)` if `normal` can't be normalized (it has zero length).
			"""
    pass

  def get_center(self)->Vector3:
    """
				Returns the center of the plane.
			"""
    pass

  def is_equal_approx(self, to_plane:Plane)->bool:
    """
				Returns `true` if this plane and `to_plane` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this plane is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def is_point_over(self, point:Vector3)->bool:
    """
				Returns `true` if `point` is located above the plane.
			"""
    pass

  def distance_to(self, point:Vector3)->float:
    """
				Returns the shortest distance from the plane to the position `point`. If the point is above the plane, the distance will be positive. If below, the distance will be negative.
			"""
    pass

  def has_point(self, point:Vector3, tolerance:float=1e-05)->bool:
    """
				Returns `true` if `point` is inside the plane. Comparison uses a custom minimum `tolerance` threshold.
			"""
    pass

  def project(self, point:Vector3)->Vector3:
    """
				Returns the orthogonal projection of `point` into a point in the plane.
			"""
    pass

  def intersect_3(self, b:Plane, c:Plane)->Any:
    """
				Returns the intersection point of the three planes `b`, `c` and this plane. If no intersection is found, `null` is returned.
			"""
    pass

  def intersects_ray(self, from_:Vector3, dir:Vector3)->Any:
    """
				Returns the intersection point of a ray consisting of the position `from` and the direction normal `dir` with this plane. If no intersection is found, `null` is returned.
			"""
    pass

  def intersects_segment(self, from_:Vector3, to:Vector3)->Any:
    """
				Returns the intersection point of a segment from position `from` to position `to` with this plane. If no intersection is found, `null` is returned.
			"""
    pass

  def __eq__(self, other:Any|Plane) -> bool: pass
  def __ne__(self, other:Any|Plane) -> bool: pass
  def __mul__(self, other:Transform3D) -> Plane: pass



class Quaternion(VariantTypeWrapper4):
  """
		The `Quaternion` built-in `Variant` type is a 4D data structure that represents rotation in the form of a `url=https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation`Hamilton convention quaternion`/url`. Compared to the `Basis` type which can store both rotation and scale, quaternions can _only_ store rotation.
		A `Quaternion` is composed by 4 floating-point components: `w`, `x`, `y`, and `z`. These components are very compact in memory, and because of this some operations are more efficient and less likely to cause floating-point errors. Methods such as `get_angle`, `get_axis`, and `slerp` are faster than their `Basis` counterparts.
		For a great introduction to quaternions, see `url=https://www.youtube.com/watch?v=d4EgbgTm0Bg`this video by 3Blue1Brown`/url`. You do not need to know the math behind quaternions, as Godot provides several helper methods that handle it for you. These include `slerp` and `spherical_cubic_interpolate`, as well as the `*` operator.
		**Note:** Quaternions must be normalized before being used for rotation (see `normalized`).
		**Note:** Similarly to `Vector2` and `Vector3`, the components of a quaternion use 32-bit precision by default, unlike `float` which is always 64-bit. If double precision is needed, compile the engine with the option `precision=double`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Quaternion:pass


  @staticmethod
  def new0() -> Quaternion:pass
  @staticmethod
  def new1(from_:Quaternion) -> Quaternion:pass
  @staticmethod
  def new2(from_:Basis) -> Quaternion:pass
  @staticmethod
  def new3(axis:Vector3, angle:float) -> Quaternion:pass
  @staticmethod
  def new4(arc_from:Vector3, arc_to:Vector3) -> Quaternion:pass
  @staticmethod
  def new5(x:float, y:float, z:float, w:float) -> Quaternion:pass



  @property
  def x(self)->float:
    """"""
    pass
  def get_x(self)->float:
    """"""
    pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:
    """"""
    pass
  def get_y(self)->float:
    """"""
    pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:
    """"""
    pass
  def get_z(self)->float:
    """"""
    pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  @property
  def w(self)->float:
    """"""
    pass
  def get_w(self)->float:
    """"""
    pass

  @w.setter
  def w(self, value:float)->None:pass
  def set_w(self, value:float)->None:pass
  def length(self)->float:
    """
				Returns this quaternion's length, also called magnitude.
			"""
    pass

  def length_squared(self)->float:
    """
				Returns this quaternion's length, squared.
				**Note:** This method is faster than `length`, so prefer it if you only need to compare quaternion lengths.
			"""
    pass

  def normalized(self)->Quaternion:
    """
				Returns a copy of this quaternion, normalized so that its length is `1.0`. See also `is_normalized`.
			"""
    pass

  def is_normalized(self)->bool:
    """
				Returns `true` if this quaternion is normalized. See also `normalized`.
			"""
    pass

  def is_equal_approx(self, to:Quaternion)->bool:
    """
				Returns `true` if this quaternion and `to` are approximately equal, by calling `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this quaternion is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def inverse(self)->Quaternion:
    """
				Returns the inverse version of this quaternion, inverting the sign of every component except `w`.
			"""
    pass

  def log(self)->Quaternion:
    """
				Returns the logarithm of this quaternion. Multiplies this quaternion's rotation axis by its rotation angle, and stores the result in the returned quaternion's vector part (`x`, `y`, and `z`). The returned quaternion's real part (`w`) is always `0.0`.
			"""
    pass

  def exp(self)->Quaternion:
    """
				Returns the exponential of this quaternion. The rotation axis of the result is the normalized rotation axis of this quaternion, the angle of the result is the length of the vector part of this quaternion.
			"""
    pass

  def angle_to(self, to:Quaternion)->float:
    """
				Returns the angle between this quaternion and `to`. This is the magnitude of the angle you would need to rotate by to get from one to the other.
				**Note:** The magnitude of the floating-point error for this method is abnormally high, so methods such as `is_zero_approx` will not work reliably.
			"""
    pass

  def dot(self, with_:Quaternion)->float:
    """
				Returns the dot product between this quaternion and `with`.
				This is equivalent to `(quat.x * with.x) + (quat.y * with.y) + (quat.z * with.z) + (quat.w * with.w)`.
			"""
    pass

  def slerp(self, to:Quaternion, weight:float)->Quaternion:
    """
				Performs a spherical-linear interpolation with the `to` quaternion, given a `weight` and returns the result. Both this quaternion and `to` must be normalized.
			"""
    pass

  def slerpni(self, to:Quaternion, weight:float)->Quaternion:
    """
				Performs a spherical-linear interpolation with the `to` quaternion, given a `weight` and returns the result. Unlike `slerp`, this method does not check if the rotation path is smaller than 90 degrees. Both this quaternion and `to` must be normalized.
			"""
    pass

  def spherical_cubic_interpolate(self, b:Quaternion, pre_a:Quaternion, post_b:Quaternion, weight:float)->Quaternion:
    """
				Performs a spherical cubic interpolation between quaternions `pre_a`, this vector, `b`, and `post_b`, by the given amount `weight`.
			"""
    pass

  def spherical_cubic_interpolate_in_time(self, b:Quaternion, pre_a:Quaternion, post_b:Quaternion, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Quaternion:
    """
				Performs a spherical cubic interpolation between quaternions `pre_a`, this vector, `b`, and `post_b`, by the given amount `weight`.
				It can perform smoother interpolation than `spherical_cubic_interpolate` by the time values.
			"""
    pass

  def get_euler(self, order:int=2)->Vector3:
    """
				Returns this quaternion's rotation as a `Vector3` of `url=https://en.wikipedia.org/wiki/Euler_angles`Euler angles`/url`, in radians.
				The order of each consecutive rotation can be changed with `order` (see `enum EulerOrder` constants). By default, the YXZ convention is used (`constant EULER_ORDER_YXZ`): Z (roll) is calculated first, then X (pitch), and lastly Y (yaw). When using the opposite method `from_euler`, this order is reversed.
			"""
    pass

  @staticmethod
  def from_euler(euler:Vector3)->Quaternion:
    """
				Constructs a new `Quaternion` from the given `Vector3` of `url=https://en.wikipedia.org/wiki/Euler_angles`Euler angles`/url`, in radians. This method always uses the YXZ convention (`constant EULER_ORDER_YXZ`).
			"""
    pass

  def get_axis(self)->Vector3:
    """
				Returns the rotation axis of the rotation represented by this quaternion.
			"""
    pass

  def get_angle(self)->float:
    """
				Returns the angle of the rotation represented by this quaternion.
				**Note:** The quaternion must be normalized.
			"""
    pass

  def __eq__(self, other:Any|Quaternion) -> bool: pass
  def __ne__(self, other:Any|Quaternion) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Quaternion) -> Quaternion: pass
  def __div__(self, other:int|float) -> Quaternion: pass
  def __add__(self, other:Quaternion) -> Quaternion: pass
  def __sub__(self, other:Quaternion) -> Quaternion: pass



class AABB(VariantTypeWrapper4):
  """
		The `AABB` built-in `Variant` type represents an axis-aligned bounding box in a 3D space. It is defined by its `position` and `size`, which are `Vector3`. It is frequently used for fast overlap tests (see `intersects`). Although `AABB` itself is axis-aligned, it can be combined with `Transform3D` to represent a rotated or skewed bounding box.
		It uses floating-point coordinates. The 2D counterpart to `AABB` is `Rect2`. There is no version of `AABB` that uses integer coordinates.
		**Note:** Negative values for `size` are not supported. With negative size, most `AABB` methods do not work correctly. Use `abs` to get an equivalent `AABB` with a non-negative size.
		**Note:** In a boolean context, an `AABB` evaluates to `false` if both `position` and `size` are zero (equal to `constant Vector3.ZERO`). Otherwise, it always evaluates to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->AABB:pass


  @staticmethod
  def new0() -> AABB:pass
  @staticmethod
  def new1(from_:AABB) -> AABB:pass
  @staticmethod
  def new2(position:Vector3, size:Vector3) -> AABB:pass



  @property
  def position(self)->Vector3:
    """"""
    pass
  def get_position(self)->Vector3:
    """"""
    pass

  @position.setter
  def position(self, value:Vector3)->None:pass
  def set_position(self, value:Vector3)->None:pass
  @property
  def size(self)->Vector3:
    """"""
    pass
  def get_size(self)->Vector3:
    """"""
    pass

  @size.setter
  def size(self, value:Vector3)->None:pass
  def set_size(self, value:Vector3)->None:pass
  def abs(self)->AABB:
    """
				Returns an `AABB` equivalent to this bounding box, with its width, height, and depth modified to be non-negative values.
				
				```gdscript
				var box = AABB(Vector3(5, 0, 5), Vector3(-20, -10, -5))
				var absolute = box.abs()
				print(absolute.position) # Prints (-15.0, -10.0, 0.0)
				print(absolute.size)     # Prints (20.0, 10.0, 5.0)
				```
				
				
				**Note:** It's recommended to use this method when `size` is negative, as most other methods in Godot assume that the `size`'s components are greater than `0`.
			"""
    pass

  def get_center(self)->Vector3:
    """
				Returns the center point of the bounding box. This is the same as `position + (size / 2.0)`.
			"""
    pass

  def get_volume(self)->float:
    """
				Returns the bounding box's volume. This is equivalent to `size.x * size.y * size.z`. See also `has_volume`.
			"""
    pass

  def has_volume(self)->bool:
    """
				Returns `true` if this bounding box's width, height, and depth are all positive. See also `get_volume`.
			"""
    pass

  def has_surface(self)->bool:
    """
				Returns `true` if this bounding box has a surface or a length, that is, at least one component of `size` is greater than `0`. Otherwise, returns `false`.
			"""
    pass

  def has_point(self, point:Vector3)->bool:
    """
				Returns `true` if the bounding box contains the given `point`. By convention, points exactly on the right, top, and front sides are **not** included.
				**Note:** This method is not reliable for `AABB` with a _negative_ `size`. Use `abs` first to get a valid bounding box.
			"""
    pass

  def is_equal_approx(self, aabb:AABB)->bool:
    """
				Returns `true` if this bounding box and `aabb` are approximately equal, by calling `Vector3.is_equal_approx` on the `position` and the `size`.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this bounding box's values are finite, by calling `Vector3.is_finite` on the `position` and the `size`.
			"""
    pass

  def intersects(self, with_:AABB)->bool:
    """
				Returns `true` if this bounding box overlaps with the box `with`. The edges of both boxes are _always_ excluded.
			"""
    pass

  def encloses(self, with_:AABB)->bool:
    """
				Returns `true` if this bounding box _completely_ encloses the `with` box. The edges of both boxes are included.
				
				```gdscript
				var a = AABB(Vector3(0, 0, 0), Vector3(4, 4, 4))
				var b = AABB(Vector3(1, 1, 1), Vector3(3, 3, 3))
				var c = AABB(Vector3(2, 2, 2), Vector3(8, 8, 8))

				print(a.encloses(a)) # Prints true
				print(a.encloses(b)) # Prints true
				print(a.encloses(c)) # Prints false
				```
				
				
			"""
    pass

  def intersects_plane(self, plane:Plane)->bool:
    """
				Returns `true` if this bounding box is on both sides of the given `plane`.
			"""
    pass

  def intersection(self, with_:AABB)->AABB:
    """
				Returns the intersection between this bounding box and `with`. If the boxes do not intersect, returns an empty `AABB`. If the boxes intersect at the edge, returns a flat `AABB` with no volume (see `has_surface` and `has_volume`).
				
				```gdscript
				var box1 = AABB(Vector3(0, 0, 0), Vector3(5, 2, 8))
				var box2 = AABB(Vector3(2, 0, 2), Vector3(8, 4, 4))

				var intersection = box1.intersection(box2)
				print(intersection.position) # Prints (2.0, 0.0, 2.0)
				print(intersection.size)     # Prints (3.0, 2.0, 4.0)
				```
				
				
				**Note:** If you only need to know whether two bounding boxes are intersecting, use `intersects`, instead.
			"""
    pass

  def merge(self, with_:AABB)->AABB:
    """
				Returns an `AABB` that encloses both this bounding box and `with` around the edges. See also `encloses`.
			"""
    pass

  def expand(self, to_point:Vector3)->AABB:
    """
				Returns a copy of this bounding box expanded to align the edges with the given `to_point`, if necessary.
				
				```gdscript
				var box = AABB(Vector3(0, 0, 0), Vector3(5, 2, 5))

				box = box.expand(Vector3(10, 0, 0))
				print(box.position) # Prints (0.0, 0.0, 0.0)
				print(box.size)     # Prints (10.0, 2.0, 5.0)

				box = box.expand(Vector3(-5, 0, 5))
				print(box.position) # Prints (-5.0, 0.0, 0.0)
				print(box.size)     # Prints (15.0, 2.0, 5.0)
				```
				
				
			"""
    pass

  def grow(self, by:float)->AABB:
    """
				Returns a copy of this bounding box extended on all sides by the given amount `by`. A negative amount shrinks the box instead.
				
				```gdscript
				var a = AABB(Vector3(4, 4, 4), Vector3(8, 8, 8)).grow(4)
				print(a.position) # Prints (0.0, 0.0, 0.0)
				print(a.size)     # Prints (16.0, 16.0, 16.0)

				var b = AABB(Vector3(0, 0, 0), Vector3(8, 4, 2)).grow(2)
				print(b.position) # Prints (-2.0, -2.0, -2.0)
				print(b.size)     # Prints (12.0, 8.0, 6.0)
				```
				
				
			"""
    pass

  def get_support(self, direction:Vector3)->Vector3:
    """
				Returns the vertex's position of this bounding box that's the farthest in the given direction. This point is commonly known as the support point in collision detection algorithms.
			"""
    pass

  def get_longest_axis(self)->Vector3:
    """
				Returns the longest normalized axis of this bounding box's `size`, as a `Vector3` (`constant Vector3.RIGHT`, `constant Vector3.UP`, or `constant Vector3.BACK`).
				
				```gdscript
				var box = AABB(Vector3(0, 0, 0), Vector3(2, 4, 8))

				print(box.get_longest_axis())       # Prints (0.0, 0.0, 1.0)
				print(box.get_longest_axis_index()) # Prints 2
				print(box.get_longest_axis_size())  # Prints 8.0
				```
				
				
				See also `get_longest_axis_index` and `get_longest_axis_size`.
			"""
    pass

  def get_longest_axis_index(self)->int:
    """
				Returns the index to the longest axis of this bounding box's `size` (see `constant Vector3.AXIS_X`, `constant Vector3.AXIS_Y`, and `constant Vector3.AXIS_Z`).
				For an example, see `get_longest_axis`.
			"""
    pass

  def get_longest_axis_size(self)->float:
    """
				Returns the longest dimension of this bounding box's `size`.
				For an example, see `get_longest_axis`.
			"""
    pass

  def get_shortest_axis(self)->Vector3:
    """
				Returns the shortest normalized axis of this bounding box's `size`, as a `Vector3` (`constant Vector3.RIGHT`, `constant Vector3.UP`, or `constant Vector3.BACK`).
				
				```gdscript
				var box = AABB(Vector3(0, 0, 0), Vector3(2, 4, 8))

				print(box.get_shortest_axis())       # Prints (1.0, 0.0, 0.0)
				print(box.get_shortest_axis_index()) # Prints 0
				print(box.get_shortest_axis_size())  # Prints 2.0
				```
				
				
				See also `get_shortest_axis_index` and `get_shortest_axis_size`.
			"""
    pass

  def get_shortest_axis_index(self)->int:
    """
				Returns the index to the shortest axis of this bounding box's `size` (see `constant Vector3.AXIS_X`, `constant Vector3.AXIS_Y`, and `constant Vector3.AXIS_Z`).
				For an example, see `get_shortest_axis`.
			"""
    pass

  def get_shortest_axis_size(self)->float:
    """
				Returns the shortest dimension of this bounding box's `size`.
				For an example, see `get_shortest_axis`.
			"""
    pass

  def get_endpoint(self, idx:int)->Vector3:
    """
				Returns the position of one of the 8 vertices that compose this bounding box. With an `idx` of `0` this is the same as `position`, and an `idx` of `7` is the same as `end`.
			"""
    pass

  def intersects_segment(self, from_:Vector3, to:Vector3)->Any:
    """
				Returns the first point where this bounding box and the given segment intersect, as a `Vector3`. If no intersection occurs, returns `null`.
				The segment begins at `from` and ends at `to`.
			"""
    pass

  def intersects_ray(self, from_:Vector3, dir:Vector3)->Any:
    """
				Returns the first point where this bounding box and the given ray intersect, as a `Vector3`. If no intersection occurs, returns `null`.
				The ray begin at `from`, faces `dir` and extends towards infinity.
			"""
    pass

  def __eq__(self, other:Any|AABB) -> bool: pass
  def __ne__(self, other:Any|AABB) -> bool: pass
  def __mul__(self, other:Transform3D) -> AABB: pass



class Basis(VariantTypeWrapper4):
  """
		The `Basis` built-in `Variant` type is a 3×3 `url=https://en.wikipedia.org/wiki/Matrix_(mathematics)`matrix`/url` used to represent 3D rotation, scale, and shear. It is frequently used within a `Transform3D`.
		A `Basis` is composed by 3 axis vectors, each representing a column of the matrix: `x`, `y`, and `z`. The length of each axis (`Vector3.length`) influences the basis's scale, while the direction of all axes influence the rotation. Usually, these axes are perpendicular to one another. However, when you rotate any axis individually, the basis becomes sheared. Applying a sheared basis to a 3D model will make the model appear distorted.
		A `Basis` is:
		- **Orthogonal** if its axes are perpendicular to each other.
		- **Normalized** if the length of every axis is `1.0`.
		- **Uniform** if all axes share the same length (see `get_scale`).
		- **Orthonormal** if it is both orthogonal and normalized, which allows it to only represent rotations (see `orthonormalized`).
		- **Conformal** if it is both orthogonal and uniform, which ensures it is not distorted.
		For a general introduction, see the `url=$DOCS_URL/tutorials/math/matrices_and_transforms.html`Matrices and transforms`/url` tutorial.
		**Note:** Godot uses a `url=https://en.wikipedia.org/wiki/Right-hand_rule`right-handed coordinate system`/url`, which is a common standard. For directions, the convention for built-in types like `Camera3D` is for -Z to point forward (+X is right, +Y is up, and +Z is back). Other objects may use different direction conventions. For more information, see the `url=$DOCS_URL/tutorials/assets_pipeline/importing_3d_scenes/model_export_considerations.html#d-asset-direction-conventions`3D asset direction conventions`/url` tutorial.
		**Note:** The basis matrices are exposed as `url=https://www.mindcontrol.org/~hplus/graphics/matrix-layout.html`column-major`/url` order, which is the same as OpenGL. However, they are stored internally in row-major order, which is the same as DirectX.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Basis:pass


  @staticmethod
  def new0() -> Basis:pass
  @staticmethod
  def new1(from_:Basis) -> Basis:pass
  @staticmethod
  def new2(from_:Quaternion) -> Basis:pass
  @staticmethod
  def new3(axis:Vector3, angle:float) -> Basis:pass
  @staticmethod
  def new4(x_axis:Vector3, y_axis:Vector3, z_axis:Vector3) -> Basis:pass



  @property
  def x(self)->Vector3:
    """"""
    pass
  def get_x(self)->Vector3:
    """"""
    pass

  @x.setter
  def x(self, value:Vector3)->None:pass
  def set_x(self, value:Vector3)->None:pass
  @property
  def y(self)->Vector3:
    """"""
    pass
  def get_y(self)->Vector3:
    """"""
    pass

  @y.setter
  def y(self, value:Vector3)->None:pass
  def set_y(self, value:Vector3)->None:pass
  @property
  def z(self)->Vector3:
    """"""
    pass
  def get_z(self)->Vector3:
    """"""
    pass

  @z.setter
  def z(self, value:Vector3)->None:pass
  def set_z(self, value:Vector3)->None:pass
  def inverse(self)->Basis:
    """
				Returns the `url=https://en.wikipedia.org/wiki/Invertible_matrix`inverse of this basis's matrix`/url`.
			"""
    pass

  def transposed(self)->Basis:
    """
				Returns the transposed version of this basis. This turns the basis matrix's columns into rows, and its rows into columns.
				
				```gdscript
				var my_basis = Basis(
					Vector3(1, 2, 3),
					Vector3(4, 5, 6),
					Vector3(7, 8, 9)
				)
				my_basis = my_basis.transposed()

				print(my_basis.x) # Prints (1.0, 4.0, 7.0)
				print(my_basis.y) # Prints (2.0, 5.0, 8.0)
				print(my_basis.z) # Prints (3.0, 6.0, 9.0)
				```
				
				
			"""
    pass

  def orthonormalized(self)->Basis:
    """
				Returns the orthonormalized version of this basis. An orthonormal basis is both _orthogonal_ (the axes are perpendicular to each other) and _normalized_ (the axes have a length of `1.0`), which also means it can only represent a rotation.
				It is often useful to call this method to avoid rounding errors on a rotating basis:
				
				```gdscript
				# Rotate this Node3D every frame.
				func _process(delta):
					basis = basis.rotated(Vector3.UP, TAU * delta)
					basis = basis.rotated(Vector3.RIGHT, TAU * delta)
					basis = basis.orthonormalized()
				```
				
				
			"""
    pass

  def determinant(self)->float:
    """
				Returns the `url=https://en.wikipedia.org/wiki/Determinant`determinant`/url` of this basis's matrix. For advanced math, this number can be used to determine a few attributes:
				- If the determinant is exactly `0.0`, the basis is not invertible (see `inverse`).
				- If the determinant is a negative number, the basis represents a negative scale.
				**Note:** If the basis's scale is the same for every axis, its determinant is always that scale by the power of 2.
			"""
    pass

  def rotated(self, axis:Vector3, angle:float)->Basis:
    """
				Returns a copy of this basis rotated around the given `axis` by the given `angle` (in radians).
				The `axis` must be a normalized vector (see `Vector3.normalized`). If `angle` is positive, the basis is rotated counter-clockwise around the axis.
				
				```gdscript
				var my_basis = Basis.IDENTITY
				var angle = TAU / 2

				my_basis = my_basis.rotated(Vector3.UP, angle)    # Rotate around the up axis (yaw).
				my_basis = my_basis.rotated(Vector3.RIGHT, angle) # Rotate around the right axis (pitch).
				my_basis = my_basis.rotated(Vector3.BACK, angle)  # Rotate around the back axis (roll).
				```
				
				
			"""
    pass

  def scaled(self, scale:Vector3)->Basis:
    """
				Returns this basis with each axis's components scaled by the given `scale`'s components.
				The basis matrix's rows are multiplied by `scale`'s components. This operation is a global scale (relative to the parent).
				
				```gdscript
				var my_basis = Basis(
					Vector3(1, 1, 1),
					Vector3(2, 2, 2),
					Vector3(3, 3, 3)
				)
				my_basis = my_basis.scaled(Vector3(0, 2, -2))

				print(my_basis.x) # Prints (0.0, 2.0, -2.0)
				print(my_basis.y) # Prints (0.0, 4.0, -4.0)
				print(my_basis.z) # Prints (0.0, 6.0, -6.0)
				```
				
				
			"""
    pass

  def get_scale(self)->Vector3:
    """
				Returns the length of each axis of this basis, as a `Vector3`. If the basis is not sheared, this value is the scaling factor. It is not affected by rotation.
				
				```gdscript
				var my_basis = Basis(
					Vector3(2, 0, 0),
					Vector3(0, 4, 0),
					Vector3(0, 0, 8)
				)
				# Rotating the Basis in any way preserves its scale.
				my_basis = my_basis.rotated(Vector3.UP, TAU / 2)
				my_basis = my_basis.rotated(Vector3.RIGHT, TAU / 4)

				print(my_basis.get_scale()) # Prints (2.0, 4.0, 8.0)
				```
				
				
				**Note:** If the value returned by `determinant` is negative, the scale is also negative.
			"""
    pass

  def get_euler(self, order:int=2)->Vector3:
    """
				Returns this basis's rotation as a `Vector3` of `url=https://en.wikipedia.org/wiki/Euler_angles`Euler angles`/url`, in radians. For the returned value:
				- The `Vector3.x` contains the angle around the `x` axis (pitch);
				- The `Vector3.y` contains the angle around the `y` axis (yaw);
				- The `Vector3.z` contains the angle around the `z` axis (roll).
				The order of each consecutive rotation can be changed with `order` (see `enum EulerOrder` constants). By default, the YXZ convention is used (`constant EULER_ORDER_YXZ`): Z (roll) is calculated first, then X (pitch), and lastly Y (yaw). When using the opposite method `from_euler`, this order is reversed.
				**Note:** For this method to return correctly, the basis needs to be _orthonormal_ (see `orthonormalized`).
				**Note:** Euler angles are much more intuitive but are not suitable for 3D math. Because of this, consider using the `get_rotation_quaternion` method instead, which returns a `Quaternion`.
				**Note:** In the Inspector dock, a basis's rotation is often displayed in Euler angles (in degrees), as is the case with the `Node3D.rotation` property.
			"""
    pass

  def tdotx(self, with_:Vector3)->float:
    """
				Returns the transposed dot product between `with` and the `x` axis (see `transposed`).
				This is equivalent to `basis.x.dot(vector)`.
			"""
    pass

  def tdoty(self, with_:Vector3)->float:
    """
				Returns the transposed dot product between `with` and the `y` axis (see `transposed`).
				This is equivalent to `basis.y.dot(vector)`.
			"""
    pass

  def tdotz(self, with_:Vector3)->float:
    """
				Returns the transposed dot product between `with` and the `z` axis (see `transposed`).
				This is equivalent to `basis.z.dot(vector)`.
			"""
    pass

  def slerp(self, to:Basis, weight:float)->Basis:
    """
				Performs a spherical-linear interpolation with the `to` basis, given a `weight`. Both this basis and `to` should represent a rotation.
				**Example:** Smoothly rotate a `Node3D` to the target basis over time, with a `Tween`:
				```gdscript
				var start_basis = Basis.IDENTITY
				var target_basis = Basis.IDENTITY.rotated(Vector3.UP, TAU / 2)

				func _ready():
					create_tween().tween_method(interpolate, 0.0, 1.0, 5.0).set_trans(Tween.TRANS_EXPO)

				func interpolate(weight):
					basis = start_basis.slerp(target_basis, weight)
				```
			"""
    pass

  def is_conformal(self)->bool:
    """
				Returns `true` if this basis is conformal. A conformal basis is both _orthogonal_ (the axes are perpendicular to each other) and _uniform_ (the axes share the same length). This method can be especially useful during physics calculations.
			"""
    pass

  def is_equal_approx(self, b:Basis)->bool:
    """
				Returns `true` if this basis and `b` are approximately equal, by calling `@GlobalScope.is_equal_approx` on all vector components.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this basis is finite, by calling `@GlobalScope.is_finite` on all vector components.
			"""
    pass

  def get_rotation_quaternion(self)->Quaternion:
    """
				Returns this basis's rotation as a `Quaternion`.
				**Note:** Quaternions are much more suitable for 3D math but are less intuitive. For user interfaces, consider using the `get_euler` method, which returns Euler angles.
			"""
    pass

  @staticmethod
  def looking_at(target:Vector3, up:Vector3= Vector3.new0(), use_model_front:bool=False)->Basis:
    """
				Creates a new `Basis` with a rotation such that the forward axis (-Z) points towards the `target` position.
				By default, the -Z axis (camera forward) is treated as forward (implies +X is right). If `use_model_front` is `true`, the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the `target` position.
				The up axis (+Y) points as close to the `up` vector as possible while staying perpendicular to the forward axis. The returned basis is orthonormalized (see `orthonormalized`).
				The `target` and the `up` cannot be `constant Vector3.ZERO`, and shouldn't be colinear to avoid unintended rotation around local Z axis.
			"""
    pass

  @staticmethod
  def from_scale(scale:Vector3)->Basis:
    """
				Constructs a new `Basis` that only represents scale, with no rotation or shear, from the given `scale` vector.
				
				```gdscript
				var my_basis = Basis.from_scale(Vector3(2, 4, 8))

				print(my_basis.x) # Prints (2.0, 0.0, 0.0)
				print(my_basis.y) # Prints (0.0, 4.0, 0.0)
				print(my_basis.z) # Prints (0.0, 0.0, 8.0)
				```
				
				
				**Note:** In linear algebra, the matrix of this basis is also known as a `url=https://en.wikipedia.org/wiki/Diagonal_matrix`diagonal matrix`/url`.
			"""
    pass

  @staticmethod
  def from_euler(euler:Vector3, order:int=2)->Basis:
    """
				Constructs a new `Basis` that only represents rotation from the given `Vector3` of `url=https://en.wikipedia.org/wiki/Euler_angles`Euler angles`/url`, in radians.
				- The `Vector3.x` should contain the angle around the `x` axis (pitch);
				- The `Vector3.y` should contain the angle around the `y` axis (yaw);
				- The `Vector3.z` should contain the angle around the `z` axis (roll).
				
				```gdscript
				# Creates a Basis whose z axis points down.
				var my_basis = Basis.from_euler(Vector3(TAU / 4, 0, 0))

				print(my_basis.z) # Prints (0.0, -1.0, 0.0)
				```
				
				
				The order of each consecutive rotation can be changed with `order` (see `enum EulerOrder` constants). By default, the YXZ convention is used (`constant EULER_ORDER_YXZ`): the basis rotates first around the Y axis (yaw), then X (pitch), and lastly Z (roll). When using the opposite method `get_euler`, this order is reversed.
			"""
    pass

  def __eq__(self, other:Any|Basis) -> bool: pass
  def __ne__(self, other:Any|Basis) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Basis) -> Basis: pass
  def __div__(self, other:int|float) -> Basis: pass



class Transform3D(VariantTypeWrapper4):
  """
		The `Transform3D` built-in `Variant` type is a 3×4 matrix representing a transformation in 3D space. It contains a `Basis`, which on its own can represent rotation, scale, and shear. Additionally, combined with its own `origin`, the transform can also represent a translation.
		For a general introduction, see the `url=$DOCS_URL/tutorials/math/matrices_and_transforms.html`Matrices and transforms`/url` tutorial.
		**Note:** Godot uses a `url=https://en.wikipedia.org/wiki/Right-hand_rule`right-handed coordinate system`/url`, which is a common standard. For directions, the convention for built-in types like `Camera3D` is for -Z to point forward (+X is right, +Y is up, and +Z is back). Other objects may use different direction conventions. For more information, see the `url=$DOCS_URL/tutorials/assets_pipeline/importing_3d_scenes/model_export_considerations.html#d-asset-direction-conventions`3D asset direction conventions`/url` tutorial.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Transform3D:pass


  @staticmethod
  def new0() -> Transform3D:pass
  @staticmethod
  def new1(from_:Transform3D) -> Transform3D:pass
  @staticmethod
  def new2(basis:Basis, origin:Vector3) -> Transform3D:pass
  @staticmethod
  def new3(x_axis:Vector3, y_axis:Vector3, z_axis:Vector3, origin:Vector3) -> Transform3D:pass
  @staticmethod
  def new4(from_:Projection) -> Transform3D:pass



  @property
  def basis(self)->Basis:
    """"""
    pass
  def get_basis(self)->Basis:
    """"""
    pass

  @basis.setter
  def basis(self, value:Basis)->None:pass
  def set_basis(self, value:Basis)->None:pass
  @property
  def origin(self)->Vector3:
    """"""
    pass
  def get_origin(self)->Vector3:
    """"""
    pass

  @origin.setter
  def origin(self, value:Vector3)->None:pass
  def set_origin(self, value:Vector3)->None:pass
  def inverse(self)->Transform3D:
    """
				Returns the `url=https://en.wikipedia.org/wiki/Invertible_matrix`inverted version of this transform`/url`. See also `Basis.inverse`.
				**Note:** For this method to return correctly, the transform's `basis` needs to be _orthonormal_ (see `orthonormalized`). That means the basis should only represent a rotation. If it does not, use `affine_inverse` instead.
			"""
    pass

  def affine_inverse(self)->Transform3D:
    """
				Returns the inverted version of this transform. Unlike `inverse`, this method works with almost any `basis`, including non-uniform ones, but is slower. See also `Basis.inverse`.
				**Note:** For this method to return correctly, the transform's `basis` needs to have a determinant that is not exactly `0.0` (see `Basis.determinant`).
			"""
    pass

  def orthonormalized(self)->Transform3D:
    """
				Returns a copy of this transform with its `basis` orthonormalized. An orthonormal basis is both _orthogonal_ (the axes are perpendicular to each other) and _normalized_ (the axes have a length of `1.0`), which also means it can only represent a rotation. See also `Basis.orthonormalized`.
			"""
    pass

  def rotated(self, axis:Vector3, angle:float)->Transform3D:
    """
				Returns a copy of this transform rotated around the given `axis` by the given `angle` (in radians).
				The `axis` must be a normalized vector (see `Vector3.normalized`). If `angle` is positive, the basis is rotated counter-clockwise around the axis.
				This method is an optimized version of multiplying the given transform `X` with a corresponding rotation transform `R` from the left, i.e., `R * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def rotated_local(self, axis:Vector3, angle:float)->Transform3D:
    """
				Returns a copy of this transform rotated around the given `axis` by the given `angle` (in radians).
				The `axis` must be a normalized vector in the transform's local coordinate system. For example, to rotate around the local X-axis, use `constant Vector3.RIGHT`.
				This method is an optimized version of multiplying the given transform `X` with a corresponding rotation transform `R` from the right, i.e., `X * R`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def scaled(self, scale:Vector3)->Transform3D:
    """
				Returns a copy of this transform scaled by the given `scale` factor.
				This method is an optimized version of multiplying the given transform `X` with a corresponding scaling transform `S` from the left, i.e., `S * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def scaled_local(self, scale:Vector3)->Transform3D:
    """
				Returns a copy of this transform scaled by the given `scale` factor.
				This method is an optimized version of multiplying the given transform `X` with a corresponding scaling transform `S` from the right, i.e., `X * S`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def translated(self, offset:Vector3)->Transform3D:
    """
				Returns a copy of this transform translated by the given `offset`.
				This method is an optimized version of multiplying the given transform `X` with a corresponding translation transform `T` from the left, i.e., `T * X`.
				This can be seen as transforming with respect to the global/parent frame.
			"""
    pass

  def translated_local(self, offset:Vector3)->Transform3D:
    """
				Returns a copy of this transform translated by the given `offset`.
				This method is an optimized version of multiplying the given transform `X` with a corresponding translation transform `T` from the right, i.e., `X * T`.
				This can be seen as transforming with respect to the local frame.
			"""
    pass

  def looking_at(self, target:Vector3, up:Vector3= Vector3.new0(), use_model_front:bool=False)->Transform3D:
    """
				Returns a copy of this transform rotated so that the forward axis (-Z) points towards the `target` position.
				The up axis (+Y) points as close to the `up` vector as possible while staying perpendicular to the forward axis. The resulting transform is orthonormalized. The existing rotation, scale, and skew information from the original transform is discarded. The `target` and `up` vectors cannot be zero, cannot be parallel to each other, and are defined in global/parent space.
				If `use_model_front` is `true`, the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the `target` position. By default, the -Z axis (camera forward) is treated as forward (implies +X is right).
			"""
    pass

  def interpolate_with(self, xform:Transform3D, weight:float)->Transform3D:
    """
				Returns the result of the linear interpolation between this transform and `xform` by the given `weight`.
				The `weight` should be between `0.0` and `1.0` (inclusive). Values outside this range are allowed and can be used to perform _extrapolation_ instead.
			"""
    pass

  def is_equal_approx(self, xform:Transform3D)->bool:
    """
				Returns `true` if this transform and `xform` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  def is_finite(self)->bool:
    """
				Returns `true` if this transform is finite, by calling `@GlobalScope.is_finite` on each component.
			"""
    pass

  def __eq__(self, other:Any|Transform3D) -> bool: pass
  def __ne__(self, other:Any|Transform3D) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Plane|AABB|Transform3D|PackedVector3Array) -> Transform3D: pass
  def __div__(self, other:int|float) -> Transform3D: pass


class Planes:
  PLANE_NEAR:int = 0
  PLANE_FAR:int = 1
  PLANE_LEFT:int = 2
  PLANE_TOP:int = 3
  PLANE_RIGHT:int = 4
  PLANE_BOTTOM:int = 5


class Projection(VariantTypeWrapper4):
  """
		A 4×4 matrix used for 3D projective transformations. It can represent transformations such as translation, rotation, scaling, shearing, and perspective division. It consists of four `Vector4` columns.
		For purely linear transformations (translation, rotation, and scale), it is recommended to use `Transform3D`, as it is more performant and requires less memory.
		Used internally as `Camera3D`'s projection matrix.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Projection:pass


  @staticmethod
  def new0() -> Projection:pass
  @staticmethod
  def new1(from_:Projection) -> Projection:pass
  @staticmethod
  def new2(from_:Transform3D) -> Projection:pass
  @staticmethod
  def new3(x_axis:Vector4, y_axis:Vector4, z_axis:Vector4, w_axis:Vector4) -> Projection:pass



  @property
  def x(self)->Vector4:
    """"""
    pass
  def get_x(self)->Vector4:
    """"""
    pass

  @x.setter
  def x(self, value:Vector4)->None:pass
  def set_x(self, value:Vector4)->None:pass
  @property
  def y(self)->Vector4:
    """"""
    pass
  def get_y(self)->Vector4:
    """"""
    pass

  @y.setter
  def y(self, value:Vector4)->None:pass
  def set_y(self, value:Vector4)->None:pass
  @property
  def z(self)->Vector4:
    """"""
    pass
  def get_z(self)->Vector4:
    """"""
    pass

  @z.setter
  def z(self, value:Vector4)->None:pass
  def set_z(self, value:Vector4)->None:pass
  @property
  def w(self)->Vector4:
    """"""
    pass
  def get_w(self)->Vector4:
    """"""
    pass

  @w.setter
  def w(self, value:Vector4)->None:pass
  def set_w(self, value:Vector4)->None:pass
  @staticmethod
  def create_depth_correction(flip_y:bool)->Projection:
    """
				Creates a new `Projection` that projects positions from a depth range of `-1` to `1` to one that ranges from `0` to `1`, and flips the projected positions vertically, according to `flip_y`.
			"""
    pass

  @staticmethod
  def create_light_atlas_rect(rect:Rect2)->Projection:
    """
				Creates a new `Projection` that projects positions into the given `Rect2`.
			"""
    pass

  @staticmethod
  def create_perspective(fovy:float, aspect:float, z_near:float, z_far:float, flip_fov:bool=False)->Projection:
    """
				Creates a new `Projection` that projects positions using a perspective projection with the given Y-axis field of view (in degrees), X:Y aspect ratio, and clipping planes.
				`flip_fov` determines whether the projection's field of view is flipped over its diagonal.
			"""
    pass

  @staticmethod
  def create_perspective_hmd(fovy:float, aspect:float, z_near:float, z_far:float, flip_fov:bool, eye:int, intraocular_dist:float, convergence_dist:float)->Projection:
    """
				Creates a new `Projection` that projects positions using a perspective projection with the given Y-axis field of view (in degrees), X:Y aspect ratio, and clipping distances. The projection is adjusted for a head-mounted display with the given distance between eyes and distance to a point that can be focused on.
				`eye` creates the projection for the left eye when set to 1, or the right eye when set to 2.
				`flip_fov` determines whether the projection's field of view is flipped over its diagonal.
			"""
    pass

  @staticmethod
  def create_for_hmd(eye:int, aspect:float, intraocular_dist:float, display_width:float, display_to_lens:float, oversample:float, z_near:float, z_far:float)->Projection:
    """
				Creates a new `Projection` for projecting positions onto a head-mounted display with the given X:Y aspect ratio, distance between eyes, display width, distance to lens, oversampling factor, and depth clipping planes.
				`eye` creates the projection for the left eye when set to 1, or the right eye when set to 2.
			"""
    pass

  @staticmethod
  def create_orthogonal(left:float, right:float, bottom:float, top:float, z_near:float, z_far:float)->Projection:
    """
				Creates a new `Projection` that projects positions using an orthogonal projection with the given clipping planes.
			"""
    pass

  @staticmethod
  def create_orthogonal_aspect(size:float, aspect:float, z_near:float, z_far:float, flip_fov:bool=False)->Projection:
    """
				Creates a new `Projection` that projects positions using an orthogonal projection with the given size, X:Y aspect ratio, and clipping planes.
				`flip_fov` determines whether the projection's field of view is flipped over its diagonal.
			"""
    pass

  @staticmethod
  def create_frustum(left:float, right:float, bottom:float, top:float, z_near:float, z_far:float)->Projection:
    """
				Creates a new `Projection` that projects positions in a frustum with the given clipping planes.
			"""
    pass

  @staticmethod
  def create_frustum_aspect(size:float, aspect:float, offset:Vector2, z_near:float, z_far:float, flip_fov:bool=False)->Projection:
    """
				Creates a new `Projection` that projects positions in a frustum with the given size, X:Y aspect ratio, offset, and clipping planes.
				`flip_fov` determines whether the projection's field of view is flipped over its diagonal.
			"""
    pass

  @staticmethod
  def create_fit_aabb(aabb:AABB)->Projection:
    """
				Creates a new `Projection` that scales a given projection to fit around a given `AABB` in projection space.
			"""
    pass

  def determinant(self)->float:
    """
				Returns a scalar value that is the signed factor by which areas are scaled by this matrix. If the sign is negative, the matrix flips the orientation of the area.
				The determinant can be used to calculate the invertibility of a matrix or solve linear systems of equations involving the matrix, among other applications.
			"""
    pass

  def perspective_znear_adjusted(self, new_znear:float)->Projection:
    """
				Returns a `Projection` with the near clipping distance adjusted to be `new_znear`.
				**Note:** The original `Projection` must be a perspective projection.
			"""
    pass

  def get_projection_plane(self, plane:int)->Plane:
    """
				Returns the clipping plane of this `Projection` whose index is given by `plane`.
				`plane` should be equal to one of `constant PLANE_NEAR`, `constant PLANE_FAR`, `constant PLANE_LEFT`, `constant PLANE_TOP`, `constant PLANE_RIGHT`, or `constant PLANE_BOTTOM`.
			"""
    pass

  def flipped_y(self)->Projection:
    """
				Returns a copy of this `Projection` with the signs of the values of the Y column flipped.
			"""
    pass

  def jitter_offseted(self, offset:Vector2)->Projection:
    """
				Returns a `Projection` with the X and Y values from the given `Vector2` added to the first and second values of the final column respectively.
			"""
    pass

  @staticmethod
  def get_fovy(fovx:float, aspect:float)->float:
    """
				Returns the vertical field of view of the projection (in degrees) associated with the given horizontal field of view (in degrees) and aspect ratio.
				**Note:** Unlike most methods of `Projection`, `aspect` is expected to be 1 divided by the X:Y aspect ratio.
			"""
    pass

  def get_z_far(self)->float:
    """
				Returns the distance for this `Projection` beyond which positions are clipped.
			"""
    pass

  def get_z_near(self)->float:
    """
				Returns the distance for this `Projection` before which positions are clipped.
			"""
    pass

  def get_aspect(self)->float:
    """
				Returns the X:Y aspect ratio of this `Projection`'s viewport.
			"""
    pass

  def get_fov(self)->float:
    """
				Returns the horizontal field of view of the projection (in degrees).
			"""
    pass

  def is_orthogonal(self)->bool:
    """
				Returns `true` if this `Projection` performs an orthogonal projection.
			"""
    pass

  def get_viewport_half_extents(self)->Vector2:
    """
				Returns the dimensions of the viewport plane that this `Projection` projects positions onto, divided by two.
			"""
    pass

  def get_far_plane_half_extents(self)->Vector2:
    """
				Returns the dimensions of the far clipping plane of the projection, divided by two.
			"""
    pass

  def inverse(self)->Projection:
    """
				Returns a `Projection` that performs the inverse of this `Projection`'s projective transformation.
			"""
    pass

  def get_pixels_per_meter(self, for_pixel_width:int)->int:
    """
				Returns `for_pixel_width` divided by the viewport's width measured in meters on the near plane, after this `Projection` is applied.
			"""
    pass

  def get_lod_multiplier(self)->float:
    """
				Returns the factor by which the visible level of detail is scaled by this `Projection`.
			"""
    pass

  def __eq__(self, other:Any|Projection) -> bool: pass
  def __ne__(self, other:Any|Projection) -> bool: pass
  def __mul__(self, other:Vector4|Projection) -> Vector4: pass



class Color(VariantTypeWrapper4):
  """
		A color represented in RGBA format by a red (`r`), green (`g`), blue (`b`), and alpha (`a`) component. Each component is a 32-bit floating-point value, usually ranging from `0.0` to `1.0`. Some properties (such as `CanvasItem.modulate`) may support values greater than `1.0`, for overbright or HDR (High Dynamic Range) colors.
		Colors can be created in various ways: By the various `Color` constructors, by static methods such as `from_hsv`, and by using a name from the set of standardized colors based on `url=https://en.wikipedia.org/wiki/X11_color_names`X11 color names`/url` with the addition of `constant TRANSPARENT`. GDScript also provides `@GDScript.Color8`, which uses integers from `0` to `255` and doesn't support overbright colors.
		Color data may be stored in many color spaces and encodings. The `srgb_to_linear` and `linear_to_srgb` methods can convert between nonlinear sRGB encoding and linear RGB encoding.
		**Note:** In a boolean context, a Color will evaluate to `false` if it is equal to `Color(0, 0, 0, 1)` (opaque black). Otherwise, a Color will always evaluate to `true`.
		`url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png`Color constants cheatsheet`/url`
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Color:pass


  @staticmethod
  def new0() -> Color:pass
  @staticmethod
  def new1(from_:Color) -> Color:pass
  @staticmethod
  def new2(from_:Color, alpha:float) -> Color:pass
  @staticmethod
  def new3(r:float, g:float, b:float) -> Color:pass
  @staticmethod
  def new4(r:float, g:float, b:float, a:float) -> Color:pass
  @staticmethod
  def new5(code:str) -> Color:pass
  @staticmethod
  def new6(code:str, alpha:float) -> Color:pass



  @property
  def r(self)->float:
    """"""
    pass
  def get_r(self)->float:
    """"""
    pass

  @r.setter
  def r(self, value:float)->None:pass
  def set_r(self, value:float)->None:pass
  @property
  def g(self)->float:
    """"""
    pass
  def get_g(self)->float:
    """"""
    pass

  @g.setter
  def g(self, value:float)->None:pass
  def set_g(self, value:float)->None:pass
  @property
  def b(self)->float:
    """"""
    pass
  def get_b(self)->float:
    """"""
    pass

  @b.setter
  def b(self, value:float)->None:pass
  def set_b(self, value:float)->None:pass
  @property
  def a(self)->float:
    """"""
    pass
  def get_a(self)->float:
    """"""
    pass

  @a.setter
  def a(self, value:float)->None:pass
  def set_a(self, value:float)->None:pass
  def to_argb32(self)->int:
    """
				Returns the color converted to a 32-bit integer in ARGB format (each component is 8 bits). ARGB is more compatible with DirectX.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_argb32()) # Prints 4294934323
				```
				
				
			"""
    pass

  def to_abgr32(self)->int:
    """
				Returns the color converted to a 32-bit integer in ABGR format (each component is 8 bits). ABGR is the reversed version of the default RGBA format.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_abgr32()) # Prints 4281565439
				```
				
				
			"""
    pass

  def to_rgba32(self)->int:
    """
				Returns the color converted to a 32-bit integer in RGBA format (each component is 8 bits). RGBA is Godot's default format. This method is the inverse of `hex`.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_rgba32()) # Prints 4286526463
				```
				
				
			"""
    pass

  def to_argb64(self)->int:
    """
				Returns the color converted to a 64-bit integer in ARGB format (each component is 16 bits). ARGB is more compatible with DirectX.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_argb64()) # Prints -2147470541
				```
				
				
			"""
    pass

  def to_abgr64(self)->int:
    """
				Returns the color converted to a 64-bit integer in ABGR format (each component is 16 bits). ABGR is the reversed version of the default RGBA format.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_abgr64()) # Prints -225178692812801
				```
				
				
			"""
    pass

  def to_rgba64(self)->int:
    """
				Returns the color converted to a 64-bit integer in RGBA format (each component is 16 bits). RGBA is Godot's default format. This method is the inverse of `hex64`.
				
				```gdscript
				var color = Color(1, 0.5, 0.2)
				print(color.to_rgba64()) # Prints -140736629309441
				```
				
				
			"""
    pass

  def to_html(self, with_alpha:bool=True)->str:
    """
				Returns the color converted to an HTML hexadecimal color `String` in RGBA format, without the hash (`#`) prefix.
				Setting `with_alpha` to `false`, excludes alpha from the hexadecimal string, using RGB format instead of RGBA format.
				
				```gdscript
				var white = Color(1, 1, 1, 0.5)
				var with_alpha = white.to_html() # Returns "ffffff7f"
				var without_alpha = white.to_html(false) # Returns "ffffff"
				```
				
				
			"""
    pass

  def clamp(self, min:Color= Color.new0(), max:Color= Color.new0())->Color:
    """
				Returns a new color with all components clamped between the components of `min` and `max`, by running `@GlobalScope.clamp` on each component.
			"""
    pass

  def inverted(self)->Color:
    """
				Returns the color with its `r`, `g`, and `b` components inverted (`(1 - r, 1 - g, 1 - b, a)`).
				
				```gdscript
				var black = Color.WHITE.inverted()
				var color = Color(0.3, 0.4, 0.9)
				var inverted_color = color.inverted() # Equivalent to `Color(0.7, 0.6, 0.1)`
				```
				
				
			"""
    pass

  def lerp(self, to:Color, weight:float)->Color:
    """
				Returns the linear interpolation between this color's components and `to`'s components. The interpolation factor `weight` should be between 0.0 and 1.0 (inclusive). See also `@GlobalScope.lerp`.
				
				```gdscript
				var red = Color(1.0, 0.0, 0.0)
				var aqua = Color(0.0, 1.0, 0.8)

				red.lerp(aqua, 0.2) # Returns Color(0.8, 0.2, 0.16)
				red.lerp(aqua, 0.5) # Returns Color(0.5, 0.5, 0.4)
				red.lerp(aqua, 1.0) # Returns Color(0.0, 1.0, 0.8)
				```
				
				
			"""
    pass

  def lightened(self, amount:float)->Color:
    """
				Returns a new color resulting from making this color lighter by the specified `amount`, which should be a ratio from 0.0 to 1.0. See also `darkened`.
				
				```gdscript
				var green = Color(0.0, 1.0, 0.0)
				var light_green = green.lightened(0.2) # 20% lighter than regular green
				```
				
				
			"""
    pass

  def darkened(self, amount:float)->Color:
    """
				Returns a new color resulting from making this color darker by the specified `amount` (ratio from 0.0 to 1.0). See also `lightened`.
				
				```gdscript
				var green = Color(0.0, 1.0, 0.0)
				var darkgreen = green.darkened(0.2) # 20% darker than regular green
				```
				
				
			"""
    pass

  def blend(self, over:Color)->Color:
    """
				Returns a new color resulting from overlaying this color over the given color. In a painting program, you can imagine it as the `over` color painted over this color (including alpha).
				
				```gdscript
				var bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%
				var fg = Color(1.0, 0.0, 0.0, 0.5) # Red with alpha of 50%
				var blended_color = bg.blend(fg) # Brown with alpha of 75%
				```
				
				
			"""
    pass

  def get_luminance(self)->float:
    """
				Returns the light intensity of the color, as a value between 0.0 and 1.0 (inclusive). This is useful when determining light or dark color. Colors with a luminance smaller than 0.5 can be generally considered dark.
				**Note:** `get_luminance` relies on the color being in the linear color space to return an accurate relative luminance value. If the color is in the sRGB color space, use `srgb_to_linear` to convert it to the linear color space first.
			"""
    pass

  def srgb_to_linear(self)->Color:
    """
				Returns the color converted to the linear color space. This method assumes the original color already is in the sRGB color space. See also `linear_to_srgb` which performs the opposite operation.
				**Note:** The color's `a`lpha channel is not affected. The alpha channel is always stored with linear encoding, regardless of the color space of the other color channels.
			"""
    pass

  def linear_to_srgb(self)->Color:
    """
				Returns the color converted to the `url=https://en.wikipedia.org/wiki/SRGB`sRGB`/url` color space. This method assumes the original color is in the linear color space. See also `srgb_to_linear` which performs the opposite operation.
				**Note:** The color's `a`lpha channel is not affected. The alpha channel is always stored with linear encoding, regardless of the color space of the other color channels.
			"""
    pass

  def is_equal_approx(self, to:Color)->bool:
    """
				Returns `true` if this color and `to` are approximately equal, by running `@GlobalScope.is_equal_approx` on each component.
			"""
    pass

  @staticmethod
  def hex(hex:int)->Color:
    """
				Returns the `Color` associated with the provided `hex` integer in 32-bit RGBA format (8 bits per channel). This method is the inverse of `to_rgba32`.
				In GDScript and C#, the `int` is best visualized with hexadecimal notation (`"0x"` prefix, making it `"0xRRGGBBAA"`).
				
				```gdscript
				var red = Color.hex(0xff0000ff)
				var dark_cyan = Color.hex(0x008b8bff)
				var my_color = Color.hex(0xbbefd2a4)
				```
				
				
				If you want to use hex notation in a constant expression, use the equivalent constructor instead (i.e. `Color(0xRRGGBBAA)`).
			"""
    pass

  @staticmethod
  def hex64(hex:int)->Color:
    """
				Returns the `Color` associated with the provided `hex` integer in 64-bit RGBA format (16 bits per channel). This method is the inverse of `to_rgba64`.
				In GDScript and C#, the `int` is best visualized with hexadecimal notation (`"0x"` prefix, making it `"0xRRRRGGGGBBBBAAAA"`).
			"""
    pass

  @staticmethod
  def html(rgba:str)->Color:
    """
				Returns a new color from `rgba`, an HTML hexadecimal color string. `rgba` is not case-sensitive, and may be prefixed by a hash sign (`#`).
				`rgba` must be a valid three-digit or six-digit hexadecimal color string, and may contain an alpha channel value. If `rgba` does not contain an alpha channel value, an alpha channel value of 1.0 is applied. If `rgba` is invalid, returns an empty color.
				
				```gdscript
				var blue = Color.html("#0000ff") # blue is Color(0.0, 0.0, 1.0, 1.0)
				var green = Color.html("#0F0")   # green is Color(0.0, 1.0, 0.0, 1.0)
				var col = Color.html("663399cc") # col is Color(0.4, 0.2, 0.6, 0.8)
				```
				
				
			"""
    pass

  @staticmethod
  def html_is_valid(color:str)->bool:
    """
				Returns `true` if `color` is a valid HTML hexadecimal color string. The string must be a hexadecimal value (case-insensitive) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). This method is identical to `String.is_valid_html_color`.
				
				```gdscript
				Color.html_is_valid("#55aaFF")   # Returns true
				Color.html_is_valid("#55AAFF20") # Returns true
				Color.html_is_valid("55AAFF")    # Returns true
				Color.html_is_valid("#F2C")      # Returns true

				Color.html_is_valid("#AABBC")    # Returns false
				Color.html_is_valid("#55aaFF5")  # Returns false
				```
				
				
			"""
    pass

  @staticmethod
  def from_string(str:str, default:Color)->Color:
    """
				Creates a `Color` from the given string, which can be either an HTML color code or a named color (case-insensitive). Returns `default` if the color cannot be inferred from the string.
				If you want to create a color from String in a constant expression, use the equivalent constructor instead (i.e. `Color("color string")`).
			"""
    pass

  @staticmethod
  def from_hsv(h:float, s:float, v:float, alpha:float=1.0)->Color:
    """
				Constructs a color from an `url=https://en.wikipedia.org/wiki/HSL_and_HSV`HSV profile`/url`. The hue (`h`), saturation (`s`), and value (`v`) are typically between 0.0 and 1.0.
				
				```gdscript
				var color = Color.from_hsv(0.58, 0.5, 0.79, 0.8)
				```
				
				
			"""
    pass

  @staticmethod
  def from_ok_hsl(h:float, s:float, l:float, alpha:float=1.0)->Color:
    """
				Constructs a color from an `url=https://bottosson.github.io/posts/colorpicker/`OK HSL profile`/url`. The hue (`h`), saturation (`s`), and lightness (`l`) are typically between 0.0 and 1.0.
				
				```gdscript
				var color = Color.from_ok_hsl(0.58, 0.5, 0.79, 0.8)
				```
				
				
			"""
    pass

  @staticmethod
  def from_rgbe9995(rgbe:int)->Color:
    """
				Decodes a `Color` from an RGBE9995 format integer. See `constant Image.FORMAT_RGBE9995`.
			"""
    pass

  @staticmethod
  def from_rgba8(r8:int, g8:int, b8:int, a8:int=255)->Color:
    """
				Returns a `Color` constructed from red (`r8`), green (`g8`), blue (`b8`), and optionally alpha (`a8`) integer channels, each divided by `255.0` for their final value.
				```gdscript
				var red = Color.from_rgba8(255, 0, 0)             # Same as Color(1, 0, 0).
				var dark_blue = Color.from_rgba8(0, 0, 51)        # Same as Color(0, 0, 0.2).
				var my_color = Color.from_rgba8(306, 255, 0, 102) # Same as Color(1.2, 1, 0, 0.4).
				```
				**Note:** Due to the lower precision of `from_rgba8` compared to the standard `Color` constructor, a color created with `from_rgba8` will generally not be equal to the same color created with the standard `Color` constructor. Use `is_equal_approx` for comparisons to avoid issues with floating-point precision error.
			"""
    pass

  def __eq__(self, other:Any|Color) -> bool: pass
  def __ne__(self, other:Any|Color) -> bool: pass
  def __mul__(self, other:int|float|Color) -> Color: pass
  def __div__(self, other:int|float|Color) -> Color: pass
  def __add__(self, other:Color) -> Color: pass
  def __sub__(self, other:Color) -> Color: pass



class StringName(VariantTypeWrapper4):
  """
		`StringName`s are immutable strings designed for general-purpose representation of unique names (also called "string interning"). Two `StringName`s with the same value are the same object. Comparing them is extremely fast compared to regular `String`s.
		You will usually pass a `String` to methods expecting a `StringName` and it will be automatically converted (often at compile time), but in rare cases you can construct a `StringName` ahead of time with the `StringName` constructor or, in GDScript, the literal syntax `&"example"`. Manually constructing a `StringName` allows you to control when the conversion from `String` occurs or to use the literal and prevent conversions entirely.
		See also `NodePath`, which is a similar concept specifically designed to store pre-parsed scene tree paths.
		All of `String`'s methods are available in this class too. They convert the `StringName` into a string, and they also return a string. This is highly inefficient and should only be used if the string is desired.
		**Note:** In C#, an explicit conversion to `System.String` is required to use the methods listed on this page. Use the `ToString()` method to cast a `StringName` to a string, and then use the equivalent methods in `System.String` or `StringExtensions`.
		**Note:** In a boolean context, a `StringName` will evaluate to `false` if it is empty (`StringName("")`). Otherwise, a `StringName` will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->StringName:pass


  @staticmethod
  def new0() -> StringName|str:pass
  @staticmethod
  def new1(from_:StringName|str) -> StringName|str:pass
  @staticmethod
  def new2(from_:str) -> StringName|str:pass



  def casecmp_to(self, to:str)->int:
    """
				Performs a case-sensitive comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" and "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order.
				With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `nocasecmp_to`, `filecasecmp_to`, and `naturalcasecmp_to`.
			"""
    pass

  def nocasecmp_to(self, to:str)->int:
    """
				Performs a **case-insensitive** comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
				With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `casecmp_to`, `filenocasecmp_to`, and `naturalnocasecmp_to`.
			"""
    pass

  def naturalcasecmp_to(self, to:str)->int:
    """
				Performs a **case-sensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order.
				When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be ``"1", "2", "3", ...``, not ``"1", "10", "2", "3", ...``.
				With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `naturalnocasecmp_to`, `filecasecmp_to`, and `nocasecmp_to`.
			"""
    pass

  def naturalnocasecmp_to(self, to:str)->int:
    """
				Performs a **case-insensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the `url=https://en.wikipedia.org/wiki/List_of_Unicode_characters`Unicode code points`/url` of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
				When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be ``"1", "2", "3", ...``, not ``"1", "10", "2", "3", ...``.
				With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `naturalcasecmp_to`, `filenocasecmp_to`, and `casecmp_to`.
			"""
    pass

  def filecasecmp_to(self, to:str)->int:
    """
				Like `naturalcasecmp_to` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `filenocasecmp_to`, `naturalcasecmp_to`, and `casecmp_to`.
			"""
    pass

  def filenocasecmp_to(self, to:str)->int:
    """
				Like `naturalnocasecmp_to` but prioritizes strings that begin with periods (`.`) and underscores (`_`) before any other character. Useful when sorting folders or file names.
				To get a `bool` result from a string comparison, use the `==` operator instead. See also `filecasecmp_to`, `naturalnocasecmp_to`, and `nocasecmp_to`.
			"""
    pass

  def length(self)->int:
    """
				Returns the number of characters in the string. Empty strings (`""`) always return `0`. See also `is_empty`.
			"""
    pass

  def substr(self, from_:int, len_:int=-1)->str:
    """
				Returns part of the string from the position `from` with length `len`. If `len` is `-1` (as by default), returns the rest of the string starting from the given position.
			"""
    pass

  def get_slice(self, delimiter:str, slice:int)->str:
    """
				Splits the string using a `delimiter` and returns the substring at index `slice`. Returns the original string if `delimiter` does not occur in the string. Returns an empty string if the `slice` does not exist.
				This is faster than `split`, if you only need one substring.
				```gdscript
				print("i/am/example/hi".get_slice("/", 2)) # Prints "example"
				```
			"""
    pass

  def get_slicec(self, delimiter:int, slice:int)->str:
    """
				Splits the string using a Unicode character with code `delimiter` and returns the substring at index `slice`. Returns an empty string if the `slice` does not exist.
				This is faster than `split`, if you only need one substring.
			"""
    pass

  def get_slice_count(self, delimiter:str)->int:
    """
				Returns the total number of slices when the string is split with the given `delimiter` (see `split`).
			"""
    pass

  def find(self, what:str, from_:int=0)->int:
    """
				Returns the index of the **first** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the string.
				
				```gdscript
				print("Team".find("I")) # Prints -1

				print("Potato".find("t"))    # Prints 2
				print("Potato".find("t", 3)) # Prints 4
				print("Potato".find("t", 5)) # Prints -1
				```
				
				
				**Note:** If you just want to know whether the string contains `what`, use `contains`. In GDScript, you may also use the `in` operator.
			"""
    pass

  def findn(self, what:str, from_:int=0)->int:
    """
				Returns the index of the **first** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the end of the string.
			"""
    pass

  def count(self, what:str, from_:int=0, to:int=0)->int:
    """
				Returns the number of occurrences of the substring `what` between `from` and `to` positions. If `to` is 0, the search continues until the end of the string.
			"""
    pass

  def countn(self, what:str, from_:int=0, to:int=0)->int:
    """
				Returns the number of occurrences of the substring `what` between `from` and `to` positions, **ignoring case**. If `to` is 0, the search continues until the end of the string.
			"""
    pass

  def rfind(self, what:str, from_:int=-1)->int:
    """
				Returns the index of the **last** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the string. This method is the reverse of `find`.
			"""
    pass

  def rfindn(self, what:str, from_:int=-1)->int:
    """
				Returns the index of the **last** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the beginning of the string. This method is the reverse of `findn`.
			"""
    pass

  def match(self, expr:str)->bool:
    """
				Does a simple expression match (also called "glob" or "globbing"), where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
			"""
    pass

  def matchn(self, expr:str)->bool:
    """
				Does a simple **case-insensitive** expression match, where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
			"""
    pass

  def begins_with(self, text:str)->bool:
    """
				Returns `true` if the string begins with the given `text`. See also `ends_with`.
			"""
    pass

  def ends_with(self, text:str)->bool:
    """
				Returns `true` if the string ends with the given `text`. See also `begins_with`.
			"""
    pass

  def is_subsequence_of(self, text:str)->bool:
    """
				Returns `true` if all characters of this string can be found in `text` in their original order. This is not the same as `contains`.
				```gdscript
				var text = "Wow, incredible!"

				print("inedible".is_subsequence_of(text)) # Prints true
				print("Word!".is_subsequence_of(text))    # Prints true
				print("Window".is_subsequence_of(text))   # Prints false
				print("".is_subsequence_of(text))         # Prints true
				```
			"""
    pass

  def is_subsequence_ofn(self, text:str)->bool:
    """
				Returns `true` if all characters of this string can be found in `text` in their original order, **ignoring case**. This is not the same as `containsn`.
			"""
    pass

  def bigrams(self)->PackedStringArray:
    """
				Returns an array containing the bigrams (pairs of consecutive characters) of this string.
				```gdscript
				print("Get up!".bigrams()) # Prints `"Ge", "et", "t ", " u", "up", "p!"`
				```
			"""
    pass

  def similarity(self, text:str)->float:
    """
				Returns the similarity index (`url=https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient`Sørensen-Dice coefficient`/url`) of this string compared to another. A result of `1.0` means totally similar, while `0.0` means totally dissimilar.
				```gdscript
				print("ABC123".similarity("ABC123")) # Prints 1.0
				print("ABC123".similarity("XYZ456")) # Prints 0.0
				print("ABC123".similarity("123ABC")) # Prints 0.8
				print("ABC123".similarity("abc123")) # Prints 0.4
				```
			"""
    pass

  def format(self, values:Any, placeholder:str= String.new0())->str:
    """
				Formats the string by replacing all occurrences of `placeholder` with the elements of `values`.
				`values` can be a `Dictionary`, an `Array`, or an `Object`. Any underscores in `placeholder` will be replaced with the corresponding keys in advance. Array elements use their index as keys.
				```gdscript
				# Prints "Waiting for Godot is a play by Samuel Beckett, and Godot Engine is named after it."
				var use_array_values = "Waiting for {0} is a play by {1}, and {0} Engine is named after it."
				print(use_array_values.format(`"Godot", "Samuel Beckett"`))

				# Prints "User 42 is Godot."
				print("User {id} is {name}.".format({"id": 42, "name": "Godot"}))
				```
				Some additional handling is performed when `values` is an `Array`. If `placeholder` does not contain an underscore, the elements of the `values` array will be used to replace one occurrence of the placeholder in order; If an element of `values` is another 2-element array, it'll be interpreted as a key-value pair.
				```gdscript
				# Prints "User 42 is Godot."
				print("User {} is {}.".format(`42, "Godot"`, "{}"))
				print("User {id} is {name}.".format(``"id", 42`, `"name", "Godot"``))
				```
				When passing an `Object`, the property names from `Object.get_property_list` are used as keys.
				```gdscript
				# Prints "Visible true, position (0, 0)"
				var node = Node2D.new()
				print("Visible {visible}, position {position}".format(node))
				```
				See also the `url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html`GDScript format string`/url` tutorial.
				**Note:** Each replacement is done sequentially for each element of `values`, **not** all at once. This means that if any element is inserted and it contains another placeholder, it may be changed by the next replacement. While this can be very useful, it often causes unexpected results. If not necessary, make sure `values`'s elements do not contain placeholders.
				```gdscript
				print("{0} {1}".format(`"{1}", "x"`))           # Prints "x x"
				print("{0} {1}".format(`"x", "{0}"`))           # Prints "x {0}"
				print("{a} {b}".format({"a": "{b}", "b": "c"})) # Prints "c c"
				print("{a} {b}".format({"b": "c", "a": "{b}"})) # Prints "{b} c"
				```
				**Note:** In C#, it's recommended to `url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated`interpolate strings with "$"`/url`, instead.
			"""
    pass

  def replace(self, what:str, forwhat:str)->str:
    """
				Replaces all occurrences of `what` inside the string with the given `forwhat`.
			"""
    pass

  def replacen(self, what:str, forwhat:str)->str:
    """
				Replaces all **case-insensitive** occurrences of `what` inside the string with the given `forwhat`.
			"""
    pass

  def repeat(self, count:int)->str:
    """
				Repeats this string a number of times. `count` needs to be greater than `0`. Otherwise, returns an empty string.
			"""
    pass

  def reverse(self)->str:
    """
				Returns the copy of this string in reverse order. This operation works on unicode codepoints, rather than sequences of codepoints, and may break things like compound letters or emojis.
			"""
    pass

  def insert(self, position:int, what:str)->str:
    """
				Inserts `what` at the given `position` in the string.
			"""
    pass

  def erase(self, position:int, chars:int=1)->str:
    """
				Returns a string with `chars` characters erased starting from `position`. If `chars` goes beyond the string's length given the specified `position`, fewer characters will be erased from the returned string. Returns an empty string if either `position` or `chars` is negative. Returns the original string unmodified if `chars` is `0`.
			"""
    pass

  def capitalize(self)->str:
    """
				Changes the appearance of the string: replaces underscores (`_`) with spaces, adds spaces before uppercase letters in the middle of a word, converts all letters to lowercase, then converts the first one and each one following a space to uppercase.
				
				```gdscript
				"move_local_x".capitalize()   # Returns "Move Local X"
				"sceneFile_path".capitalize() # Returns "Scene File Path"
				"2D, FPS, PNG".capitalize()   # Returns "2d, Fps, Png"
				```
				
				
			"""
    pass

  def to_camel_case(self)->str:
    """
				Returns the string converted to `camelCase`.
			"""
    pass

  def to_pascal_case(self)->str:
    """
				Returns the string converted to `PascalCase`.
			"""
    pass

  def to_snake_case(self)->str:
    """
				Returns the string converted to `snake_case`.
				**Note:** Numbers followed by a _single_ letter are not separated in the conversion to keep some words (such as "2D") together.
				
				```gdscript
				"Node2D".to_snake_case()               # Returns "node_2d"
				"2nd place".to_snake_case()            # Returns "2_nd_place"
				"Texture3DAssetFolder".to_snake_case() # Returns "texture_3d_asset_folder"
				```
				
				
			"""
    pass

  def split(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray:
    """
				Splits the string using a `delimiter` and returns an array of the substrings. If `delimiter` is an empty string, each substring will be a single character. This method is the opposite of `join`.
				If `allow_empty` is `false`, empty strings between adjacent delimiters are excluded from the array.
				If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split.
				
				```gdscript
				var some_array = "One,Two,Three,Four".split(",", true, 2)

				print(some_array.size()) # Prints 3
				print(some_array`0`)     # Prints "One"
				print(some_array`1`)     # Prints "Two"
				print(some_array`2`)     # Prints "Three,Four"
				```
				
				
				**Note:** If you only need one substring from the array, consider using `get_slice` which is faster. If you need to split strings with more complex rules, use the `RegEx` class instead.
			"""
    pass

  def rsplit(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray:
    """
				Splits the string using a `delimiter` and returns an array of the substrings, starting from the end of the string. The splits in the returned array appear in the same order as the original string. If `delimiter` is an empty string, each substring will be a single character.
				If `allow_empty` is `false`, empty strings between adjacent delimiters are excluded from the array.
				If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split, which is mostly identical to `split`.
				
				```gdscript
				var some_string = "One,Two,Three,Four"
				var some_array = some_string.rsplit(",", true, 1)

				print(some_array.size()) # Prints 2
				print(some_array`0`)     # Prints "One,Two,Three"
				print(some_array`1`)     # Prints "Four"
				```
				
				
			"""
    pass

  def split_floats(self, delimiter:str, allow_empty:bool=True)->PackedFloat64Array:
    """
				Splits the string into floats by using a `delimiter` and returns a `PackedFloat64Array`.
				If `allow_empty` is `false`, empty or invalid `float` conversions between adjacent delimiters are excluded.
				```gdscript
				var a = "1,2,4.5".split_floats(",")         # a is `1.0, 2.0, 4.5`
				var c = "1| ||4.5".split_floats("|")        # c is `1.0, 0.0, 0.0, 4.5`
				var b = "1| ||4.5".split_floats("|", false) # b is `1.0, 4.5`
				```
			"""
    pass

  def join(self, parts:PackedStringArray)->str:
    """
				Returns the concatenation of `parts`' elements, with each element separated by the string calling this method. This method is the opposite of `split`.
				
				```gdscript
				var fruits = `"Apple", "Orange", "Pear", "Kiwi"`

				print(", ".join(fruits))  # Prints "Apple, Orange, Pear, Kiwi"
				print("---".join(fruits)) # Prints "Apple---Orange---Pear---Kiwi"
				```
				
				
			"""
    pass

  def to_upper(self)->str:
    """
				Returns the string converted to `UPPERCASE`.
			"""
    pass

  def to_lower(self)->str:
    """
				Returns the string converted to `lowercase`.
			"""
    pass

  def left(self, length:int)->str:
    """
				Returns the first `length` characters from the beginning of the string. If `length` is negative, strips the last `length` characters from the string's end.
				```gdscript
				print("Hello World!".left(3))  # Prints "Hel"
				print("Hello World!".left(-4)) # Prints "Hello Wo"
				```
			"""
    pass

  def right(self, length:int)->str:
    """
				Returns the last `length` characters from the end of the string. If `length` is negative, strips the first `length` characters from the string's beginning.
				```gdscript
				print("Hello World!".right(3))  # Prints "ld!"
				print("Hello World!".right(-4)) # Prints "o World!"
				```
			"""
    pass

  def strip_edges(self, left:bool=True, right:bool=True)->str:
    """
				Strips all non-printable characters from the beginning and the end of the string. These include spaces, tabulations (`\t`), and newlines (`\n` `\r`).
				If `left` is `false`, ignores the string's beginning. Likewise, if `right` is `false`, ignores the string's end.
			"""
    pass

  def strip_escapes(self)->str:
    """
				Strips all escape characters from the string. These include all non-printable control characters of the first page of the ASCII table (values from 0 to 31), such as tabulation (`\t`) and newline (`\n`, `\r`) characters, but _not_ spaces.
			"""
    pass

  def lstrip(self, chars:str)->str:
    """
				Removes a set of characters defined in `chars` from the string's beginning. See also `rstrip`.
				**Note:** `chars` is not a prefix. Use `trim_prefix` to remove a single prefix, rather than a set of characters.
			"""
    pass

  def rstrip(self, chars:str)->str:
    """
				Removes a set of characters defined in `chars` from the string's end. See also `lstrip`.
				**Note:** `chars` is not a suffix. Use `trim_suffix` to remove a single suffix, rather than a set of characters.
			"""
    pass

  def get_extension(self)->str:
    """
				If the string is a valid file name or path, returns the file extension without the leading period (`.`). Otherwise, returns an empty string.
				```gdscript
				var a = "/path/to/file.txt".get_extension() # a is "txt"
				var b = "cool.txt".get_extension()          # b is "txt"
				var c = "cool.font.tres".get_extension()    # c is "tres"
				var d = ".pack1".get_extension()            # d is "pack1"

				var e = "file.txt.".get_extension()  # e is ""
				var f = "file.txt..".get_extension() # f is ""
				var g = "txt".get_extension()        # g is ""
				var h = "".get_extension()           # h is ""
				```
			"""
    pass

  def get_basename(self)->str:
    """
				If the string is a valid file path, returns the full file path, without the extension.
				```gdscript
				var base = "/path/to/file.txt".get_basename() # base is "/path/to/file"
				```
			"""
    pass

  def path_join(self, file:str)->str:
    """
				Concatenates `path` at the end of the string as a subpath, adding `/` if necessary.
				**Example:** `"this/is".path_join("path") == "this/is/path"`.
			"""
    pass

  def unicode_at(self, at:int)->int:
    """
				Returns the character code at position `at`.
				See also `String.chr`, `@GDScript.char`, and `@GDScript.ord`.
			"""
    pass

  def indent(self, prefix:str)->str:
    """
				Indents every line of the string with the given `prefix`. Empty lines are not indented. See also `dedent` to remove indentation.
				For example, the string can be indented with two tabulations using `"\t\t"`, or four spaces using `"    "`.
			"""
    pass

  def dedent(self)->str:
    """
				Returns a copy of the string with indentation (leading tabs and spaces) removed. See also `indent` to add indentation.
			"""
    pass

  def md5_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/MD5`MD5 hash`/url` of the string as another `String`.
			"""
    pass

  def sha1_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-1`SHA-1`/url` hash of the string as another `String`.
			"""
    pass

  def sha256_text(self)->str:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-2`SHA-256`/url` hash of the string as another `String`.
			"""
    pass

  def md5_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/MD5`MD5 hash`/url` of the string as a `PackedByteArray`.
			"""
    pass

  def sha1_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-1`SHA-1`/url` hash of the string as a `PackedByteArray`.
			"""
    pass

  def sha256_buffer(self)->PackedByteArray:
    """
				Returns the `url=https://en.wikipedia.org/wiki/SHA-2`SHA-256`/url` hash of the string as a `PackedByteArray`.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the string's length is `0` (`""`). See also `length`.
			"""
    pass

  def contains(self, what:str)->bool:
    """
				Returns `true` if the string contains `what`. In GDScript, this corresponds to the `in` operator.
				
				```gdscript
				print("Node".contains("de")) # Prints true
				print("team".contains("I"))  # Prints false
				print("I" in "team")         # Prints false
				```
				
				
				If you need to know where `what` is within the string, use `find`. See also `containsn`.
			"""
    pass

  def containsn(self, what:str)->bool:
    """
				Returns `true` if the string contains `what`, **ignoring case**.
				If you need to know where `what` is within the string, use `findn`. See also `contains`.
			"""
    pass

  def is_absolute_path(self)->bool:
    """
				Returns `true` if the string is a path to a file or directory, and its starting point is explicitly defined. This method is the opposite of `is_relative_path`.
				This includes all paths starting with `"res://"`, `"user://"`, `"C:\"`, `"/"`, etc.
			"""
    pass

  def is_relative_path(self)->bool:
    """
				Returns `true` if the string is a path, and its starting point is dependent on context. The path could begin from the current directory, or the current `Node` (if the string is derived from a `NodePath`), and may sometimes be prefixed with `"./"`. This method is the opposite of `is_absolute_path`.
			"""
    pass

  def simplify_path(self)->str:
    """
				If the string is a valid file path, converts the string into a canonical path. This is the shortest possible path, without `"./"`, and all the unnecessary `".."` and `"/"`.
				```gdscript
				var simple_path = "./path/to///../file".simplify_path()
				print(simple_path) # Prints "path/file"
				```
			"""
    pass

  def get_base_dir(self)->str:
    """
				If the string is a valid file path, returns the base directory name.
				```gdscript
				var dir_path = "/path/to/file.txt".get_base_dir() # dir_path is "/path/to"
				```
			"""
    pass

  def get_file(self)->str:
    """
				If the string is a valid file path, returns the file name, including the extension.
				```gdscript
				var file = "/path/to/icon.png".get_file() # file is "icon.png"
				```
			"""
    pass

  def xml_escape(self, escape_quotes:bool=False)->str:
    """
				Returns a copy of the string with special characters escaped using the XML standard. If `escape_quotes` is `true`, the single quote (`'`) and double quote (`"`) characters are also escaped.
			"""
    pass

  def xml_unescape(self)->str:
    """
				Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.
			"""
    pass

  def uri_encode(self)->str:
    """
				Encodes the string to URL-friendly format. This method is meant to properly encode the parameters in a URL when sending an HTTP request. See also `uri_decode`.
				
				```gdscript
				var prefix = "$DOCS_URL/?highlight="
				var url = prefix + "Godot Engine:docs".uri_encode()

				print(url) # Prints "$DOCS_URL/?highlight=Godot%20Engine%3%docs"
				```
				
				
			"""
    pass

  def uri_decode(self)->str:
    """
				Decodes the string from its URL-encoded format. This method is meant to properly decode the parameters in a URL when receiving an HTTP request. See also `uri_encode`.
				
				```gdscript
				var url = "$DOCS_URL/?highlight=Godot%20Engine%3%docs"
				print(url.uri_decode()) # Prints "$DOCS_URL/?highlight=Godot Engine:docs"
				```
				
				
				**Note:** This method decodes `+` as space.
			"""
    pass

  def c_escape(self)->str:
    """
				Returns a copy of the string with special characters escaped using the C language standard.
			"""
    pass

  def c_unescape(self)->str:
    """
				Returns a copy of the string with escaped characters replaced by their meanings. Supported escape sequences are `\'`, `\"`, `\\`, `\a`, `\b`, `\f`, `\n`, `\r`, `\t`, `\v`.
				**Note:** Unlike the GDScript parser, this method doesn't support the `\uXXXX` escape sequence.
			"""
    pass

  def json_escape(self)->str:
    """
				Returns a copy of the string with special characters escaped using the JSON standard. Because it closely matches the C standard, it is possible to use `c_unescape` to unescape the string, if necessary.
			"""
    pass

  def validate_node_name(self)->str:
    """
				Returns a copy of the string with all characters that are not allowed in `Node.name` (`.` `:` `@` `/` `"` `%`) replaced with underscores.
			"""
    pass

  def validate_filename(self)->str:
    """
				Returns a copy of the string with all characters that are not allowed in `is_valid_filename` replaced with underscores.
			"""
    pass

  def is_valid_ascii_identifier(self)->bool:
    """
				Returns `true` if this string is a valid ASCII identifier. A valid ASCII identifier may contain only letters, digits, and underscores (`_`), and the first character may not be a digit.
				```gdscript
				print("node_2d".is_valid_ascii_identifier())    # Prints true
				print("TYPE_FLOAT".is_valid_ascii_identifier()) # Prints true
				print("1st_method".is_valid_ascii_identifier()) # Prints false
				print("MyMethod#2".is_valid_ascii_identifier()) # Prints false
				```
				See also `is_valid_unicode_identifier`.
			"""
    pass

  def is_valid_unicode_identifier(self)->bool:
    """
				Returns `true` if this string is a valid Unicode identifier.
				A valid Unicode identifier must begin with a Unicode character of class `XID_Start` or `"_"`, and may contain Unicode characters of class `XID_Continue` in the other positions.
				```gdscript
				print("node_2d".is_valid_unicode_identifier())      # Prints true
				print("1st_method".is_valid_unicode_identifier())   # Prints false
				print("MyMethod#2".is_valid_unicode_identifier())   # Prints false
				print("állóképesség".is_valid_unicode_identifier()) # Prints true
				print("выносливость".is_valid_unicode_identifier()) # Prints true
				print("体力".is_valid_unicode_identifier())         # Prints true
				```
				See also `is_valid_ascii_identifier`.
				**Note:** This method checks identifiers the same way as GDScript. See `TextServer.is_valid_identifier` for more advanced checks.
			"""
    pass

  def is_valid_identifier(self)->bool:
    """
				Returns `true` if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (`_`), and the first character may not be a digit.
				```gdscript
				print("node_2d".is_valid_identifier())    # Prints true
				print("TYPE_FLOAT".is_valid_identifier()) # Prints true
				print("1st_method".is_valid_identifier()) # Prints false
				print("MyMethod#2".is_valid_identifier()) # Prints false
				```
			"""
    pass

  def is_valid_int(self)->bool:
    """
				Returns `true` if this string represents a valid integer. A valid integer only contains digits, and may be prefixed with a positive (`+`) or negative (`-`) sign. See also `to_int`.
				```gdscript
				print("7".is_valid_int())    # Prints true
				print("1.65".is_valid_int()) # Prints false
				print("Hi".is_valid_int())   # Prints false
				print("+3".is_valid_int())   # Prints true
				print("-12".is_valid_int())  # Prints true
				```
			"""
    pass

  def is_valid_float(self)->bool:
    """
				Returns `true` if this string represents a valid floating-point number. A valid float may contain only digits, one decimal point (`.`), and the exponent letter (`e`). It may also be prefixed with a positive (`+`) or negative (`-`) sign. Any valid integer is also a valid float (see `is_valid_int`). See also `to_float`.
				```gdscript
				print("1.7".is_valid_float())   # Prints true
				print("24".is_valid_float())    # Prints true
				print("7e3".is_valid_float())   # Prints true
				print("Hello".is_valid_float()) # Prints false
				```
			"""
    pass

  def is_valid_hex_number(self, with_prefix:bool=False)->bool:
    """
				Returns `true` if this string is a valid hexadecimal number. A valid hexadecimal number only contains digits or letters `A` to `F` (either uppercase or lowercase), and may be prefixed with a positive (`+`) or negative (`-`) sign.
				If `with_prefix` is `true`, the hexadecimal number needs to prefixed by `"0x"` to be considered valid.
				```gdscript
				print("A08E".is_valid_hex_number())    # Prints true
				print("-AbCdEf".is_valid_hex_number()) # Prints true
				print("2.5".is_valid_hex_number())     # Prints false

				print("0xDEADC0DE".is_valid_hex_number(true)) # Prints true
				```
			"""
    pass

  def is_valid_html_color(self)->bool:
    """
				Returns `true` if this string is a valid color in hexadecimal HTML notation. The string must be a hexadecimal value (see `is_valid_hex_number`) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). Other HTML notations for colors, such as names or `hsl()`, are not considered valid. See also `Color.html`.
			"""
    pass

  def is_valid_ip_address(self)->bool:
    """
				Returns `true` if this string represents a well-formatted IPv4 or IPv6 address. This method considers `url=https://en.wikipedia.org/wiki/Reserved_IP_addresses`reserved IP addresses`/url` such as `"0.0.0.0"` and `"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"` as valid.
			"""
    pass

  def is_valid_filename(self)->bool:
    """
				Returns `true` if this string is a valid file name. A valid file name cannot be empty, begin or end with space characters, or contain characters that are not allowed (`:` `/` `\` `?` `*` `"` `|` `%` `<` `>`).
			"""
    pass

  def to_int(self)->int:
    """
				Converts the string representing an integer number into an `int`. This method removes any non-number character and stops at the first decimal point (`.`). See also `is_valid_int`.
				```gdscript
				var a = "123".to_int()    # a is 123
				var b = "x1y2z3".to_int() # b is 123
				var c = "-1.2.3".to_int() # c is -1
				var d = "Hello!".to_int() # d is 0
				```
			"""
    pass

  def to_float(self)->float:
    """
				Converts the string representing a decimal number into a `float`. This method stops on the first non-number character, except the first decimal point (`.`) and the exponent letter (`e`). See also `is_valid_float`.
				```gdscript
				var a = "12.35".to_float()  # a is 12.35
				var b = "1.2.3".to_float()  # b is 1.2
				var c = "12xy3".to_float()  # c is 12.0
				var d = "1e3".to_float()    # d is 1000.0
				var e = "Hello!".to_float() # e is 0.0
				```
			"""
    pass

  def hex_to_int(self)->int:
    """
				Converts the string representing a hexadecimal number into an `int`. The string may be optionally prefixed with `"0x"`, and an additional `-` prefix for negative numbers.
				
				```gdscript
				print("0xff".hex_to_int()) # Prints 255
				print("ab".hex_to_int())   # Prints 171
				```
				
				
			"""
    pass

  def bin_to_int(self)->int:
    """
				Converts the string representing a binary number into an `int`. The string may optionally be prefixed with `"0b"`, and an additional `-` prefix for negative numbers.
				
				```gdscript
				print("101".bin_to_int())   # Prints 5
				print("0b101".bin_to_int()) # Prints 5
				print("-0b10".bin_to_int()) # Prints -2
				```
				
				
			"""
    pass

  def lpad(self, min_length:int, character:str= String.new0())->str:
    """
				Formats the string to be at least `min_length` long by adding `character`s to the left of the string, if necessary. See also `rpad`.
			"""
    pass

  def rpad(self, min_length:int, character:str= String.new0())->str:
    """
				Formats the string to be at least `min_length` long, by adding `character`s to the right of the string, if necessary. See also `lpad`.
			"""
    pass

  def pad_decimals(self, digits:int)->str:
    """
				Formats the string representing a number to have an exact number of `digits` _after_ the decimal point.
			"""
    pass

  def pad_zeros(self, digits:int)->str:
    """
				Formats the string representing a number to have an exact number of `digits` _before_ the decimal point.
			"""
    pass

  def trim_prefix(self, prefix:str)->str:
    """
				Removes the given `prefix` from the start of the string, or returns the string unchanged.
			"""
    pass

  def trim_suffix(self, suffix:str)->str:
    """
				Removes the given `suffix` from the end of the string, or returns the string unchanged.
			"""
    pass

  def to_ascii_buffer(self)->PackedByteArray:
    """
				Converts the string to an `url=https://en.wikipedia.org/wiki/ASCII`ASCII`/url`/Latin-1 encoded `PackedByteArray`. This method is slightly faster than `to_utf8_buffer`, but replaces all unsupported characters with spaces. This is the inverse of `PackedByteArray.get_string_from_ascii`.
			"""
    pass

  def to_utf8_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-8`UTF-8`/url` encoded `PackedByteArray`. This method is slightly slower than `to_ascii_buffer`, but supports all UTF-8 characters. For most cases, prefer using this method. This is the inverse of `PackedByteArray.get_string_from_utf8`.
			"""
    pass

  def to_utf16_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-16`UTF-16`/url` encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_utf16`.
			"""
    pass

  def to_utf32_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/UTF-32`UTF-32`/url` encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_utf32`.
			"""
    pass

  def hex_decode(self)->PackedByteArray:
    """
				Decodes a hexadecimal string as a `PackedByteArray`.
				
				```gdscript
				var text = "hello world"
				var encoded = text.to_utf8_buffer().hex_encode() # outputs "68656c6c6f20776f726c64"
				print(encoded.hex_decode().get_string_from_utf8())
				```
				
				
			"""
    pass

  def to_wchar_buffer(self)->PackedByteArray:
    """
				Converts the string to a `url=https://en.wikipedia.org/wiki/Wide_character`wide character`/url` (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded `PackedByteArray`. This is the inverse of `PackedByteArray.get_string_from_wchar`.
			"""
    pass

  def hash(self)->int:
    """
				Returns the 32-bit hash value representing the string's contents.
				**Note:** Strings with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. On the contrary, strings with different hash values are guaranteed to be different.
			"""
    pass

  def __eq__(self, other:Any|str|StringName|str) -> bool: pass
  def __ne__(self, other:Any|str|StringName|str) -> bool: pass
  def __mod__(self, other:Any|bool|int|float|str|Vector2|Vector2i|Rect2|Rect2i|Vector3|Vector3i|Transform2D|Vector4|Vector4i|Plane|Quaternion|AABB|Basis|Transform3D|Projection|Color|StringName|str|NodePath|str|__object__.Object|Callable|Signal|Dictionary|Array|PackedByteArray|PackedInt32Array|PackedInt64Array|PackedFloat32Array|PackedFloat64Array|PackedStringArray|PackedVector2Array|PackedVector3Array|PackedColorArray|PackedVector4Array) -> String: pass
  def __add__(self, other:str|StringName|str) -> String: pass
  def __lt__(self, other:StringName|str) -> bool: pass
  def __le__(self, other:StringName|str) -> bool: pass
  def __gt__(self, other:StringName|str) -> bool: pass
  def __ge__(self, other:StringName|str) -> bool: pass



class NodePath(VariantTypeWrapper4):
  """
		The `NodePath` built-in `Variant` type represents a path to a node or property in a hierarchy of nodes. It is designed to be efficiently passed into many built-in methods (such as `Node.get_node`, `Object.set_indexed`, `Tween.tween_property`, etc.) without a hard dependence on the node or property they point to.
		A node path is represented as a `String` composed of slash-separated (`/`) node names and colon-separated (`:`) property names (also called "subnames"). Similar to a filesystem path, `".."` and `"."` are special node names. They refer to the parent node and the current node, respectively.
		The following examples are paths relative to the current node:
		```gdscript
		^"A"     # Points to the direct child A.
		^"A/B"   # Points to A's child B.
		^"."     # Points to the current node.
		^".."    # Points to the parent node.
		^"../C"  # Points to the sibling node C.
		^"../.." # Points to the grandparent node.
		```
		A leading slash means the path is absolute, and begins from the `SceneTree`:
		```gdscript
		^"/root"            # Points to the SceneTree's root Window.
		^"/root/Title"      # May point to the main scene's root node named "Title".
		^"/root/Global"     # May point to an autoloaded node or scene named "Global".
		```
		Despite their name, node paths may also point to a property:
		```gdscript
		^":position"           # Points to this object's position.
		^":position:x"         # Points to this object's position in the x axis.
		^"Camera3D:rotation:y" # Points to the child Camera3D and its y rotation.
		^"/root:size:x"        # Points to the root Window and its width.
		```
		In some situations, it's possible to omit the leading `:` when pointing to an object's property. As an example, this is the case with `Object.set_indexed` and `Tween.tween_property`, as those methods call `NodePath.get_as_property_path` under the hood. However, it's generally recommended to keep the `:` prefix.
		Node paths cannot check whether they are valid and may point to nodes or properties that do not exist. Their meaning depends entirely on the context in which they're used.
		You usually do not have to worry about the `NodePath` type, as strings are automatically converted to the type when necessary. There are still times when defining node paths is useful. For example, exported `NodePath` properties allow you to easily select any node within the currently edited scene. They are also automatically updated when moving, renaming or deleting nodes in the scene tree editor. See also `annotation @GDScript.@export_node_path`.
		See also `StringName`, which is a similar type designed for optimized strings.
		**Note:** In a boolean context, a `NodePath` will evaluate to `false` if it is empty (`NodePath("")`). Otherwise, a `NodePath` will always evaluate to `true`.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->NodePath:pass


  @staticmethod
  def new0() -> NodePath|str:pass
  @staticmethod
  def new1(from_:NodePath|str) -> NodePath|str:pass
  @staticmethod
  def new2(from_:str) -> NodePath|str:pass



  def is_absolute(self)->bool:
    """
				Returns `true` if the node path is absolute. Unlike a relative path, an absolute path is represented by a leading slash character (`/`) and always begins from the `SceneTree`. It can be used to reliably access nodes from the root node (e.g. `"/root/Global"` if an autoload named "Global" exists).
			"""
    pass

  def get_name_count(self)->int:
    """
				Returns the number of node names in the path. Property subnames are not included.
				For example, `"../RigidBody2D/Sprite2D:texture"` contains 3 node names.
			"""
    pass

  def get_name(self, idx:int)->StringName:
    """
				Returns the node name indicated by `idx`, starting from 0. If `idx` is out of bounds, an error is generated. See also `get_subname_count` and `get_name_count`.
				
				```gdscript
				var sprite_path = NodePath("../RigidBody2D/Sprite2D")
				print(sprite_path.get_name(0)) # Prints ".."
				print(sprite_path.get_name(1)) # Prints "RigidBody2D"
				print(sprite_path.get_name(2)) # Prints "Sprite"
				```
				
				
			"""
    pass

  def get_subname_count(self)->int:
    """
				Returns the number of property names ("subnames") in the path. Each subname in the node path is listed after a colon character (`:`).
				For example, `"Level/RigidBody2D/Sprite2D:texture:resource_name"` contains 2 subnames.
			"""
    pass

  def hash(self)->int:
    """
				Returns the 32-bit hash value representing the node path's contents.
				**Note:** Node paths with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. Node paths with different hash values are guaranteed to be different.
			"""
    pass

  def get_subname(self, idx:int)->StringName:
    """
				Returns the property name indicated by `idx`, starting from 0. If `idx` is out of bounds, an error is generated. See also `get_subname_count`.
				
				```gdscript
				var path_to_name = NodePath("Sprite2D:texture:resource_name")
				print(path_to_name.get_subname(0)) # Prints "texture"
				print(path_to_name.get_subname(1)) # Prints "resource_name"
				```
				
				
			"""
    pass

  def get_concatenated_names(self)->StringName:
    """
				Returns all node names concatenated with a slash character (`/`) as a single `StringName`.
			"""
    pass

  def get_concatenated_subnames(self)->StringName:
    """
				Returns all property subnames concatenated with a colon character (`:`) as a single `StringName`.
				
				```gdscript
				var node_path = ^"Sprite2D:texture:resource_name"
				print(node_path.get_concatenated_subnames()) # Prints "texture:resource_name"
				```
				
				
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->NodePath:
    """
				Returns the slice of the `NodePath`, from `begin` (inclusive) to `end` (exclusive), as a new `NodePath`.
				The absolute value of `begin` and `end` will be clamped to the sum of `get_name_count` and `get_subname_count`, so the default value for `end` makes it slice to the end of the `NodePath` by default (i.e. `path.slice(1)` is a shorthand for `path.slice(1, path.get_name_count() + path.get_subname_count())`).
				If either `begin` or `end` are negative, they will be relative to the end of the `NodePath` (i.e. `path.slice(0, -2)` is a shorthand for `path.slice(0, path.get_name_count() + path.get_subname_count() - 2)`).
			"""
    pass

  def get_as_property_path(self)->NodePath:
    """
				Returns a copy of this node path with a colon character (`:`) prefixed, transforming it to a pure property path with no node names (relative to the current node).
				
				```gdscript
				# node_path points to the "x" property of the child node named "position".
				var node_path = ^"position:x"

				# property_path points to the "position" in the "x" axis of this node.
				var property_path = node_path.get_as_property_path()
				print(property_path) # Prints ":position:x"
				```
				
				
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the node path has been constructed from an empty `String` (`""`).
			"""
    pass

  def __eq__(self, other:Any|NodePath|str) -> bool: pass
  def __ne__(self, other:Any|NodePath|str) -> bool: pass



class RID(VariantTypeWrapper4):
  """
		The RID `Variant` type is used to access a low-level resource by its unique ID. RIDs are opaque, which means they do not grant access to the resource by themselves. They are used by the low-level server classes, such as `DisplayServer`, `RenderingServer`, `TextServer`, etc.
		A low-level resource may correspond to a high-level `Resource`, such as `Texture` or `Mesh`.
		**Note:** RIDs are only useful during the current session. It won't correspond to a similar resource if sent over a network, or loaded from a file at a later time.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->RID:pass


  @staticmethod
  def new0() -> RID:pass
  @staticmethod
  def new1(from_:RID) -> RID:pass



  def is_valid(self)->bool:
    """
				Returns `true` if the `RID` is not `0`.
			"""
    pass

  def get_id(self)->int:
    """
				Returns the ID of the referenced low-level resource.
			"""
    pass

  def __eq__(self, other:Any|RID) -> bool: pass
  def __ne__(self, other:Any|RID) -> bool: pass
  def __lt__(self, other:RID) -> bool: pass
  def __le__(self, other:RID) -> bool: pass
  def __gt__(self, other:RID) -> bool: pass
  def __ge__(self, other:RID) -> bool: pass



class Callable(VariantTypeWrapper4):
  """
		`Callable` is a built-in `Variant` type that represents a function. It can either be a method within an `Object` instance, or a custom callable used for different purposes (see `is_custom`). Like all `Variant` types, it can be stored in variables and passed to other functions. It is most commonly used for signal callbacks.
		
		```gdscript
		func print_args(arg1, arg2, arg3 = ""):
			prints(arg1, arg2, arg3)

		func test():
			var callable = Callable(self, "print_args")
			callable.call("hello", "world")  # Prints "hello world ".
			callable.call(Vector2.UP, 42, callable)  # Prints "(0.0, -1.0) 42 Node(node.gd)::print_args"
			callable.call("invalid")  # Invalid call, should have at least 2 arguments.
		```
		
		
		In GDScript, it's possible to create lambda functions within a method. Lambda functions are custom callables that are not associated with an `Object` instance. Optionally, lambda functions can also be named. The name will be displayed in the debugger, or when calling `get_method`.
		```gdscript
		func _init():
			var my_lambda = func (message):
				print(message)

			# Prints "Hello everyone!"
			my_lambda.call("Hello everyone!")

			# Prints "Attack!", when the button_pressed signal is emitted.
			button_pressed.connect(func(): print("Attack!"))
		```
		In GDScript, you can access methods and global functions as `Callable`s:
		```gdscript
		tween.tween_callback(node.queue_free)  # Object methods.
		tween.tween_callback(array.clear)  # Methods of built-in types.
		tween.tween_callback(print.bind("Test"))  # Global functions.
		```
		**Note:** `Dictionary` does not support the above due to ambiguity with keys.
		```gdscript
		var dictionary = { "hello": "world" }

		# This will not work, `clear` is treated as a key.
		tween.tween_callback(dictionary.clear)

		# This will work.
		tween.tween_callback(Callable.create(dictionary, "clear"))
		```
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Callable:pass


  @staticmethod
  def new0() -> Callable:pass
  @staticmethod
  def new1(from_:Callable) -> Callable:pass
  @staticmethod
  def new2(object:__object__.Object, method:StringName|str) -> Callable:pass



  @staticmethod
  def create(variant:Any, method:StringName|str)->Callable:
    """
				Creates a new `Callable` for the method named `method` in the specified `variant`. To represent a method of a built-in `Variant` type, a custom callable is used (see `is_custom`). If `variant` is `Object`, then a standard callable will be created instead.
				**Note:** This method is always necessary for the `Dictionary` type, as property syntax is used to access its entries. You may also use this method when `variant`'s type is not known in advance (for polymorphism).
			"""
    pass

  def callv(self, arguments:Array)->Any:
    """
				Calls the method represented by this `Callable`. Unlike `call`, this method expects all arguments to be contained inside the `arguments` `Array`.
			"""
    pass

  def is_null(self)->bool:
    """
				Returns `true` if this `Callable` has no target to call the method on. Equivalent to `callable == Callable()`.
				**Note:** This is _not_ the same as `not is_valid()` and using `not is_null()` will _not_ guarantee that this callable can be called. Use `is_valid` instead.
			"""
    pass

  def is_custom(self)->bool:
    """
				Returns `true` if this `Callable` is a custom callable. Custom callables are used:
				- for binding/unbinding arguments (see `bind` and `unbind`);
				- for representing methods of built-in `Variant` types (see `create`);
				- for representing global, lambda, and RPC functions in GDScript;
				- for other purposes in the core, GDExtension, and C#.
			"""
    pass

  def is_standard(self)->bool:
    """
				Returns `true` if this `Callable` is a standard callable. This method is the opposite of `is_custom`. Returns `false` if this callable is a lambda function.
			"""
    pass

  def is_valid(self)->bool:
    """
				Returns `true` if the callable's object exists and has a valid method name assigned, or is a custom callable.
			"""
    pass

  def get_object(self)->object:
    """
				Returns the object on which this `Callable` is called.
			"""
    pass

  def get_object_id(self)->int:
    """
				Returns the ID of this `Callable`'s object (see `Object.get_instance_id`).
			"""
    pass

  def get_method(self)->StringName:
    """
				Returns the name of the method represented by this `Callable`. If the callable is a GDScript lambda function, returns the function's name or `"<anonymous lambda>"`.
			"""
    pass

  def get_argument_count(self)->int:
    """
				Returns the total number of arguments this `Callable` should take, including optional arguments. This means that any arguments bound with `bind` are _subtracted_ from the result, and any arguments unbound with `unbind` are _added_ to the result.
			"""
    pass

  def get_bound_arguments_count(self)->int:
    """
				Returns the total amount of arguments bound via successive `bind` or `unbind` calls. This is the same as the size of the array returned by `get_bound_arguments`. See `get_bound_arguments` for details.
				**Note:** The `get_bound_arguments_count` and `get_unbound_arguments_count` methods can both return positive values.
			"""
    pass

  def get_bound_arguments(self)->Array:
    """
				Returns the array of arguments bound via successive `bind` or `unbind` calls. These arguments will be added _after_ the arguments passed to the call, from which `get_unbound_arguments_count` arguments on the right have been previously excluded.
				```gdscript
				func get_effective_arguments(callable, call_args):
					assert(call_args.size() - callable.get_unbound_arguments_count() >= 0)
					var result = call_args.slice(0, call_args.size() - callable.get_unbound_arguments_count())
					result.append_array(callable.get_bound_arguments())
					return result
				```
			"""
    pass

  def get_unbound_arguments_count(self)->int:
    """
				Returns the total amount of arguments unbound via successive `bind` or `unbind` calls. See `get_bound_arguments` for details.
				**Note:** The `get_bound_arguments_count` and `get_unbound_arguments_count` methods can both return positive values.
			"""
    pass

  def hash(self)->int:
    """
				Returns the 32-bit hash value of this `Callable`'s object.
				**Note:** `Callable`s with equal content will always produce identical hash values. However, the reverse is not true. Returning identical hash values does _not_ imply the callables are equal, because different callables can have identical hash values due to hash collisions. The engine uses a 32-bit hash algorithm for `hash`.
			"""
    pass

  def bindv(self, arguments:Array)->Callable:
    """
				Returns a copy of this `Callable` with one or more arguments bound, reading them from an array. When called, the bound arguments are passed _after_ the arguments supplied by `call`. See also `unbind`.
				**Note:** When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
			"""
    pass

  def unbind(self, argcount:int)->Callable:
    """
				Returns a copy of this `Callable` with a number of arguments unbound. In other words, when the new callable is called the last few arguments supplied by the user are ignored, according to `argcount`. The remaining arguments are passed to the callable. This allows to use the original callable in a context that attempts to pass more arguments than this callable can handle, e.g. a signal with a fixed number of arguments. See also `bind`.
				**Note:** When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
				```gdscript
				func _ready():
					foo.unbind(1).call(1, 2) # Calls foo(1).
					foo.bind(3, 4).unbind(1).call(1, 2) # Calls foo(1, 3, 4), note that it does not change the arguments from bind.
				```
			"""
    pass

  def call(self)->Any:
    """
				Calls the method represented by this `Callable`. Arguments can be passed and should match the method's signature.
			"""
    pass

  def call_deferred(self)->None:
    """
				Calls the method represented by this `Callable` in deferred mode, i.e. at the end of the current frame. Arguments can be passed and should match the method's signature.
				
				```gdscript
				func _ready():
					grab_focus.call_deferred()
				```
				
				
				**Note:** Deferred calls are processed at idle time. Idle time happens mainly at the end of process and physics frames. In it, deferred calls will be run until there are none left, which means you can defer calls from other deferred calls and they'll still be run in the current idle time cycle. This means you should not call a method deferred from itself (or from a method called by it), as this causes infinite recursion the same way as if you had called the method directly.
				See also `Object.call_deferred`.
			"""
    pass

  def rpc(self)->None:
    """
				Perform an RPC (Remote Procedure Call) on all connected peers. This is used for multiplayer and is normally not available, unless the function being called has been marked as _RPC_ (using `annotation @GDScript.@rpc` or `Node.rpc_config`). Calling this method on unsupported functions will result in an error. See `Node.rpc`.
			"""
    pass

  def rpc_id(self, peer_id:int)->None:
    """
				Perform an RPC (Remote Procedure Call) on a specific peer ID (see multiplayer documentation for reference). This is used for multiplayer and is normally not available unless the function being called has been marked as _RPC_ (using `annotation @GDScript.@rpc` or `Node.rpc_config`). Calling this method on unsupported functions will result in an error. See `Node.rpc_id`.
			"""
    pass

  def bind(self)->Callable:
    """
				Returns a copy of this `Callable` with one or more arguments bound. When called, the bound arguments are passed _after_ the arguments supplied by `call`. See also `unbind`.
				**Note:** When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
			"""
    pass

  def __eq__(self, other:Any|Callable) -> bool: pass
  def __ne__(self, other:Any|Callable) -> bool: pass



class Signal(VariantTypeWrapper4):
  """
		`Signal` is a built-in `Variant` type that represents a signal of an `Object` instance. Like all `Variant` types, it can be stored in variables and passed to functions. Signals allow all connected `Callable`s (and by extension their respective objects) to listen and react to events, without directly referencing one another. This keeps the code flexible and easier to manage. You can check whether an `Object` has a given signal name using `Object.has_signal`.
		In GDScript, signals can be declared with the `signal` keyword. In C#, you may use the ``Signal`` attribute on a delegate.
		
		```gdscript
		signal attacked

		# Additional arguments may be declared.
		# These arguments must be passed when the signal is emitted.
		signal item_dropped(item_name, amount)
		```
		
		
		Connecting signals is one of the most common operations in Godot and the API gives many options to do so, which are described further down. The code block below shows the recommended approach.
		
		```gdscript
		func _ready():
			var button = Button.new()
			# `button_down` here is a Signal Variant type. We therefore call the Signal.connect() method, not Object.connect().
			# See discussion below for a more in-depth overview of the API.
			button.button_down.connect(_on_button_down)

			# This assumes that a `Player` class exists, which defines a `hit` signal.
			var player = Player.new()
			# We use Signal.connect() again, and we also use the Callable.bind() method,
			# which returns a new Callable with the parameter binds.
			player.hit.connect(_on_player_hit.bind("sword", 100))

		func _on_button_down():
			print("Button down!")

		func _on_player_hit(weapon_type, damage):
			print("Hit with weapon %s for %d damage." % `weapon_type, damage`)
		```
		
		
		**`code skip-lint`Object.connect()` or `code skip-lint`Signal.connect()`?**
		As seen above, the recommended method to connect signals is not `Object.connect`. The code block below shows the four options for connecting signals, using either this legacy method or the recommended `Signal.connect`, and using either an implicit `Callable` or a manually defined one.
		
		```gdscript
		func _ready():
			var button = Button.new()
			# Option 1: Object.connect() with an implicit Callable for the defined function.
			button.connect("button_down", _on_button_down)
			# Option 2: Object.connect() with a constructed Callable using a target object and method name.
			button.connect("button_down", Callable(self, "_on_button_down"))
			# Option 3: Signal.connect() with an implicit Callable for the defined function.
			button.button_down.connect(_on_button_down)
			# Option 4: Signal.connect() with a constructed Callable using a target object and method name.
			button.button_down.connect(Callable(self, "_on_button_down"))

		func _on_button_down():
			print("Button down!")
		```
		
		
		While all options have the same outcome (`button`'s `signal BaseButton.button_down` signal will be connected to `_on_button_down`), **option 3** offers the best validation: it will print a compile-time error if either the `button_down` `Signal` or the `_on_button_down` `Callable` are not defined. On the other hand, **option 2** only relies on string names and will only be able to validate either names at runtime: it will generate an error at runtime if `"button_down"` is not a signal, or if `"_on_button_down"` is not a method in the object `self`. The main reason for using options 1, 2, or 4 would be if you actually need to use strings (e.g. to connect signals programmatically based on strings read from a configuration file). Otherwise, option 3 is the recommended (and fastest) method.
		**Binding and passing parameters:**
		The syntax to bind parameters is through `Callable.bind`, which returns a copy of the `Callable` with its parameters bound.
		When calling `emit` or `Object.emit_signal`, the signal parameters can be also passed. The examples below show the relationship between these signal parameters and bound parameters.
		
		```gdscript
		func _ready():
			# This assumes that a `Player` class exists, which defines a `hit` signal.
			var player = Player.new()
			# Using Callable.bind().
			player.hit.connect(_on_player_hit.bind("sword", 100))

			# Parameters added when emitting the signal are passed first.
			player.hit.emit("Dark lord", 5)

		# We pass two arguments when emitting (`hit_by`, `level`),
		# and bind two more arguments when connecting (`weapon_type`, `damage`).
		func _on_player_hit(hit_by, level, weapon_type, damage):
			print("Hit by %s (level %d) with weapon %s for %d damage." % `hit_by, level, weapon_type, damage`)
		```
		
		
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Signal:pass


  @staticmethod
  def new0() -> Signal:pass
  @staticmethod
  def new1(from_:Signal) -> Signal:pass
  @staticmethod
  def new2(object:__object__.Object, signal:StringName|str) -> Signal:pass



  def is_null(self)->bool:
    """
				Returns `true` if this `Signal` has no object and the signal name is empty. Equivalent to `signal == Signal()`.
			"""
    pass

  def get_object(self)->object:
    """
				Returns the object emitting this signal.
			"""
    pass

  def get_object_id(self)->int:
    """
				Returns the ID of the object emitting this signal (see `Object.get_instance_id`).
			"""
    pass

  def get_name(self)->StringName:
    """
				Returns the name of this signal.
			"""
    pass

  def connect(self, callable:Callable, flags:int=0)->int:
    """
				Connects this signal to the specified `callable`. Optional `flags` can be also added to configure the connection's behavior (see `enum Object.ConnectFlags` constants). You can provide additional arguments to the connected `callable` by using `Callable.bind`.
				A signal can only be connected once to the same `Callable`. If the signal is already connected, this method returns `constant ERR_INVALID_PARAMETER` and generates an error, unless the signal is connected with `constant Object.CONNECT_REFERENCE_COUNTED`. To prevent this, use `is_connected` first to check for existing connections.
				```gdscript
				for button in $Buttons.get_children():
					button.pressed.connect(_on_pressed.bind(button))

				func _on_pressed(button):
					print(button.name, " was pressed")
				```
				**Note:** If the `callable`'s object is freed, the connection will be lost.
			"""
    pass

  def disconnect(self, callable:Callable)->None:
    """
				Disconnects this signal from the specified `Callable`. If the connection does not exist, generates an error. Use `is_connected` to make sure that the connection exists.
			"""
    pass

  def is_connected(self, callable:Callable)->bool:
    """
				Returns `true` if the specified `Callable` is connected to this signal.
			"""
    pass

  def get_connections(self)->Array:
    """
				Returns an `Array` of connections for this signal. Each connection is represented as a `Dictionary` that contains three entries:
				- `signal` is a reference to this signal;
				- `callable` is a reference to the connected `Callable`;
				- `flags` is a combination of `enum Object.ConnectFlags`.
			"""
    pass

  def has_connections(self)->bool:
    """
				Returns `true` if any `Callable` is connected to this signal.
			"""
    pass

  def emit(self)->None:
    """
				Emits this signal. All `Callable`s connected to this signal will be triggered. This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
			"""
    pass

  def __eq__(self, other:Any|Signal) -> bool: pass
  def __ne__(self, other:Any|Signal) -> bool: pass



class Dictionary(VariantTypeWrapper4):
  """
		Dictionaries are associative containers that contain values referenced by unique keys. Dictionaries will preserve the insertion order when adding new entries. In other programming languages, this data structure is often referred to as a hash map or an associative array.
		You can define a dictionary by placing a comma-separated list of `key: value` pairs inside curly braces `{}`.
		Creating a dictionary:
		
		```gdscript
		var my_dict = {} # Creates an empty dictionary.

		var dict_variable_key = "Another key name"
		var dict_variable_value = "value2"
		var another_dict = {
			"Some key name": "value1",
			dict_variable_key: dict_variable_value,
		}

		var points_dict = { "White": 50, "Yellow": 75, "Orange": 100 }

		# Alternative Lua-style syntax.
		# Doesn't require quotes around keys, but only string constants can be used as key names.
		# Additionally, key names must start with a letter or an underscore.
		# Here, `some_key` is a string literal, not a variable!
		another_dict = {
			some_key = 42,
		}
		```
		
		
		You can access a dictionary's value by referencing its corresponding key. In the above example, `points_dict`"White"`` will return `50`. You can also write `points_dict.White`, which is equivalent. However, you'll have to use the bracket syntax if the key you're accessing the dictionary with isn't a fixed string (such as a number or variable).
		
		```gdscript
		@export_enum("White", "Yellow", "Orange") var my_color: String
		var points_dict = { "White": 50, "Yellow": 75, "Orange": 100 }
		func _ready():
			# We can't use dot syntax here as `my_color` is a variable.
			var points = points_dict`my_color`
		```
		
		
		In the above code, `points` will be assigned the value that is paired with the appropriate color selected in `my_color`.
		Dictionaries can contain more complex data:
		
		```gdscript
		var my_dict = {
			"First Array": `1, 2, 3, 4` # Assigns an Array to a String key.
		}
		```
		
		
		To add a key to an existing dictionary, access it like an existing key and assign to it:
		
		```gdscript
		var points_dict = { "White": 50, "Yellow": 75, "Orange": 100 }
		points_dict`"Blue"` = 150 # Add "Blue" as a key and assign 150 as its value.
		```
		
		
		Finally, dictionaries can contain different types of keys and values in the same dictionary:
		
		```gdscript
		# This is a valid dictionary.
		# To access the string "Nested value" below, use `my_dict.sub_dict.sub_key` or `my_dict`"sub_dict"``"sub_key"``.
		# Indexing styles can be mixed and matched depending on your needs.
		var my_dict = {
			"String Key": 5,
			4: `1, 2, 3`,
			7: "Hello",
			"sub_dict": { "sub_key": "Nested value" },
		}
		```
		
		
		The keys of a dictionary can be iterated with the `for` keyword:
		
		```gdscript
		var groceries = { "Orange": 20, "Apple": 2, "Banana": 4 }
		for fruit in groceries:
			var amount = groceries`fruit`
		```
		
		
		**Note:** Dictionaries are always passed by reference. To get a copy of a dictionary which can be modified independently of the original dictionary, use `duplicate`.
		**Note:** Erasing elements while iterating over dictionaries is **not** supported and will result in unpredictable behavior.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Dictionary:pass


  @staticmethod
  def new0() -> Dictionary:pass
  @staticmethod
  def new1(from_:Dictionary) -> Dictionary:pass
  @staticmethod
  def new2(base:Dictionary, key_type:int, key_class_name:StringName|str, key_script:Any, value_type:int, value_class_name:StringName|str, value_script:Any) -> Dictionary:pass

  def __setitem__(self, value:Any, key:Any)->None:pass

  def __getitem__(self,  key:None)->Any: pass


  def size(self)->int:
    """
				Returns the number of entries in the dictionary. Empty dictionaries (`{ }`) always return `0`. See also `is_empty`.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the dictionary is empty (its size is `0`). See also `size`.
			"""
    pass

  def clear(self)->None:
    """
				Clears the dictionary, removing all entries from it.
			"""
    pass

  def assign(self, dictionary:Dictionary)->None:
    """
				Assigns elements of another `dictionary` into the dictionary. Resizes the dictionary to match `dictionary`. Performs type conversions if the dictionary is typed.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the dictionary in ascending order, by key. The final order is dependent on the "less than" (`<`) comparison between keys.
				
				```gdscript
				var numbers = { "c": 2, "a": 0, "b": 1 }
				numbers.sort()
				print(numbers) # Prints { "a": 0, "b": 1, "c": 2 }
				```
				
				This method ensures that the dictionary's entries are ordered consistently when `keys` or `values` are called, or when the dictionary needs to be converted to a string through `@GlobalScope.str` or `JSON.stringify`.
			"""
    pass

  def merge(self, dictionary:Dictionary, overwrite:bool=False)->None:
    """
				Adds entries from `dictionary` to this dictionary. By default, duplicate keys are not copied over, unless `overwrite` is `true`.
				
				```gdscript
				var dict = { "item": "sword", "quantity": 2 }
				var other_dict = { "quantity": 15, "color": "silver" }

				# Overwriting of existing keys is disabled by default.
				dict.merge(other_dict)
				print(dict)  # { "item": "sword", "quantity": 2, "color": "silver" }

				# With overwriting of existing keys enabled.
				dict.merge(other_dict, true)
				print(dict)  # { "item": "sword", "quantity": 15, "color": "silver" }
				```
				
				
				**Note:** `merge` is _not_ recursive. Nested dictionaries are considered as keys that can be overwritten or not depending on the value of `overwrite`, but they will never be merged together.
			"""
    pass

  def merged(self, dictionary:Dictionary, overwrite:bool=False)->Dictionary:
    """
				Returns a copy of this dictionary merged with the other `dictionary`. By default, duplicate keys are not copied over, unless `overwrite` is `true`. See also `merge`.
				This method is useful for quickly making dictionaries with default values:
				```gdscript
				var base = { "fruit": "apple", "vegetable": "potato" }
				var extra = { "fruit": "orange", "dressing": "vinegar" }
				# Prints { "fruit": "orange", "vegetable": "potato", "dressing": "vinegar" }
				print(extra.merged(base))
				# Prints { "fruit": "apple", "vegetable": "potato", "dressing": "vinegar" }
				print(extra.merged(base, true))
				```
			"""
    pass

  def has(self, key:Any)->bool:
    """
				Returns `true` if the dictionary contains an entry with the given `key`.
				
				```gdscript
				var my_dict = {
					"Godot" : 4,
					210 : null,
				}

				print(my_dict.has("Godot")) # Prints true
				print(my_dict.has(210))     # Prints true
				print(my_dict.has(4))       # Prints false
				```
				
				
				In GDScript, this is equivalent to the `in` operator:
				```gdscript
				if "Godot" in { "Godot": 4 }:
					print("The key is here!") # Will be printed.
				```
				**Note:** This method returns `true` as long as the `key` exists, even if its corresponding value is `null`.
			"""
    pass

  def has_all(self, keys:Array)->bool:
    """
				Returns `true` if the dictionary contains all keys in the given `keys` array.
				```gdscript
				var data = { "width": 10, "height": 20 }
				data.has_all(`"height", "width"`) # Returns true
				```
			"""
    pass

  def find_key(self, value:Any)->Any:
    """
				Finds and returns the first key whose associated value is equal to `value`, or `null` if it is not found.
				**Note:** `null` is also a valid key. If inside the dictionary, `find_key` may give misleading results.
			"""
    pass

  def erase(self, key:Any)->bool:
    """
				Removes the dictionary entry by key, if it exists. Returns `true` if the given `key` existed in the dictionary, otherwise `false`.
				**Note:** Do not erase entries while iterating over the dictionary. You can iterate over the `keys` array instead.
			"""
    pass

  def hash(self)->int:
    """
				Returns a hashed 32-bit integer value representing the dictionary contents.
				
				```gdscript
				var dict1 = { "A": 10, "B": 2 }
				var dict2 = { "A": 10, "B": 2 }

				print(dict1.hash() == dict2.hash()) # Prints true
				```
				
				
				**Note:** Dictionaries with the same entries but in a different order will not have the same hash.
				**Note:** Dictionaries with equal hash values are _not_ guaranteed to be the same, because of hash collisions. On the contrary, dictionaries with different hash values are guaranteed to be different.
			"""
    pass

  def keys(self)->Array:
    """
				Returns the list of keys in the dictionary.
			"""
    pass

  def values(self)->Array:
    """
				Returns the list of values in this dictionary.
			"""
    pass

  def duplicate(self, deep:bool=False)->Dictionary:
    """
				Returns a new copy of the dictionary.
				By default, a **shallow** copy is returned: all nested `Array`, `Dictionary`, and `Resource` keys and values are shared with the original dictionary. Modifying any of those in one dictionary will also affect them in the other.
				If `deep` is `true`, a **deep** copy is returned: all nested arrays and dictionaries are also duplicated (recursively). Any `Resource` is still shared with the original dictionary, though.
			"""
    pass

  def get(self, key:Any, default:Any=None)->Any:
    """
				Returns the corresponding value for the given `key` in the dictionary. If the `key` does not exist, returns `default`, or `null` if the parameter is omitted.
			"""
    pass

  def get_or_add(self, key:Any, default:Any=None)->Any:
    """
				Gets a value and ensures the key is set. If the `key` exists in the dictionary, this behaves like `get`. Otherwise, the `default` value is inserted into the dictionary and returned.
			"""
    pass

  def set(self, key:Any, value:Any)->bool:
    """
				Sets the value of the element at the given `key` to the given `value`. This is the same as using the ```` operator (`array`index` = value`).
			"""
    pass

  def is_typed(self)->bool:
    """
				Returns `true` if the dictionary is typed. Typed dictionaries can only store keys/values of their associated type and provide type safety for the ```` operator. Methods of typed dictionary still return `Variant`.
			"""
    pass

  def is_typed_key(self)->bool:
    """
				Returns `true` if the dictionary's keys are typed.
			"""
    pass

  def is_typed_value(self)->bool:
    """
				Returns `true` if the dictionary's values are typed.
			"""
    pass

  def is_same_typed(self, dictionary:Dictionary)->bool:
    """
				Returns `true` if the dictionary is typed the same as `dictionary`.
			"""
    pass

  def is_same_typed_key(self, dictionary:Dictionary)->bool:
    """
				Returns `true` if the dictionary's keys are typed the same as `dictionary`'s keys.
			"""
    pass

  def is_same_typed_value(self, dictionary:Dictionary)->bool:
    """
				Returns `true` if the dictionary's values are typed the same as `dictionary`'s values.
			"""
    pass

  def get_typed_key_builtin(self)->int:
    """
				Returns the built-in `Variant` type of the typed dictionary's keys as a `enum Variant.Type` constant. If the keys are not typed, returns `constant TYPE_NIL`. See also `is_typed_key`.
			"""
    pass

  def get_typed_value_builtin(self)->int:
    """
				Returns the built-in `Variant` type of the typed dictionary's values as a `enum Variant.Type` constant. If the values are not typed, returns `constant TYPE_NIL`. See also `is_typed_value`.
			"""
    pass

  def get_typed_key_class_name(self)->StringName:
    """
				Returns the **built-in** class name of the typed dictionary's keys, if the built-in `Variant` type is `constant TYPE_OBJECT`. Otherwise, returns an empty `StringName`. See also `is_typed_key` and `Object.get_class`.
			"""
    pass

  def get_typed_value_class_name(self)->StringName:
    """
				Returns the **built-in** class name of the typed dictionary's values, if the built-in `Variant` type is `constant TYPE_OBJECT`. Otherwise, returns an empty `StringName`. See also `is_typed_value` and `Object.get_class`.
			"""
    pass

  def get_typed_key_script(self)->Any:
    """
				Returns the `Script` instance associated with this typed dictionary's keys, or `null` if it does not exist. See also `is_typed_key`.
			"""
    pass

  def get_typed_value_script(self)->Any:
    """
				Returns the `Script` instance associated with this typed dictionary's values, or `null` if it does not exist. See also `is_typed_value`.
			"""
    pass

  def make_read_only(self)->None:
    """
				Makes the dictionary read-only, i.e. disables modification of the dictionary's contents. Does not apply to nested content, e.g. content of nested dictionaries.
			"""
    pass

  def is_read_only(self)->bool:
    """
				Returns `true` if the dictionary is read-only. See `make_read_only`. Dictionaries are automatically read-only if declared with `const` keyword.
			"""
    pass

  def recursive_equal(self, dictionary:Dictionary, recursion_count:int)->bool:
    """
				Returns `true` if the two dictionaries contain the same keys and values, inner `Dictionary` and `Array` keys and values are compared recursively.
			"""
    pass

  def __eq__(self, other:Any|Dictionary) -> bool: pass
  def __ne__(self, other:Any|Dictionary) -> bool: pass



class Array(VariantTypeWrapper4):
  """
		An array data structure that can contain a sequence of elements of any `Variant` type. Elements are accessed by a numerical index starting at `0`. Negative indices are used to count from the back (`-1` is the last element, `-2` is the second to last, etc.).
		
		```gdscript
		var array = `"First", 2, 3, "Last"`
		print(array`0`)  # Prints "First"
		print(array`2`)  # Prints 3
		print(array`-1`) # Prints "Last"

		array`1` = "Second"
		print(array`1`)  # Prints "Second"
		print(array`-3`) # Prints "Second"
		```
		
		
		**Note:** Arrays are always passed by **reference**. To get a copy of an array that can be modified independently of the original array, use `duplicate`.
		**Note:** Erasing elements while iterating over arrays is **not** supported and will result in unpredictable behavior.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedInt64Array` versus `Array`int``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Array:pass


  @staticmethod
  def new0() -> Array:pass
  @staticmethod
  def new1(from_:Array) -> Array:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName|str, script:Any) -> Array:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> Array:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> Array:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> Array:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> Array:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> Array:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> Array:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> Array:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> Array:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> Array:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->Array:pass
  def __next__(self)->Any:pass

  def to_list(self) -> list[object]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[object]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[object]) -> Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[object]): A list of elements to populate the PackedArray with.

    Returns:
        Array
    """
    pass


  def size(self)->int:
    """
				Returns the number of elements in the array. Empty arrays (````) always return `0`. See also `is_empty`.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty (````). See also `size`.
			"""
    pass

  def clear(self)->None:
    """
				Removes all elements from the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def hash(self)->int:
    """
				Returns a hashed 32-bit integer value representing the array and its contents.
				**Note:** Arrays with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. On the countrary, arrays with different hash values are guaranteed to be different.
			"""
    pass

  def assign(self, array:Array)->None:
    """
				Assigns elements of another `array` into the array. Resizes the array to match `array`. Performs type conversions if the array is typed.
			"""
    pass

  def get(self, index:int)->Any:
    """
				Returns the element at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `null`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:Any)->None:
    """
				Sets the value of the element at the given `index` to the given `value`. This will not change the size of the array, it only changes the value at an index already in the array. This is the same as using the ```` operator (`array`index` = value`).
			"""
    pass

  def push_back(self, value:Any)->None:
    """
				Appends an element at the end of the array. See also `push_front`.
			"""
    pass

  def push_front(self, value:Any)->None:
    """
				Adds an element at the beginning of the array. See also `push_back`.
				**Note:** This method shifts every other element's index forward, which may have a noticeable performance cost, especially on larger arrays.
			"""
    pass

  def append(self, value:Any)->None:
    """
				Appends `value` at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:Array)->None:
    """
				Appends another `array` at the end of this array.
				```gdscript
				var numbers = `1, 2, 3`
				var extra = `4, 5, 6`
				numbers.append_array(extra)
				print(numbers) # Prints `1, 2, 3, 4, 5, 6`
				```
			"""
    pass

  def resize(self, size:int)->int:
    """
				Sets the array's number of elements to `size`. If `size` is smaller than the array's current size, the elements at the end are removed. If `size` is greater, new default elements (usually `null`) are added, depending on the array's type.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_LOCKED` if the array is read-only, `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
				**Note:** Calling this method once and assigning the new values is faster than calling `append` for every new element.
			"""
    pass

  def insert(self, position:int, value:Any)->int:
    """
				Inserts a new element (`value`) at a given index (`position`) in the array. `position` should be between `0` and the array's `size`. If negative, `position` is considered relative to the end of the array.
				Returns `constant OK` on success, or one of the other `enum Error` constants if this method fails.
				**Note:** Every element's index after `position` needs to be shifted forward, which may have a noticeable performance cost, especially on larger arrays.
			"""
    pass

  def remove_at(self, position:int)->None:
    """
				Removes the element from the array at the given index (`position`). If the index is out of bounds, this method fails. If the index is negative, `position` is considered relative to the end of the array.
				If you need to return the removed element, use `pop_at`. To remove an element by value, use `erase` instead.
				**Note:** This method shifts every element's index after `position` back, which may have a noticeable performance cost, especially on larger arrays.
				**Note:** The `position` cannot be negative. To remove an element relative to the end of the array, use `arr.remove_at(arr.size() - (i + 1))`. To remove the last element from the array, use `arr.resize(arr.size() - 1)`.
			"""
    pass

  def fill(self, value:Any)->None:
    """
				Assigns the given `value` to all elements in the array.
				This method can often be combined with `resize` to create an array with a given size and initialized elements:
				
				```gdscript
				var array = ``
				array.resize(5)
				array.fill(2)
				print(array) # Prints `2, 2, 2, 2, 2`
				```
				
				
				**Note:** If `value` is a `Variant` passed by reference (`Object`-derived, `Array`, `Dictionary`, etc.), the array will be filled with references to the same `value`, which are not duplicates.
			"""
    pass

  def erase(self, value:Any)->None:
    """
				Finds and removes the first occurrence of `value` from the array. If `value` does not exist in the array, nothing happens. To remove an element by index, use `remove_at` instead.
				**Note:** This method shifts every element's index after the removed `value` back, which may have a noticeable performance cost, especially on larger arrays.
				**Note:** Erasing elements while iterating over arrays is **not** supported and will result in unpredictable behavior.
			"""
    pass

  def front(self)->Any:
    """
				Returns the first element of the array. If the array is empty, fails and returns `null`. See also `back`.
				**Note:** Unlike with the ```` operator (`array`0``), an error is generated without stopping project execution.
			"""
    pass

  def back(self)->Any:
    """
				Returns the last element of the array. If the array is empty, fails and returns `null`. See also `front`.
				**Note:** Unlike with the ```` operator (`array`-1``), an error is generated without stopping project execution.
			"""
    pass

  def pick_random(self)->Any:
    """
				Returns a random element from the array. Generates an error and returns `null` if the array is empty.
				
				```gdscript
				# May print 1, 2, 3.25, or "Hi".
				print(`1, 2, 3.25, "Hi"`.pick_random())
				```
				
				
				**Note:** Like many similar functions in the engine (such as `@GlobalScope.randi` or `shuffle`), this method uses a common, global random seed. To get a predictable outcome from this method, see `@GlobalScope.seed`.
			"""
    pass

  def find(self, what:Any, from_:int=0)->int:
    """
				Returns the index of the **first** occurrence of `what` in this array, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the array.
				**Note:** If you just want to know whether the array contains `what`, use `has` (`Contains` in C#). In GDScript, you may also use the `in` operator.
				**Note:** For performance reasons, the search is affected by `what`'s `enum Variant.Type`. For example, `7` (`int`) and `7.0` (`float`) are not considered equal for this method.
			"""
    pass

  def find_custom(self, method:Callable, from_:int=0)->int:
    """
				Returns the index of the **first** element in the array that causes `method` to return `true`, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the array.
				`method` is a callable that takes an element of the array, and returns a `bool`.
				**Note:** If you just want to know whether the array contains _anything_ that satisfies `method`, use `any`.
				
				```gdscript
				func is_even(number):
					return number % 2 == 0

				func _ready():
					print(`1, 3, 4, 7`.find_custom(is_even.bind())) # Prints 2
				```
				
			"""
    pass

  def rfind(self, what:Any, from_:int=-1)->int:
    """
				Returns the index of the **last** occurrence of `what` in this array, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the array. This method is the reverse of `find`.
			"""
    pass

  def rfind_custom(self, method:Callable, from_:int=-1)->int:
    """
				Returns the index of the **last** element of the array that causes `method` to return `true`, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the array. This method is the reverse of `find_custom`.
			"""
    pass

  def count(self, value:Any)->int:
    """
				Returns the number of times an element is in the array.
				To count how many elements in an array satisfy a condition, see `reduce`.
			"""
    pass

  def has(self, value:Any)->bool:
    """
				Returns `true` if the array contains the given `value`.
				
				```gdscript
				print(`"inside", 7`.has("inside"))  # Prints true
				print(`"inside", 7`.has("outside")) # Prints false
				print(`"inside", 7`.has(7))         # Prints true
				print(`"inside", 7`.has("7"))       # Prints false
				```
				
				
				In GDScript, this is equivalent to the `in` operator:
				```gdscript
				if 4 in `2, 4, 6, 8`:
					print("4 is here!") # Will be printed.
				```
				**Note:** For performance reasons, the search is affected by the `value`'s `enum Variant.Type`. For example, `7` (`int`) and `7.0` (`float`) are not considered equal for this method.
			"""
    pass

  def pop_back(self)->Any:
    """
				Removes and returns the last element of the array. Returns `null` if the array is empty, without generating an error. See also `pop_front`.
			"""
    pass

  def pop_front(self)->Any:
    """
				Removes and returns the first element of the array. Returns `null` if the array is empty, without generating an error. See also `pop_back`.
				**Note:** This method shifts every other element's index back, which may have a noticeable performance cost, especially on larger arrays.
			"""
    pass

  def pop_at(self, position:int)->Any:
    """
				Removes and returns the element of the array at index `position`. If negative, `position` is considered relative to the end of the array. Returns `null` if the array is empty. If `position` is out of bounds, an error message is also generated.
				**Note:** This method shifts every element's index after `position` back, which may have a noticeable performance cost, especially on larger arrays.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the array in ascending order. The final order is dependent on the "less than" (`<`) comparison between elements.
				
				```gdscript
				var numbers = `10, 5, 2.5, 8`
				numbers.sort()
				print(numbers) # Prints `2.5, 5, 8, 10`
				```
				
				
				**Note:** The sorting algorithm used is not `url=https://en.wikipedia.org/wiki/Sorting_algorithm#Stability`stable`/url`. This means that equivalent elements (such as `2` and `2.0`) may have their order changed when calling `sort`.
			"""
    pass

  def sort_custom(self, func:Callable)->None:
    """
				Sorts the array using a custom `Callable`.
				`func` is called as many times as necessary, receiving two array elements as arguments. The function should return `true` if the first element should be moved _before_ the second one, otherwise it should return `false`.
				```gdscript
				func sort_ascending(a, b):
					if a`1` < b`1`:
						return true
					return false

				func _ready():
					var my_items = ``"Tomato", 5`, `"Apple", 9`, `"Rice", 4``
					my_items.sort_custom(sort_ascending)
					print(my_items) # Prints ``"Rice", 4`, `"Tomato", 5`, `"Apple", 9``

					# Sort descending, using a lambda function.
					my_items.sort_custom(func(a, b): return a`1` > b`1`)
					print(my_items) # Prints ``"Apple", 9`, `"Tomato", 5`, `"Rice", 4``
				```
				It may also be necessary to use this method to sort strings by natural order, with `String.naturalnocasecmp_to`, as in the following example:
				```gdscript
				var files = `"newfile1", "newfile2", "newfile10", "newfile11"`
				files.sort_custom(func(a, b): return a.naturalnocasecmp_to(b) < 0)
				print(files) # Prints `"newfile1", "newfile2", "newfile10", "newfile11"`
				```
				**Note:** In C#, this method is not supported.
				**Note:** The sorting algorithm used is not `url=https://en.wikipedia.org/wiki/Sorting_algorithm#Stability`stable`/url`. This means that values considered equal may have their order changed when calling this method.
				**Note:** You should not randomize the return value of `func`, as the heapsort algorithm expects a consistent result. Randomizing the return value will result in unexpected behavior.
			"""
    pass

  def shuffle(self)->None:
    """
				Shuffles all elements of the array in a random order.
				**Note:** Like many similar functions in the engine (such as `@GlobalScope.randi` or `pick_random`), this method uses a common, global random seed. To get a predictable outcome from this method, see `@GlobalScope.seed`.
			"""
    pass

  def bsearch(self, value:Any, before:bool=True)->int:
    """
				Returns the index of `value` in the sorted array. If it cannot be found, returns where `value` should be inserted to keep the array sorted. The algorithm used is `url=https://en.wikipedia.org/wiki/Binary_search_algorithm`binary search`/url`.
				If `before` is `true` (as by default), the returned index comes before all existing elements equal to `value` in the array.
				```gdscript
				var numbers = `2, 4, 8, 10`
				var idx = numbers.bsearch(7)

				numbers.insert(idx, 7)
				print(numbers) # Prints `2, 4, 7, 8, 10`

				var fruits = `"Apple", "Lemon", "Lemon", "Orange"`
				print(fruits.bsearch("Lemon", true))  # Prints 1, points at the first "Lemon".
				print(fruits.bsearch("Lemon", false)) # Prints 3, points at "Orange".
				```
				**Note:** Calling `bsearch` on an _unsorted_ array will result in unexpected behavior. Use `sort` before calling this method.
			"""
    pass

  def bsearch_custom(self, value:Any, func:Callable, before:bool=True)->int:
    """
				Returns the index of `value` in the sorted array. If it cannot be found, returns where `value` should be inserted to keep the array sorted (using `func` for the comparisons). The algorithm used is `url=https://en.wikipedia.org/wiki/Binary_search_algorithm`binary search`/url`.
				Similar to `sort_custom`, `func` is called as many times as necessary, receiving one array element and `value` as arguments. The function should return `true` if the array element should be _behind_ `value`, otherwise it should return `false`.
				If `before` is `true` (as by default), the returned index comes before all existing elements equal to `value` in the array.
				```gdscript
				func sort_by_amount(a, b):
					if a`1` < b`1`:
						return true
					return false

				func _ready():
					var my_items = ``"Tomato", 2`, `"Kiwi", 5`, `"Rice", 9``

					var apple = `"Apple", 5`
					# "Apple" is inserted before "Kiwi".
					my_items.insert(my_items.bsearch_custom(apple, sort_by_amount, true), apple)

					var banana = `"Banana", 5`
					# "Banana" is inserted after "Kiwi".
					my_items.insert(my_items.bsearch_custom(banana, sort_by_amount, false), banana)

					# Prints ``"Tomato", 2`, `"Apple", 5`, `"Kiwi", 5`, `"Banana", 5`, `"Rice", 9``
					print(my_items)
				```
				**Note:** Calling `bsearch_custom` on an _unsorted_ array will result in unexpected behavior. Use `sort_custom` with `func` before calling this method.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of all elements in the array.
			"""
    pass

  def duplicate(self, deep:bool=False)->Array:
    """
				Returns a new copy of the array.
				By default, a **shallow** copy is returned: all nested `Array`, `Dictionary`, and `Resource` elements are shared with the original array. Modifying any of those in one array will also affect them in the other.
				If `deep` is `true`, a **deep** copy is returned: all nested arrays and dictionaries are also duplicated (recursively). Any `Resource` is still shared with the original array, though.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array:
    """
				Returns a new `Array` containing this array's elements, from index `begin` (inclusive) to `end` (exclusive), every `step` elements.
				If either `begin` or `end` are negative, their value is relative to the end of the array.
				If `step` is negative, this method iterates through the array in reverse, returning a slice ordered backwards. For this to work, `begin` must be greater than `end`.
				If `deep` is `true`, all nested `Array` and `Dictionary` elements in the slice are duplicated from the original, recursively. See also `duplicate`.
				```gdscript
				var letters = `"A", "B", "C", "D", "E", "F"`

				print(letters.slice(0, 2))  # Prints `"A", "B"`
				print(letters.slice(2, -2)) # Prints `"C", "D"`
				print(letters.slice(-2, 6)) # Prints `"E", "F"`

				print(letters.slice(0, 6, 2))  # Prints `"A", "C", "E"`
				print(letters.slice(4, 1, -1)) # Prints `"E", "D", "C"`
				```
			"""
    pass

  def filter(self, method:Callable)->Array:
    """
				Calls the given `Callable` on each element in the array and returns a new, filtered `Array`.
				The `method` receives one of the array elements as an argument, and should return `true` to add the element to the filtered array, or `false` to exclude it.
				```gdscript
				func is_even(number):
					return number % 2 == 0

				func _ready():
					print(`1, 4, 5, 8`.filter(is_even)) # Prints `4, 8`

					# Same as above, but using a lambda function.
					print(`1, 4, 5, 8`.filter(func(number): return number % 2 == 0))
				```
				See also `any`, `all`, `map` and `reduce`.
			"""
    pass

  def map(self, method:Callable)->Array:
    """
				Calls the given `Callable` for each element in the array and returns a new array filled with values returned by the `method`.
				The `method` should take one `Variant` parameter (the current array element) and can return any `Variant`.
				```gdscript
				func double(number):
					return number * 2

				func _ready():
					print(`1, 2, 3`.map(double)) # Prints `2, 4, 6`

					# Same as above, but using a lambda function.
					print(`1, 2, 3`.map(func(element): return element * 2))
				```
				See also `filter`, `reduce`, `any` and `all`.
			"""
    pass

  def reduce(self, method:Callable, accum:Any=None)->Any:
    """
				Calls the given `Callable` for each element in array, accumulates the result in `accum`, then returns it.
				The `method` takes two arguments: the current value of `accum` and the current array element. If `accum` is `null` (as by default), the iteration will start from the second element, with the first one used as initial value of `accum`.
				```gdscript
				func sum(accum, number):
					return accum + number

				func _ready():
					print(`1, 2, 3`.reduce(sum, 0))  # Prints 6
					print(`1, 2, 3`.reduce(sum, 10)) # Prints 16

					# Same as above, but using a lambda function.
					print(`1, 2, 3`.reduce(func(accum, number): return accum + number, 10))
				```
				If `max` is not desirable, this method may also be used to implement a custom comparator:
				```gdscript
				func _ready():
					var arr = `Vector2i(5, 0), Vector2i(3, 4), Vector2i(1, 2)`

					var longest_vec = arr.reduce(func(max, vec): return vec if is_length_greater(vec, max) else max)
					print(longest_vec) # Prints (3, 4)

				func is_length_greater(a, b):
					return a.length() > b.length()
				```
				This method can also be used to count how many elements in an array satisfy a certain condition, similar to `count`:
				```gdscript
				func is_even(number):
					return number % 2 == 0

				func _ready():
					var arr = `1, 2, 3, 4, 5`
					# If the current element is even, increment count, otherwise leave count the same.
					var even_count = arr.reduce(func(count, next): return count + 1 if is_even(next) else count, 0)
					print(even_count) # Prints 2
				```
				See also `map`, `filter`, `any`, and `all`.
			"""
    pass

  def any(self, method:Callable)->bool:
    """
				Calls the given `Callable` on each element in the array and returns `true` if the `Callable` returns `true` for _one or more_ elements in the array. If the `Callable` returns `false` for all elements in the array, this method returns `false`.
				The `method` should take one `Variant` parameter (the current array element) and return a `bool`.
				```gdscript
				func greater_than_5(number):
					return number > 5

				func _ready():
					print(`6, 10, 6`.any(greater_than_5)) # Prints true (3 elements evaluate to true).
					print(`4, 10, 4`.any(greater_than_5)) # Prints true (1 elements evaluate to true).
					print(`4, 4, 4`.any(greater_than_5))  # Prints false (0 elements evaluate to true).
					print(``.any(greater_than_5))         # Prints false (0 elements evaluate to true).

					# Same as the first line above, but using a lambda function.
					print(`6, 10, 6`.any(func(number): return number > 5)) # Prints true
				```
				See also `all`, `filter`, `map` and `reduce`.
				**Note:** Unlike relying on the size of an array returned by `filter`, this method will return as early as possible to improve performance (especially with large arrays).
				**Note:** For an empty array, this method always returns `false`.
			"""
    pass

  def all(self, method:Callable)->bool:
    """
				Calls the given `Callable` on each element in the array and returns `true` if the `Callable` returns `true` for _all_ elements in the array. If the `Callable` returns `false` for one array element or more, this method returns `false`.
				The `method` should take one `Variant` parameter (the current array element) and return a `bool`.
				
				```gdscript
				func greater_than_5(number):
					return number > 5

				func _ready():
					print(`6, 10, 6`.all(greater_than_5)) # Prints true (3/3 elements evaluate to true).
					print(`4, 10, 4`.all(greater_than_5)) # Prints false (1/3 elements evaluate to true).
					print(`4, 4, 4`.all(greater_than_5))  # Prints false (0/3 elements evaluate to true).
					print(``.all(greater_than_5))         # Prints true (0/0 elements evaluate to true).

					# Same as the first line above, but using a lambda function.
					print(`6, 10, 6`.all(func(element): return element > 5)) # Prints true
				```
				
				
				See also `any`, `filter`, `map` and `reduce`.
				**Note:** Unlike relying on the size of an array returned by `filter`, this method will return as early as possible to improve performance (especially with large arrays).
				**Note:** For an empty array, this method `url=https://en.wikipedia.org/wiki/Vacuous_truth`always`/url` returns `true`.
			"""
    pass

  def max(self)->Any:
    """
				Returns the maximum value contained in the array, if all elements can be compared. Otherwise, returns `null`. See also `min`.
				To find the maximum value using a custom comparator, you can use `reduce`.
			"""
    pass

  def min(self)->Any:
    """
				Returns the minimum value contained in the array, if all elements can be compared. Otherwise, returns `null`. See also `max`.
			"""
    pass

  def is_typed(self)->bool:
    """
				Returns `true` if the array is typed. Typed arrays can only contain elements of a specific type, as defined by the typed array constructor. The methods of a typed array are still expected to return a generic `Variant`.
				In GDScript, it is possible to define a typed array with static typing:
				```gdscript
				var numbers: Array`float` = `0.2, 4.2, -2.0`
				print(numbers.is_typed()) # Prints true
				```
			"""
    pass

  def is_same_typed(self, array:Array)->bool:
    """
				Returns `true` if this array is typed the same as the given `array`. See also `is_typed`.
			"""
    pass

  def get_typed_builtin(self)->int:
    """
				Returns the built-in `Variant` type of the typed array as a `enum Variant.Type` constant. If the array is not typed, returns `constant TYPE_NIL`. See also `is_typed`.
			"""
    pass

  def get_typed_class_name(self)->StringName:
    """
				Returns the **built-in** class name of the typed array, if the built-in `Variant` type `constant TYPE_OBJECT`. Otherwise, returns an empty `StringName`. See also `is_typed` and `Object.get_class`.
			"""
    pass

  def get_typed_script(self)->Any:
    """
				Returns the `Script` instance associated with this typed array, or `null` if it does not exist. See also `is_typed`.
			"""
    pass

  def make_read_only(self)->None:
    """
				Makes the array read-only. The array's elements cannot be overridden with different values, and their order cannot change. Does not apply to nested elements, such as dictionaries.
				In GDScript, arrays are automatically read-only if declared with the `const` keyword.
			"""
    pass

  def is_read_only(self)->bool:
    """
				Returns `true` if the array is read-only. See `make_read_only`.
				In GDScript, arrays are automatically read-only if declared with the `const` keyword.
			"""
    pass

  def __eq__(self, other:Any|Array) -> bool: pass
  def __ne__(self, other:Any|Array) -> bool: pass
  def __lt__(self, other:Array) -> bool: pass
  def __le__(self, other:Array) -> bool: pass
  def __gt__(self, other:Array) -> bool: pass
  def __ge__(self, other:Array) -> bool: pass
  def __add__(self, other:Array) -> Array: pass



class PackedByteArray(VariantTypeWrapper4):
  """
		An array specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.
		`PackedByteArray` also provides methods to encode/decode various types to/from bytes. The way values are encoded is an implementation detail and shouldn't be relied upon when interacting with external apps.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedByteArray:pass


  @staticmethod
  def new0() -> PackedByteArray:pass
  @staticmethod
  def new1(from_:PackedByteArray) -> PackedByteArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedByteArray:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedByteArray:pass

  def to_list(self) -> list[int]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[int]: A list containing the elements of the PackedArray.
    """
  def get_memory_view(self) -> memoryview[int]:
    
    """
    Gets a memoryview of the PackedArray. 
    Be careful: This is not a copy of the data, but a view into the data. 
    So deleting data and then trying to access it will leed to crases

    Returns:
        memoryview[int]: A memory view containing the elements of the PackedArray.
    """
    pass
  @staticmethod
  def from_list(values:list[int]) -> PackedByteArray:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedByteArray
    """
    pass
  @staticmethod
  def from_memory_view(values:memoryview[int]) -> PackedByteArray:

    """
    Initializes the PackedArray from a memory view.

    This method takes a Python memory view and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).
    You can use this to populate a PackedArray fast. Please take care that the data in your array is contiguous. 
    E.g. use numpy arrays

    Args:
        values (memoryview[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedByteArray
    """
    pass

  def get(self, index:int)->int:
    """
				Returns the byte at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `0`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:int)->None:
    """
				Changes the byte at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:int)->bool:
    """
				Appends an element at the end of the array.
			"""
    pass

  def append(self, value:int)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedByteArray)->None:
    """
				Appends a `PackedByteArray` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:int)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:int)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:int)->bool:
    """
				Returns `true` if the array contains `value`.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedByteArray:
    """
				Returns the slice of the `PackedByteArray`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedByteArray`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
			"""
    pass

  def bsearch(self, value:int, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
			"""
    pass

  def duplicate(self)->PackedByteArray:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:int, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
			"""
    pass

  def rfind(self, value:int, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			"""
    pass

  def count(self, value:int)->int:
    """
				Returns the number of times an element is in the array.
			"""
    pass

  def get_string_from_ascii(self)->str:
    """
				Converts ASCII/Latin-1 encoded array to `String`. Fast alternative to `get_string_from_utf8` if the content is ASCII/Latin-1 only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use `get_string_from_utf8`. This is the inverse of `String.to_ascii_buffer`.
			"""
    pass

  def get_string_from_utf8(self)->str:
    """
				Converts UTF-8 encoded array to `String`. Slower than `get_string_from_ascii` but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred. Returns empty string if source array is not valid UTF-8 string. This is the inverse of `String.to_utf8_buffer`.
			"""
    pass

  def get_string_from_utf16(self)->str:
    """
				Converts UTF-16 encoded array to `String`. If the BOM is missing, little-endianness is assumed. Returns empty string if source array is not valid UTF-16 string. This is the inverse of `String.to_utf16_buffer`.
			"""
    pass

  def get_string_from_utf32(self)->str:
    """
				Converts UTF-32 encoded array to `String`. Returns empty string if source array is not valid UTF-32 string. This is the inverse of `String.to_utf32_buffer`.
			"""
    pass

  def get_string_from_wchar(self)->str:
    """
				Converts wide character (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded array to `String`. Returns empty string if source array is not valid wide string. This is the inverse of `String.to_wchar_buffer`.
			"""
    pass

  def hex_encode(self)->str:
    """
				Returns a hexadecimal representation of this array as a `String`.
				
				```gdscript
				var array = PackedByteArray(`11, 46, 255`)
				print(array.hex_encode()) # Prints "0b2eff"
				```
				
				
			"""
    pass

  def compress(self, compression_mode:int=0)->PackedByteArray:
    """
				Returns a new `PackedByteArray` with the data compressed. Set the compression mode using one of `enum FileAccess.CompressionMode`'s constants.
			"""
    pass

  def decompress(self, buffer_size:int, compression_mode:int=0)->PackedByteArray:
    """
				Returns a new `PackedByteArray` with the data decompressed. Set `buffer_size` to the size of the uncompressed data. Set the compression mode using one of `enum FileAccess.CompressionMode`'s constants.
				**Note:** Decompression is not guaranteed to work with data not compressed by Godot, for example if data compressed with the deflate compression mode lacks a checksum or header.
			"""
    pass

  def decompress_dynamic(self, max_output_size:int, compression_mode:int=0)->PackedByteArray:
    """
				Returns a new `PackedByteArray` with the data decompressed. Set the compression mode using one of `enum FileAccess.CompressionMode`'s constants. **This method only accepts brotli, gzip, and deflate compression modes.**
				This method is potentially slower than `decompress`, as it may have to re-allocate its output buffer multiple times while decompressing, whereas `decompress` knows it's output buffer size from the beginning.
				GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via `max_output_size`. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned.
				**Note:** Decompression is not guaranteed to work with data not compressed by Godot, for example if data compressed with the deflate compression mode lacks a checksum or header.
			"""
    pass

  def decode_u8(self, byte_offset:int)->int:
    """
				Decodes a 8-bit unsigned integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_s8(self, byte_offset:int)->int:
    """
				Decodes a 8-bit signed integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_u16(self, byte_offset:int)->int:
    """
				Decodes a 16-bit unsigned integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_s16(self, byte_offset:int)->int:
    """
				Decodes a 16-bit signed integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_u32(self, byte_offset:int)->int:
    """
				Decodes a 32-bit unsigned integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_s32(self, byte_offset:int)->int:
    """
				Decodes a 32-bit signed integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_u64(self, byte_offset:int)->int:
    """
				Decodes a 64-bit unsigned integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_s64(self, byte_offset:int)->int:
    """
				Decodes a 64-bit signed integer number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
			"""
    pass

  def decode_half(self, byte_offset:int)->float:
    """
				Decodes a 16-bit floating-point number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
			"""
    pass

  def decode_float(self, byte_offset:int)->float:
    """
				Decodes a 32-bit floating-point number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
			"""
    pass

  def decode_double(self, byte_offset:int)->float:
    """
				Decodes a 64-bit floating-point number from the bytes starting at `byte_offset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
			"""
    pass

  def has_encoded_var(self, byte_offset:int, allow_objects:bool=False)->bool:
    """
				Returns `true` if a valid `Variant` value can be decoded at the `byte_offset`. Returns `false` otherwise or when the value is `Object`-derived and `allow_objects` is `false`.
			"""
    pass

  def decode_var(self, byte_offset:int, allow_objects:bool=False)->Any:
    """
				Decodes a `Variant` from the bytes starting at `byte_offset`. Returns `null` if a valid variant can't be decoded or the value is `Object`-derived and `allow_objects` is `false`.
			"""
    pass

  def decode_var_size(self, byte_offset:int, allow_objects:bool=False)->int:
    """
				Decodes a size of a `Variant` from the bytes starting at `byte_offset`. Requires at least 4 bytes of data starting at the offset, otherwise fails.
			"""
    pass

  def to_int32_array(self)->PackedInt32Array:
    """
				Returns a copy of the data converted to a `PackedInt32Array`, where each block of 4 bytes has been converted to a signed 32-bit integer (C++ `int32_t`).
				The size of the input array must be a multiple of 4 (size of 32-bit integer). The size of the new array will be `byte_array.size() / 4`.
				If the original data can't be converted to signed 32-bit integers, the resulting data is undefined.
			"""
    pass

  def to_int64_array(self)->PackedInt64Array:
    """
				Returns a copy of the data converted to a `PackedInt64Array`, where each block of 8 bytes has been converted to a signed 64-bit integer (C++ `int64_t`, Godot `int`).
				The size of the input array must be a multiple of 8 (size of 64-bit integer). The size of the new array will be `byte_array.size() / 8`.
				If the original data can't be converted to signed 64-bit integers, the resulting data is undefined.
			"""
    pass

  def to_float32_array(self)->PackedFloat32Array:
    """
				Returns a copy of the data converted to a `PackedFloat32Array`, where each block of 4 bytes has been converted to a 32-bit float (C++ `code skip-lint`float`).
				The size of the input array must be a multiple of 4 (size of 32-bit float). The size of the new array will be `byte_array.size() / 4`.
				If the original data can't be converted to 32-bit floats, the resulting data is undefined.
			"""
    pass

  def to_float64_array(self)->PackedFloat64Array:
    """
				Returns a copy of the data converted to a `PackedFloat64Array`, where each block of 8 bytes has been converted to a 64-bit float (C++ `double`, Godot `float`).
				The size of the input array must be a multiple of 8 (size of 64-bit double). The size of the new array will be `byte_array.size() / 8`.
				If the original data can't be converted to 64-bit floats, the resulting data is undefined.
			"""
    pass

  def encode_u8(self, byte_offset:int, value:int)->None:
    """
				Encodes a 8-bit unsigned integer number (byte) at the index of `byte_offset` bytes. The array must have at least 1 byte of space, starting at the offset.
			"""
    pass

  def encode_s8(self, byte_offset:int, value:int)->None:
    """
				Encodes a 8-bit signed integer number (signed byte) at the index of `byte_offset` bytes. The array must have at least 1 byte of space, starting at the offset.
			"""
    pass

  def encode_u16(self, byte_offset:int, value:int)->None:
    """
				Encodes a 16-bit unsigned integer number as bytes at the index of `byte_offset` bytes. The array must have at least 2 bytes of space, starting at the offset.
			"""
    pass

  def encode_s16(self, byte_offset:int, value:int)->None:
    """
				Encodes a 16-bit signed integer number as bytes at the index of `byte_offset` bytes. The array must have at least 2 bytes of space, starting at the offset.
			"""
    pass

  def encode_u32(self, byte_offset:int, value:int)->None:
    """
				Encodes a 32-bit unsigned integer number as bytes at the index of `byte_offset` bytes. The array must have at least 4 bytes of space, starting at the offset.
			"""
    pass

  def encode_s32(self, byte_offset:int, value:int)->None:
    """
				Encodes a 32-bit signed integer number as bytes at the index of `byte_offset` bytes. The array must have at least 4 bytes of space, starting at the offset.
			"""
    pass

  def encode_u64(self, byte_offset:int, value:int)->None:
    """
				Encodes a 64-bit unsigned integer number as bytes at the index of `byte_offset` bytes. The array must have at least 8 bytes of space, starting at the offset.
			"""
    pass

  def encode_s64(self, byte_offset:int, value:int)->None:
    """
				Encodes a 64-bit signed integer number as bytes at the index of `byte_offset` bytes. The array must have at least 8 bytes of space, starting at the offset.
			"""
    pass

  def encode_half(self, byte_offset:int, value:float)->None:
    """
				Encodes a 16-bit floating-point number as bytes at the index of `byte_offset` bytes. The array must have at least 2 bytes of space, starting at the offset.
			"""
    pass

  def encode_float(self, byte_offset:int, value:float)->None:
    """
				Encodes a 32-bit floating-point number as bytes at the index of `byte_offset` bytes. The array must have at least 4 bytes of space, starting at the offset.
			"""
    pass

  def encode_double(self, byte_offset:int, value:float)->None:
    """
				Encodes a 64-bit floating-point number as bytes at the index of `byte_offset` bytes. The array must have at least 8 bytes of allocated space, starting at the offset.
			"""
    pass

  def encode_var(self, byte_offset:int, value:Any, allow_objects:bool=False)->int:
    """
				Encodes a `Variant` at the index of `byte_offset` bytes. A sufficient space must be allocated, depending on the encoded variant's size. If `allow_objects` is `false`, `Object`-derived values are not permitted and will instead be serialized as ID-only.
			"""
    pass

  def __eq__(self, other:Any|PackedByteArray) -> bool: pass
  def __ne__(self, other:Any|PackedByteArray) -> bool: pass
  def __add__(self, other:PackedByteArray) -> PackedByteArray: pass



class PackedInt32Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold 32-bit integer values. Packs data tightly, so it saves memory for large array sizes.
		**Note:** This type stores signed 32-bit integers, which means it can take values in the interval ``-2^31, 2^31 - 1``, i.e. ``-2147483648, 2147483647``. Exceeding those bounds will wrap around. In comparison, `int` uses signed 64-bit integers which can hold much larger values. If you need to pack 64-bit integers tightly, see `PackedInt64Array`.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedInt32Array:pass


  @staticmethod
  def new0() -> PackedInt32Array:pass
  @staticmethod
  def new1(from_:PackedInt32Array) -> PackedInt32Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedInt32Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedInt32Array:pass
  def __next__(self)->int:pass

  def to_list(self) -> list[int]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[int]: A list containing the elements of the PackedArray.
    """
  def get_memory_view(self) -> memoryview[int]:
    
    """
    Gets a memoryview of the PackedArray. 
    Be careful: This is not a copy of the data, but a view into the data. 
    So deleting data and then trying to access it will leed to crases

    Returns:
        memoryview[int]: A memory view containing the elements of the PackedArray.
    """
    pass
  @staticmethod
  def from_list(values:list[int]) -> PackedInt32Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedInt32Array
    """
    pass
  @staticmethod
  def from_memory_view(values:memoryview[int]) -> PackedInt32Array:

    """
    Initializes the PackedArray from a memory view.

    This method takes a Python memory view and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).
    You can use this to populate a PackedArray fast. Please take care that the data in your array is contiguous. 
    E.g. use numpy arrays

    Args:
        values (memoryview[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedInt32Array
    """
    pass

  def get(self, index:int)->int:
    """
				Returns the 32-bit integer at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `0`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:int)->None:
    """
				Changes the integer at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:int)->bool:
    """
				Appends a value to the array.
			"""
    pass

  def append(self, value:int)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedInt32Array)->None:
    """
				Appends a `PackedInt32Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:int)->int:
    """
				Inserts a new integer at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:int)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:int)->bool:
    """
				Returns `true` if the array contains `value`.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedInt32Array:
    """
				Returns the slice of the `PackedInt32Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedInt32Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a copy of the data converted to a `PackedByteArray`, where each element has been encoded as 4 bytes.
				The size of the new array will be `int32_array.size() * 4`.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
			"""
    pass

  def bsearch(self, value:int, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
			"""
    pass

  def duplicate(self)->PackedInt32Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:int, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
			"""
    pass

  def rfind(self, value:int, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			"""
    pass

  def count(self, value:int)->int:
    """
				Returns the number of times an element is in the array.
			"""
    pass

  def __eq__(self, other:Any|PackedInt32Array) -> bool: pass
  def __ne__(self, other:Any|PackedInt32Array) -> bool: pass
  def __add__(self, other:PackedInt32Array) -> PackedInt32Array: pass



class PackedInt64Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold 64-bit integer values. Packs data tightly, so it saves memory for large array sizes.
		**Note:** This type stores signed 64-bit integers, which means it can take values in the interval ``-2^63, 2^63 - 1``, i.e. ``-9223372036854775808, 9223372036854775807``. Exceeding those bounds will wrap around. If you only need to pack 32-bit integers tightly, see `PackedInt32Array` for a more memory-friendly alternative.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedInt64Array` versus `Array`int``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedInt64Array:pass


  @staticmethod
  def new0() -> PackedInt64Array:pass
  @staticmethod
  def new1(from_:PackedInt64Array) -> PackedInt64Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedInt64Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedInt64Array:pass
  def __next__(self)->int:pass

  def to_list(self) -> list[int]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[int]: A list containing the elements of the PackedArray.
    """
  def get_memory_view(self) -> memoryview[int]:
    
    """
    Gets a memoryview of the PackedArray. 
    Be careful: This is not a copy of the data, but a view into the data. 
    So deleting data and then trying to access it will leed to crases

    Returns:
        memoryview[int]: A memory view containing the elements of the PackedArray.
    """
    pass
  @staticmethod
  def from_list(values:list[int]) -> PackedInt64Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedInt64Array
    """
    pass
  @staticmethod
  def from_memory_view(values:memoryview[int]) -> PackedInt64Array:

    """
    Initializes the PackedArray from a memory view.

    This method takes a Python memory view and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).
    You can use this to populate a PackedArray fast. Please take care that the data in your array is contiguous. 
    E.g. use numpy arrays

    Args:
        values (memoryview[int]): A list of elements to populate the PackedArray with.

    Returns:
        PackedInt64Array
    """
    pass

  def get(self, index:int)->int:
    """
				Returns the 64-bit integer at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `0`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:int)->None:
    """
				Changes the integer at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:int)->bool:
    """
				Appends a value to the array.
			"""
    pass

  def append(self, value:int)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedInt64Array)->None:
    """
				Appends a `PackedInt64Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:int)->int:
    """
				Inserts a new integer at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:int)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:int)->bool:
    """
				Returns `true` if the array contains `value`.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedInt64Array:
    """
				Returns the slice of the `PackedInt64Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedInt64Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a copy of the data converted to a `PackedByteArray`, where each element has been encoded as 8 bytes.
				The size of the new array will be `int64_array.size() * 8`.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
			"""
    pass

  def bsearch(self, value:int, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
			"""
    pass

  def duplicate(self)->PackedInt64Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:int, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
			"""
    pass

  def rfind(self, value:int, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			"""
    pass

  def count(self, value:int)->int:
    """
				Returns the number of times an element is in the array.
			"""
    pass

  def __eq__(self, other:Any|PackedInt64Array) -> bool: pass
  def __ne__(self, other:Any|PackedInt64Array) -> bool: pass
  def __add__(self, other:PackedInt64Array) -> PackedInt64Array: pass



class PackedFloat32Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold 32-bit floating-point values (float). Packs data tightly, so it saves memory for large array sizes.
		If you need to pack 64-bit floats tightly, see `PackedFloat64Array`.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedFloat32Array:pass


  @staticmethod
  def new0() -> PackedFloat32Array:pass
  @staticmethod
  def new1(from_:PackedFloat32Array) -> PackedFloat32Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedFloat32Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedFloat32Array:pass
  def __next__(self)->float:pass

  def to_list(self) -> list[float]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[float]: A list containing the elements of the PackedArray.
    """
  def get_memory_view(self) -> memoryview[float]:
    
    """
    Gets a memoryview of the PackedArray. 
    Be careful: This is not a copy of the data, but a view into the data. 
    So deleting data and then trying to access it will leed to crases

    Returns:
        memoryview[float]: A memory view containing the elements of the PackedArray.
    """
    pass
  @staticmethod
  def from_list(values:list[float]) -> PackedFloat32Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[float]): A list of elements to populate the PackedArray with.

    Returns:
        PackedFloat32Array
    """
    pass
  @staticmethod
  def from_memory_view(values:memoryview[float]) -> PackedFloat32Array:

    """
    Initializes the PackedArray from a memory view.

    This method takes a Python memory view and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).
    You can use this to populate a PackedArray fast. Please take care that the data in your array is contiguous. 
    E.g. use numpy arrays

    Args:
        values (memoryview[float]): A list of elements to populate the PackedArray with.

    Returns:
        PackedFloat32Array
    """
    pass

  def get(self, index:int)->float:
    """
				Returns the 32-bit float at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `0.0`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:float)->None:
    """
				Changes the float at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:float)->bool:
    """
				Appends an element at the end of the array.
			"""
    pass

  def append(self, value:float)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedFloat32Array)->None:
    """
				Appends a `PackedFloat32Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:float)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:float)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:float)->bool:
    """
				Returns `true` if the array contains `value`.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedFloat32Array:
    """
				Returns the slice of the `PackedFloat32Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedFloat32Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a copy of the data converted to a `PackedByteArray`, where each element has been encoded as 4 bytes.
				The size of the new array will be `float32_array.size() * 4`.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def bsearch(self, value:float, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def duplicate(self)->PackedFloat32Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:float, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def rfind(self, value:float, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def count(self, value:float)->int:
    """
				Returns the number of times an element is in the array.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def __eq__(self, other:Any|PackedFloat32Array) -> bool: pass
  def __ne__(self, other:Any|PackedFloat32Array) -> bool: pass
  def __add__(self, other:PackedFloat32Array) -> PackedFloat32Array: pass



class PackedFloat64Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold 64-bit floating-point values (double). Packs data tightly, so it saves memory for large array sizes.
		If you only need to pack 32-bit floats tightly, see `PackedFloat32Array` for a more memory-friendly alternative.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedFloat64Array` versus `Array`float``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedFloat64Array:pass


  @staticmethod
  def new0() -> PackedFloat64Array:pass
  @staticmethod
  def new1(from_:PackedFloat64Array) -> PackedFloat64Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedFloat64Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedFloat64Array:pass
  def __next__(self)->float:pass

  def to_list(self) -> list[float]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[float]: A list containing the elements of the PackedArray.
    """
  def get_memory_view(self) -> memoryview[float]:
    
    """
    Gets a memoryview of the PackedArray. 
    Be careful: This is not a copy of the data, but a view into the data. 
    So deleting data and then trying to access it will leed to crases

    Returns:
        memoryview[float]: A memory view containing the elements of the PackedArray.
    """
    pass
  @staticmethod
  def from_list(values:list[float]) -> PackedFloat64Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[float]): A list of elements to populate the PackedArray with.

    Returns:
        PackedFloat64Array
    """
    pass
  @staticmethod
  def from_memory_view(values:memoryview[float]) -> PackedFloat64Array:

    """
    Initializes the PackedArray from a memory view.

    This method takes a Python memory view and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).
    You can use this to populate a PackedArray fast. Please take care that the data in your array is contiguous. 
    E.g. use numpy arrays

    Args:
        values (memoryview[float]): A list of elements to populate the PackedArray with.

    Returns:
        PackedFloat64Array
    """
    pass

  def get(self, index:int)->float:
    """
				Returns the 64-bit float at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `0.0`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:float)->None:
    """
				Changes the float at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:float)->bool:
    """
				Appends an element at the end of the array.
			"""
    pass

  def append(self, value:float)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedFloat64Array)->None:
    """
				Appends a `PackedFloat64Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:float)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:float)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:float)->bool:
    """
				Returns `true` if the array contains `value`.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedFloat64Array:
    """
				Returns the slice of the `PackedFloat64Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedFloat64Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a copy of the data converted to a `PackedByteArray`, where each element has been encoded as 8 bytes.
				The size of the new array will be `float64_array.size() * 8`.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def bsearch(self, value:float, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def duplicate(self)->PackedFloat64Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:float, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def rfind(self, value:float, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def count(self, value:float)->int:
    """
				Returns the number of times an element is in the array.
				**Note:** `constant @GDScript.NAN` doesn't behave the same as other numbers. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def __eq__(self, other:Any|PackedFloat64Array) -> bool: pass
  def __ne__(self, other:Any|PackedFloat64Array) -> bool: pass
  def __add__(self, other:PackedFloat64Array) -> PackedFloat64Array: pass



class PackedStringArray(VariantTypeWrapper4):
  """
		An array specifically designed to hold `String`s. Packs data tightly, so it saves memory for large array sizes.
		If you want to join the strings in the array, use `String.join`.
		```gdscript
		var string_array = PackedStringArray(`"hello", "world"`)
		var string = " ".join(string_array)
		print(string) # "hello world"
		```
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedStringArray` versus `Array`String``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedStringArray:pass


  @staticmethod
  def new0() -> PackedStringArray:pass
  @staticmethod
  def new1(from_:PackedStringArray) -> PackedStringArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedStringArray:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedStringArray:pass
  def __next__(self)->String:pass

  def to_list(self) -> list[str]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[str]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[str]) -> PackedStringArray:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[str]): A list of elements to populate the PackedArray with.

    Returns:
        PackedStringArray
    """
    pass


  def get(self, index:int)->str:
    """
				Returns the `String` at the given `index` in the array. Returns an empty string and prints an error if the access is out of bounds. Negative indices are not supported; they will always consider the value to be out of bounds and return an empty string.
				This is similar to using the ```` operator (`array`index``), except that operator supports negative indices and causes a debugger break if out-of-bounds access is performed.
			"""
    pass

  def set(self, index:int, value:str)->None:
    """
				Changes the `String` at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:str)->bool:
    """
				Appends a string element at end of the array.
			"""
    pass

  def append(self, value:str)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedStringArray)->None:
    """
				Appends a `PackedStringArray` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:str)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:str)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:str)->bool:
    """
				Returns `true` if the array contains `value`.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedStringArray:
    """
				Returns the slice of the `PackedStringArray`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedStringArray`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a `PackedByteArray` with each string encoded as UTF-8. Strings are `null` terminated.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
			"""
    pass

  def bsearch(self, value:str, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
			"""
    pass

  def duplicate(self)->PackedStringArray:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:str, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
			"""
    pass

  def rfind(self, value:str, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			"""
    pass

  def count(self, value:str)->int:
    """
				Returns the number of times an element is in the array.
			"""
    pass

  def __eq__(self, other:Any|PackedStringArray) -> bool: pass
  def __ne__(self, other:Any|PackedStringArray) -> bool: pass
  def __add__(self, other:PackedStringArray) -> PackedStringArray: pass



class PackedVector2Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold `Vector2`. Packs data tightly, so it saves memory for large array sizes.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedVector2Array` versus `Array`Vector2``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector2Array:pass


  @staticmethod
  def new0() -> PackedVector2Array:pass
  @staticmethod
  def new1(from_:PackedVector2Array) -> PackedVector2Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector2Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedVector2Array:pass
  def __next__(self)->Vector2:pass

  def to_list(self) -> list[Vector2]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[Vector2]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[Vector2]) -> PackedVector2Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[Vector2]): A list of elements to populate the PackedArray with.

    Returns:
        PackedVector2Array
    """
    pass


  def get(self, index:int)->Vector2:
    """
				Returns the `Vector2` at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `Vector2(0, 0)`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:Vector2)->None:
    """
				Changes the `Vector2` at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:Vector2)->bool:
    """
				Inserts a `Vector2` at the end.
			"""
    pass

  def append(self, value:Vector2)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedVector2Array)->None:
    """
				Appends a `PackedVector2Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:Vector2)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:Vector2)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:Vector2)->bool:
    """
				Returns `true` if the array contains `value`.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector2Array:
    """
				Returns the slice of the `PackedVector2Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedVector2Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a `PackedByteArray` with each vector encoded as bytes.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def bsearch(self, value:Vector2, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def duplicate(self)->PackedVector2Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:Vector2, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def rfind(self, value:Vector2, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def count(self, value:Vector2)->int:
    """
				Returns the number of times an element is in the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def __eq__(self, other:Any|PackedVector2Array) -> bool: pass
  def __ne__(self, other:Any|PackedVector2Array) -> bool: pass
  def __mul__(self, other:Transform2D) -> PackedVector2Array: pass
  def __add__(self, other:PackedVector2Array) -> PackedVector2Array: pass



class PackedVector3Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold `Vector3`. Packs data tightly, so it saves memory for large array sizes.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedVector3Array` versus `Array`Vector3``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector3Array:pass


  @staticmethod
  def new0() -> PackedVector3Array:pass
  @staticmethod
  def new1(from_:PackedVector3Array) -> PackedVector3Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector3Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedVector3Array:pass
  def __next__(self)->Vector3:pass

  def to_list(self) -> list[Vector3]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[Vector3]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[Vector3]) -> PackedVector3Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[Vector3]): A list of elements to populate the PackedArray with.

    Returns:
        PackedVector3Array
    """
    pass


  def get(self, index:int)->Vector3:
    """
				Returns the `Vector3` at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `Vector3(0, 0, 0)`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:Vector3)->None:
    """
				Changes the `Vector3` at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:Vector3)->bool:
    """
				Inserts a `Vector3` at the end.
			"""
    pass

  def append(self, value:Vector3)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedVector3Array)->None:
    """
				Appends a `PackedVector3Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:Vector3)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:Vector3)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:Vector3)->bool:
    """
				Returns `true` if the array contains `value`.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector3Array:
    """
				Returns the slice of the `PackedVector3Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedVector3Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a `PackedByteArray` with each vector encoded as bytes.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def bsearch(self, value:Vector3, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def duplicate(self)->PackedVector3Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:Vector3, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def rfind(self, value:Vector3, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def count(self, value:Vector3)->int:
    """
				Returns the number of times an element is in the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def __eq__(self, other:Any|PackedVector3Array) -> bool: pass
  def __ne__(self, other:Any|PackedVector3Array) -> bool: pass
  def __mul__(self, other:Transform3D) -> PackedVector3Array: pass
  def __add__(self, other:PackedVector3Array) -> PackedVector3Array: pass



class PackedColorArray(VariantTypeWrapper4):
  """
		An array specifically designed to hold `Color`. Packs data tightly, so it saves memory for large array sizes.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedColorArray` versus `Array`Color``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedColorArray:pass


  @staticmethod
  def new0() -> PackedColorArray:pass
  @staticmethod
  def new1(from_:PackedColorArray) -> PackedColorArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedColorArray:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedColorArray:pass
  def __next__(self)->Color:pass

  def to_list(self) -> list[Color]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[Color]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[Color]) -> PackedColorArray:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[Color]): A list of elements to populate the PackedArray with.

    Returns:
        PackedColorArray
    """
    pass


  def get(self, index:int)->Color:
    """
				Returns the `Color` at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `Color(0, 0, 0, 1)`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:Color)->None:
    """
				Changes the `Color` at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:Color)->bool:
    """
				Appends a value to the array.
			"""
    pass

  def append(self, value:Color)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedColorArray)->None:
    """
				Appends a `PackedColorArray` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:Color)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:Color)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:Color)->bool:
    """
				Returns `true` if the array contains `value`.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedColorArray:
    """
				Returns the slice of the `PackedColorArray`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedColorArray`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a `PackedByteArray` with each color encoded as bytes.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
			"""
    pass

  def bsearch(self, value:Color, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
			"""
    pass

  def duplicate(self)->PackedColorArray:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:Color, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
			"""
    pass

  def rfind(self, value:Color, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
			"""
    pass

  def count(self, value:Color)->int:
    """
				Returns the number of times an element is in the array.
			"""
    pass

  def __eq__(self, other:Any|PackedColorArray) -> bool: pass
  def __ne__(self, other:Any|PackedColorArray) -> bool: pass
  def __add__(self, other:PackedColorArray) -> PackedColorArray: pass



class PackedVector4Array(VariantTypeWrapper4):
  """
		An array specifically designed to hold `Vector4`. Packs data tightly, so it saves memory for large array sizes.
		**Differences between packed arrays, typed arrays, and untyped arrays:** Packed arrays are generally faster to iterate on and modify compared to a typed array of the same type (e.g. `PackedVector4Array` versus `Array`Vector4``). Also, packed arrays consume less memory. As a downside, packed arrays are less flexible as they don't offer as many convenience methods such as `Array.map`. Typed arrays are in turn faster to iterate on and modify than untyped arrays.
		**Note:** Packed arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use `duplicate`. This is _not_ the case for built-in properties and methods. In these cases the returned packed array is a copy, and changing it will _not_ affect the original value. To update a built-in property of this type, modify the returned array and then assign it to the property again.
	"""

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector4Array:pass


  @staticmethod
  def new0() -> PackedVector4Array:pass
  @staticmethod
  def new1(from_:PackedVector4Array) -> PackedVector4Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector4Array:pass

  def __setitem__(self, value:Any,  index:int) -> None: pass

  def __getitem__(self,  index:int)->Any:pass

  def __iter__(self)->PackedVector4Array:pass

  def to_list(self) -> list[Vector4]:
    
    """
    Converts the PackedArray to a standard Python list.

    Returns:
        list[Vector4]: A list containing the elements of the PackedArray.
    """

  @staticmethod
  def from_list(values:list[Vector4]) -> PackedVector4Array:

    """
    Initializes the PackedArray from a list of values.

    This method takes a standard Python list and uses it to create and populate
    a Godot PackedArray (e.g., PackedInt32Array, PackedFloat32Array, etc.).

    Args:
        values (list[Vector4]): A list of elements to populate the PackedArray with.

    Returns:
        PackedVector4Array
    """
    pass


  def get(self, index:int)->Vector4:
    """
				Returns the `Vector4` at the given `index` in the array. If `index` out-of-bounds or negative, this method fails and returns `Vector4(0, 0, 0, 0)`.
				This method is similar (but not identical) to the ```` operator. Most notably, when this method fails, it doesn't pause project execution if run from the editor.
			"""
    pass

  def set(self, index:int, value:Vector4)->None:
    """
				Changes the `Vector4` at the given index.
			"""
    pass

  def size(self)->int:
    """
				Returns the number of elements in the array.
			"""
    pass

  def is_empty(self)->bool:
    """
				Returns `true` if the array is empty.
			"""
    pass

  def push_back(self, value:Vector4)->bool:
    """
				Inserts a `Vector4` at the end.
			"""
    pass

  def append(self, value:Vector4)->bool:
    """
				Appends an element at the end of the array (alias of `push_back`).
			"""
    pass

  def append_array(self, array:PackedVector4Array)->None:
    """
				Appends a `PackedVector4Array` at the end of this array.
			"""
    pass

  def remove_at(self, index:int)->None:
    """
				Removes an element from the array by index.
			"""
    pass

  def insert(self, at_index:int, value:Vector4)->int:
    """
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
			"""
    pass

  def fill(self, value:Vector4)->None:
    """
				Assigns the given value to all elements in the array. This can typically be used together with `resize` to create an array with a given size and initialized elements.
			"""
    pass

  def resize(self, new_size:int)->int:
    """
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. Calling `resize` once and assigning the new values is faster than adding new elements one by one.
				Returns `constant OK` on success, or one of the following `enum Error` constants if this method fails: `constant ERR_INVALID_PARAMETER` if the size is negative, or `constant ERR_OUT_OF_MEMORY` if allocations fail. Use `size` to find the actual size of the array after resize.
			"""
    pass

  def clear(self)->None:
    """
				Clears the array. This is equivalent to using `resize` with a size of `0`.
			"""
    pass

  def has(self, value:Vector4)->bool:
    """
				Returns `true` if the array contains `value`.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def reverse(self)->None:
    """
				Reverses the order of the elements in the array.
			"""
    pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector4Array:
    """
				Returns the slice of the `PackedVector4Array`, from `begin` (inclusive) to `end` (exclusive), as a new `PackedVector4Array`.
				The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
				If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
			"""
    pass

  def to_byte_array(self)->PackedByteArray:
    """
				Returns a `PackedByteArray` with each vector encoded as bytes.
			"""
    pass

  def sort(self)->None:
    """
				Sorts the elements of the array in ascending order.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def bsearch(self, value:Vector4, before:bool=True)->int:
    """
				Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
				**Note:** Calling `bsearch` on an unsorted array results in unexpected behavior.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def duplicate(self)->PackedVector4Array:
    """
				Creates a copy of the array, and returns it.
			"""
    pass

  def find(self, value:Vector4, from_:int=0)->int:
    """
				Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def rfind(self, value:Vector4, from_:int=-1)->int:
    """
				Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def count(self, value:Vector4)->int:
    """
				Returns the number of times an element is in the array.
				**Note:** Vectors with `constant @GDScript.NAN` elements don't behave the same as other vectors. Therefore, the results from this method may not be accurate if NaNs are included.
			"""
    pass

  def __eq__(self, other:Any|PackedVector4Array) -> bool: pass
  def __ne__(self, other:Any|PackedVector4Array) -> bool: pass
  def __add__(self, other:PackedVector4Array) -> PackedVector4Array: pass

