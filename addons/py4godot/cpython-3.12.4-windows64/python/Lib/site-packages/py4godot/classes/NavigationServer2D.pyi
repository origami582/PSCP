from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMeshSourceGeometryData2D as __navigationmeshsourcegeometrydata2d__
import py4godot.classes.e as __e__
import py4godot.classes.NavigationPathQueryResult2D as __navigationpathqueryresult2d__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.NavigationPathQueryParameters2D as __navigationpathqueryparameters2d__
import py4godot.classes.I as __i__
import py4godot.classes.p as __p__
import py4godot.classes.D as __d__
import py4godot.classes.R as __r__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.Node as __node__
import py4godot.classes.A as __a__
import py4godot.classes.NavigationPolygon as __navigationpolygon__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__



class NavigationServer2D(__object__.Object):
  """
		NavigationServer2D is the server that handles navigation maps, regions and agents. It does not handle A* navigation from `AStar2D` or `AStarGrid2D`.
		Maps are divided into regions, which are composed of navigation polygons. Together, they define the traversable areas in the 2D world.
		**Note:** Most `NavigationServer2D` changes take effect after the next physics frame and not immediately. This includes all changes made to maps, regions or agents by navigation-related nodes in the scene tree or made through scripts.
		For two regions to be connected to each other, they must share a similar edge. An edge is considered connected to another if both of its two vertices are at a distance less than `edge_connection_margin` to the respective other edge's vertex.
		You may assign navigation layers to regions with `NavigationServer2D.region_set_navigation_layers`, which then can be checked upon when requesting a path with `NavigationServer2D.map_get_path`. This can be used to allow or deny certain areas for some objects.
		To use the collision avoidance system, you may use agents. You can set an agent's target velocity, then the servers will emit a callback with a modified velocity.
		**Note:** The collision avoidance system ignores regions. Using the modified velocity directly may move an agent outside of the traversable area. This is a limitation of the collision avoidance system, any more complex situation may require the use of the physics engine.
		This server keeps tracks of any call and executes them during the sync phase. This means that you can request any change to the map, using any thread, without worrying.
	"""
  map_changed: BuiltinSignal
  navigation_debug_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->NavigationServer2D:pass

  @staticmethod
  def instance()->NavigationServer2D:pass

  def get_maps(self)->typedarray::RID:
    """
				Returns all created navigation map `RID`s on the NavigationServer. This returns both 2D and 3D created navigation maps as there is technically no distinction between them.
			"""
    pass

  def map_create(self)->__core__.RID:
    """
				Create a new map.
			"""
    pass

  def map_set_active(self, map:__core__.RID, active:bool)->None:
    """
				Sets the map active.
			"""
    pass

  def map_is_active(self, map:__core__.RID)->bool:
    """
				Returns `true` if the map is active.
			"""
    pass

  def map_set_cell_size(self, map:__core__.RID, cell_size:float)->None:
    """
				Sets the map cell size used to rasterize the navigation mesh vertices. Must match with the cell size of the used navigation meshes.
			"""
    pass

  def map_get_cell_size(self, map:__core__.RID)->float:
    """
				Returns the map cell size used to rasterize the navigation mesh vertices.
			"""
    pass

  def map_set_use_edge_connections(self, map:__core__.RID, enabled:bool)->None:
    """
				Set the navigation `map` edge connection use. If `enabled` is `true`, the navigation map allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
			"""
    pass

  def map_get_use_edge_connections(self, map:__core__.RID)->bool:
    """
				Returns whether the navigation `map` allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
			"""
    pass

  def map_set_edge_connection_margin(self, map:__core__.RID, margin:float)->None:
    """
				Set the map edge connection margin used to weld the compatible region edges.
			"""
    pass

  def map_get_edge_connection_margin(self, map:__core__.RID)->float:
    """
				Returns the edge connection margin of the map. The edge connection margin is a distance used to connect two regions.
			"""
    pass

  def map_set_link_connection_radius(self, map:__core__.RID, radius:float)->None:
    """
				Set the map's link connection radius used to connect links to navigation polygons.
			"""
    pass

  def map_get_link_connection_radius(self, map:__core__.RID)->float:
    """
				Returns the link connection radius of the map. This distance is the maximum range any link will search for navigation mesh polygons to connect to.
			"""
    pass

  def map_get_path(self, map:__core__.RID, origin:__core__.Vector2, destination:__core__.Vector2, optimize:bool, navigation_layers:int=1)->__core__.PackedVector2Array:
    """
				Returns the navigation path to reach the destination from the origin. `navigation_layers` is a bitmask of all region navigation layers that are allowed to be in the path.
			"""
    pass

  def map_get_closest_point(self, map:__core__.RID, to_point:__core__.Vector2)->__core__.Vector2:
    """
				Returns the navigation mesh surface point closest to the provided `to_point` on the navigation `map`.
			"""
    pass

  def map_get_closest_point_owner(self, map:__core__.RID, to_point:__core__.Vector2)->__core__.RID:
    """
				Returns the owner region RID for the navigation mesh surface point closest to the provided `to_point` on the navigation `map`.
			"""
    pass

  def map_get_links(self, map:__core__.RID)->typedarray::RID:
    """
				Returns all navigation link `RID`s that are currently assigned to the requested navigation `map`.
			"""
    pass

  def map_get_regions(self, map:__core__.RID)->typedarray::RID:
    """
				Returns all navigation regions `RID`s that are currently assigned to the requested navigation `map`.
			"""
    pass

  def map_get_agents(self, map:__core__.RID)->typedarray::RID:
    """
				Returns all navigation agents `RID`s that are currently assigned to the requested navigation `map`.
			"""
    pass

  def map_get_obstacles(self, map:__core__.RID)->typedarray::RID:
    """
				Returns all navigation obstacle `RID`s that are currently assigned to the requested navigation `map`.
			"""
    pass

  def map_force_update(self, map:__core__.RID)->None:
    """
				This function immediately forces synchronization of the specified navigation `map` `RID`. By default navigation maps are only synchronized at the end of each physics frame. This function can be used to immediately (re)calculate all the navigation meshes and region connections of the navigation map. This makes it possible to query a navigation path for a changed map immediately and in the same frame (multiple times if needed).
				Due to technical restrictions the current NavigationServer command queue will be flushed. This means all already queued update commands for this physics frame will be executed, even those intended for other maps, regions and agents not part of the specified map. The expensive computation of the navigation meshes and region connections of a map will only be done for the specified map. Other maps will receive the normal synchronization at the end of the physics frame. Should the specified map receive changes after the forced update it will update again as well when the other maps receive their update.
				Avoidance processing and dispatch of the `safe_velocity` signals is unaffected by this function and continues to happen for all maps and agents at the end of the physics frame.
				**Note:** With great power comes great responsibility. This function should only be used by users that really know what they are doing and have a good reason for it. Forcing an immediate update of a navigation map requires locking the NavigationServer and flushing the entire NavigationServer command queue. Not only can this severely impact the performance of a game but it can also introduce bugs if used inappropriately without much foresight.
			"""
    pass

  def map_get_iteration_id(self, map:__core__.RID)->int:
    """
				Returns the current iteration id of the navigation map. Every time the navigation map changes and synchronizes the iteration id increases. An iteration id of 0 means the navigation map has never synchronized.
				**Note:** The iteration id will wrap back to 1 after reaching its range limit.
			"""
    pass

  def map_set_use_async_iterations(self, map:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true` the `map` synchronization uses an async process that runs on a background thread.
			"""
    pass

  def map_get_use_async_iterations(self, map:__core__.RID)->bool:
    """
				Returns `true` if the `map` synchronization uses an async process that runs on a background thread.
			"""
    pass

  def map_get_random_point(self, map:__core__.RID, navigation_layers:int, uniformly:bool)->__core__.Vector2:
    """
				Returns a random position picked from all map region polygons with matching `navigation_layers`.
				If `uniformly` is `true`, all map regions, polygons, and faces are weighted by their surface area (slower).
				If `uniformly` is `false`, just a random region and a random polygon are picked (faster).
			"""
    pass

  def query_path(self, parameters:__navigationpathqueryparameters2d__.NavigationPathQueryParameters2D, result:__navigationpathqueryresult2d__.NavigationPathQueryResult2D, callback:__core__.Callable= __core__.Callable.new0())->None:
    """
				Queries a path in a given navigation map. Start and target position and other parameters are defined through `NavigationPathQueryParameters2D`. Updates the provided `NavigationPathQueryResult2D` result object with the path among other results requested by the query. After the process is finished the optional `callback` will be called.
			"""
    pass

  def region_create(self)->__core__.RID:
    """
				Creates a new region.
			"""
    pass

  def region_set_enabled(self, region:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true` the specified `region` will contribute to its current navigation map.
			"""
    pass

  def region_get_enabled(self, region:__core__.RID)->bool:
    """
				Returns `true` if the specified `region` is enabled.
			"""
    pass

  def region_set_use_edge_connections(self, region:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, the navigation `region` will use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
			"""
    pass

  def region_get_use_edge_connections(self, region:__core__.RID)->bool:
    """
				Returns whether the navigation `region` is set to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
			"""
    pass

  def region_set_enter_cost(self, region:__core__.RID, enter_cost:float)->None:
    """
				Sets the `enter_cost` for this `region`.
			"""
    pass

  def region_get_enter_cost(self, region:__core__.RID)->float:
    """
				Returns the enter cost of this `region`.
			"""
    pass

  def region_set_travel_cost(self, region:__core__.RID, travel_cost:float)->None:
    """
				Sets the `travel_cost` for this `region`.
			"""
    pass

  def region_get_travel_cost(self, region:__core__.RID)->float:
    """
				Returns the travel cost of this `region`.
			"""
    pass

  def region_set_owner_id(self, region:__core__.RID, owner_id:int)->None:
    """
				Set the `ObjectID` of the object which manages this region.
			"""
    pass

  def region_get_owner_id(self, region:__core__.RID)->int:
    """
				Returns the `ObjectID` of the object which manages this region.
			"""
    pass

  def region_owns_point(self, region:__core__.RID, point:__core__.Vector2)->bool:
    """
				Returns `true` if the provided `point` in world space is currently owned by the provided navigation `region`. Owned in this context means that one of the region's navigation mesh polygon faces has a possible position at the closest distance to this point compared to all other navigation meshes from other navigation regions that are also registered on the navigation map of the provided region.
				If multiple navigation meshes have positions at equal distance the navigation region whose polygons are processed first wins the ownership. Polygons are processed in the same order that navigation regions were registered on the NavigationServer.
				**Note:** If navigation meshes from different navigation regions overlap (which should be avoided in general) the result might not be what is expected.
			"""
    pass

  def region_set_map(self, region:__core__.RID, map:__core__.RID)->None:
    """
				Sets the map for the region.
			"""
    pass

  def region_get_map(self, region:__core__.RID)->__core__.RID:
    """
				Returns the navigation map `RID` the requested `region` is currently assigned to.
			"""
    pass

  def region_set_navigation_layers(self, region:__core__.RID, navigation_layers:int)->None:
    """
				Set the region's navigation layers. This allows selecting regions from a path request (when using `NavigationServer2D.map_get_path`).
			"""
    pass

  def region_get_navigation_layers(self, region:__core__.RID)->int:
    """
				Returns the region's navigation layers.
			"""
    pass

  def region_set_transform(self, region:__core__.RID, transform:__core__.Transform2D)->None:
    """
				Sets the global transformation for the region.
			"""
    pass

  def region_get_transform(self, region:__core__.RID)->__core__.Transform2D:
    """
				Returns the global transformation of this `region`.
			"""
    pass

  def region_set_navigation_polygon(self, region:__core__.RID, navigation_polygon:__navigationpolygon__.NavigationPolygon)->None:
    """
				Sets the `navigation_polygon` for the region.
			"""
    pass

  def region_get_connections_count(self, region:__core__.RID)->int:
    """
				Returns how many connections this `region` has with other regions in the map.
			"""
    pass

  def region_get_connection_pathway_start(self, region:__core__.RID, connection:int)->__core__.Vector2:
    """
				Returns the starting point of a connection door. `connection` is an index between 0 and the return value of `region_get_connections_count`.
			"""
    pass

  def region_get_connection_pathway_end(self, region:__core__.RID, connection:int)->__core__.Vector2:
    """
				Returns the ending point of a connection door. `connection` is an index between 0 and the return value of `region_get_connections_count`.
			"""
    pass

  def region_get_closest_point(self, region:__core__.RID, to_point:__core__.Vector2)->__core__.Vector2:
    """
				Returns the navigation mesh surface point closest to the provided `to_point` on the navigation `region`.
			"""
    pass

  def region_get_random_point(self, region:__core__.RID, navigation_layers:int, uniformly:bool)->__core__.Vector2:
    """
				Returns a random position picked from all region polygons with matching `navigation_layers`.
				If `uniformly` is `true`, all region polygons and faces are weighted by their surface area (slower).
				If `uniformly` is `false`, just a random polygon and face is picked (faster).
			"""
    pass

  def region_get_bounds(self, region:__core__.RID)->__core__.Rect2:
    """
				Returns the axis-aligned rectangle for the `region`'s transformed navigation mesh.
			"""
    pass

  def link_create(self)->__core__.RID:
    """
				Create a new link between two positions on a map.
			"""
    pass

  def link_set_map(self, link:__core__.RID, map:__core__.RID)->None:
    """
				Sets the navigation map `RID` for the link.
			"""
    pass

  def link_get_map(self, link:__core__.RID)->__core__.RID:
    """
				Returns the navigation map `RID` the requested `link` is currently assigned to.
			"""
    pass

  def link_set_enabled(self, link:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, the specified `link` will contribute to its current navigation map.
			"""
    pass

  def link_get_enabled(self, link:__core__.RID)->bool:
    """
				Returns `true` if the specified `link` is enabled.
			"""
    pass

  def link_set_bidirectional(self, link:__core__.RID, bidirectional:bool)->None:
    """
				Sets whether this `link` can be travelled in both directions.
			"""
    pass

  def link_is_bidirectional(self, link:__core__.RID)->bool:
    """
				Returns whether this `link` can be travelled in both directions.
			"""
    pass

  def link_set_navigation_layers(self, link:__core__.RID, navigation_layers:int)->None:
    """
				Set the links's navigation layers. This allows selecting links from a path request (when using `NavigationServer2D.map_get_path`).
			"""
    pass

  def link_get_navigation_layers(self, link:__core__.RID)->int:
    """
				Returns the navigation layers for this `link`.
			"""
    pass

  def link_set_start_position(self, link:__core__.RID, position:__core__.Vector2)->None:
    """
				Sets the entry position for this `link`.
			"""
    pass

  def link_get_start_position(self, link:__core__.RID)->__core__.Vector2:
    """
				Returns the starting position of this `link`.
			"""
    pass

  def link_set_end_position(self, link:__core__.RID, position:__core__.Vector2)->None:
    """
				Sets the exit position for the `link`.
			"""
    pass

  def link_get_end_position(self, link:__core__.RID)->__core__.Vector2:
    """
				Returns the ending position of this `link`.
			"""
    pass

  def link_set_enter_cost(self, link:__core__.RID, enter_cost:float)->None:
    """
				Sets the `enter_cost` for this `link`.
			"""
    pass

  def link_get_enter_cost(self, link:__core__.RID)->float:
    """
				Returns the enter cost of this `link`.
			"""
    pass

  def link_set_travel_cost(self, link:__core__.RID, travel_cost:float)->None:
    """
				Sets the `travel_cost` for this `link`.
			"""
    pass

  def link_get_travel_cost(self, link:__core__.RID)->float:
    """
				Returns the travel cost of this `link`.
			"""
    pass

  def link_set_owner_id(self, link:__core__.RID, owner_id:int)->None:
    """
				Set the `ObjectID` of the object which manages this link.
			"""
    pass

  def link_get_owner_id(self, link:__core__.RID)->int:
    """
				Returns the `ObjectID` of the object which manages this link.
			"""
    pass

  def agent_create(self)->__core__.RID:
    """
				Creates the agent.
			"""
    pass

  def agent_set_avoidance_enabled(self, agent:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, the specified `agent` uses avoidance.
			"""
    pass

  def agent_get_avoidance_enabled(self, agent:__core__.RID)->bool:
    """
				Return `true` if the specified `agent` uses avoidance.
			"""
    pass

  def agent_set_map(self, agent:__core__.RID, map:__core__.RID)->None:
    """
				Puts the agent in the map.
			"""
    pass

  def agent_get_map(self, agent:__core__.RID)->__core__.RID:
    """
				Returns the navigation map `RID` the requested `agent` is currently assigned to.
			"""
    pass

  def agent_set_paused(self, agent:__core__.RID, paused:bool)->None:
    """
				If `paused` is `true` the specified `agent` will not be processed. For example, it will not calculate avoidance velocities or receive avoidance callbacks.
			"""
    pass

  def agent_get_paused(self, agent:__core__.RID)->bool:
    """
				Returns `true` if the specified `agent` is paused.
			"""
    pass

  def agent_set_neighbor_distance(self, agent:__core__.RID, distance:float)->None:
    """
				Sets the maximum distance to other agents this agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
			"""
    pass

  def agent_get_neighbor_distance(self, agent:__core__.RID)->float:
    """
				Returns the maximum distance to other agents the specified `agent` takes into account in the navigation.
			"""
    pass

  def agent_set_max_neighbors(self, agent:__core__.RID, count:int)->None:
    """
				Sets the maximum number of other agents the agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
			"""
    pass

  def agent_get_max_neighbors(self, agent:__core__.RID)->int:
    """
				Returns the maximum number of other agents the specified `agent` takes into account in the navigation.
			"""
    pass

  def agent_set_time_horizon_agents(self, agent:__core__.RID, time_horizon:float)->None:
    """
				The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to other agents. The larger this number, the sooner this agent will respond to the presence of other agents, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
			"""
    pass

  def agent_get_time_horizon_agents(self, agent:__core__.RID)->float:
    """
				Returns the minimal amount of time for which the specified `agent`'s velocities that are computed by the simulation are safe with respect to other agents.
			"""
    pass

  def agent_set_time_horizon_obstacles(self, agent:__core__.RID, time_horizon:float)->None:
    """
				The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to static avoidance obstacles. The larger this number, the sooner this agent will respond to the presence of static avoidance obstacles, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
			"""
    pass

  def agent_get_time_horizon_obstacles(self, agent:__core__.RID)->float:
    """
				Returns the minimal amount of time for which the specified `agent`'s velocities that are computed by the simulation are safe with respect to static avoidance obstacles.
			"""
    pass

  def agent_set_radius(self, agent:__core__.RID, radius:float)->None:
    """
				Sets the radius of the agent.
			"""
    pass

  def agent_get_radius(self, agent:__core__.RID)->float:
    """
				Returns the radius of the specified `agent`.
			"""
    pass

  def agent_set_max_speed(self, agent:__core__.RID, max_speed:float)->None:
    """
				Sets the maximum speed of the agent. Must be positive.
			"""
    pass

  def agent_get_max_speed(self, agent:__core__.RID)->float:
    """
				Returns the maximum speed of the specified `agent`.
			"""
    pass

  def agent_set_velocity_forced(self, agent:__core__.RID, velocity:__core__.Vector2)->None:
    """
				Replaces the internal velocity in the collision avoidance simulation with `velocity` for the specified `agent`. When an agent is teleported to a new position far away this function should be used in the same frame. If called frequently this function can get agents stuck.
			"""
    pass

  def agent_set_velocity(self, agent:__core__.RID, velocity:__core__.Vector2)->None:
    """
				Sets `velocity` as the new wanted velocity for the specified `agent`. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agent's and obstacles. When an agent is teleported to a new position far away use `agent_set_velocity_forced` instead to reset the internal velocity state.
			"""
    pass

  def agent_get_velocity(self, agent:__core__.RID)->__core__.Vector2:
    """
				Returns the velocity of the specified `agent`.
			"""
    pass

  def agent_set_position(self, agent:__core__.RID, position:__core__.Vector2)->None:
    """
				Sets the position of the agent in world space.
			"""
    pass

  def agent_get_position(self, agent:__core__.RID)->__core__.Vector2:
    """
				Returns the position of the specified `agent` in world space.
			"""
    pass

  def agent_is_map_changed(self, agent:__core__.RID)->bool:
    """
				Returns `true` if the map got changed the previous frame.
			"""
    pass

  def agent_set_avoidance_callback(self, agent:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the callback `Callable` that gets called after each avoidance processing step for the `agent`. The calculated `safe_velocity` will be dispatched with a signal to the object just before the physics calculations.
				**Note:** Created callbacks are always processed independently of the SceneTree state as long as the agent is on a navigation map and not freed. To disable the dispatch of a callback from an agent use `agent_set_avoidance_callback` again with an empty `Callable`.
			"""
    pass

  def agent_has_avoidance_callback(self, agent:__core__.RID)->bool:
    """
				Return `true` if the specified `agent` has an avoidance callback.
			"""
    pass

  def agent_set_avoidance_layers(self, agent:__core__.RID, layers:int)->None:
    """
				Set the agent's `avoidance_layers` bitmask.
			"""
    pass

  def agent_get_avoidance_layers(self, agent:__core__.RID)->int:
    """
				Returns the `avoidance_layers` bitmask of the specified `agent`.
			"""
    pass

  def agent_set_avoidance_mask(self, agent:__core__.RID, mask:int)->None:
    """
				Set the agent's `avoidance_mask` bitmask.
			"""
    pass

  def agent_get_avoidance_mask(self, agent:__core__.RID)->int:
    """
				Returns the `avoidance_mask` bitmask of the specified `agent`.
			"""
    pass

  def agent_set_avoidance_priority(self, agent:__core__.RID, priority:float)->None:
    """
				Set the agent's `avoidance_priority` with a `priority` between 0.0 (lowest priority) to 1.0 (highest priority).
				The specified `agent` does not adjust the velocity for other agents that would match the `avoidance_mask` but have a lower `avoidance_priority`. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent.
			"""
    pass

  def agent_get_avoidance_priority(self, agent:__core__.RID)->float:
    """
				Returns the `avoidance_priority` of the specified `agent`.
			"""
    pass

  def obstacle_create(self)->__core__.RID:
    """
				Creates a new navigation obstacle.
			"""
    pass

  def obstacle_set_avoidance_enabled(self, obstacle:__core__.RID, enabled:bool)->None:
    """
				If `enabled` is `true`, the provided `obstacle` affects avoidance using agents.
			"""
    pass

  def obstacle_get_avoidance_enabled(self, obstacle:__core__.RID)->bool:
    """
				Returns `true` if the provided `obstacle` has avoidance enabled.
			"""
    pass

  def obstacle_set_map(self, obstacle:__core__.RID, map:__core__.RID)->None:
    """
				Sets the navigation map `RID` for the obstacle.
			"""
    pass

  def obstacle_get_map(self, obstacle:__core__.RID)->__core__.RID:
    """
				Returns the navigation map `RID` the requested `obstacle` is currently assigned to.
			"""
    pass

  def obstacle_set_paused(self, obstacle:__core__.RID, paused:bool)->None:
    """
				If `paused` is `true` the specified `obstacle` will not be processed. For example, it will no longer affect avoidance velocities.
			"""
    pass

  def obstacle_get_paused(self, obstacle:__core__.RID)->bool:
    """
				Returns `true` if the specified `obstacle` is paused.
			"""
    pass

  def obstacle_set_radius(self, obstacle:__core__.RID, radius:float)->None:
    """
				Sets the radius of the dynamic obstacle.
			"""
    pass

  def obstacle_get_radius(self, obstacle:__core__.RID)->float:
    """
				Returns the radius of the specified dynamic `obstacle`.
			"""
    pass

  def obstacle_set_velocity(self, obstacle:__core__.RID, velocity:__core__.Vector2)->None:
    """
				Sets `velocity` of the dynamic `obstacle`. Allows other agents to better predict the movement of the dynamic obstacle. Only works in combination with the radius of the obstacle.
			"""
    pass

  def obstacle_get_velocity(self, obstacle:__core__.RID)->__core__.Vector2:
    """
				Returns the velocity of the specified dynamic `obstacle`.
			"""
    pass

  def obstacle_set_position(self, obstacle:__core__.RID, position:__core__.Vector2)->None:
    """
				Sets the position of the obstacle in world space.
			"""
    pass

  def obstacle_get_position(self, obstacle:__core__.RID)->__core__.Vector2:
    """
				Returns the position of the specified `obstacle` in world space.
			"""
    pass

  def obstacle_set_vertices(self, obstacle:__core__.RID, vertices:__core__.PackedVector2Array)->None:
    """
				Sets the outline vertices for the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out.
			"""
    pass

  def obstacle_get_vertices(self, obstacle:__core__.RID)->__core__.PackedVector2Array:
    """
				Returns the outline vertices for the specified `obstacle`.
			"""
    pass

  def obstacle_set_avoidance_layers(self, obstacle:__core__.RID, layers:int)->None:
    """
				Set the obstacles's `avoidance_layers` bitmask.
			"""
    pass

  def obstacle_get_avoidance_layers(self, obstacle:__core__.RID)->int:
    """
				Returns the `avoidance_layers` bitmask of the specified `obstacle`.
			"""
    pass

  def parse_source_geometry_data(self, navigation_polygon:__navigationpolygon__.NavigationPolygon, source_geometry_data:__navigationmeshsourcegeometrydata2d__.NavigationMeshSourceGeometryData2D, root_node:__node__.Node, callback:__core__.Callable= __core__.Callable.new0())->None:
    """
				Parses the `SceneTree` for source geometry according to the properties of `navigation_polygon`. Updates the provided `source_geometry_data` resource with the resulting data. The resource can then be used to bake a navigation mesh with `bake_from_source_geometry_data`. After the process is finished the optional `callback` will be called.
				**Note:** This function needs to run on the main thread or with a deferred call as the SceneTree is not thread-safe.
				**Performance:** While convenient, reading data arrays from `Mesh` resources can affect the frame rate negatively. The data needs to be received from the GPU, stalling the `RenderingServer` in the process. For performance prefer the use of e.g. collision shapes or creating the data arrays entirely in code.
			"""
    pass

  def bake_from_source_geometry_data(self, navigation_polygon:__navigationpolygon__.NavigationPolygon, source_geometry_data:__navigationmeshsourcegeometrydata2d__.NavigationMeshSourceGeometryData2D, callback:__core__.Callable= __core__.Callable.new0())->None:
    """
				Bakes the provided `navigation_polygon` with the data from the provided `source_geometry_data`. After the process is finished the optional `callback` will be called.
			"""
    pass

  def bake_from_source_geometry_data_async(self, navigation_polygon:__navigationpolygon__.NavigationPolygon, source_geometry_data:__navigationmeshsourcegeometrydata2d__.NavigationMeshSourceGeometryData2D, callback:__core__.Callable= __core__.Callable.new0())->None:
    """
				Bakes the provided `navigation_polygon` with the data from the provided `source_geometry_data` as an async task running on a background thread. After the process is finished the optional `callback` will be called.
			"""
    pass

  def is_baking_navigation_polygon(self, navigation_polygon:__navigationpolygon__.NavigationPolygon)->bool:
    """
				Returns `true` when the provided navigation polygon is being baked on a background thread.
			"""
    pass

  def source_geometry_parser_create(self)->__core__.RID:
    """
				Creates a new source geometry parser. If a `Callable` is set for the parser with `source_geometry_parser_set_callback` the callback will be called for every single node that gets parsed whenever `parse_source_geometry_data` is used.
			"""
    pass

  def source_geometry_parser_set_callback(self, parser:__core__.RID, callback:__core__.Callable)->None:
    """
				Sets the `callback` `Callable` for the specific source geometry `parser`. The `Callable` will receive a call with the following parameters:
				- `navigation_mesh` - The `NavigationPolygon` reference used to define the parse settings. Do NOT edit or add directly to the navigation mesh.
				- `source_geometry_data` - The `NavigationMeshSourceGeometryData2D` reference. Add custom source geometry for navigation mesh baking to this object.
				- `node` - The `Node` that is parsed.
			"""
    pass

  def simplify_path(self, path:__core__.PackedVector2Array, epsilon:float)->__core__.PackedVector2Array:
    """
				Returns a simplified version of `path` with less critical path points removed. The simplification amount is in worlds units and controlled by `epsilon`. The simplification uses a variant of Ramer-Douglas-Peucker algorithm for curve point decimation.
				Path simplification can be helpful to mitigate various path following issues that can arise with certain agent types and script behaviors. E.g. "steering" agents or avoidance in "open fields".
			"""
    pass

  def free_rid(self, rid:__core__.RID)->None:
    """
				Destroys the given RID.
			"""
    pass

  def set_debug_enabled(self, enabled:bool)->None:
    """
				If `true` enables debug mode on the NavigationServer.
			"""
    pass

  def get_debug_enabled(self)->bool:
    """
				Returns `true` when the NavigationServer has debug enabled.
			"""
    pass


