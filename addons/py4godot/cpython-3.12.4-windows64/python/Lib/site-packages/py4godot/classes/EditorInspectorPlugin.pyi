from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Control as __control__
import py4godot.classes.Object as __object__
import py4godot.classes.RefCounted as __refcounted__



class EditorInspectorPlugin(__refcounted__.RefCounted):
  """
		`EditorInspectorPlugin` allows adding custom property editors to `EditorInspector`.
		When an object is edited, the `_can_handle` function is called and must return `true` if the object type is supported.
		If supported, the function `_parse_begin` will be called, allowing to place custom controls at the beginning of the class.
		Subsequently, the `_parse_category` and `_parse_property` are called for every category and property. They offer the ability to add custom controls to the inspector too.
		Finally, `_parse_end` will be called.
		On each of these calls, the "add" functions can be called.
		To use `EditorInspectorPlugin`, register it using the `EditorPlugin.add_inspector_plugin` method first.
	"""

  @staticmethod
  def constructor()->EditorInspectorPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorInspectorPlugin:pass


  def _can_handle(self, object:__object__.Object)->bool:
    """
				Returns `true` if this object can be handled by this plugin.
			"""
    pass

  def _parse_begin(self, object:__object__.Object)->None:
    """
				Called to allow adding controls at the beginning of the property list for `object`.
			"""
    pass

  def _parse_category(self, object:__object__.Object, category:str)->None:
    """
				Called to allow adding controls at the beginning of a category in the property list for `object`.
			"""
    pass

  def _parse_group(self, object:__object__.Object, group:str)->None:
    """
				Called to allow adding controls at the beginning of a group or a sub-group in the property list for `object`.
			"""
    pass

  def _parse_property(self, object:__object__.Object, type:int , name:str, hint_type:int , hint_string:str, usage_flags:int, wide:bool)->bool:
    """
				Called to allow adding property-specific editors to the property list for `object`. The added editor control must extend `EditorProperty`. Returning `true` removes the built-in editor for this property, otherwise allows to insert a custom editor before the built-in one.
			"""
    pass

  def _parse_end(self, object:__object__.Object)->None:
    """
				Called to allow adding controls at the end of the property list for `object`.
			"""
    pass

  def add_custom_control(self, control:__control__.Control)->None:
    """
				Adds a custom control, which is not necessarily a property editor.
			"""
    pass

  def add_property_editor(self, property:str, editor:__control__.Control, add_to_end:bool=False, label:str= __core__.String.new0())->None:
    """
				Adds a property editor for an individual property. The `editor` control must extend `EditorProperty`.
				There can be multiple property editors for a property. If `add_to_end` is `true`, this newly added editor will be displayed after all the other editors of the property whose `add_to_end` is `false`. For example, the editor uses this parameter to add an "Edit Region" button for `Sprite2D.region_rect` below the regular `Rect2` editor.
				`label` can be used to choose a custom label for the property editor in the inspector. If left empty, the label is computed from the name of the property instead.
			"""
    pass

  def add_property_editor_for_multiple_properties(self, label:str, properties:__core__.PackedStringArray, editor:__control__.Control)->None:
    """
				Adds an editor that allows modifying multiple properties. The `editor` control must extend `EditorProperty`.
			"""
    pass


