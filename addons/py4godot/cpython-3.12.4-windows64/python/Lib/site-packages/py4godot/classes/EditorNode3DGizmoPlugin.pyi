from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.T as __t__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.D as __d__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.m as __m__
import py4godot.classes.l as __l__
import py4godot.classes.p as __p__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.d as __d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.f as __f__
import py4godot.classes.A as __a__
import py4godot.classes.EditorNode3DGizmo as __editornode3dgizmo__
import py4godot.classes.y as __y__
import py4godot.classes.s as __s__
import py4godot.classes.P as __p__
import py4godot.classes.3 as __3__



class EditorNode3DGizmoPlugin(__resource__.Resource):
  """
		`EditorNode3DGizmoPlugin` allows you to define a new type of Gizmo. There are two main ways to do so: extending `EditorNode3DGizmoPlugin` for the simpler gizmos, or creating a new `EditorNode3DGizmo` type. See the tutorial in the documentation for more info.
		To use `EditorNode3DGizmoPlugin`, register it using the `EditorPlugin.add_node_3d_gizmo_plugin` method first.
	"""

  @staticmethod
  def constructor()->EditorNode3DGizmoPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorNode3DGizmoPlugin:pass


  def _has_gizmo(self, for_node_3d:__node3d__.Node3D)->bool:
    """
				Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a `Node3D` node is added to a scene this method is called, if it returns `true` the node gets a generic `EditorNode3DGizmo` assigned and is added to this plugin's list of active gizmos.
			"""
    pass

  def _create_gizmo(self, for_node_3d:__node3d__.Node3D)->__editornode3dgizmo__.EditorNode3DGizmo:
    """
				Override this method to return a custom `EditorNode3DGizmo` for the 3D nodes of your choice, return `null` for the rest of nodes. See also `_has_gizmo`.
			"""
    pass

  def _get_gizmo_name(self)->str:
    """
				Override this method to provide the name that will appear in the gizmo visibility menu.
			"""
    pass

  def _get_priority(self)->int:
    """
				Override this method to set the gizmo's priority. Gizmos with higher priority will have precedence when processing inputs like handles or subgizmos selection.
				All built-in editor gizmos return a priority of `-1`. If not overridden, this method will return `0`, which means custom gizmos will automatically get higher priority than built-in gizmos.
			"""
    pass

  def _can_be_hidden(self)->bool:
    """
				Override this method to define whether the gizmos handled by this plugin can be hidden or not. Returns `true` if not overridden.
			"""
    pass

  def _is_selectable_when_hidden(self)->bool:
    """
				Override this method to define whether Node3D with this gizmo should be selectable even when the gizmo is hidden.
			"""
    pass

  def _redraw(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo)->None:
    """
				Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call `EditorNode3DGizmo.clear` at the beginning of this method and then add visual elements depending on the node's properties.
			"""
    pass

  def _get_handle_name(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->str:
    """
				Override this method to provide gizmo's handle names. The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information). Called for this plugin's active gizmos.
			"""
    pass

  def _is_handle_highlighted(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->bool:
    """
				Override this method to return `true` whenever to given handle should be highlighted in the editor. The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information). Called for this plugin's active gizmos.
			"""
    pass

  def _get_handle_value(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->Any:
    """
				Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the `restore` argument in `_commit_handle`.
				The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			"""
    pass

  def _begin_handle_action(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->None:
    """
"""
    pass

  def _set_handle(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool, camera:__camera3d__.Camera3D, screen_pos:__core__.Vector2)->None:
    """
				Override this method to update the node's properties when the user drags a gizmo handle (previously added with `EditorNode3DGizmo.add_handles`). The provided `screen_pos` is the mouse position in screen coordinates and the `camera` can be used to convert it to raycasts.
				The `secondary` argument is `true` when the edited handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			"""
    pass

  def _commit_handle(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool, restore:Any, cancel:bool)->None:
    """
				Override this method to commit a handle being edited (handles must have been previously added by `EditorNode3DGizmo.add_handles` during `_redraw`). This usually means creating an `UndoRedo` action for the change, using the current handle value as "do" and the `restore` argument as "undo".
				If the `cancel` argument is `true`, the `restore` value should be directly set, without any `UndoRedo` action.
				The `secondary` argument is `true` when the committed handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			"""
    pass

  def _subgizmos_intersect_ray(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, camera:__camera3d__.Camera3D, screen_pos:__core__.Vector2)->int:
    """
				Override this method to allow selecting subgizmos using mouse clicks. Given a `camera` and a `screen_pos` in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`. Called for this plugin's active gizmos.
			"""
    pass

  def _subgizmos_intersect_frustum(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, camera:__camera3d__.Camera3D, frustum_planes:__core__.Array)->__core__.PackedInt32Array:
    """
				Override this method to allow selecting subgizmos using mouse drag box selection. Given a `camera` and `frustum_planes`, this method should return which subgizmos are contained within the frustums. The `frustum_planes` argument consists of an array with all the `Plane`s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, these identifiers can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`. Called for this plugin's active gizmos.
			"""
    pass

  def _get_subgizmo_transform(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, subgizmo_id:int)->__core__.Transform3D:
    """
				Override this method to return the current transform of a subgizmo. As with all subgizmo methods, the transform should be in local space respect to the gizmo's Node3D. This transform will be requested at the start of an edit and used in the `restore` argument in `_commit_subgizmos`. Called for this plugin's active gizmos.
			"""
    pass

  def _set_subgizmo_transform(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, subgizmo_id:int, transform:__core__.Transform3D)->None:
    """
				Override this method to update the node properties during subgizmo editing (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). The `transform` is given in the Node3D's local coordinate system. Called for this plugin's active gizmos.
			"""
    pass

  def _commit_subgizmos(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, ids:__core__.PackedInt32Array, restores:__core__.Array, cancel:bool)->None:
    """
				Override this method to commit a group of subgizmos being edited (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). This usually means creating an `UndoRedo` action for the change, using the current transforms as "do" and the `restores` transforms as "undo".
				If the `cancel` argument is `true`, the `restores` transforms should be directly set, without any `UndoRedo` action. As with all subgizmo methods, transforms are given in local space respect to the gizmo's Node3D. Called for this plugin's active gizmos.
			"""
    pass

  def create_material(self, name:str, color:__core__.Color, billboard:bool=False, on_top:bool=False, use_vertex_color:bool=False)->None:
    """
				Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_mesh` and `EditorNode3DGizmo.add_lines`. Should not be overridden.
			"""
    pass

  def create_icon_material(self, name:str, texture:__texture2d__.Texture2D, on_top:bool=False, color:__core__.Color= __core__.Color.new0())->None:
    """
				Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_unscaled_billboard`. Should not be overridden.
			"""
    pass

  def create_handle_material(self, name:str, billboard:bool=False, texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None:
    """
				Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_handles`. Should not be overridden.
				You can optionally provide a texture to use instead of the default icon.
			"""
    pass

  def add_material(self, name:str, material:__standardmaterial3d__.StandardMaterial3D)->None:
    """
				Adds a new material to the internal material list for the plugin. It can then be accessed with `get_material`. Should not be overridden.
			"""
    pass

  def get_material(self, name:str, gizmo:__editornode3dgizmo__.EditorNode3DGizmo= __editornode3dgizmo__.EditorNode3DGizmo.constructor())->__standardmaterial3d__.StandardMaterial3D:
    """
				Gets material from the internal list of materials. If an `EditorNode3DGizmo` is provided, it will try to get the corresponding variant (selected and/or editable).
			"""
    pass


