from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TranslationDomain as __translationdomain__
import py4godot.classes.OptimizedTranslation as __optimizedtranslation__
import py4godot.classes.Translation as __translation__
import py4godot.classes.Object as __object__



class TranslationServer(__object__.Object):
  """
		The translation server is the API backend that manages all language translations.
		Translations are stored in `TranslationDomain`s, which can be accessed by name. The most commonly used translation domain is the main translation domain. It always exists and can be accessed using an empty `StringName`. The translation server provides wrapper methods for accessing the main translation domain directly, without having to fetch the translation domain first. Custom translation domains are mainly for advanced usages like editor plugins. Names starting with `godot.` are reserved for engine internals.
	"""



  @staticmethod
  def cast(other:__object__.Object)->TranslationServer:pass

  @staticmethod
  def instance()->TranslationServer:pass

  @property
  def pseudolocalization_enabled(self)->bool:
    """"""
    pass
  @pseudolocalization_enabled.setter
  def pseudolocalization_enabled(self,  value:bool)->None:
    """"""
    pass
  def set_locale(self, locale:str)->None:
    """
				Sets the locale of the project. The `locale` string will be standardized to match known locales (e.g. `en-US` would be matched to `en_US`).
				If translations have been loaded beforehand for the new locale, they will be applied.
			"""
    pass

  def get_locale(self)->str:
    """
				Returns the current locale of the project.
				See also `OS.get_locale` and `OS.get_locale_language` to query the locale of the user system.
			"""
    pass

  def get_tool_locale(self)->str:
    """
				Returns the current locale of the editor.
				**Note:** When called from an exported project returns the same value as `get_locale`.
			"""
    pass

  def compare_locales(self, locale_a:str, locale_b:str)->int:
    """
				Compares two locales and returns a similarity score between `0` (no match) and `10` (full match).
			"""
    pass

  def standardize_locale(self, locale:str, add_defaults:bool=False)->str:
    """
				Returns a `locale` string standardized to match known locales (e.g. `en-US` would be matched to `en_US`). If `add_defaults` is `true`, the locale may have a default script or country added.
			"""
    pass

  def get_all_languages(self)->__core__.PackedStringArray:
    """
				Returns array of known language codes.
			"""
    pass

  def get_language_name(self, language:str)->str:
    """
				Returns a readable language name for the `language` code.
			"""
    pass

  def get_all_scripts(self)->__core__.PackedStringArray:
    """
				Returns an array of known script codes.
			"""
    pass

  def get_script_name(self, script:str)->str:
    """
				Returns a readable script name for the `script` code.
			"""
    pass

  def get_all_countries(self)->__core__.PackedStringArray:
    """
				Returns an array of known country codes.
			"""
    pass

  def get_country_name(self, country:str)->str:
    """
				Returns a readable country name for the `country` code.
			"""
    pass

  def get_locale_name(self, locale:str)->str:
    """
				Returns a locale's language and its variant (e.g. `"en_US"` would return `"English (United States)"`).
			"""
    pass

  def translate(self, message:__core__.StringName|str, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns the current locale's translation for the given message and context.
				**Note:** This method always uses the main translation domain.
			"""
    pass

  def translate_plural(self, message:__core__.StringName|str, plural_message:__core__.StringName|str, n:int, context:__core__.StringName|str= __core__.StringName.new0())->__core__.StringName:
    """
				Returns the current locale's translation for the given message, plural message and context.
				The number `n` is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language.
				**Note:** This method always uses the main translation domain.
			"""
    pass

  def add_translation(self, translation:__translation__.Translation)->None:
    """
				Adds a translation to the main translation domain.
			"""
    pass

  def remove_translation(self, translation:__translation__.Translation)->None:
    """
				Removes the given translation from the main translation domain.
			"""
    pass

  def get_translation_object(self, locale:str)->__optimizedtranslation__.OptimizedTranslation|__translation__.Translation:
    """
				Returns the `Translation` instance that best matches `locale` in the main translation domain. Returns `null` if there are no matches.
			"""
    pass

  def has_domain(self, domain:__core__.StringName|str)->bool:
    """
				Returns `true` if a translation domain with the specified name exists.
			"""
    pass

  def get_or_add_domain(self, domain:__core__.StringName|str)->__translationdomain__.TranslationDomain:
    """
				Returns the translation domain with the specified name. An empty translation domain will be created and added if it does not exist.
			"""
    pass

  def remove_domain(self, domain:__core__.StringName|str)->None:
    """
				Removes the translation domain with the specified name.
				**Note:** Trying to remove the main translation domain is an error.
			"""
    pass

  def clear(self)->None:
    """
				Removes all translations from the main translation domain.
			"""
    pass

  def get_loaded_locales(self)->__core__.PackedStringArray:
    """
				Returns an array of all loaded locales of the project.
			"""
    pass

  def is_pseudolocalization_enabled(self)->bool:
    """"""
    pass

  def set_pseudolocalization_enabled(self, enabled:bool)->None:
    """"""
    pass

  def reload_pseudolocalization(self)->None:
    """
				Reparses the pseudolocalization options and reloads the translation for the main translation domain.
			"""
    pass

  def pseudolocalize(self, message:__core__.StringName|str)->__core__.StringName:
    """
				Returns the pseudolocalized string based on the `message` passed in.
				**Note:** This method always uses the main translation domain.
			"""
    pass


