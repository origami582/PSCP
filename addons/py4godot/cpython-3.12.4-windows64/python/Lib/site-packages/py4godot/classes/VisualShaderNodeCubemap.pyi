from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderCubemap as __placeholdercubemap__
import py4godot.classes.Texture2DArrayRD as __texture2darrayrd__
import py4godot.classes.TextureCubemapArrayRD as __texturecubemaparrayrd__
import py4godot.classes.TextureLayered as __texturelayered__
import py4godot.classes.TextureLayeredRD as __texturelayeredrd__
import py4godot.classes.CubemapArray as __cubemaparray__
import py4godot.classes.CompressedCubemap as __compressedcubemap__
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.Texture2DArray as __texture2darray__
import py4godot.classes.ImageTextureLayered as __imagetexturelayered__
import py4godot.classes.PlaceholderCubemapArray as __placeholdercubemaparray__
import py4godot.classes.Cubemap as __cubemap__
import py4godot.classes.PlaceholderTexture2DArray as __placeholdertexture2darray__
import py4godot.classes.CompressedTexture2DArray as __compressedtexture2darray__
import py4godot.classes.PlaceholderTextureLayered as __placeholdertexturelayered__
import py4godot.classes.VisualShaderNodeCubemap as __visualshadernodecubemap__
import py4godot.classes.CompressedCubemapArray as __compressedcubemaparray__
import py4godot.classes.CompressedTextureLayered as __compressedtexturelayered__
import py4godot.classes.TextureCubemapRD as __texturecubemaprd__


class Source:
  SOURCE_TEXTURE:int = 0
  SOURCE_PORT:int = 1
  SOURCE_MAX:int = 2
class TextureType:
  KIND_DATA:int = 0
  KIND_COLOR:int = 1
  KIND_NORMAL_MAP:int = 2
  KIND_MAX:int = 3


class VisualShaderNodeCubemap(__visualshadernode__.VisualShaderNode):
  """
		Translated to `texture(cubemap, vec3)` in the shader language. Returns a color vector and alpha channel as scalar.
	"""

  @staticmethod
  def constructor()->VisualShaderNodeCubemap:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeCubemap:pass


  @property
  def source(self)->int:
    """"""
    pass
  @source.setter
  def source(self,  value:int)->None:
    """"""
    pass
  @property
  def cube_map(self)->Cubemap,CompressedCubemap,PlaceholderCubemap,TextureCubemapRD:
    """"""
    pass
  @cube_map.setter
  def cube_map(self,  value:__cubemap__.Cubemap)->None:
    """"""
    pass
  @property
  def texture_type(self)->int:
    """"""
    pass
  @texture_type.setter
  def texture_type(self,  value:int)->None:
    """"""
    pass
  def set_source(self, value:int )->None:
    """"""
    pass

  def get_source(self)->int:
    """"""
    pass

  def set_cube_map(self, value:__texturelayered__.TextureLayered)->None:
    """"""
    pass

  def get_cube_map(self)->__placeholdercubemap__.PlaceholderCubemap|__texture2darrayrd__.Texture2DArrayRD|__texturecubemaparrayrd__.TextureCubemapArrayRD|__texturelayered__.TextureLayered|__texturelayeredrd__.TextureLayeredRD|__cubemaparray__.CubemapArray|__compressedcubemap__.CompressedCubemap|__texture2darray__.Texture2DArray|__imagetexturelayered__.ImageTextureLayered|__placeholdercubemaparray__.PlaceholderCubemapArray|__cubemap__.Cubemap|__placeholdertexture2darray__.PlaceholderTexture2DArray|__compressedtexture2darray__.CompressedTexture2DArray|__placeholdertexturelayered__.PlaceholderTextureLayered|__compressedcubemaparray__.CompressedCubemapArray|__compressedtexturelayered__.CompressedTextureLayered|__texturecubemaprd__.TextureCubemapRD:
    """"""
    pass

  def set_texture_type(self, value:int )->None:
    """"""
    pass

  def get_texture_type(self)->int:
    """"""
    pass


