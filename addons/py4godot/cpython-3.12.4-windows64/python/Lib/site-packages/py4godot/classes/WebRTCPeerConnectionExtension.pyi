from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.WebRTCPeerConnectionExtension as __webrtcpeerconnectionextension__
import py4godot.classes.WebRTCDataChannel as __webrtcdatachannel__
import py4godot.classes.WebRTCDataChannelExtension as __webrtcdatachannelextension__
import py4godot.classes.WebRTCPeerConnection as __webrtcpeerconnection__



class WebRTCPeerConnectionExtension(__webrtcpeerconnection__.WebRTCPeerConnection):
  """"""

  @staticmethod
  def constructor()->WebRTCPeerConnectionExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->WebRTCPeerConnectionExtension:pass


  def _get_connection_state(self)->int:
    """"""
    pass

  def _get_gathering_state(self)->int:
    """"""
    pass

  def _get_signaling_state(self)->int:
    """"""
    pass

  def _initialize(self, p_config:__core__.Dictionary)->int:
    """"""
    pass

  def _create_data_channel(self, p_label:str, p_config:__core__.Dictionary)->__webrtcdatachannel__.WebRTCDataChannel|__webrtcdatachannelextension__.WebRTCDataChannelExtension:
    """"""
    pass

  def _create_offer(self)->int:
    """"""
    pass

  def _set_remote_description(self, p_type:str, p_sdp:str)->int:
    """"""
    pass

  def _set_local_description(self, p_type:str, p_sdp:str)->int:
    """"""
    pass

  def _add_ice_candidate(self, p_sdp_mid_name:str, p_sdp_mline_index:int, p_sdp_name:str)->int:
    """"""
    pass

  def _poll(self)->int:
    """"""
    pass

  def _close(self)->None:
    """"""
    pass


