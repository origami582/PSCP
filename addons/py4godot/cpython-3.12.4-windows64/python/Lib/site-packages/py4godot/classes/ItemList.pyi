from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.MultiplayerSynchronizer as __multiplayersynchronizer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.ResourcePreloader as __resourcepreloader__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.Control as __control__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.Slider as __slider__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.ParallaxBackground as __parallaxbackground__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.AnimationMixer as __animationmixer__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.EditorResourcePreview as __editorresourcepreview__
import py4godot.classes.Button as __button__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.Panel as __panel__
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.EditorPlugin as __editorplugin__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.AnimationPlayer as __animationplayer__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.Label as __label__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.CanvasLayer as __canvaslayer__
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Node as __node__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.GridMapEditorPlugin as __gridmapeditorplugin__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.Window as __window__
import py4godot.classes.Decal as __decal__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.NavigationAgent2D as __navigationagent2d__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.AnimationTree as __animationtree__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.Tree as __tree__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.InstancePlaceholder as __instanceplaceholder__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.MissingNode as __missingnode__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.NavigationAgent3D as __navigationagent3d__
import py4godot.classes.SubViewport as __subviewport__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Range as __range__
import py4godot.classes.AudioStreamPlayer as __audiostreamplayer__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Popup as __popup__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.Container as __container__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.StatusIndicator as __statusindicator__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HTTPRequest as __httprequest__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.WorldEnvironment as __worldenvironment__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.EditorFileSystem as __editorfilesystem__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.Timer as __timer__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.MultiplayerSpawner as __multiplayerspawner__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.ShaderGlobalsOverride as __shaderglobalsoverride__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.OptionButton as __optionbutton__


class IconMode:
  ICON_MODE_TOP:int = 0
  ICON_MODE_LEFT:int = 1
class SelectMode:
  SELECT_SINGLE:int = 0
  SELECT_MULTI:int = 1
  SELECT_TOGGLE:int = 2


class ItemList(__control__.Control):
  """
		This control provides a vertical list of selectable items that may be in a single or in multiple columns, with each item having options for text and an icon. Tooltips are supported and may be different for every item in the list.
		Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be "activated" by double-clicking them or by pressing `kbd`Enter`/kbd`.
		Item text only supports single-line strings. Newline characters (e.g. `\n`) in the string won't produce a newline. Text wrapping is enabled in `constant ICON_MODE_TOP` mode, but the column's width is adjusted to fully fit its content by default. You need to set `fixed_column_width` greater than zero to wrap the text.
		All `set_*` methods allow negative item indices, i.e. `-1` to access the last item, `-2` to select the second-to-last item, and so on.
		**Incremental search:** Like `PopupMenu` and `Tree`, `ItemList` supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing `ProjectSettings.gui/timers/incremental_search_max_interval_msec`.
	"""
  item_selected: BuiltinSignal
  empty_clicked: BuiltinSignal
  item_clicked: BuiltinSignal
  multi_selected: BuiltinSignal
  item_activated: BuiltinSignal

  @staticmethod
  def constructor()->ItemList:pass



  @staticmethod
  def cast(other:__object__.Object)->ItemList:pass


  @property
  def select_mode(self)->int:
    """"""
    pass
  @select_mode.setter
  def select_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def allow_reselect(self)->bool:
    """"""
    pass
  @allow_reselect.setter
  def allow_reselect(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_rmb_select(self)->bool:
    """"""
    pass
  @allow_rmb_select.setter
  def allow_rmb_select(self,  value:bool)->None:
    """"""
    pass
  @property
  def allow_search(self)->bool:
    """"""
    pass
  @allow_search.setter
  def allow_search(self,  value:bool)->None:
    """"""
    pass
  @property
  def max_text_lines(self)->int:
    """"""
    pass
  @max_text_lines.setter
  def max_text_lines(self,  value:int)->None:
    """"""
    pass
  @property
  def auto_width(self)->bool:
    """"""
    pass
  @auto_width.setter
  def auto_width(self,  value:bool)->None:
    """"""
    pass
  @property
  def auto_height(self)->bool:
    """"""
    pass
  @auto_height.setter
  def auto_height(self,  value:bool)->None:
    """"""
    pass
  @property
  def text_overrun_behavior(self)->int:
    """"""
    pass
  @text_overrun_behavior.setter
  def text_overrun_behavior(self,  value:int)->None:
    """"""
    pass
  @property
  def wraparound_items(self)->bool:
    """"""
    pass
  @wraparound_items.setter
  def wraparound_items(self,  value:bool)->None:
    """"""
    pass
  @property
  def item_count(self)->int:
    """"""
    pass
  @item_count.setter
  def item_count(self,  value:int)->None:
    """"""
    pass
  @property
  def max_columns(self)->int:
    """"""
    pass
  @max_columns.setter
  def max_columns(self,  value:int)->None:
    """"""
    pass
  @property
  def same_column_width(self)->bool:
    """"""
    pass
  @same_column_width.setter
  def same_column_width(self,  value:bool)->None:
    """"""
    pass
  @property
  def fixed_column_width(self)->int:
    """"""
    pass
  @fixed_column_width.setter
  def fixed_column_width(self,  value:int)->None:
    """"""
    pass
  @property
  def icon_mode(self)->int:
    """"""
    pass
  @icon_mode.setter
  def icon_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def icon_scale(self)->float:
    """"""
    pass
  @icon_scale.setter
  def icon_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def fixed_icon_size(self)->__core__.Vector2i:
    """"""
    pass
  @fixed_icon_size.setter
  def fixed_icon_size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  def add_item(self, text:str, icon:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor(), selectable:bool=True)->int:
    """
				Adds an item to the item list with specified text. Returns the index of an added item.
				Specify an `icon`, or use `null` as the `icon` for a list item with no icon.
				If `selectable` is `true`, the list item will be selectable.
			"""
    pass

  def add_icon_item(self, icon:__texture2d__.Texture2D, selectable:bool=True)->int:
    """
				Adds an item to the item list with no text, only an icon. Returns the index of an added item.
			"""
    pass

  def set_item_text(self, idx:int, text:str)->None:
    """
				Sets text of the item associated with the specified index.
			"""
    pass

  def get_item_text(self, idx:int)->str:
    """
				Returns the text associated with the specified index.
			"""
    pass

  def set_item_icon(self, idx:int, icon:__texture2d__.Texture2D)->None:
    """
				Sets (or replaces) the icon's `Texture2D` associated with the specified index.
			"""
    pass

  def get_item_icon(self, idx:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Returns the icon associated with the specified index.
			"""
    pass

  def set_item_text_direction(self, idx:int, direction:int )->None:
    """
				Sets item's text base writing direction.
			"""
    pass

  def get_item_text_direction(self, idx:int)->int:
    """
				Returns item's text base writing direction.
			"""
    pass

  def set_item_language(self, idx:int, language:str)->None:
    """
				Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
			"""
    pass

  def get_item_language(self, idx:int)->str:
    """
				Returns item's text language code.
			"""
    pass

  def set_item_auto_translate_mode(self, idx:int, mode:int )->None:
    """
				Sets the auto translate mode of the item associated with the specified index.
				Items use `constant Node.AUTO_TRANSLATE_MODE_INHERIT` by default, which uses the same auto translate mode as the `ItemList` itself.
			"""
    pass

  def get_item_auto_translate_mode(self, idx:int)->int:
    """
				Returns item's auto translate mode.
			"""
    pass

  def set_item_icon_transposed(self, idx:int, transposed:bool)->None:
    """
				Sets whether the item icon will be drawn transposed.
			"""
    pass

  def is_item_icon_transposed(self, idx:int)->bool:
    """
				Returns `true` if the item icon will be drawn transposed, i.e. the X and Y axes are swapped.
			"""
    pass

  def set_item_icon_region(self, idx:int, rect:__core__.Rect2)->None:
    """
				Sets the region of item's icon used. The whole icon will be used if the region has no area.
			"""
    pass

  def get_item_icon_region(self, idx:int)->__core__.Rect2:
    """
				Returns the region of item's icon used. The whole icon will be used if the region has no area.
			"""
    pass

  def set_item_icon_modulate(self, idx:int, modulate:__core__.Color)->None:
    """
				Sets a modulating `Color` of the item associated with the specified index.
			"""
    pass

  def get_item_icon_modulate(self, idx:int)->__core__.Color:
    """
				Returns a `Color` modulating item's icon at the specified index.
			"""
    pass

  def set_item_selectable(self, idx:int, selectable:bool)->None:
    """
				Allows or disallows selection of the item associated with the specified index.
			"""
    pass

  def is_item_selectable(self, idx:int)->bool:
    """
				Returns `true` if the item at the specified index is selectable.
			"""
    pass

  def set_item_disabled(self, idx:int, disabled:bool)->None:
    """
				Disables (or enables) the item at the specified index.
				Disabled items cannot be selected and do not trigger activation signals (when double-clicking or pressing `kbd`Enter`/kbd`).
			"""
    pass

  def is_item_disabled(self, idx:int)->bool:
    """
				Returns `true` if the item at the specified index is disabled.
			"""
    pass

  def set_item_metadata(self, idx:int, metadata:Any)->None:
    """
				Sets a value (of any type) to be stored with the item associated with the specified index.
			"""
    pass

  def get_item_metadata(self, idx:int)->Any:
    """
				Returns the metadata value of the specified index.
			"""
    pass

  def set_item_custom_bg_color(self, idx:int, custom_bg_color:__core__.Color)->None:
    """
				Sets the background color of the item specified by `idx` index to the specified `Color`.
			"""
    pass

  def get_item_custom_bg_color(self, idx:int)->__core__.Color:
    """
				Returns the custom background color of the item specified by `idx` index.
			"""
    pass

  def set_item_custom_fg_color(self, idx:int, custom_fg_color:__core__.Color)->None:
    """
				Sets the foreground color of the item specified by `idx` index to the specified `Color`.
			"""
    pass

  def get_item_custom_fg_color(self, idx:int)->__core__.Color:
    """
				Returns the custom foreground color of the item specified by `idx` index.
			"""
    pass

  def get_item_rect(self, idx:int, expand:bool=True)->__core__.Rect2:
    """
				Returns the position and size of the item with the specified index, in the coordinate system of the `ItemList` node. If `expand` is `true` the last column expands to fill the rest of the row.
				**Note:** The returned value is unreliable if called right after modifying the `ItemList`, before it redraws in the next frame.
			"""
    pass

  def set_item_tooltip_enabled(self, idx:int, enable:bool)->None:
    """
				Sets whether the tooltip hint is enabled for specified item index.
			"""
    pass

  def is_item_tooltip_enabled(self, idx:int)->bool:
    """
				Returns `true` if the tooltip is enabled for specified item index.
			"""
    pass

  def set_item_tooltip(self, idx:int, tooltip:str)->None:
    """
				Sets the tooltip hint for the item associated with the specified index.
			"""
    pass

  def get_item_tooltip(self, idx:int)->str:
    """
				Returns the tooltip hint associated with the specified index.
			"""
    pass

  def select(self, idx:int, single:bool=True)->None:
    """
				Select the item at the specified index.
				**Note:** This method does not trigger the item selection signal.
			"""
    pass

  def deselect(self, idx:int)->None:
    """
				Ensures the item associated with the specified index is not selected.
			"""
    pass

  def deselect_all(self)->None:
    """
				Ensures there are no items selected.
			"""
    pass

  def is_selected(self, idx:int)->bool:
    """
				Returns `true` if the item at the specified index is currently selected.
			"""
    pass

  def get_selected_items(self)->__core__.PackedInt32Array:
    """
				Returns an array with the indexes of the selected items.
			"""
    pass

  def move_item(self, from_idx:int, to_idx:int)->None:
    """
				Moves item from index `from_idx` to `to_idx`.
			"""
    pass

  def set_item_count(self, count:int)->None:
    """"""
    pass

  def get_item_count(self)->int:
    """"""
    pass

  def remove_item(self, idx:int)->None:
    """
				Removes the item specified by `idx` index from the list.
			"""
    pass

  def clear(self)->None:
    """
				Removes all items from the list.
			"""
    pass

  def sort_items_by_text(self)->None:
    """
				Sorts items in the list by their text.
			"""
    pass

  def set_fixed_column_width(self, width:int)->None:
    """"""
    pass

  def get_fixed_column_width(self)->int:
    """"""
    pass

  def set_same_column_width(self, enable:bool)->None:
    """"""
    pass

  def is_same_column_width(self)->bool:
    """"""
    pass

  def set_max_text_lines(self, lines:int)->None:
    """"""
    pass

  def get_max_text_lines(self)->int:
    """"""
    pass

  def set_max_columns(self, amount:int)->None:
    """"""
    pass

  def get_max_columns(self)->int:
    """"""
    pass

  def set_select_mode(self, mode:int )->None:
    """"""
    pass

  def get_select_mode(self)->int:
    """"""
    pass

  def set_icon_mode(self, mode:int )->None:
    """"""
    pass

  def get_icon_mode(self)->int:
    """"""
    pass

  def set_fixed_icon_size(self, size:__core__.Vector2i)->None:
    """"""
    pass

  def get_fixed_icon_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_icon_scale(self, scale:float)->None:
    """"""
    pass

  def get_icon_scale(self)->float:
    """"""
    pass

  def set_allow_rmb_select(self, allow:bool)->None:
    """"""
    pass

  def get_allow_rmb_select(self)->bool:
    """"""
    pass

  def set_allow_reselect(self, allow:bool)->None:
    """"""
    pass

  def get_allow_reselect(self)->bool:
    """"""
    pass

  def set_allow_search(self, allow:bool)->None:
    """"""
    pass

  def get_allow_search(self)->bool:
    """"""
    pass

  def set_auto_width(self, enable:bool)->None:
    """"""
    pass

  def has_auto_width(self)->bool:
    """"""
    pass

  def set_auto_height(self, enable:bool)->None:
    """"""
    pass

  def has_auto_height(self)->bool:
    """"""
    pass

  def is_anything_selected(self)->bool:
    """
				Returns `true` if one or more items are selected.
			"""
    pass

  def get_item_at_position(self, position:__core__.Vector2, exact:bool=False)->int:
    """
				Returns the item index at the given `position`.
				When there is no item at that point, -1 will be returned if `exact` is `true`, and the closest item index will be returned otherwise.
				**Note:** The returned value is unreliable if called right after modifying the `ItemList`, before it redraws in the next frame.
			"""
    pass

  def ensure_current_is_visible(self)->None:
    """
				Ensure current selection is visible, adjusting the scroll position as necessary.
			"""
    pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar:
    """
				Returns the vertical scrollbar.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def get_h_scroll_bar(self)->__hscrollbar__.HScrollBar:
    """
				Returns the horizontal scrollbar.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			"""
    pass

  def set_text_overrun_behavior(self, overrun_behavior:int )->None:
    """"""
    pass

  def get_text_overrun_behavior(self)->int:
    """"""
    pass

  def set_wraparound_items(self, enable:bool)->None:
    """"""
    pass

  def has_wraparound_items(self)->bool:
    """"""
    pass

  def force_update_list_size(self)->None:
    """
				Forces an update to the list size based on its items. This happens automatically whenever size of the items, or other relevant settings like `auto_height`, change. The method can be used to trigger the update ahead of next drawing pass.
			"""
    pass


