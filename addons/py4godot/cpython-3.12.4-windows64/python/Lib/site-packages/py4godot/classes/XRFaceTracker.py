# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.XRTracker as py4godot_xrtracker 
from py4godot.wrappers.wrappers import CPPXRFaceTrackerWrapper

class XRFaceTracker(py4godot_xrtracker.XRTracker):
  r'''
		An instance of this object represents a tracked face and its corresponding blend shapes. The blend shapes come from the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/unified-blendshapes`Unified Expressions`/url` standard, and contain extended details and visuals for each blend shape. Additionally the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/compatibility/overview`Tracking Standard Comparison`/url` page documents the relationship between Unified Expressions and other standards.
		As face trackers are turned on they are registered with the `XRServer`.
	'''
  @staticmethod
  def constructor():
    class_ = XRFaceTracker.construct_without_init()
    class_._ptr = constructor(1018,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRFaceTracker.construct_without_init()
    class_._ptr = constructor(1018,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRFaceTrackerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1018,0, ())


  def generate_wrapper(self):
    return CPPXRFaceTrackerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRFaceTracker.__new__(XRFaceTracker)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRFaceTracker'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceTracker.construct_without_init()
    cls._ptr = CPPXRFaceTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceTracker.construct_without_init()
    cls._ptr = CPPXRFaceTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def blend_shapes(self) -> typing.Union['PackedFloat32Array']:
    r''''''
    _ret = self. get_blend_shapes()
    return _ret
  @blend_shapes.setter
  def blend_shapes(self,  value:'PackedFloat32Array'):
    self.set_blend_shapes(value)
  @functools.native_method
  def get_blend_shape(self, blend_shape:'int'  ) -> typing.Union[float]:
    r'''
				Returns the requested face blend shape weight.
			'''

    assert isinstance(blend_shape, (int, float)), 'blend_shape must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([blend_shape]))
    return _ret


  @functools.native_method
  def set_blend_shape(self, blend_shape:'int'  , weight:'float'   ) -> None:
    r'''
				Sets a face blend shape weight.
			'''

    assert isinstance(blend_shape, (int, float)), 'blend_shape must be int or float'
    assert isinstance(weight, (int, float)), 'weight must be int or float'







    self._ptr.call_with_return(60,tuple([blend_shape, weight]))

  @functools.native_method
  def get_blend_shapes(self) -> typing.Union['PackedFloat32Array']:
    r''''''




    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_shapes(self, weights:'PackedFloat32Array'   ) -> None:
    r''''''

    assert(not weights is None)
    assert isinstance(weights, PackedFloat32Array), 'weights must be PackedFloat32Array'

    self.py__blend_shapes = weights






    self._ptr.call_with_return(62,tuple([weights._ptr]))


register_cast_function('XRFaceTracker', XRFaceTracker.cast)
register_class('XRFaceTracker', XRFaceTracker)
