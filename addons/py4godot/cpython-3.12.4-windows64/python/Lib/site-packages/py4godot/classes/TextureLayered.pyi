from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderCubemap as __placeholdercubemap__
import py4godot.classes.Texture2DArrayRD as __texture2darrayrd__
import py4godot.classes.TextureCubemapArrayRD as __texturecubemaparrayrd__
import py4godot.classes.TextureLayered as __texturelayered__
import py4godot.classes.TextureLayeredRD as __texturelayeredrd__
import py4godot.classes.CubemapArray as __cubemaparray__
import py4godot.classes.CompressedCubemap as __compressedcubemap__
import py4godot.classes.Texture2DArray as __texture2darray__
import py4godot.classes.ImageTextureLayered as __imagetexturelayered__
import py4godot.classes.Image as __image__
import py4godot.classes.PlaceholderCubemapArray as __placeholdercubemaparray__
import py4godot.classes.Cubemap as __cubemap__
import py4godot.classes.PlaceholderTexture2DArray as __placeholdertexture2darray__
import py4godot.classes.CompressedTexture2DArray as __compressedtexture2darray__
import py4godot.classes.PlaceholderTextureLayered as __placeholdertexturelayered__
import py4godot.classes.CompressedCubemapArray as __compressedcubemaparray__
import py4godot.classes.CompressedTextureLayered as __compressedtexturelayered__
import py4godot.classes.Texture as __texture__
import py4godot.classes.TextureCubemapRD as __texturecubemaprd__


class LayeredType:
  LAYERED_KIND_2D_ARRAY:int = 0
  LAYERED_KIND_CUBEMAP:int = 1
  LAYERED_KIND_CUBEMAP_ARRAY:int = 2


class TextureLayered(__texture__.Texture):
  """
		Base class for `ImageTextureLayered` and `CompressedTextureLayered`. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also `Texture3D`.
		Data is set on a per-layer basis. For `Texture2DArray`s, the layer specifies the array layer.
		All images need to have the same width, height and number of mipmap levels.
		A `TextureLayered` can be loaded with `ResourceLoader.load`.
		Internally, Godot maps these files to their respective counterparts in the target rendering driver (Vulkan, OpenGL3).
	"""

  @staticmethod
  def constructor()->TextureLayered:pass



  @staticmethod
  def cast(other:__object__.Object)->TextureLayered:pass


  def _get_format(self)->int:
    """
				Called when the `TextureLayered`'s format is queried.
			"""
    pass

  def _get_layered_type(self)->int:
    """
				Called when the layers' type in the `TextureLayered` is queried.
			"""
    pass

  def _get_width(self)->int:
    """
				Called when the `TextureLayered`'s width queried.
			"""
    pass

  def _get_height(self)->int:
    """
				Called when the `TextureLayered`'s height is queried.
			"""
    pass

  def _get_layers(self)->int:
    """
				Called when the number of layers in the `TextureLayered` is queried.
			"""
    pass

  def _has_mipmaps(self)->bool:
    """
				Called when the presence of mipmaps in the `TextureLayered` is queried.
			"""
    pass

  def _get_layer_data(self, layer_index:int)->__image__.Image:
    """
				Called when the data for a layer in the `TextureLayered` is queried.
			"""
    pass

  def get_format(self)->int:
    """
				Returns the current format being used by this texture.
			"""
    pass

  def get_layered_type(self)->int:
    """
				Returns the `TextureLayered`'s type. The type determines how the data is accessed, with cubemaps having special types.
			"""
    pass

  def get_width(self)->int:
    """
				Returns the width of the texture in pixels. Width is typically represented by the X axis.
			"""
    pass

  def get_height(self)->int:
    """
				Returns the height of the texture in pixels. Height is typically represented by the Y axis.
			"""
    pass

  def get_layers(self)->int:
    """
				Returns the number of referenced `Image`s.
			"""
    pass

  def has_mipmaps(self)->bool:
    """
				Returns `true` if the layers have generated mipmaps.
			"""
    pass

  def get_layer_data(self, layer:int)->__image__.Image:
    """
				Returns an `Image` resource with the data from specified `layer`.
			"""
    pass


