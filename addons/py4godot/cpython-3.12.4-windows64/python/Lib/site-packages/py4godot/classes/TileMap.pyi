from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TileSet as __tileset__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.V as __v__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.TileData as __tiledata__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.2 as __2__
import py4godot.classes.TileMapPattern as __tilemappattern__
import py4godot.classes.t as __t__
import py4godot.classes.p as __p__
import py4godot.classes.TileMap as __tilemap__


class VisibilityMode:
  VISIBILITY_MODE_DEFAULT:int = 0
  VISIBILITY_MODE_FORCE_HIDE:int = 2
  VISIBILITY_MODE_FORCE_SHOW:int = 1


class TileMap(__node2d__.Node2D):
  """
		Node for 2D tile-based maps. Tilemaps use a `TileSet` which contain a list of tiles which are used to create grid-based maps. A TileMap may have several layers, layouting tiles on top of each other.
		For performance reasons, all TileMap updates are batched at the end of a frame. Notably, this means that scene tiles from a `TileSetScenesCollectionSource` may be initialized after their parent. This is only queued when inside the scene tree.
		To force an update earlier on, call `update_internals`.
		**Note:** For performance and compatibility reasons, the coordinates serialized by `TileMap` are limited to 16-bit signed integers, i.e. the range for X and Y coordinates is from `-32768` to `32767`. When saving tile data, tiles outside this range are wrapped.
	"""
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileMap:pass



  @staticmethod
  def cast(other:__object__.Object)->TileMap:pass


  @property
  def tile_set(self)->__tileset__.TileSet:
    """"""
    pass
  @tile_set.setter
  def tile_set(self,  value:__tileset__.TileSet)->None:
    """"""
    pass
  @property
  def rendering_quadrant_size(self)->int:
    """"""
    pass
  @rendering_quadrant_size.setter
  def rendering_quadrant_size(self,  value:int)->None:
    """"""
    pass
  @property
  def collision_animatable(self)->bool:
    """"""
    pass
  @collision_animatable.setter
  def collision_animatable(self,  value:bool)->None:
    """"""
    pass
  @property
  def collision_visibility_mode(self)->int:
    """"""
    pass
  @collision_visibility_mode.setter
  def collision_visibility_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def navigation_visibility_mode(self)->int:
    """"""
    pass
  @navigation_visibility_mode.setter
  def navigation_visibility_mode(self,  value:int)->None:
    """"""
    pass
  def _use_tile_data_runtime_update(self, layer:int, coords:__core__.Vector2i)->bool:
    """
				Should return `true` if the tile at coordinates `coords` on layer `layer` requires a runtime update.
				**Warning:** Make sure this function only return `true` when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty.
				**Note:** If the result of this function should changed, use `notify_runtime_tile_data_update` to notify the TileMap it needs an update.
			"""
    pass

  def _tile_data_runtime_update(self, layer:int, coords:__core__.Vector2i, tile_data:__tiledata__.TileData)->None:
    """
				Called with a TileData object about to be used internally by the TileMap, allowing its modification at runtime.
				This method is only called if `_use_tile_data_runtime_update` is implemented and returns `true` for the given tile `coords` and `layer`.
				**Warning:** The `tile_data` object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources.
				**Note:** If the properties of `tile_data` object should change over time, use `notify_runtime_tile_data_update` to notify the TileMap it needs an update.
			"""
    pass

  def set_navigation_map(self, layer:int, map:__core__.RID)->None:
    """
				Assigns `map` as a `NavigationServer2D` navigation map for the specified TileMap layer `layer`.
			"""
    pass

  def get_navigation_map(self, layer:int)->__core__.RID:
    """
				Returns the `RID` of the `NavigationServer2D` navigation map assigned to the specified TileMap layer `layer`.
			"""
    pass

  def force_update(self, layer:int=-1)->None:
    """
				Forces the TileMap and the layer `layer` to update.
			"""
    pass

  def set_tileset(self, tileset:__tileset__.TileSet)->None:
    """"""
    pass

  def get_tileset(self)->__tileset__.TileSet:
    """"""
    pass

  def set_rendering_quadrant_size(self, size:int)->None:
    """"""
    pass

  def get_rendering_quadrant_size(self)->int:
    """"""
    pass

  def get_layers_count(self)->int:
    """
				Returns the number of layers in the TileMap.
			"""
    pass

  def add_layer(self, to_position:int)->None:
    """
				Adds a layer at the given position `to_position` in the array. If `to_position` is negative, the position is counted from the end, with `-1` adding the layer at the end of the array.
			"""
    pass

  def move_layer(self, layer:int, to_position:int)->None:
    """
				Moves the layer at index `layer` to the given position `to_position` in the array.
			"""
    pass

  def remove_layer(self, layer:int)->None:
    """
				Removes the layer at index `layer`.
			"""
    pass

  def set_layer_name(self, layer:int, name:str)->None:
    """
				Sets a layer's name. This is mostly useful in the editor.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_layer_name(self, layer:int)->str:
    """
				Returns a TileMap layer's name.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_enabled(self, layer:int, enabled:bool)->None:
    """
				Enables or disables the layer `layer`. A disabled layer is not processed at all (no rendering, no physics, etc.).
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def is_layer_enabled(self, layer:int)->bool:
    """
				Returns if a layer is enabled.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_modulate(self, layer:int, modulate:__core__.Color)->None:
    """
				Sets a layer's color. It will be multiplied by tile's color and TileMap's modulate.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_layer_modulate(self, layer:int)->__core__.Color:
    """
				Returns a TileMap layer's modulate.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_y_sort_enabled(self, layer:int, y_sort_enabled:bool)->None:
    """
				Enables or disables a layer's Y-sorting. If a layer is Y-sorted, the layer will behave as a CanvasItem node where each of its tile gets Y-sorted.
				Y-sorted layers should usually be on different Z-index values than not Y-sorted layers, otherwise, each of those layer will be Y-sorted as whole with the Y-sorted one. This is usually an undesired behavior.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def is_layer_y_sort_enabled(self, layer:int)->bool:
    """
				Returns if a layer Y-sorts its tiles.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_y_sort_origin(self, layer:int, y_sort_origin:int)->None:
    """
				Sets a layer's Y-sort origin value. This Y-sort origin value is added to each tile's Y-sort origin value.
				This allows, for example, to fake a different height level on each layer. This can be useful for top-down view games.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_layer_y_sort_origin(self, layer:int)->int:
    """
				Returns a TileMap layer's Y sort origin.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_z_index(self, layer:int, z_index:int)->None:
    """
				Sets a layers Z-index value. This Z-index is added to each tile's Z-index value.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_layer_z_index(self, layer:int)->int:
    """
				Returns a TileMap layer's Z-index value.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_layer_navigation_enabled(self, layer:int, enabled:bool)->None:
    """
				Enables or disables a layer's built-in navigation regions generation. Disable this if you need to bake navigation regions from a TileMap using a `NavigationRegion2D` node.
			"""
    pass

  def is_layer_navigation_enabled(self, layer:int)->bool:
    """
				Returns if a layer's built-in navigation regions generation is enabled.
			"""
    pass

  def set_layer_navigation_map(self, layer:int, map:__core__.RID)->None:
    """
				Assigns `map` as a `NavigationServer2D` navigation map for the specified TileMap layer `layer`.
				By default the TileMap uses the default `World2D` navigation map for the first TileMap layer. For each additional TileMap layer a new navigation map is created for the additional layer.
				In order to make `NavigationAgent2D` switch between TileMap layer navigation maps use `NavigationAgent2D.set_navigation_map` with the navigation map received from `get_layer_navigation_map`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_layer_navigation_map(self, layer:int)->__core__.RID:
    """
				Returns the `RID` of the `NavigationServer2D` navigation map assigned to the specified TileMap layer `layer`.
				By default the TileMap uses the default `World2D` navigation map for the first TileMap layer. For each additional TileMap layer a new navigation map is created for the additional layer.
				In order to make `NavigationAgent2D` switch between TileMap layer navigation maps use `NavigationAgent2D.set_navigation_map` with the navigation map received from `get_layer_navigation_map`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_collision_animatable(self, enabled:bool)->None:
    """"""
    pass

  def is_collision_animatable(self)->bool:
    """"""
    pass

  def set_collision_visibility_mode(self, collision_visibility_mode:int )->None:
    """"""
    pass

  def get_collision_visibility_mode(self)->int:
    """"""
    pass

  def set_navigation_visibility_mode(self, navigation_visibility_mode:int )->None:
    """"""
    pass

  def get_navigation_visibility_mode(self)->int:
    """"""
    pass

  def set_cell(self, layer:int, coords:__core__.Vector2i, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=0)->None:
    """
				Sets the tile identifiers for the cell on layer `layer` at coordinates `coords`. Each tile of the `TileSet` is identified using three parts:
				- The source identifier `source_id` identifies a `TileSetSource` identifier. See `TileSet.set_source_id`,
				- The atlas coordinates identifier `atlas_coords` identifies a tile coordinates in the atlas (if the source is a `TileSetAtlasSource`). For `TileSetScenesCollectionSource` it should always be `Vector2i(0, 0)`),
				- The alternative tile identifier `alternative_tile` identifies a tile alternative in the atlas (if the source is a `TileSetAtlasSource`), and the scene for a `TileSetScenesCollectionSource`.
				If `source_id` is set to `-1`, `atlas_coords` to `Vector2i(-1, -1)` or `alternative_tile` to `-1`, the cell will be erased. An erased cell gets **all** its identifiers automatically set to their respective invalid values, namely `-1`, `Vector2i(-1, -1)` and `-1`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def erase_cell(self, layer:int, coords:__core__.Vector2i)->None:
    """
				Erases the cell on layer `layer` at coordinates `coords`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_cell_source_id(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->int:
    """
				Returns the tile source ID of the cell on layer `layer` at coordinates `coords`. Returns `-1` if the cell does not exist.
				If `use_proxies` is `false`, ignores the `TileSet`'s tile proxies, returning the raw source identifier. See `TileSet.map_tile_proxy`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_cell_atlas_coords(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->__core__.Vector2i:
    """
				Returns the tile atlas coordinates ID of the cell on layer `layer` at coordinates `coords`. Returns `Vector2i(-1, -1)` if the cell does not exist.
				If `use_proxies` is `false`, ignores the `TileSet`'s tile proxies, returning the raw atlas coordinate identifier. See `TileSet.map_tile_proxy`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_cell_alternative_tile(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->int:
    """
				Returns the tile alternative ID of the cell on layer `layer` at `coords`.
				If `use_proxies` is `false`, ignores the `TileSet`'s tile proxies, returning the raw alternative identifier. See `TileSet.map_tile_proxy`.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_cell_tile_data(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->__tiledata__.TileData:
    """
				Returns the `TileData` object associated with the given cell, or `null` if the cell does not exist or is not a `TileSetAtlasSource`.
				If `layer` is negative, the layers are accessed from the last one.
				```gdscript
				func get_clicked_tile_power():
					var clicked_cell = tile_map.local_to_map(tile_map.get_local_mouse_position())
					var data = tile_map.get_cell_tile_data(0, clicked_cell)
					if data:
						return data.get_custom_data("power")
					else:
						return 0
				```
				If `use_proxies` is `false`, ignores the `TileSet`'s tile proxies. See `TileSet.map_tile_proxy`.
			"""
    pass

  def is_cell_flipped_h(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->bool:
    """
				Returns `true` if the cell on layer `layer` at coordinates `coords` is flipped horizontally. The result is valid only for atlas sources.
			"""
    pass

  def is_cell_flipped_v(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->bool:
    """
				Returns `true` if the cell on layer `layer` at coordinates `coords` is flipped vertically. The result is valid only for atlas sources.
			"""
    pass

  def is_cell_transposed(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->bool:
    """
				Returns `true` if the cell on layer `layer` at coordinates `coords` is transposed. The result is valid only for atlas sources.
			"""
    pass

  def get_coords_for_body_rid(self, body:__core__.RID)->__core__.Vector2i:
    """
				Returns the coordinates of the tile for given physics body RID. Such RID can be retrieved from `KinematicCollision2D.get_collider_rid`, when colliding with a tile.
			"""
    pass

  def get_layer_for_body_rid(self, body:__core__.RID)->int:
    """
				Returns the tilemap layer of the tile for given physics body RID. Such RID can be retrieved from `KinematicCollision2D.get_collider_rid`, when colliding with a tile.
			"""
    pass

  def get_pattern(self, layer:int, coords_array:__core__.Array)->__tilemappattern__.TileMapPattern:
    """
				Creates a new `TileMapPattern` from the given layer and set of cells.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def map_pattern(self, position_in_tilemap:__core__.Vector2i, coords_in_pattern:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->__core__.Vector2i:
    """
				Returns for the given coordinate `coords_in_pattern` in a `TileMapPattern` the corresponding cell coordinates if the pattern was pasted at the `position_in_tilemap` coordinates (see `set_pattern`). This mapping is required as in half-offset tile shapes, the mapping might not work by calculating `position_in_tile_map + coords_in_pattern`.
			"""
    pass

  def set_pattern(self, layer:int, position:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->None:
    """
				Paste the given `TileMapPattern` at the given `position` and `layer` in the tile map.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def set_cells_terrain_connect(self, layer:int, cells:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None:
    """
				Update all the cells in the `cells` coordinates array so that they use the given `terrain` for the given `terrain_set`. If an updated cell has the same terrain as one of its neighboring cells, this function tries to join the two. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				If `layer` is negative, the layers are accessed from the last one.
				**Note:** To work correctly, this method requires the TileMap's TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			"""
    pass

  def set_cells_terrain_path(self, layer:int, path:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None:
    """
				Update all the cells in the `path` coordinates array so that they use the given `terrain` for the given `terrain_set`. The function will also connect two successive cell in the path with the same terrain. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				If `layer` is negative, the layers are accessed from the last one.
				**Note:** To work correctly, this method requires the TileMap's TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			"""
    pass

  def fix_invalid_tiles(self)->None:
    """
				Clears cells that do not exist in the tileset.
			"""
    pass

  def clear_layer(self, layer:int)->None:
    """
				Clears all cells on the given layer.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def clear(self)->None:
    """
				Clears all cells.
			"""
    pass

  def update_internals(self)->None:
    """
				Triggers a direct update of the TileMap. Usually, calling this function is not needed, as TileMap node updates automatically when one of its properties or cells is modified.
				However, for performance reasons, those updates are batched and delayed to the end of the frame. Calling this function will force the TileMap to update right away instead.
				**Warning:** Updating the TileMap is computationally expensive and may impact performance. Try to limit the number of updates and how many tiles they impact.
			"""
    pass

  def notify_runtime_tile_data_update(self, layer:int=-1)->None:
    """
				Notifies the TileMap node that calls to `_use_tile_data_runtime_update` or `_tile_data_runtime_update` will lead to different results. This will thus trigger a TileMap update.
				If `layer` is provided, only notifies changes for the given layer. Providing the `layer` argument (when applicable) is usually preferred for performance reasons.
				**Warning:** Updating the TileMap is computationally expensive and may impact performance. Try to limit the number of calls to this function to avoid unnecessary update.
				**Note:** This does not trigger a direct update of the TileMap, the update will be done at the end of the frame as usual (unless you call `update_internals`).
			"""
    pass

  def get_surrounding_cells(self, coords:__core__.Vector2i)->typedarray::Vector2i:
    """
				Returns the list of all neighbourings cells to the one at `coords`.
			"""
    pass

  def get_used_cells(self, layer:int)->typedarray::Vector2i:
    """
				Returns a `Vector2i` array with the positions of all cells containing a tile in the given layer. A cell is considered empty if its source identifier equals -1, its atlas coordinates identifiers is `Vector2(-1, -1)` and its alternative identifier is -1.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_used_cells_by_id(self, layer:int, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=-1)->typedarray::Vector2i:
    """
				Returns a `Vector2i` array with the positions of all cells containing a tile in the given layer. Tiles may be filtered according to their source (`source_id`), their atlas coordinates (`atlas_coords`) or alternative id (`alternative_tile`).
				If a parameter has its value set to the default one, this parameter is not used to filter a cell. Thus, if all parameters have their respective default value, this method returns the same result as `get_used_cells`.
				A cell is considered empty if its source identifier equals -1, its atlas coordinates identifiers is `Vector2(-1, -1)` and its alternative identifier is -1.
				If `layer` is negative, the layers are accessed from the last one.
			"""
    pass

  def get_used_rect(self)->__core__.Rect2i:
    """
				Returns a rectangle enclosing the used (non-empty) tiles of the map, including all layers.
			"""
    pass

  def map_to_local(self, map_position:__core__.Vector2i)->__core__.Vector2:
    """
				Returns the centered position of a cell in the TileMap's local coordinate space. To convert the returned value into global coordinates, use `Node2D.to_global`. See also `local_to_map`.
				**Note:** This may not correspond to the visual position of the tile, i.e. it ignores the `TileData.texture_origin` property of individual tiles.
			"""
    pass

  def local_to_map(self, local_position:__core__.Vector2)->__core__.Vector2i:
    """
				Returns the map coordinates of the cell containing the given `local_position`. If `local_position` is in global coordinates, consider using `Node2D.to_local` before passing it to this method. See also `map_to_local`.
			"""
    pass

  def get_neighbor_cell(self, coords:__core__.Vector2i, neighbor:int )->__core__.Vector2i:
    """
				Returns the neighboring cell to the one at coordinates `coords`, identified by the `neighbor` direction. This method takes into account the different layouts a TileMap can take.
			"""
    pass


