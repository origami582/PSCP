from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.Light3D as __light3d__


class ShadowMode:
  SHADOW_ORTHOGONAL:int = 0
  SHADOW_PARALLEL_2_SPLITS:int = 1
  SHADOW_PARALLEL_4_SPLITS:int = 2
class SkyMode:
  SKY_MODE_LIGHT_AND_SKY:int = 0
  SKY_MODE_LIGHT_ONLY:int = 1
  SKY_MODE_SKY_ONLY:int = 2


class DirectionalLight3D(__light3d__.Light3D):
  """
		A directional light is a type of `Light3D` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight.
		Light is emitted in the -Z direction of the node's global basis. For an unrotated light, this means that the light is emitted forwards, illuminating the front side of a 3D model (see `constant Vector3.FORWARD` and `constant Vector3.MODEL_FRONT`). The position of the node is ignored; only the basis is used to determine light direction.
	"""

  @staticmethod
  def constructor()->DirectionalLight3D:pass



  @staticmethod
  def cast(other:__object__.Object)->DirectionalLight3D:pass


  @property
  def directional_shadow_mode(self)->int:
    """"""
    pass
  @directional_shadow_mode.setter
  def directional_shadow_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def directional_shadow_split_1(self)->float:
    """"""
    pass
  @directional_shadow_split_1.setter
  def directional_shadow_split_1(self,  value:float)->None:
    """"""
    pass
  @property
  def directional_shadow_split_2(self)->float:
    """"""
    pass
  @directional_shadow_split_2.setter
  def directional_shadow_split_2(self,  value:float)->None:
    """"""
    pass
  @property
  def directional_shadow_split_3(self)->float:
    """"""
    pass
  @directional_shadow_split_3.setter
  def directional_shadow_split_3(self,  value:float)->None:
    """"""
    pass
  @property
  def directional_shadow_blend_splits(self)->bool:
    """"""
    pass
  @directional_shadow_blend_splits.setter
  def directional_shadow_blend_splits(self,  value:bool)->None:
    """"""
    pass
  @property
  def directional_shadow_fade_start(self)->float:
    """"""
    pass
  @directional_shadow_fade_start.setter
  def directional_shadow_fade_start(self,  value:float)->None:
    """"""
    pass
  @property
  def directional_shadow_max_distance(self)->float:
    """"""
    pass
  @directional_shadow_max_distance.setter
  def directional_shadow_max_distance(self,  value:float)->None:
    """"""
    pass
  @property
  def directional_shadow_pancake_size(self)->float:
    """"""
    pass
  @directional_shadow_pancake_size.setter
  def directional_shadow_pancake_size(self,  value:float)->None:
    """"""
    pass
  @property
  def sky_mode(self)->int:
    """"""
    pass
  @sky_mode.setter
  def sky_mode(self,  value:int)->None:
    """"""
    pass
  def set_shadow_mode(self, mode:int )->None:
    """"""
    pass

  def get_shadow_mode(self)->int:
    """"""
    pass

  def set_blend_splits(self, enabled:bool)->None:
    """"""
    pass

  def is_blend_splits_enabled(self)->bool:
    """"""
    pass

  def set_sky_mode(self, mode:int )->None:
    """"""
    pass

  def get_sky_mode(self)->int:
    """"""
    pass


