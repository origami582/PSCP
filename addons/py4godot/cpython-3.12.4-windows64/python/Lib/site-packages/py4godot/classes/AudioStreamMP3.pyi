from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamMP3 as __audiostreammp3__



class AudioStreamMP3(__audiostream__.AudioStream):
  """"""

  @staticmethod
  def constructor()->AudioStreamMP3:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamMP3:pass


  @property
  def data(self)->__core__.PackedByteArray:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.PackedByteArray)->None:
    """"""
    pass
  @property
  def bpm(self)->float:
    """"""
    pass
  @bpm.setter
  def bpm(self,  value:float)->None:
    """"""
    pass
  @property
  def beat_count(self)->int:
    """"""
    pass
  @beat_count.setter
  def beat_count(self,  value:int)->None:
    """"""
    pass
  @property
  def bar_beats(self)->int:
    """"""
    pass
  @bar_beats.setter
  def bar_beats(self,  value:int)->None:
    """"""
    pass
  @property
  def loop(self)->bool:
    """"""
    pass
  @loop.setter
  def loop(self,  value:bool)->None:
    """"""
    pass
  @property
  def loop_offset(self)->float:
    """"""
    pass
  @loop_offset.setter
  def loop_offset(self,  value:float)->None:
    """"""
    pass
  @staticmethod
  def load_from_buffer(stream_data:__core__.PackedByteArray)->__audiostreammp3__.AudioStreamMP3:
    """"""
    pass

  @staticmethod
  def load_from_file(path:str)->__audiostreammp3__.AudioStreamMP3:
    """"""
    pass

  def set_data(self, data:__core__.PackedByteArray)->None:
    """"""
    pass

  def get_data(self)->__core__.PackedByteArray:
    """"""
    pass

  def set_loop(self, enable:bool)->None:
    """"""
    pass

  def has_loop(self)->bool:
    """"""
    pass

  def set_loop_offset(self, seconds:float)->None:
    """"""
    pass

  def get_loop_offset(self)->float:
    """"""
    pass

  def set_bpm(self, bpm:float)->None:
    """"""
    pass

  def get_bpm(self)->float:
    """"""
    pass

  def set_beat_count(self, count:int)->None:
    """"""
    pass

  def get_beat_count(self)->int:
    """"""
    pass

  def set_bar_beats(self, count:int)->None:
    """"""
    pass

  def get_bar_beats(self)->int:
    """"""
    pass


