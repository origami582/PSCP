from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.TileSetAtlasSource as __tilesetatlassource__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.TileData as __tiledata__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.TileSetSource as __tilesetsource__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__


class TileAnimationMode:
  TILE_ANIMATION_MODE_DEFAULT:int = 0
  TILE_ANIMATION_MODE_RANDOM_START_TIMES:int = 1
  TILE_ANIMATION_MODE_MAX:int = 2


class TileSetAtlasSource(__tilesetsource__.TileSetSource):
  """
		An atlas is a grid of tiles laid out on a texture. Each tile in the grid must be exposed using `create_tile`. Those tiles are then indexed using their coordinates in the grid.
		Each tile can also have a size in the grid coordinates, making it more or less cells in the atlas.
		Alternatives version of a tile can be created using `create_alternative_tile`, which are then indexed using an alternative ID. The main tile (the one in the grid), is accessed with an alternative ID equal to 0.
		Each tile alternate has a set of properties that is defined by the source's `TileSet` layers. Those properties are stored in a TileData object that can be accessed and modified using `get_tile_data`.
		As TileData properties are stored directly in the TileSetAtlasSource resource, their properties might also be set using `TileSetAtlasSource.set("<coords_x>:<coords_y>/<alternative_id>/<tile_data_property>")`.
	"""

  @staticmethod
  def constructor()->TileSetAtlasSource:pass



  @staticmethod
  def cast(other:__object__.Object)->TileSetAtlasSource:pass


  @property
  def texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def margins(self)->__core__.Vector2i:
    """"""
    pass
  @margins.setter
  def margins(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def separation(self)->__core__.Vector2i:
    """"""
    pass
  @separation.setter
  def separation(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def texture_region_size(self)->__core__.Vector2i:
    """"""
    pass
  @texture_region_size.setter
  def texture_region_size(self,  value:__core__.Vector2i)->None:
    """"""
    pass
  @property
  def use_texture_padding(self)->bool:
    """"""
    pass
  @use_texture_padding.setter
  def use_texture_padding(self,  value:bool)->None:
    """"""
    pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def set_margins(self, margins:__core__.Vector2i)->None:
    """"""
    pass

  def get_margins(self)->__core__.Vector2i:
    """"""
    pass

  def set_separation(self, separation:__core__.Vector2i)->None:
    """"""
    pass

  def get_separation(self)->__core__.Vector2i:
    """"""
    pass

  def set_texture_region_size(self, texture_region_size:__core__.Vector2i)->None:
    """"""
    pass

  def get_texture_region_size(self)->__core__.Vector2i:
    """"""
    pass

  def set_use_texture_padding(self, use_texture_padding:bool)->None:
    """"""
    pass

  def get_use_texture_padding(self)->bool:
    """"""
    pass

  def create_tile(self, atlas_coords:__core__.Vector2i, size:__core__.Vector2i= __core__.Vector2i.new0())->None:
    """
				Creates a new tile at coordinates `atlas_coords` with the given `size`.
			"""
    pass

  def remove_tile(self, atlas_coords:__core__.Vector2i)->None:
    """
				Remove a tile and its alternative at coordinates `atlas_coords`.
			"""
    pass

  def move_tile_in_atlas(self, atlas_coords:__core__.Vector2i, new_atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), new_size:__core__.Vector2i= __core__.Vector2i.new0())->None:
    """
				Move the tile and its alternatives at the `atlas_coords` coordinates to the `new_atlas_coords` coordinates with the `new_size` size. This functions will fail if a tile is already present in the given area.
				If `new_atlas_coords` is `Vector2i(-1, -1)`, keeps the tile's coordinates. If `new_size` is `Vector2i(-1, -1)`, keeps the tile's size.
				To avoid an error, first check if a move is possible using `has_room_for_tile`.
			"""
    pass

  def get_tile_size_in_atlas(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i:
    """
				Returns the size of the tile (in the grid coordinates system) at coordinates `atlas_coords`.
			"""
    pass

  def has_room_for_tile(self, atlas_coords:__core__.Vector2i, size:__core__.Vector2i, animation_columns:int, animation_separation:__core__.Vector2i, frames_count:int, ignored_tile:__core__.Vector2i= __core__.Vector2i.new0())->bool:
    """
				Returns whether there is enough room in an atlas to create/modify a tile with the given properties. If `ignored_tile` is provided, act as is the given tile was not present in the atlas. This may be used when you want to modify a tile's properties.
			"""
    pass

  def get_tiles_to_be_removed_on_change(self, texture:__texture2d__.Texture2D, margins:__core__.Vector2i, separation:__core__.Vector2i, texture_region_size:__core__.Vector2i)->__core__.PackedVector2Array:
    """
				Returns an array of tiles coordinates ID that will be automatically removed when modifying one or several of those properties: `texture`, `margins`, `separation` or `texture_region_size`. This can be used to undo changes that would have caused tiles data loss.
			"""
    pass

  def get_tile_at_coords(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i:
    """
				If there is a tile covering the `atlas_coords` coordinates, returns the top-left coordinates of the tile (thus its coordinate ID). Returns `Vector2i(-1, -1)` otherwise.
			"""
    pass

  def has_tiles_outside_texture(self)->bool:
    """
				Checks if the source has any tiles that don't fit the texture area (either partially or completely).
			"""
    pass

  def clear_tiles_outside_texture(self)->None:
    """
				Removes all tiles that don't fit the available texture area. This method iterates over all the source's tiles, so it's advised to use `has_tiles_outside_texture` beforehand.
			"""
    pass

  def set_tile_animation_columns(self, atlas_coords:__core__.Vector2i, frame_columns:int)->None:
    """
				Sets the number of columns in the animation layout of the tile at coordinates `atlas_coords`. If set to 0, then the different frames of the animation are laid out as a single horizontal line in the atlas.
			"""
    pass

  def get_tile_animation_columns(self, atlas_coords:__core__.Vector2i)->int:
    """
				Returns how many columns the tile at `atlas_coords` has in its animation layout.
			"""
    pass

  def set_tile_animation_separation(self, atlas_coords:__core__.Vector2i, separation:__core__.Vector2i)->None:
    """
				Sets the margin (in grid tiles) between each tile in the animation layout of the tile at coordinates `atlas_coords` has.
			"""
    pass

  def get_tile_animation_separation(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i:
    """
				Returns the separation (as in the atlas grid) between each frame of an animated tile at coordinates `atlas_coords`.
			"""
    pass

  def set_tile_animation_speed(self, atlas_coords:__core__.Vector2i, speed:float)->None:
    """
				Sets the animation speed of the tile at coordinates `atlas_coords` has.
			"""
    pass

  def get_tile_animation_speed(self, atlas_coords:__core__.Vector2i)->float:
    """
				Returns the animation speed of the tile at coordinates `atlas_coords`.
			"""
    pass

  def set_tile_animation_mode(self, atlas_coords:__core__.Vector2i, mode:int )->None:
    """
				Sets the tile animation mode of the tile at `atlas_coords` to `mode`. See also `get_tile_animation_mode`.
			"""
    pass

  def get_tile_animation_mode(self, atlas_coords:__core__.Vector2i)->int:
    """
				Returns the tile animation mode of the tile at `atlas_coords`. See also `set_tile_animation_mode`.
			"""
    pass

  def set_tile_animation_frames_count(self, atlas_coords:__core__.Vector2i, frames_count:int)->None:
    """
				Sets how many animation frames the tile at coordinates `atlas_coords` has.
			"""
    pass

  def get_tile_animation_frames_count(self, atlas_coords:__core__.Vector2i)->int:
    """
				Returns how many animation frames has the tile at coordinates `atlas_coords`.
			"""
    pass

  def set_tile_animation_frame_duration(self, atlas_coords:__core__.Vector2i, frame_index:int, duration:float)->None:
    """
				Sets the animation frame `duration` of frame `frame_index` for the tile at coordinates `atlas_coords`.
			"""
    pass

  def get_tile_animation_frame_duration(self, atlas_coords:__core__.Vector2i, frame_index:int)->float:
    """
				Returns the animation frame duration of frame `frame_index` for the tile at coordinates `atlas_coords`.
			"""
    pass

  def get_tile_animation_total_duration(self, atlas_coords:__core__.Vector2i)->float:
    """
				Returns the sum of the sum of the frame durations of the tile at coordinates `atlas_coords`. This value needs to be divided by the animation speed to get the actual animation loop duration.
			"""
    pass

  def create_alternative_tile(self, atlas_coords:__core__.Vector2i, alternative_id_override:int=-1)->int:
    """
				Creates an alternative tile for the tile at coordinates `atlas_coords`. If `alternative_id_override` is -1, give it an automatically generated unique ID, or assigns it the given ID otherwise.
				Returns the new alternative identifier, or -1 if the alternative could not be created with a provided `alternative_id_override`.
			"""
    pass

  def remove_alternative_tile(self, atlas_coords:__core__.Vector2i, alternative_tile:int)->None:
    """
				Remove a tile's alternative with alternative ID `alternative_tile`.
				Calling this function with `alternative_tile` equals to 0 will fail, as the base tile alternative cannot be removed.
			"""
    pass

  def set_alternative_tile_id(self, atlas_coords:__core__.Vector2i, alternative_tile:int, new_id:int)->None:
    """
				Change a tile's alternative ID from `alternative_tile` to `new_id`.
				Calling this function with `new_id` of 0 will fail, as the base tile alternative cannot be moved.
			"""
    pass

  def get_next_alternative_tile_id(self, atlas_coords:__core__.Vector2i)->int:
    """
				Returns the alternative ID a following call to `create_alternative_tile` would return.
			"""
    pass

  def get_tile_data(self, atlas_coords:__core__.Vector2i, alternative_tile:int)->__tiledata__.TileData:
    """
				Returns the `TileData` object for the given atlas coordinates and alternative ID.
			"""
    pass

  def get_atlas_grid_size(self)->__core__.Vector2i:
    """
				Returns the atlas grid size, which depends on how many tiles can fit in the texture. It thus depends on the `texture`'s size, the atlas `margins`, and the tiles' `texture_region_size`.
			"""
    pass

  def get_tile_texture_region(self, atlas_coords:__core__.Vector2i, frame:int=0)->__core__.Rect2i:
    """
				Returns a tile's texture region in the atlas texture. For animated tiles, a `frame` argument might be provided for the different frames of the animation.
			"""
    pass

  def get_runtime_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				If `use_texture_padding` is `false`, returns `texture`. Otherwise, returns and internal `ImageTexture` created that includes the padding.
			"""
    pass

  def get_runtime_tile_texture_region(self, atlas_coords:__core__.Vector2i, frame:int)->__core__.Rect2i:
    """
				Returns the region of the tile at coordinates `atlas_coords` for the given `frame` inside the texture returned by `get_runtime_texture`.
				**Note:** If `use_texture_padding` is `false`, returns the same as `get_tile_texture_region`.
			"""
    pass


