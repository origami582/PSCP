from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.Sky as __sky__
import py4godot.classes.Material as __material__
import py4godot.classes.Resource as __resource__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__


class RadianceSize:
  RADIANCE_SIZE_32:int = 0
  RADIANCE_SIZE_64:int = 1
  RADIANCE_SIZE_128:int = 2
  RADIANCE_SIZE_256:int = 3
  RADIANCE_SIZE_512:int = 4
  RADIANCE_SIZE_1024:int = 5
  RADIANCE_SIZE_2048:int = 6
  RADIANCE_SIZE_MAX:int = 7
class ProcessMode:
  PROCESS_MODE_AUTOMATIC:int = 0
  PROCESS_MODE_QUALITY:int = 1
  PROCESS_MODE_INCREMENTAL:int = 2
  PROCESS_MODE_REALTIME:int = 3


class Sky(__resource__.Resource):
  """
		The `Sky` class uses a `Material` to render a 3D environment's background and the light it emits by updating the reflection/radiance cubemaps.
	"""

  @staticmethod
  def constructor()->Sky:pass



  @staticmethod
  def cast(other:__object__.Object)->Sky:pass


  @property
  def sky_material(self)->PanoramaSkyMaterial,ProceduralSkyMaterial,PhysicalSkyMaterial,ShaderMaterial:
    """"""
    pass
  @sky_material.setter
  def sky_material(self,  value:__panoramaskymaterial__.PanoramaSkyMaterial)->None:
    """"""
    pass
  @property
  def process_mode(self)->int:
    """"""
    pass
  @process_mode.setter
  def process_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def radiance_size(self)->int:
    """"""
    pass
  @radiance_size.setter
  def radiance_size(self,  value:int)->None:
    """"""
    pass
  def set_radiance_size(self, size:int )->None:
    """"""
    pass

  def get_radiance_size(self)->int:
    """"""
    pass

  def set_process_mode(self, mode:int )->None:
    """"""
    pass

  def get_process_mode(self)->int:
    """"""
    pass

  def set_material(self, material:__material__.Material)->None:
    """"""
    pass

  def get_material(self)->__physicalskymaterial__.PhysicalSkyMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__material__.Material|__particleprocessmaterial__.ParticleProcessMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__fogmaterial__.FogMaterial|__basematerial3d__.BaseMaterial3D|__placeholdermaterial__.PlaceholderMaterial|__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__panoramaskymaterial__.PanoramaSkyMaterial:
    """"""
    pass


