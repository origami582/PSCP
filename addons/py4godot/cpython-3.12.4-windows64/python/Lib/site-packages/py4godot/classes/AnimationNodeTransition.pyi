from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.Curve as __curve__



class AnimationNodeTransition(__animationnodesync__.AnimationNodeSync):
  """
		Simple state machine for cases which don't require a more advanced `AnimationNodeStateMachine`. Animations can be connected to the inputs and transition times can be specified.
		After setting the request and changing the animation playback, the transition node automatically clears the request on the next process frame by setting its `transition_request` value to empty.
		**Note:** When using a cross-fade, `current_state` and `current_index` change to the next state immediately after the cross-fade begins.
		
		```gdscript
		# Play child animation connected to "state_2" port.
		animation_tree.set("parameters/Transition/transition_request", "state_2")
		# Alternative syntax (same result as above).
		animation_tree`"parameters/Transition/transition_request"` = "state_2"

		# Get current state name (read-only).
		animation_tree.get("parameters/Transition/current_state")
		# Alternative syntax (same result as above).
		animation_tree`"parameters/Transition/current_state"`

		# Get current state index (read-only).
		animation_tree.get("parameters/Transition/current_index")
		# Alternative syntax (same result as above).
		animation_tree`"parameters/Transition/current_index"`
		```
		
		
	"""

  @staticmethod
  def constructor()->AnimationNodeTransition:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeTransition:pass


  @property
  def xfade_time(self)->float:
    """"""
    pass
  @xfade_time.setter
  def xfade_time(self,  value:float)->None:
    """"""
    pass
  @property
  def xfade_curve(self)->__curve__.Curve:
    """"""
    pass
  @xfade_curve.setter
  def xfade_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def allow_transition_to_self(self)->bool:
    """"""
    pass
  @allow_transition_to_self.setter
  def allow_transition_to_self(self,  value:bool)->None:
    """"""
    pass
  @property
  def input_count(self)->int:
    """"""
    pass
  @input_count.setter
  def input_count(self,  value:int)->None:
    """"""
    pass
  def set_input_count(self, input_count:int)->None:
    """"""
    pass

  def set_input_as_auto_advance(self, input:int, enable:bool)->None:
    """
				Enables or disables auto-advance for the given `input` index. If enabled, state changes to the next input after playing the animation once. If enabled for the last input state, it loops to the first.
			"""
    pass

  def is_input_set_as_auto_advance(self, input:int)->bool:
    """
				Returns `true` if auto-advance is enabled for the given `input` index.
			"""
    pass

  def set_input_break_loop_at_end(self, input:int, enable:bool)->None:
    """
				If `true`, breaks the loop at the end of the loop cycle for transition, even if the animation is looping.
			"""
    pass

  def is_input_loop_broken_at_end(self, input:int)->bool:
    """
				Returns whether the animation breaks the loop at the end of the loop cycle for transition.
			"""
    pass

  def set_input_reset(self, input:int, enable:bool)->None:
    """
				If `true`, the destination animation is restarted when the animation transitions.
			"""
    pass

  def is_input_reset(self, input:int)->bool:
    """
				Returns whether the animation restarts when the animation transitions from the other animation.
			"""
    pass

  def set_xfade_time(self, time:float)->None:
    """"""
    pass

  def get_xfade_time(self)->float:
    """"""
    pass

  def set_xfade_curve(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_xfade_curve(self)->__curve__.Curve:
    """"""
    pass

  def set_allow_transition_to_self(self, enable:bool)->None:
    """"""
    pass

  def is_allow_transition_to_self(self)->bool:
    """"""
    pass


