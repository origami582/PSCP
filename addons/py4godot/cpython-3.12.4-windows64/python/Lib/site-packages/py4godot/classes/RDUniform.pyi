from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.I as __i__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.p as __p__
import py4godot.classes.D as __d__
import py4godot.classes.R as __r__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.y as __y__



class RDUniform(__refcounted__.RefCounted):
  """
		This object is used by `RenderingDevice`.
	"""

  @staticmethod
  def constructor()->RDUniform:pass



  @staticmethod
  def cast(other:__object__.Object)->RDUniform:pass


  @property
  def uniform_type(self)->int:
    """"""
    pass
  @uniform_type.setter
  def uniform_type(self,  value:int)->None:
    """"""
    pass
  @property
  def binding(self)->int:
    """"""
    pass
  @binding.setter
  def binding(self,  value:int)->None:
    """"""
    pass
  def set_uniform_type(self, p_member:int )->None:
    """"""
    pass

  def get_uniform_type(self)->int:
    """"""
    pass

  def set_binding(self, p_member:int)->None:
    """"""
    pass

  def get_binding(self)->int:
    """"""
    pass

  def add_id(self, id:__core__.RID)->None:
    """
				Binds the given id to the uniform. The data associated with the id is then used when the uniform is passed to a shader.
			"""
    pass

  def clear_ids(self)->None:
    """
				Unbinds all ids currently bound to the uniform.
			"""
    pass

  def get_ids(self)->typedarray::RID:
    """
				Returns an array of all ids currently bound to the uniform.
			"""
    pass


