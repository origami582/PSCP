from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Node as __node__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Curve as __curve__
import py4godot.classes.Gradient as __gradient__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__


class DrawOrder:
  DRAW_ORDER_INDEX:int = 0
  DRAW_ORDER_LIFETIME:int = 1
class Parameter:
  PARAM_INITIAL_LINEAR_VELOCITY:int = 0
  PARAM_ANGULAR_VELOCITY:int = 1
  PARAM_ORBIT_VELOCITY:int = 2
  PARAM_LINEAR_ACCEL:int = 3
  PARAM_RADIAL_ACCEL:int = 4
  PARAM_TANGENTIAL_ACCEL:int = 5
  PARAM_DAMPING:int = 6
  PARAM_ANGLE:int = 7
  PARAM_SCALE:int = 8
  PARAM_HUE_VARIATION:int = 9
  PARAM_ANIM_SPEED:int = 10
  PARAM_ANIM_OFFSET:int = 11
  PARAM_MAX:int = 12
class ParticleFlags:
  PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY:int = 0
  PARTICLE_FLAG_ROTATE_Y:int = 1
  PARTICLE_FLAG_DISABLE_Z:int = 2
  PARTICLE_FLAG_MAX:int = 3
class EmissionShape:
  EMISSION_SHAPE_POINT:int = 0
  EMISSION_SHAPE_SPHERE:int = 1
  EMISSION_SHAPE_SPHERE_SURFACE:int = 2
  EMISSION_SHAPE_RECTANGLE:int = 3
  EMISSION_SHAPE_POINTS:int = 4
  EMISSION_SHAPE_DIRECTED_POINTS:int = 5
  EMISSION_SHAPE_MAX:int = 6


class CPUParticles2D(__node2d__.Node2D):
  """
		CPU-based 2D particle node used to create a variety of particle systems and effects.
		See also `GPUParticles2D`, which provides the same functionality with hardware acceleration, but may not run on older devices.
	"""
  finished: BuiltinSignal

  @staticmethod
  def constructor()->CPUParticles2D:pass



  @staticmethod
  def cast(other:__object__.Object)->CPUParticles2D:pass


  @property
  def emitting(self)->bool:
    """"""
    pass
  @emitting.setter
  def emitting(self,  value:bool)->None:
    """"""
    pass
  @property
  def amount(self)->int:
    """"""
    pass
  @amount.setter
  def amount(self,  value:int)->None:
    """"""
    pass
  @property
  def texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def lifetime(self)->float:
    """"""
    pass
  @lifetime.setter
  def lifetime(self,  value:float)->None:
    """"""
    pass
  @property
  def one_shot(self)->bool:
    """"""
    pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None:
    """"""
    pass
  @property
  def preprocess(self)->float:
    """"""
    pass
  @preprocess.setter
  def preprocess(self,  value:float)->None:
    """"""
    pass
  @property
  def speed_scale(self)->float:
    """"""
    pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def explosiveness(self)->float:
    """"""
    pass
  @explosiveness.setter
  def explosiveness(self,  value:float)->None:
    """"""
    pass
  @property
  def randomness(self)->float:
    """"""
    pass
  @randomness.setter
  def randomness(self,  value:float)->None:
    """"""
    pass
  @property
  def use_fixed_seed(self)->bool:
    """"""
    pass
  @use_fixed_seed.setter
  def use_fixed_seed(self,  value:bool)->None:
    """"""
    pass
  @property
  def seed(self)->int:
    """"""
    pass
  @seed.setter
  def seed(self,  value:int)->None:
    """"""
    pass
  @property
  def lifetime_randomness(self)->float:
    """"""
    pass
  @lifetime_randomness.setter
  def lifetime_randomness(self,  value:float)->None:
    """"""
    pass
  @property
  def fixed_fps(self)->int:
    """"""
    pass
  @fixed_fps.setter
  def fixed_fps(self,  value:int)->None:
    """"""
    pass
  @property
  def fract_delta(self)->bool:
    """"""
    pass
  @fract_delta.setter
  def fract_delta(self,  value:bool)->None:
    """"""
    pass
  @property
  def local_coords(self)->bool:
    """"""
    pass
  @local_coords.setter
  def local_coords(self,  value:bool)->None:
    """"""
    pass
  @property
  def draw_order(self)->int:
    """"""
    pass
  @draw_order.setter
  def draw_order(self,  value:int)->None:
    """"""
    pass
  @property
  def emission_shape(self)->int:
    """"""
    pass
  @emission_shape.setter
  def emission_shape(self,  value:int)->None:
    """"""
    pass
  @property
  def emission_sphere_radius(self)->float:
    """"""
    pass
  @emission_sphere_radius.setter
  def emission_sphere_radius(self,  value:float)->None:
    """"""
    pass
  @property
  def emission_rect_extents(self)->__core__.Vector2:
    """"""
    pass
  @emission_rect_extents.setter
  def emission_rect_extents(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def emission_points(self)->__core__.PackedVector2Array:
    """"""
    pass
  @emission_points.setter
  def emission_points(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def emission_normals(self)->__core__.PackedVector2Array:
    """"""
    pass
  @emission_normals.setter
  def emission_normals(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def emission_colors(self)->__core__.PackedColorArray:
    """"""
    pass
  @emission_colors.setter
  def emission_colors(self,  value:__core__.PackedColorArray)->None:
    """"""
    pass
  @property
  def particle_flag_align_y(self)->bool:
    """"""
    pass
  @particle_flag_align_y.setter
  def particle_flag_align_y(self,  value:bool)->None:
    """"""
    pass
  @property
  def direction(self)->__core__.Vector2:
    """"""
    pass
  @direction.setter
  def direction(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def spread(self)->float:
    """"""
    pass
  @spread.setter
  def spread(self,  value:float)->None:
    """"""
    pass
  @property
  def gravity(self)->__core__.Vector2:
    """"""
    pass
  @gravity.setter
  def gravity(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def initial_velocity_min(self)->float:
    """"""
    pass
  @initial_velocity_min.setter
  def initial_velocity_min(self,  value:float)->None:
    """"""
    pass
  @property
  def initial_velocity_max(self)->float:
    """"""
    pass
  @initial_velocity_max.setter
  def initial_velocity_max(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_velocity_min(self)->float:
    """"""
    pass
  @angular_velocity_min.setter
  def angular_velocity_min(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_velocity_max(self)->float:
    """"""
    pass
  @angular_velocity_max.setter
  def angular_velocity_max(self,  value:float)->None:
    """"""
    pass
  @property
  def angular_velocity_curve(self)->__curve__.Curve:
    """"""
    pass
  @angular_velocity_curve.setter
  def angular_velocity_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def orbit_velocity_min(self)->float:
    """"""
    pass
  @orbit_velocity_min.setter
  def orbit_velocity_min(self,  value:float)->None:
    """"""
    pass
  @property
  def orbit_velocity_max(self)->float:
    """"""
    pass
  @orbit_velocity_max.setter
  def orbit_velocity_max(self,  value:float)->None:
    """"""
    pass
  @property
  def orbit_velocity_curve(self)->__curve__.Curve:
    """"""
    pass
  @orbit_velocity_curve.setter
  def orbit_velocity_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def linear_accel_min(self)->float:
    """"""
    pass
  @linear_accel_min.setter
  def linear_accel_min(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_accel_max(self)->float:
    """"""
    pass
  @linear_accel_max.setter
  def linear_accel_max(self,  value:float)->None:
    """"""
    pass
  @property
  def linear_accel_curve(self)->__curve__.Curve:
    """"""
    pass
  @linear_accel_curve.setter
  def linear_accel_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def radial_accel_min(self)->float:
    """"""
    pass
  @radial_accel_min.setter
  def radial_accel_min(self,  value:float)->None:
    """"""
    pass
  @property
  def radial_accel_max(self)->float:
    """"""
    pass
  @radial_accel_max.setter
  def radial_accel_max(self,  value:float)->None:
    """"""
    pass
  @property
  def radial_accel_curve(self)->__curve__.Curve:
    """"""
    pass
  @radial_accel_curve.setter
  def radial_accel_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def tangential_accel_min(self)->float:
    """"""
    pass
  @tangential_accel_min.setter
  def tangential_accel_min(self,  value:float)->None:
    """"""
    pass
  @property
  def tangential_accel_max(self)->float:
    """"""
    pass
  @tangential_accel_max.setter
  def tangential_accel_max(self,  value:float)->None:
    """"""
    pass
  @property
  def tangential_accel_curve(self)->__curve__.Curve:
    """"""
    pass
  @tangential_accel_curve.setter
  def tangential_accel_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def damping_min(self)->float:
    """"""
    pass
  @damping_min.setter
  def damping_min(self,  value:float)->None:
    """"""
    pass
  @property
  def damping_max(self)->float:
    """"""
    pass
  @damping_max.setter
  def damping_max(self,  value:float)->None:
    """"""
    pass
  @property
  def damping_curve(self)->__curve__.Curve:
    """"""
    pass
  @damping_curve.setter
  def damping_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def angle_min(self)->float:
    """"""
    pass
  @angle_min.setter
  def angle_min(self,  value:float)->None:
    """"""
    pass
  @property
  def angle_max(self)->float:
    """"""
    pass
  @angle_max.setter
  def angle_max(self,  value:float)->None:
    """"""
    pass
  @property
  def angle_curve(self)->__curve__.Curve:
    """"""
    pass
  @angle_curve.setter
  def angle_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def scale_amount_min(self)->float:
    """"""
    pass
  @scale_amount_min.setter
  def scale_amount_min(self,  value:float)->None:
    """"""
    pass
  @property
  def scale_amount_max(self)->float:
    """"""
    pass
  @scale_amount_max.setter
  def scale_amount_max(self,  value:float)->None:
    """"""
    pass
  @property
  def scale_amount_curve(self)->__curve__.Curve:
    """"""
    pass
  @scale_amount_curve.setter
  def scale_amount_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def split_scale(self)->bool:
    """"""
    pass
  @split_scale.setter
  def split_scale(self,  value:bool)->None:
    """"""
    pass
  @property
  def scale_curve_x(self)->__curve__.Curve:
    """"""
    pass
  @scale_curve_x.setter
  def scale_curve_x(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def scale_curve_y(self)->__curve__.Curve:
    """"""
    pass
  @scale_curve_y.setter
  def scale_curve_y(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def color(self)->__core__.Color:
    """"""
    pass
  @color.setter
  def color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def color_ramp(self)->__gradient__.Gradient:
    """"""
    pass
  @color_ramp.setter
  def color_ramp(self,  value:__gradient__.Gradient)->None:
    """"""
    pass
  @property
  def color_initial_ramp(self)->__gradient__.Gradient:
    """"""
    pass
  @color_initial_ramp.setter
  def color_initial_ramp(self,  value:__gradient__.Gradient)->None:
    """"""
    pass
  @property
  def hue_variation_min(self)->float:
    """"""
    pass
  @hue_variation_min.setter
  def hue_variation_min(self,  value:float)->None:
    """"""
    pass
  @property
  def hue_variation_max(self)->float:
    """"""
    pass
  @hue_variation_max.setter
  def hue_variation_max(self,  value:float)->None:
    """"""
    pass
  @property
  def hue_variation_curve(self)->__curve__.Curve:
    """"""
    pass
  @hue_variation_curve.setter
  def hue_variation_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def anim_speed_min(self)->float:
    """"""
    pass
  @anim_speed_min.setter
  def anim_speed_min(self,  value:float)->None:
    """"""
    pass
  @property
  def anim_speed_max(self)->float:
    """"""
    pass
  @anim_speed_max.setter
  def anim_speed_max(self,  value:float)->None:
    """"""
    pass
  @property
  def anim_speed_curve(self)->__curve__.Curve:
    """"""
    pass
  @anim_speed_curve.setter
  def anim_speed_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def anim_offset_min(self)->float:
    """"""
    pass
  @anim_offset_min.setter
  def anim_offset_min(self,  value:float)->None:
    """"""
    pass
  @property
  def anim_offset_max(self)->float:
    """"""
    pass
  @anim_offset_max.setter
  def anim_offset_max(self,  value:float)->None:
    """"""
    pass
  @property
  def anim_offset_curve(self)->__curve__.Curve:
    """"""
    pass
  @anim_offset_curve.setter
  def anim_offset_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  def set_emitting(self, emitting:bool)->None:
    """"""
    pass

  def set_amount(self, amount:int)->None:
    """"""
    pass

  def set_lifetime(self, secs:float)->None:
    """"""
    pass

  def set_one_shot(self, enable:bool)->None:
    """"""
    pass

  def set_pre_process_time(self, secs:float)->None:
    """"""
    pass

  def set_explosiveness_ratio(self, ratio:float)->None:
    """"""
    pass

  def set_randomness_ratio(self, ratio:float)->None:
    """"""
    pass

  def set_lifetime_randomness(self, random:float)->None:
    """"""
    pass

  def set_use_local_coordinates(self, enable:bool)->None:
    """"""
    pass

  def set_fixed_fps(self, fps:int)->None:
    """"""
    pass

  def set_fractional_delta(self, enable:bool)->None:
    """"""
    pass

  def set_speed_scale(self, scale:float)->None:
    """"""
    pass

  def request_particles_process(self, process_time:float)->None:
    """
				Requests the particles to process for extra process time during a single frame.
				Useful for particle playback, if used in combination with `use_fixed_seed` or by calling `restart` with parameter `keep_seed` set to `true`.
			"""
    pass

  def is_emitting(self)->bool:
    """"""
    pass

  def get_amount(self)->int:
    """"""
    pass

  def get_lifetime(self)->float:
    """"""
    pass

  def get_one_shot(self)->bool:
    """"""
    pass

  def get_pre_process_time(self)->float:
    """"""
    pass

  def get_explosiveness_ratio(self)->float:
    """"""
    pass

  def get_randomness_ratio(self)->float:
    """"""
    pass

  def get_lifetime_randomness(self)->float:
    """"""
    pass

  def get_use_local_coordinates(self)->bool:
    """"""
    pass

  def get_fixed_fps(self)->int:
    """"""
    pass

  def get_fractional_delta(self)->bool:
    """"""
    pass

  def get_speed_scale(self)->float:
    """"""
    pass

  def set_use_fixed_seed(self, use_fixed_seed:bool)->None:
    """"""
    pass

  def get_use_fixed_seed(self)->bool:
    """"""
    pass

  def set_seed(self, seed:int)->None:
    """"""
    pass

  def get_seed(self)->int:
    """"""
    pass

  def set_draw_order(self, order:int )->None:
    """"""
    pass

  def get_draw_order(self)->int:
    """"""
    pass

  def set_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def restart(self, keep_seed:bool=False)->None:
    """
				Restarts the particle emitter.
				If `keep_seed` is `true`, the current random seed will be preserved. Useful for seeking and playback.
			"""
    pass

  def set_direction(self, direction:__core__.Vector2)->None:
    """"""
    pass

  def get_direction(self)->__core__.Vector2:
    """"""
    pass

  def set_spread(self, spread:float)->None:
    """"""
    pass

  def get_spread(self)->float:
    """"""
    pass

  def set_param_min(self, param:int , value:float)->None:
    """
				Sets the minimum value for the given parameter.
			"""
    pass

  def get_param_min(self, param:int )->float:
    """
				Returns the minimum value range for the given parameter.
			"""
    pass

  def set_param_max(self, param:int , value:float)->None:
    """
				Sets the maximum value for the given parameter.
			"""
    pass

  def get_param_max(self, param:int )->float:
    """
				Returns the maximum value range for the given parameter.
			"""
    pass

  def set_param_curve(self, param:int , curve:__curve__.Curve)->None:
    """
				Sets the `Curve` of the parameter specified by `enum Parameter`. Should be a unit `Curve`.
			"""
    pass

  def get_param_curve(self, param:int )->__curve__.Curve:
    """
				Returns the `Curve` of the parameter specified by `enum Parameter`.
			"""
    pass

  def set_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_color(self)->__core__.Color:
    """"""
    pass

  def set_color_ramp(self, ramp:__gradient__.Gradient)->None:
    """"""
    pass

  def get_color_ramp(self)->__gradient__.Gradient:
    """"""
    pass

  def set_color_initial_ramp(self, ramp:__gradient__.Gradient)->None:
    """"""
    pass

  def get_color_initial_ramp(self)->__gradient__.Gradient:
    """"""
    pass

  def set_particle_flag(self, particle_flag:int , enable:bool)->None:
    """
				Enables or disables the given particle flag.
			"""
    pass

  def get_particle_flag(self, particle_flag:int )->bool:
    """
				Returns the enabled state of the given particle flag.
			"""
    pass

  def set_emission_shape(self, shape:int )->None:
    """"""
    pass

  def get_emission_shape(self)->int:
    """"""
    pass

  def set_emission_sphere_radius(self, radius:float)->None:
    """"""
    pass

  def get_emission_sphere_radius(self)->float:
    """"""
    pass

  def set_emission_rect_extents(self, extents:__core__.Vector2)->None:
    """"""
    pass

  def get_emission_rect_extents(self)->__core__.Vector2:
    """"""
    pass

  def set_emission_points(self, array:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_emission_points(self)->__core__.PackedVector2Array:
    """"""
    pass

  def set_emission_normals(self, array:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_emission_normals(self)->__core__.PackedVector2Array:
    """"""
    pass

  def set_emission_colors(self, array:__core__.PackedColorArray)->None:
    """"""
    pass

  def get_emission_colors(self)->__core__.PackedColorArray:
    """"""
    pass

  def get_gravity(self)->__core__.Vector2:
    """"""
    pass

  def set_gravity(self, accel_vec:__core__.Vector2)->None:
    """"""
    pass

  def get_split_scale(self)->bool:
    """"""
    pass

  def set_split_scale(self, split_scale:bool)->None:
    """"""
    pass

  def get_scale_curve_x(self)->__curve__.Curve:
    """"""
    pass

  def set_scale_curve_x(self, scale_curve:__curve__.Curve)->None:
    """"""
    pass

  def get_scale_curve_y(self)->__curve__.Curve:
    """"""
    pass

  def set_scale_curve_y(self, scale_curve:__curve__.Curve)->None:
    """"""
    pass

  def convert_from_particles(self, particles:__node__.Node)->None:
    """
				Sets this node's properties to match a given `GPUParticles2D` node with an assigned `ParticleProcessMaterial`.
			"""
    pass


