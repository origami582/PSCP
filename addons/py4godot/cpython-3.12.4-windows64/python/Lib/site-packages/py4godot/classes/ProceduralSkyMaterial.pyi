from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Material as __material__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__



class ProceduralSkyMaterial(__material__.Material):
  """
		`ProceduralSkyMaterial` provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are defined by a main color, a color at the horizon, and an easing curve to interpolate between them. Suns are described by a position in the sky, a color, and a max angle from the sun at which the easing curve ends. The max angle therefore defines the size of the sun in the sky.
		`ProceduralSkyMaterial` supports up to 4 suns, using the color, and energy, direction, and angular distance of the first four `DirectionalLight3D` nodes in the scene. This means that the suns are defined individually by the properties of their corresponding `DirectionalLight3D`s and globally by `sun_angle_max` and `sun_curve`.
		`ProceduralSkyMaterial` uses a lightweight shader to draw the sky and is therefore suited for real-time updates. This makes it a great option for a sky that is simple and computationally cheap, but unrealistic. If you need a more realistic procedural option, use `PhysicalSkyMaterial`.
	"""

  @staticmethod
  def constructor()->ProceduralSkyMaterial:pass



  @staticmethod
  def cast(other:__object__.Object)->ProceduralSkyMaterial:pass


  @property
  def sky_top_color(self)->__core__.Color:
    """"""
    pass
  @sky_top_color.setter
  def sky_top_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def sky_horizon_color(self)->__core__.Color:
    """"""
    pass
  @sky_horizon_color.setter
  def sky_horizon_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def sky_curve(self)->float:
    """"""
    pass
  @sky_curve.setter
  def sky_curve(self,  value:float)->None:
    """"""
    pass
  @property
  def sky_energy_multiplier(self)->float:
    """"""
    pass
  @sky_energy_multiplier.setter
  def sky_energy_multiplier(self,  value:float)->None:
    """"""
    pass
  @property
  def sky_cover(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @sky_cover.setter
  def sky_cover(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def sky_cover_modulate(self)->__core__.Color:
    """"""
    pass
  @sky_cover_modulate.setter
  def sky_cover_modulate(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def ground_bottom_color(self)->__core__.Color:
    """"""
    pass
  @ground_bottom_color.setter
  def ground_bottom_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def ground_horizon_color(self)->__core__.Color:
    """"""
    pass
  @ground_horizon_color.setter
  def ground_horizon_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def ground_curve(self)->float:
    """"""
    pass
  @ground_curve.setter
  def ground_curve(self,  value:float)->None:
    """"""
    pass
  @property
  def ground_energy_multiplier(self)->float:
    """"""
    pass
  @ground_energy_multiplier.setter
  def ground_energy_multiplier(self,  value:float)->None:
    """"""
    pass
  @property
  def sun_angle_max(self)->float:
    """"""
    pass
  @sun_angle_max.setter
  def sun_angle_max(self,  value:float)->None:
    """"""
    pass
  @property
  def sun_curve(self)->float:
    """"""
    pass
  @sun_curve.setter
  def sun_curve(self,  value:float)->None:
    """"""
    pass
  @property
  def use_debanding(self)->bool:
    """"""
    pass
  @use_debanding.setter
  def use_debanding(self,  value:bool)->None:
    """"""
    pass
  @property
  def energy_multiplier(self)->float:
    """"""
    pass
  @energy_multiplier.setter
  def energy_multiplier(self,  value:float)->None:
    """"""
    pass
  def set_sky_top_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_sky_top_color(self)->__core__.Color:
    """"""
    pass

  def set_sky_horizon_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_sky_horizon_color(self)->__core__.Color:
    """"""
    pass

  def set_sky_curve(self, curve:float)->None:
    """"""
    pass

  def get_sky_curve(self)->float:
    """"""
    pass

  def set_sky_energy_multiplier(self, multiplier:float)->None:
    """"""
    pass

  def get_sky_energy_multiplier(self)->float:
    """"""
    pass

  def set_sky_cover(self, sky_cover:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_sky_cover(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def set_sky_cover_modulate(self, color:__core__.Color)->None:
    """"""
    pass

  def get_sky_cover_modulate(self)->__core__.Color:
    """"""
    pass

  def set_ground_bottom_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_ground_bottom_color(self)->__core__.Color:
    """"""
    pass

  def set_ground_horizon_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_ground_horizon_color(self)->__core__.Color:
    """"""
    pass

  def set_ground_curve(self, curve:float)->None:
    """"""
    pass

  def get_ground_curve(self)->float:
    """"""
    pass

  def set_ground_energy_multiplier(self, energy:float)->None:
    """"""
    pass

  def get_ground_energy_multiplier(self)->float:
    """"""
    pass

  def set_sun_angle_max(self, degrees:float)->None:
    """"""
    pass

  def get_sun_angle_max(self)->float:
    """"""
    pass

  def set_sun_curve(self, curve:float)->None:
    """"""
    pass

  def get_sun_curve(self)->float:
    """"""
    pass

  def set_use_debanding(self, use_debanding:bool)->None:
    """"""
    pass

  def get_use_debanding(self)->bool:
    """"""
    pass

  def set_energy_multiplier(self, multiplier:float)->None:
    """"""
    pass

  def get_energy_multiplier(self)->float:
    """"""
    pass


