from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.Performance as __performance__
import py4godot.classes.m as __m__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.t as __t__
import py4godot.classes.r as __r__
import py4godot.classes.p as __p__
import py4godot.classes.g as __g__
import py4godot.classes.N as __n__
import py4godot.classes.a as __a__
import py4godot.classes.S as __s__
import py4godot.classes.y as __y__
import py4godot.classes.Object as __object__


class Monitor:
  TIME_FPS:int = 0
  TIME_PROCESS:int = 1
  TIME_PHYSICS_PROCESS:int = 2
  TIME_NAVIGATION_PROCESS:int = 3
  MEMORY_STATIC:int = 4
  MEMORY_STATIC_MAX:int = 5
  MEMORY_MESSAGE_BUFFER_MAX:int = 6
  OBJECT_COUNT:int = 7
  OBJECT_RESOURCE_COUNT:int = 8
  OBJECT_NODE_COUNT:int = 9
  OBJECT_ORPHAN_NODE_COUNT:int = 10
  RENDER_TOTAL_OBJECTS_IN_FRAME:int = 11
  RENDER_TOTAL_PRIMITIVES_IN_FRAME:int = 12
  RENDER_TOTAL_DRAW_CALLS_IN_FRAME:int = 13
  RENDER_VIDEO_MEM_USED:int = 14
  RENDER_TEXTURE_MEM_USED:int = 15
  RENDER_BUFFER_MEM_USED:int = 16
  PHYSICS_2D_ACTIVE_OBJECTS:int = 17
  PHYSICS_2D_COLLISION_PAIRS:int = 18
  PHYSICS_2D_ISLAND_COUNT:int = 19
  PHYSICS_3D_ACTIVE_OBJECTS:int = 20
  PHYSICS_3D_COLLISION_PAIRS:int = 21
  PHYSICS_3D_ISLAND_COUNT:int = 22
  AUDIO_OUTPUT_LATENCY:int = 23
  NAVIGATION_ACTIVE_MAPS:int = 24
  NAVIGATION_REGION_COUNT:int = 25
  NAVIGATION_AGENT_COUNT:int = 26
  NAVIGATION_LINK_COUNT:int = 27
  NAVIGATION_POLYGON_COUNT:int = 28
  NAVIGATION_EDGE_COUNT:int = 29
  NAVIGATION_EDGE_MERGE_COUNT:int = 30
  NAVIGATION_EDGE_CONNECTION_COUNT:int = 31
  NAVIGATION_EDGE_FREE_COUNT:int = 32
  NAVIGATION_OBSTACLE_COUNT:int = 33
  PIPELINE_COMPILATIONS_CANVAS:int = 34
  PIPELINE_COMPILATIONS_MESH:int = 35
  PIPELINE_COMPILATIONS_SURFACE:int = 36
  PIPELINE_COMPILATIONS_DRAW:int = 37
  PIPELINE_COMPILATIONS_SPECIALIZATION:int = 38
  MONITOR_MAX:int = 39


class Performance(__object__.Object):
  """
		This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the **Monitor** tab in the editor's **Debugger** panel. By using the `get_monitor` method of this class, you can access this data from your code.
		You can add custom monitors using the `add_custom_monitor` method. Custom monitors are available in **Monitor** tab in the editor's **Debugger** panel together with built-in monitors.
		**Note:** Some of the built-in monitors are only available in debug mode and will always return `0` when used in a project exported in release mode.
		**Note:** Some of the built-in monitors are not updated in real-time for performance reasons, so there may be a delay of up to 1 second between changes.
		**Note:** Custom monitors do not support negative values. Negative values are clamped to 0.
	"""



  @staticmethod
  def cast(other:__object__.Object)->Performance:pass

  @staticmethod
  def instance()->Performance:pass

  def get_monitor(self, monitor:int )->float:
    """
				Returns the value of one of the available built-in monitors. You should provide one of the `enum Monitor` constants as the argument, like this:
				
				```gdscript
				print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console.
				```
				
				
				See `get_custom_monitor` to query custom performance monitors' values.
			"""
    pass

  def add_custom_monitor(self, id:__core__.StringName|str, callable:__core__.Callable, arguments:__core__.Array= __core__.Array.new0())->None:
    """
				Adds a custom monitor with the name `id`. You can specify the category of the monitor using slash delimiters in `id` (for example: `"Game/NumberOfNPCs"`). If there is more than one slash delimiter, then the default category is used. The default category is `"Custom"`. Prints an error if given `id` is already present.
				
				```gdscript
				func _ready():
					var monitor_value = Callable(self, "get_monitor_value")

					# Adds monitor with name "MyName" to category "MyCategory".
					Performance.add_custom_monitor("MyCategory/MyMonitor", monitor_value)

					# Adds monitor with name "MyName" to category "Custom".
					# Note: "MyCategory/MyMonitor" and "MyMonitor" have same name but different IDs, so the code is valid.
					Performance.add_custom_monitor("MyMonitor", monitor_value)

					# Adds monitor with name "MyName" to category "Custom".
					# Note: "MyMonitor" and "Custom/MyMonitor" have same name and same category but different IDs, so the code is valid.
					Performance.add_custom_monitor("Custom/MyMonitor", monitor_value)

					# Adds monitor with name "MyCategoryOne/MyCategoryTwo/MyMonitor" to category "Custom".
					Performance.add_custom_monitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitor_value)

				func get_monitor_value():
					return randi() % 25
				```
				
				
				The debugger calls the callable to get the value of custom monitor. The callable must return a zero or positive integer or floating-point number.
				Callables are called with arguments supplied in argument array.
			"""
    pass

  def remove_custom_monitor(self, id:__core__.StringName|str)->None:
    """
				Removes the custom monitor with given `id`. Prints an error if the given `id` is already absent.
			"""
    pass

  def has_custom_monitor(self, id:__core__.StringName|str)->bool:
    """
				Returns `true` if custom monitor with the given `id` is present, `false` otherwise.
			"""
    pass

  def get_custom_monitor(self, id:__core__.StringName|str)->Any:
    """
				Returns the value of custom monitor with given `id`. The callable is called to get the value of custom monitor. See also `has_custom_monitor`. Prints an error if the given `id` is absent.
			"""
    pass

  def get_monitor_modification_time(self)->int:
    """
				Returns the last tick in which custom monitor was added/removed (in microseconds since the engine started). This is set to `Time.get_ticks_usec` when the monitor is updated.
			"""
    pass

  def get_custom_monitor_names(self)->typedarray::StringName:
    """
				Returns the names of active custom monitors in an `Array`.
			"""
    pass


