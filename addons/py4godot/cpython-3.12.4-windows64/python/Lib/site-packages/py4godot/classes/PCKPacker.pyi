from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__



class PCKPacker(__refcounted__.RefCounted):
  """
		The `PCKPacker` is used to create packages that can be loaded into a running project using `ProjectSettings.load_resource_pack`.
		
		```gdscript
		var packer = PCKPacker.new()
		packer.pck_start("test.pck")
		packer.add_file("res://text.txt", "text.txt")
		packer.flush()
		```
		
		
		The above `PCKPacker` creates package `test.pck`, then adds a file named `text.txt` at the root of the package.
		**Note:** PCK is Godot's own pack file format. To create ZIP archives that can be read by any program, use `ZIPPacker` instead.
	"""

  @staticmethod
  def constructor()->PCKPacker:pass



  @staticmethod
  def cast(other:__object__.Object)->PCKPacker:pass


  def pck_start(self, pck_path:str, alignment:int=32, key:str= __core__.String.new0(), encrypt_directory:bool=False)->int:
    """
				Creates a new PCK file at the file path `pck_path`. The `.pck` file extension isn't added automatically, so it should be part of `pck_path` (even though it's not required).
			"""
    pass

  def add_file(self, target_path:str, source_path:str, encrypt:bool=False)->int:
    """
				Adds the `source_path` file to the current PCK package at the `target_path` internal path. The `res://` prefix for `target_path` is optional and stripped internally. File content is immediately written to the PCK.
			"""
    pass

  def add_file_removal(self, target_path:str)->int:
    """
				Registers a file removal of the `target_path` internal path to the PCK. This is mainly used for patches. If the file at this path has been loaded from a previous PCK, it will be removed. The `res://` prefix for `target_path` is optional and stripped internally.
			"""
    pass

  def flush(self, verbose:bool=False)->int:
    """
				Writes the file directory and closes the PCK. If `verbose` is `true`, a list of files added will be printed to the console for easier debugging.
				**Note:** `PCKPacker` will automatically flush when it's freed, which happens when it goes out of scope or when it gets assigned with `null`. In C# the reference must be disposed after use, either with the `using` statement or by calling the `Dispose` method directly.
			"""
    pass


