from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StyleBox as __stylebox__



class StyleBoxFlat(__stylebox__.StyleBox):
  """
		By configuring various properties of this style box, you can achieve many common looks without the need of a texture. This includes optionally rounded borders, antialiasing, shadows, and skew.
		Setting corner radius to high values is allowed. As soon as corners overlap, the stylebox will switch to a relative system:
		`codeblock lang=text`
		height = 30
		corner_radius_top_left = 50
		corner_radius_bottom_left = 100
		```
		The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will **never** be more than the height. Result:
		`codeblock lang=text`
		corner_radius_top_left: 10
		corner_radius_bottom_left: 20
		```
	"""

  @staticmethod
  def constructor()->StyleBoxFlat:pass



  @staticmethod
  def cast(other:__object__.Object)->StyleBoxFlat:pass


  @property
  def bg_color(self)->__core__.Color:
    """"""
    pass
  @bg_color.setter
  def bg_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def draw_center(self)->bool:
    """"""
    pass
  @draw_center.setter
  def draw_center(self,  value:bool)->None:
    """"""
    pass
  @property
  def skew(self)->__core__.Vector2:
    """"""
    pass
  @skew.setter
  def skew(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def border_width_left(self)->int:
    """"""
    pass
  @border_width_left.setter
  def border_width_left(self,  value:int)->None:
    """"""
    pass
  @property
  def border_width_top(self)->int:
    """"""
    pass
  @border_width_top.setter
  def border_width_top(self,  value:int)->None:
    """"""
    pass
  @property
  def border_width_right(self)->int:
    """"""
    pass
  @border_width_right.setter
  def border_width_right(self,  value:int)->None:
    """"""
    pass
  @property
  def border_width_bottom(self)->int:
    """"""
    pass
  @border_width_bottom.setter
  def border_width_bottom(self,  value:int)->None:
    """"""
    pass
  @property
  def border_color(self)->__core__.Color:
    """"""
    pass
  @border_color.setter
  def border_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def border_blend(self)->bool:
    """"""
    pass
  @border_blend.setter
  def border_blend(self,  value:bool)->None:
    """"""
    pass
  @property
  def corner_radius_top_left(self)->int:
    """"""
    pass
  @corner_radius_top_left.setter
  def corner_radius_top_left(self,  value:int)->None:
    """"""
    pass
  @property
  def corner_radius_top_right(self)->int:
    """"""
    pass
  @corner_radius_top_right.setter
  def corner_radius_top_right(self,  value:int)->None:
    """"""
    pass
  @property
  def corner_radius_bottom_right(self)->int:
    """"""
    pass
  @corner_radius_bottom_right.setter
  def corner_radius_bottom_right(self,  value:int)->None:
    """"""
    pass
  @property
  def corner_radius_bottom_left(self)->int:
    """"""
    pass
  @corner_radius_bottom_left.setter
  def corner_radius_bottom_left(self,  value:int)->None:
    """"""
    pass
  @property
  def corner_detail(self)->int:
    """"""
    pass
  @corner_detail.setter
  def corner_detail(self,  value:int)->None:
    """"""
    pass
  @property
  def expand_margin_left(self)->float:
    """"""
    pass
  @expand_margin_left.setter
  def expand_margin_left(self,  value:float)->None:
    """"""
    pass
  @property
  def expand_margin_top(self)->float:
    """"""
    pass
  @expand_margin_top.setter
  def expand_margin_top(self,  value:float)->None:
    """"""
    pass
  @property
  def expand_margin_right(self)->float:
    """"""
    pass
  @expand_margin_right.setter
  def expand_margin_right(self,  value:float)->None:
    """"""
    pass
  @property
  def expand_margin_bottom(self)->float:
    """"""
    pass
  @expand_margin_bottom.setter
  def expand_margin_bottom(self,  value:float)->None:
    """"""
    pass
  @property
  def shadow_color(self)->__core__.Color:
    """"""
    pass
  @shadow_color.setter
  def shadow_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def shadow_size(self)->int:
    """"""
    pass
  @shadow_size.setter
  def shadow_size(self,  value:int)->None:
    """"""
    pass
  @property
  def shadow_offset(self)->__core__.Vector2:
    """"""
    pass
  @shadow_offset.setter
  def shadow_offset(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def anti_aliasing(self)->bool:
    """"""
    pass
  @anti_aliasing.setter
  def anti_aliasing(self,  value:bool)->None:
    """"""
    pass
  @property
  def anti_aliasing_size(self)->float:
    """"""
    pass
  @anti_aliasing_size.setter
  def anti_aliasing_size(self,  value:float)->None:
    """"""
    pass
  def set_bg_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_bg_color(self)->__core__.Color:
    """"""
    pass

  def set_border_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_border_color(self)->__core__.Color:
    """"""
    pass

  def set_border_width_all(self, width:int)->None:
    """
				Sets the border width to `width` pixels for all sides.
			"""
    pass

  def get_border_width_min(self)->int:
    """
				Returns the smallest border width out of all four borders.
			"""
    pass

  def set_border_width(self, margin:int , width:int)->None:
    """
				Sets the specified `enum Side`'s border width to `width` pixels.
			"""
    pass

  def get_border_width(self, margin:int )->int:
    """
				Returns the specified `enum Side`'s border width.
			"""
    pass

  def set_border_blend(self, blend:bool)->None:
    """"""
    pass

  def get_border_blend(self)->bool:
    """"""
    pass

  def set_corner_radius_all(self, radius:int)->None:
    """
				Sets the corner radius to `radius` pixels for all corners.
			"""
    pass

  def set_corner_radius(self, corner:int , radius:int)->None:
    """
				Sets the corner radius to `radius` pixels for the given `corner`.
			"""
    pass

  def get_corner_radius(self, corner:int )->int:
    """
				Returns the given `corner`'s radius.
			"""
    pass

  def set_expand_margin(self, margin:int , size:float)->None:
    """
				Sets the expand margin to `size` pixels for the specified `enum Side`.
			"""
    pass

  def set_expand_margin_all(self, size:float)->None:
    """
				Sets the expand margin to `size` pixels for all sides.
			"""
    pass

  def get_expand_margin(self, margin:int )->float:
    """
				Returns the size of the specified `enum Side`'s expand margin.
			"""
    pass

  def set_draw_center(self, draw_center:bool)->None:
    """"""
    pass

  def is_draw_center_enabled(self)->bool:
    """"""
    pass

  def set_skew(self, skew:__core__.Vector2)->None:
    """"""
    pass

  def get_skew(self)->__core__.Vector2:
    """"""
    pass

  def set_shadow_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_shadow_color(self)->__core__.Color:
    """"""
    pass

  def set_shadow_size(self, size:int)->None:
    """"""
    pass

  def get_shadow_size(self)->int:
    """"""
    pass

  def set_shadow_offset(self, offset:__core__.Vector2)->None:
    """"""
    pass

  def get_shadow_offset(self)->__core__.Vector2:
    """"""
    pass

  def set_anti_aliased(self, anti_aliased:bool)->None:
    """"""
    pass

  def is_anti_aliased(self)->bool:
    """"""
    pass

  def set_aa_size(self, size:float)->None:
    """"""
    pass

  def get_aa_size(self)->float:
    """"""
    pass

  def set_corner_detail(self, detail:int)->None:
    """"""
    pass

  def get_corner_detail(self)->int:
    """"""
    pass


