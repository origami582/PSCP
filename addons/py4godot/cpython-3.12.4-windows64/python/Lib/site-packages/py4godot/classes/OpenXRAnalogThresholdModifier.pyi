from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRHapticBase as __openxrhapticbase__
import py4godot.classes.OpenXRHapticVibration as __openxrhapticvibration__
import py4godot.classes.OpenXRActionBindingModifier as __openxractionbindingmodifier__



class OpenXRAnalogThresholdModifier(__openxractionbindingmodifier__.OpenXRActionBindingModifier):
  """"""

  @staticmethod
  def constructor()->OpenXRAnalogThresholdModifier:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRAnalogThresholdModifier:pass


  @property
  def on_threshold(self)->float:
    """"""
    pass
  @on_threshold.setter
  def on_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def off_threshold(self)->float:
    """"""
    pass
  @off_threshold.setter
  def off_threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def on_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass
  @on_haptic.setter
  def on_haptic(self,  value:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass
  @property
  def off_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass
  @off_haptic.setter
  def off_haptic(self,  value:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass
  def set_on_threshold(self, on_threshold:float)->None:
    """"""
    pass

  def get_on_threshold(self)->float:
    """"""
    pass

  def set_off_threshold(self, off_threshold:float)->None:
    """"""
    pass

  def get_off_threshold(self)->float:
    """"""
    pass

  def set_on_haptic(self, haptic:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass

  def get_on_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass

  def set_off_haptic(self, haptic:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass

  def get_off_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass


