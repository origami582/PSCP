from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventMouseMotion as __inputeventmousemotion__
import py4godot.classes.InputEventPanGesture as __inputeventpangesture__
import py4godot.classes.Resource as __resource__
import py4godot.classes.InputEventWithModifiers as __inputeventwithmodifiers__
import py4godot.classes.InputEventFromWindow as __inputeventfromwindow__
import py4godot.classes.InputEventMagnifyGesture as __inputeventmagnifygesture__
import py4godot.classes.InputEventMouseButton as __inputeventmousebutton__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.InputEventMouse as __inputeventmouse__
import py4godot.classes.InputEventScreenTouch as __inputeventscreentouch__
import py4godot.classes.InputEventGesture as __inputeventgesture__
import py4godot.classes.InputEventKey as __inputeventkey__
import py4godot.classes.InputEventAction as __inputeventaction__
import py4godot.classes.InputEventScreenDrag as __inputeventscreendrag__
import py4godot.classes.InputEventJoypadMotion as __inputeventjoypadmotion__
import py4godot.classes.InputEventShortcut as __inputeventshortcut__
import py4godot.classes.InputEventMIDI as __inputeventmidi__
import py4godot.classes.InputEventJoypadButton as __inputeventjoypadbutton__



class InputEvent(__resource__.Resource):
  """
		Abstract base class of all types of input events. See `Node._input`.
	"""

  @staticmethod
  def constructor()->InputEvent:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEvent:pass


  @property
  def device(self)->int:
    """"""
    pass
  @device.setter
  def device(self,  value:int)->None:
    """"""
    pass
  def set_device(self, device:int)->None:
    """"""
    pass

  def get_device(self)->int:
    """"""
    pass

  def is_action(self, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` if this input event matches a pre-defined action of any type.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def is_action_pressed(self, action:__core__.StringName|str, allow_echo:bool=False, exact_match:bool=False)->bool:
    """
				Returns `true` if the given action matches this event and is being pressed (and is not an echo event for `InputEventKey` events, unless `allow_echo` is `true`). Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
				**Note:** Due to keyboard ghosting, `is_action_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
			"""
    pass

  def is_action_released(self, action:__core__.StringName|str, exact_match:bool=False)->bool:
    """
				Returns `true` if the given action matches this event and is released (i.e. not pressed). Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def get_action_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float:
    """
				Returns a value between 0.0 and 1.0 depending on the given actions' state. Useful for getting the value of events of type `InputEventJoypadMotion`.
				If `exact_match` is `false`, it ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
			"""
    pass

  def is_canceled(self)->bool:
    """
				Returns `true` if this input event has been canceled.
			"""
    pass

  def is_pressed(self)->bool:
    """
				Returns `true` if this input event is pressed. Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`.
				**Note:** Due to keyboard ghosting, `is_pressed` may return `false` even if one of the action's keys is pressed. See `url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events`Input examples`/url` in the documentation for more information.
			"""
    pass

  def is_released(self)->bool:
    """
				Returns `true` if this input event is released. Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`.
			"""
    pass

  def is_echo(self)->bool:
    """
				Returns `true` if this input event is an echo event (only for events of type `InputEventKey`). An echo event is a repeated key event sent when the user is holding down the key. Any other event type returns `false`.
				**Note:** The rate at which echo events are sent is typically around 20 events per second (after holding down the key for roughly half a second). However, the key repeat delay/speed can be changed by the user or disabled entirely in the operating system settings. To ensure your project works correctly on all configurations, do not assume the user has a specific key repeat configuration in your project's behavior.
			"""
    pass

  def as_text(self)->str:
    """
				Returns a `String` representation of the event.
			"""
    pass

  def is_match(self, event:__inputevent__.InputEvent, exact_match:bool=True)->bool:
    """
				Returns `true` if the specified `event` matches this event. Only valid for action events, which include key (`InputEventKey`), button (`InputEventMouseButton` or `InputEventJoypadButton`), axis `InputEventJoypadMotion`, and action (`InputEventAction`) events.
				If `exact_match` is `false`, the check ignores additional input modifiers for `InputEventKey` and `InputEventMouseButton` events, and the direction for `InputEventJoypadMotion` events.
				**Note:** This method only considers the event configuration (such as the keyboard key or the joypad axis), not state information like `is_pressed`, `is_released`, `is_echo`, or `is_canceled`.
			"""
    pass

  def is_action_type(self)->bool:
    """
				Returns `true` if this input event's type is one that can be assigned to an input action.
			"""
    pass

  def accumulate(self, with_event:__inputevent__.InputEvent)->bool:
    """
				Returns `true` if the given input event and this input event can be added together (only for events of type `InputEventMouseMotion`).
				The given input event's position, global position and speed will be copied. The resulting `relative` is a sum of both events. Both events' modifiers have to be identical.
			"""
    pass

  def xformed_by(self, xform:__core__.Transform2D, local_ofs:__core__.Vector2= __core__.Vector2.new0())->__inputeventmousemotion__.InputEventMouseMotion|__inputeventpangesture__.InputEventPanGesture|__inputeventwithmodifiers__.InputEventWithModifiers|__inputeventfromwindow__.InputEventFromWindow|__inputeventmagnifygesture__.InputEventMagnifyGesture|__inputeventmousebutton__.InputEventMouseButton|__inputevent__.InputEvent|__inputeventmouse__.InputEventMouse|__inputeventscreentouch__.InputEventScreenTouch|__inputeventgesture__.InputEventGesture|__inputeventkey__.InputEventKey|__inputeventaction__.InputEventAction|__inputeventscreendrag__.InputEventScreenDrag|__inputeventjoypadmotion__.InputEventJoypadMotion|__inputeventshortcut__.InputEventShortcut|__inputeventmidi__.InputEventMIDI|__inputeventjoypadbutton__.InputEventJoypadButton:
    """
				Returns a copy of the given input event which has been offset by `local_ofs` and transformed by `xform`. Relevant for events of type `InputEventMouseButton`, `InputEventMouseMotion`, `InputEventScreenTouch`, `InputEventScreenDrag`, `InputEventMagnifyGesture` and `InputEventPanGesture`.
			"""
    pass


