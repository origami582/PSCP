from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.Node as __node__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.P as __p__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.h as __h__
import py4godot.classes.y as __y__
import py4godot.classes.s as __s__
import py4godot.classes.PhysicsServer3D as __physicsserver3d__
import py4godot.classes.KinematicCollision3D as __kinematiccollision3d__
import py4godot.classes.B as __b__
import py4godot.classes.3 as __3__



class PhysicsBody3D(__collisionobject3d__.CollisionObject3D):
  """
		`PhysicsBody3D` is an abstract base class for 3D game objects affected by physics. All 3D physics bodies inherit from it.
		**Warning:** With a non-uniform scale, this node will likely not behave as expected. It is advised to keep its scale the same on all axes and adjust its collision shape(s) instead.
	"""

  @staticmethod
  def constructor()->PhysicsBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsBody3D:pass


  @property
  def axis_lock_linear_x(self)->bool:
    """"""
    pass
  @axis_lock_linear_x.setter
  def axis_lock_linear_x(self,  value:bool)->None:
    """"""
    pass
  @property
  def axis_lock_linear_y(self)->bool:
    """"""
    pass
  @axis_lock_linear_y.setter
  def axis_lock_linear_y(self,  value:bool)->None:
    """"""
    pass
  @property
  def axis_lock_linear_z(self)->bool:
    """"""
    pass
  @axis_lock_linear_z.setter
  def axis_lock_linear_z(self,  value:bool)->None:
    """"""
    pass
  @property
  def axis_lock_angular_x(self)->bool:
    """"""
    pass
  @axis_lock_angular_x.setter
  def axis_lock_angular_x(self,  value:bool)->None:
    """"""
    pass
  @property
  def axis_lock_angular_y(self)->bool:
    """"""
    pass
  @axis_lock_angular_y.setter
  def axis_lock_angular_y(self,  value:bool)->None:
    """"""
    pass
  @property
  def axis_lock_angular_z(self)->bool:
    """"""
    pass
  @axis_lock_angular_z.setter
  def axis_lock_angular_z(self,  value:bool)->None:
    """"""
    pass
  def move_and_collide(self, motion:__core__.Vector3, test_only:bool=False, safe_margin:float=0.001, recovery_as_collision:bool=False, max_collisions:int=1)->__kinematiccollision3d__.KinematicCollision3D:
    """
				Moves the body along the vector `motion`. In order to be frame rate independent in `Node._physics_process` or `Node._process`, `motion` should be computed using `delta`.
				The body will stop if it collides. Returns a `KinematicCollision3D`, which contains information about the collision when stopped, or when touching another body along the motion.
				If `test_only` is `true`, the body does not move but the would-be collision information is given.
				`safe_margin` is the extra margin used for collision recovery (see `CharacterBody3D.safe_margin` for more details).
				If `recovery_as_collision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by `CharacterBody3D` for improving floor detection during floor snapping.
				`max_collisions` allows to retrieve more than one collision result.
			"""
    pass

  def test_move(self, from_:__core__.Transform3D, motion:__core__.Vector3, collision:__kinematiccollision3d__.KinematicCollision3D= __kinematiccollision3d__.KinematicCollision3D.constructor(), safe_margin:float=0.001, recovery_as_collision:bool=False, max_collisions:int=1)->bool:
    """
				Checks for collisions without moving the body. In order to be frame rate independent in `Node._physics_process` or `Node._process`, `motion` should be computed using `delta`.
				Virtually sets the node's position, scale and rotation to that of the given `Transform3D`, then tries to move the body along the vector `motion`. Returns `true` if a collision would stop the body from moving along the whole path.
				`collision` is an optional object of type `KinematicCollision3D`, which contains additional information about the collision when stopped, or when touching another body along the motion.
				`safe_margin` is the extra margin used for collision recovery (see `CharacterBody3D.safe_margin` for more details).
				If `recovery_as_collision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would _touch_ any other bodies.
				`max_collisions` allows to retrieve more than one collision result.
			"""
    pass

  def get_gravity(self)->__core__.Vector3:
    """
				Returns the gravity vector computed from all sources that can affect the body, including all gravity overrides from `Area3D` nodes and the global world gravity.
			"""
    pass

  def set_axis_lock(self, axis:int , lock:bool)->None:
    """
				Locks or unlocks the specified linear or rotational `axis` depending on the value of `lock`.
			"""
    pass

  def get_axis_lock(self, axis:int )->bool:
    """
				Returns `true` if the specified linear or rotational `axis` is locked.
			"""
    pass

  def get_collision_exceptions(self)->typedarray::PhysicsBody3D:
    """
				Returns an array of nodes that were added as collision exceptions for this body.
			"""
    pass

  def add_collision_exception_with(self, body:__node__.Node)->None:
    """
				Adds a body to the list of bodies that this body can't collide with.
			"""
    pass

  def remove_collision_exception_with(self, body:__node__.Node)->None:
    """
				Removes a body from the list of bodies that this body can't collide with.
			"""
    pass


