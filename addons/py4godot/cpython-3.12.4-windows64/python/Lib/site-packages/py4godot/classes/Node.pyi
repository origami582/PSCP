from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.MultiplayerSynchronizer as __multiplayersynchronizer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.ResourcePreloader as __resourcepreloader__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.Control as __control__
import py4godot.classes.r as __r__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.Slider as __slider__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.ParallaxBackground as __parallaxbackground__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.SceneTree as __scenetree__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.AnimationMixer as __animationmixer__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.n as __n__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.p as __p__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.EditorResourcePreview as __editorresourcepreview__
import py4godot.classes.Button as __button__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.Panel as __panel__
import py4godot.classes.i as __i__
import py4godot.classes.o as __o__
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.EditorPlugin as __editorplugin__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.d as __d__
import py4godot.classes.AnimationPlayer as __animationplayer__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.Label as __label__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.CanvasLayer as __canvaslayer__
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.Node as __node__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.GridMapEditorPlugin as __gridmapeditorplugin__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.MultiplayerAPIExtension as __multiplayerapiextension__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.m as __m__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.Window as __window__
import py4godot.classes.Decal as __decal__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.A as __a__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.NavigationAgent2D as __navigationagent2d__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.AnimationTree as __animationtree__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.N as __n__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.Tree as __tree__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.InstancePlaceholder as __instanceplaceholder__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.MissingNode as __missingnode__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.t as __t__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.NavigationAgent3D as __navigationagent3d__
import py4godot.classes.T as __t__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.SubViewport as __subviewport__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Range as __range__
import py4godot.classes.AudioStreamPlayer as __audiostreamplayer__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.e as __e__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Popup as __popup__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.Container as __container__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.y as __y__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.StatusIndicator as __statusindicator__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.S as __s__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.a as __a__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Object as __object__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.Tween as __tween__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.SceneMultiplayer as __scenemultiplayer__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HTTPRequest as __httprequest__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.g as __g__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.WorldEnvironment as __worldenvironment__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.EditorFileSystem as __editorfilesystem__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.Timer as __timer__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.MultiplayerSpawner as __multiplayerspawner__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.ShaderGlobalsOverride as __shaderglobalsoverride__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.OptionButton as __optionbutton__


class ProcessMode:
  PROCESS_MODE_INHERIT:int = 0
  PROCESS_MODE_PAUSABLE:int = 1
  PROCESS_MODE_WHEN_PAUSED:int = 2
  PROCESS_MODE_ALWAYS:int = 3
  PROCESS_MODE_DISABLED:int = 4
class ProcessThreadGroup:
  PROCESS_THREAD_GROUP_INHERIT:int = 0
  PROCESS_THREAD_GROUP_MAIN_THREAD:int = 1
  PROCESS_THREAD_GROUP_SUB_THREAD:int = 2
class ProcessThreadMessages:
  FLAG_PROCESS_THREAD_MESSAGES:int = 1
  FLAG_PROCESS_THREAD_MESSAGES_PHYSICS:int = 2
  FLAG_PROCESS_THREAD_MESSAGES_ALL:int = 3
class PhysicsInterpolationMode:
  PHYSICS_INTERPOLATION_MODE_INHERIT:int = 0
  PHYSICS_INTERPOLATION_MODE_ON:int = 1
  PHYSICS_INTERPOLATION_MODE_OFF:int = 2
class DuplicateFlags:
  DUPLICATE_SIGNALS:int = 1
  DUPLICATE_GROUPS:int = 2
  DUPLICATE_SCRIPTS:int = 4
  DUPLICATE_USE_INSTANTIATION:int = 8
class InternalMode:
  INTERNAL_MODE_DISABLED:int = 0
  INTERNAL_MODE_FRONT:int = 1
  INTERNAL_MODE_BACK:int = 2
class AutoTranslateMode:
  AUTO_TRANSLATE_MODE_INHERIT:int = 0
  AUTO_TRANSLATE_MODE_ALWAYS:int = 1
  AUTO_TRANSLATE_MODE_DISABLED:int = 2


class Node(__object__.Object):
  """
		Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.
		A tree of nodes is called a _scene_. Scenes can be saved to the disk and then instantiated into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.
		**Scene tree:** The `SceneTree` contains the active tree of nodes. When a node is added to the scene tree, it receives the `constant NOTIFICATION_ENTER_TREE` notification and its `_enter_tree` callback is triggered. Child nodes are always added _after_ their parent node, i.e. the `_enter_tree` callback of a parent node will be triggered before its child's.
		Once all nodes have been added in the scene tree, they receive the `constant NOTIFICATION_READY` notification and their respective `_ready` callbacks are triggered. For groups of nodes, the `_ready` callback is called in reverse order, starting with the children and moving up to the parent nodes.
		This means that when adding a node to the scene tree, the following order will be used for the callbacks: `_enter_tree` of the parent, `_enter_tree` of the children, `_ready` of the children and finally `_ready` of the parent (recursively for the entire scene tree).
		**Processing:** Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback `_process`, toggled with `set_process`) happens as fast as possible and is dependent on the frame rate, so the processing time _delta_ (in seconds) is passed as an argument. Physics processing (callback `_physics_process`, toggled with `set_physics_process`) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.
		Nodes can also process input events. When present, the `_input` function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the `_unhandled_input` function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI `Control` nodes), ensuring that the node only receives the events that were meant for it.
		To keep track of the scene hierarchy (especially when instantiating scenes into other scenes), an "owner" can be set for the node with the `owner` property. This keeps track of who instantiated what. This is mostly useful when writing editors and tools, though.
		Finally, when a node is freed with `Object.free` or `queue_free`, it will also free all its children.
		**Groups:** Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See `add_to_group`, `is_in_group` and `remove_from_group`. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on `SceneTree`.
		**Networking with nodes:** After connecting to a server (or making one, see `ENetMultiplayerPeer`), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling `rpc` with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its `NodePath` (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos.
		**Note:** The `script` property is part of the `Object` class, not `Node`. It isn't exposed like most properties but does have a setter and getter (see `Object.set_script` and `Object.get_script`).
	"""
  ready: BuiltinSignal
  renamed: BuiltinSignal
  tree_entered: BuiltinSignal
  tree_exiting: BuiltinSignal
  tree_exited: BuiltinSignal
  child_entered_tree: BuiltinSignal
  child_exiting_tree: BuiltinSignal
  child_order_changed: BuiltinSignal
  replacing_by: BuiltinSignal
  editor_description_changed: BuiltinSignal
  editor_state_changed: BuiltinSignal

  @staticmethod
  def constructor()->Node:pass



  @staticmethod
  def cast(other:__object__.Object)->Node:pass


  @property
  def name(self)->__core__.StringName:
    """"""
    pass
  @name.setter
  def name(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def unique_name_in_owner(self)->bool:
    """"""
    pass
  @unique_name_in_owner.setter
  def unique_name_in_owner(self,  value:bool)->None:
    """"""
    pass
  @property
  def scene_file_path(self)->str:
    """"""
    pass
  @scene_file_path.setter
  def scene_file_path(self,  value:str)->None:
    """"""
    pass
  @property
  def owner(self)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """"""
    pass
  @owner.setter
  def owner(self,  value:__node__.Node)->None:
    """"""
    pass
  @property
  def multiplayer(self)->__multiplayerapi__.MultiplayerAPI|__multiplayerapiextension__.MultiplayerAPIExtension|__scenemultiplayer__.SceneMultiplayer:
    """"""
    pass
  @property
  def process_mode(self)->int:
    """"""
    pass
  @process_mode.setter
  def process_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def process_priority(self)->int:
    """"""
    pass
  @process_priority.setter
  def process_priority(self,  value:int)->None:
    """"""
    pass
  @property
  def process_physics_priority(self)->int:
    """"""
    pass
  @process_physics_priority.setter
  def process_physics_priority(self,  value:int)->None:
    """"""
    pass
  @property
  def process_thread_group(self)->int:
    """"""
    pass
  @process_thread_group.setter
  def process_thread_group(self,  value:int)->None:
    """"""
    pass
  @property
  def process_thread_group_order(self)->int:
    """"""
    pass
  @process_thread_group_order.setter
  def process_thread_group_order(self,  value:int)->None:
    """"""
    pass
  @property
  def process_thread_messages(self)->int:
    """"""
    pass
  @process_thread_messages.setter
  def process_thread_messages(self,  value:int)->None:
    """"""
    pass
  @property
  def physics_interpolation_mode(self)->int:
    """"""
    pass
  @physics_interpolation_mode.setter
  def physics_interpolation_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def auto_translate_mode(self)->int:
    """"""
    pass
  @auto_translate_mode.setter
  def auto_translate_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def editor_description(self)->str:
    """"""
    pass
  @editor_description.setter
  def editor_description(self,  value:str)->None:
    """"""
    pass
  def _process(self, delta:float)->None:
    """
				Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the `delta` time since the previous frame is not constant. `delta` is in seconds.
				It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process`.
				Processing happens in order of `process_priority`, lower priority values are called first. Nodes with the same priority are processed in tree order, or top to bottom as seen in the editor (also known as pre-order traversal).
				Corresponds to the `constant NOTIFICATION_PROCESS` notification in `Object._notification`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
				**Note:** `delta` will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			"""
    pass

  def _physics_process(self, delta:float)->None:
    """
				Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the `delta` parameter will _generally_ be constant (see exceptions below). `delta` is in seconds.
				It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_physics_process`.
				Processing happens in order of `process_physics_priority`, lower priority values are called first. Nodes with the same priority are processed in tree order, or top to bottom as seen in the editor (also known as pre-order traversal).
				Corresponds to the `constant NOTIFICATION_PHYSICS_PROCESS` notification in `Object._notification`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
				**Note:** `delta` will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			"""
    pass

  def _enter_tree(self)->None:
    """
				Called when the node enters the `SceneTree` (e.g. upon instantiating, scene changing, or after calling `add_child` in a script). If the node has children, its `_enter_tree` callback will be called first, and then that of the children.
				Corresponds to the `constant NOTIFICATION_ENTER_TREE` notification in `Object._notification`.
			"""
    pass

  def _exit_tree(self)->None:
    """
				Called when the node is about to leave the `SceneTree` (e.g. upon freeing, scene changing, or after calling `remove_child` in a script). If the node has children, its `_exit_tree` callback will be called last, after all its children have left the tree.
				Corresponds to the `constant NOTIFICATION_EXIT_TREE` notification in `Object._notification` and signal `signal tree_exiting`. To get notified when the node has already left the active tree, connect to the `signal tree_exited`.
			"""
    pass

  def _ready(self)->None:
    """
				Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their `_ready` callbacks get triggered first, and the parent node will receive the ready notification afterwards.
				Corresponds to the `constant NOTIFICATION_READY` notification in `Object._notification`. See also the `@onready` annotation for variables.
				Usually used for initialization. For even earlier initialization, `Object._init` may be used. See also `_enter_tree`.
				**Note:** This method may be called only once for each node. After removing a node from the scene tree and adding it again, `_ready` will **not** be called a second time. This can be bypassed by requesting another call with `request_ready`, which may be called anywhere before adding the node again.
			"""
    pass

  def _get_configuration_warnings(self)->__core__.PackedStringArray:
    """
				The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a `tool` script.
				Returning an empty array produces no warnings.
				Call `update_configuration_warnings` when the warnings need to be updated for this node.
				```gdscript
				@export var energy = 0:
					set(value):
						energy = value
						update_configuration_warnings()

				func _get_configuration_warnings():
					if energy < 0:
						return `"Energy must be 0 or greater."`
					else:
						return ``
				```
			"""
    pass

  def _input(self, event:__inputevent__.InputEvent)->None:
    """
				Called when there is an input event. The input event propagates up through the node tree until a node consumes it.
				It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				For gameplay input, `_unhandled_input` and `_unhandled_key_input` are usually a better fit as they allow the GUI to intercept the events first.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			"""
    pass

  def _shortcut_input(self, event:__inputevent__.InputEvent)->None:
    """
				Called when an `InputEventKey`, `InputEventShortcut`, or `InputEventJoypadButton` hasn't been consumed by `_input` or any GUI `Control` item. It is called before `_unhandled_key_input` and `_unhandled_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_shortcut_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				This method can be used to handle shortcuts. For generic GUI events, use `_input` instead. Gameplay events should usually be handled with either `_unhandled_input` or `_unhandled_key_input`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).
			"""
    pass

  def _unhandled_input(self, event:__inputevent__.InputEvent)->None:
    """
				Called when an `InputEvent` hasn't been consumed by `_input` or any GUI `Control` item. It is called after `_shortcut_input` and after `_unhandled_key_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				For gameplay input, this method is usually a better fit than `_input`, as GUI events need a higher priority. For keyboard shortcuts, consider using `_shortcut_input` instead, as it is called before this method. Finally, to handle keyboard events, consider using `_unhandled_key_input` for performance reasons.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			"""
    pass

  def _unhandled_key_input(self, event:__inputevent__.InputEvent)->None:
    """
				Called when an `InputEventKey` hasn't been consumed by `_input` or any GUI `Control` item. It is called after `_shortcut_input` but before `_unhandled_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_key_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				This method can be used to handle Unicode character input with `kbd`Alt`/kbd`, `kbd`Alt + Ctrl`/kbd`, and `kbd`Alt + Shift`/kbd` modifiers, after shortcuts were handled.
				For gameplay input, this and `_unhandled_input` are usually a better fit than `_input`, as GUI events should be handled first. This method also performs better than `_unhandled_input`, since unrelated events such as `InputEventMouseMotion` are automatically filtered. For shortcuts, consider using `_shortcut_input` instead.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			"""
    pass

  @staticmethod
  def print_orphan_nodes()->None:
    """
				Prints all orphan nodes (nodes outside the `SceneTree`). Useful for debugging.
				**Note:** This method only works in debug builds. Does nothing in a project exported in release mode.
			"""
    pass

  def add_sibling(self, sibling:__node__.Node, force_readable_name:bool=False)->None:
    """
				Adds a `sibling` node to this node's parent, and moves the added sibling right below this node.
				If `force_readable_name` is `true`, improves the readability of the added `sibling`. If not named, the `sibling` is renamed to its type, and if it shares `name` with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to `false`, which assigns a dummy name featuring `@` in both situations.
				Use `add_child` instead of this method if you don't need the child node to be added below a specific node in the list of children.
				**Note:** If this node is internal, the added sibling will be internal too (see `add_child`'s `internal` parameter).
			"""
    pass

  def set_name(self, name:str)->None:
    """"""
    pass

  def get_name(self)->__core__.StringName:
    """"""
    pass

  def add_child(self, node:__node__.Node, force_readable_name:bool=False, internal:int =0)->None:
    """
				Adds a child `node`. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.
				If `force_readable_name` is `true`, improves the readability of the added `node`. If not named, the `node` is renamed to its type, and if it shares `name` with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to `false`, which assigns a dummy name featuring `@` in both situations.
				If `internal` is different than `constant INTERNAL_MODE_DISABLED`, the child will be added as internal node. These nodes are ignored by methods like `get_children`, unless their parameter `include_internal` is `true`. It also prevents these nodes being duplicated with their parent. The intended usage is to hide the internal nodes from the user, so the user won't accidentally delete or modify them. Used by some GUI nodes, e.g. `ColorPicker`.
				**Note:** If `node` already has a parent, this method will fail. Use `remove_child` first to remove `node` from its current parent. For example:
				
				```gdscript
				var child_node = get_child(0)
				if child_node.get_parent():
					child_node.get_parent().remove_child(child_node)
				add_child(child_node)
				```
				
				
				If you need the child node to be added below a specific node in the list of children, use `add_sibling` instead of this method.
				**Note:** If you want a child to be persisted to a `PackedScene`, you must set `owner` in addition to calling `add_child`. This is typically relevant for `url=$DOCS_URL/tutorials/plugins/running_code_in_the_editor.html`tool scripts`/url` and `url=$DOCS_URL/tutorials/plugins/editor/index.html`editor plugins`/url`. If `add_child` is called without setting `owner`, the newly added `Node` will not be visible in the scene tree, though it will be visible in the 2D/3D view.
			"""
    pass

  def remove_child(self, node:__node__.Node)->None:
    """
				Removes a child `node`. The `node`, along with its children, are **not** deleted. To delete a node, see `queue_free`.
				**Note:** When this node is inside the tree, this method sets the `owner` of the removed `node` (or its descendants) to `null`, if their `owner` is no longer an ancestor (see `is_ancestor_of`).
			"""
    pass

  def reparent(self, new_parent:__node__.Node, keep_global_transform:bool=True)->None:
    """
				Changes the parent of this `Node` to the `new_parent`. The node needs to already have a parent. The node's `owner` is preserved if its owner is still reachable from the new location (i.e., the node is still a descendant of the new parent after the operation).
				If `keep_global_transform` is `true`, the node's global transform will be preserved if supported. `Node2D`, `Node3D` and `Control` support this argument (but `Control` keeps only position).
			"""
    pass

  def get_child_count(self, include_internal:bool=False)->int:
    """
				Returns the number of children of this node.
				If `include_internal` is `false`, internal children are not counted (see `add_child`'s `internal` parameter).
			"""
    pass

  def get_children(self, include_internal:bool=False)->typedarray::Node:
    """
				Returns all children of this node inside an `Array`.
				If `include_internal` is `false`, excludes internal children from the returned array (see `add_child`'s `internal` parameter).
			"""
    pass

  def get_child(self, idx:int, include_internal:bool=False)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Fetches a child node by its index. Each child node has an index relative to its siblings (see `get_index`). The first child is at index 0. Negative values can also be used to start from the end of the list. This method can be used in combination with `get_child_count` to iterate over this node's children. If no child exists at the given index, this method returns `null` and an error is generated.
				If `include_internal` is `false`, internal children are ignored (see `add_child`'s `internal` parameter).
				```gdscript
				# Assuming the following are children of this node, in order:
				# First, Middle, Last.

				var a = get_child(0).name  # a is "First"
				var b = get_child(1).name  # b is "Middle"
				var b = get_child(2).name  # b is "Last"
				var c = get_child(-1).name # c is "Last"
				```
				**Note:** To fetch a node by `NodePath`, use `get_node`.
			"""
    pass

  def has_node(self, path:__core__.NodePath|str)->bool:
    """
				Returns `true` if the `path` points to a valid node. See also `get_node`.
			"""
    pass

  def get_node(self, path:__core__.NodePath|str)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Fetches a node. The `NodePath` can either be a relative path (from this node), or an absolute path (from the `SceneTree.root`) to a node. If `path` does not point to a valid node, generates an error and returns `null`. Attempts to access methods on the return value will result in an _"Attempt to call <method> on a null instance."_ error.
				**Note:** Fetching by absolute path only works when the node is inside the scene tree (see `is_inside_tree`).
				**Example:** Assume this method is called from the Character node, inside the following tree:
				`codeblock lang=text`
				 ┖╴root
				    ┠╴Character (you are here!)
				    ┃  ┠╴Sword
				    ┃  ┖╴Backpack
				    ┃     ┖╴Dagger
				    ┠╴MyGame
				    ┖╴Swamp
				       ┠╴Alligator
				       ┠╴Mosquito
				       ┖╴Goblin
				```
				The following calls will return a valid node:
				
				```gdscript
				get_node("Sword")
				get_node("Backpack/Dagger")
				get_node("../Swamp/Alligator")
				get_node("/root/MyGame")
				```
				
				
			"""
    pass

  def get_node_or_null(self, path:__core__.NodePath|str)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Fetches a node by `NodePath`. Similar to `get_node`, but does not generate an error if `path` does not point to a valid node.
			"""
    pass

  def get_parent(self)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Returns this node's parent node, or `null` if the node doesn't have a parent.
			"""
    pass

  def find_child(self, pattern:str, recursive:bool=True, owned:bool=True)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Finds the first descendant of this node whose `name` matches `pattern`, returning `null` if no match is found. The matching is done against node names, _not_ their paths, through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character.
				If `recursive` is `false`, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see `internal` parameter in `add_child`).
				If `owned` is `true`, only descendants with a valid `owner` node are checked.
				**Note:** This method can be very slow. Consider storing a reference to the found node in a variable. Alternatively, use `get_node` with unique names (see `unique_name_in_owner`).
				**Note:** To find all descendant nodes matching a pattern or a class type, see `find_children`.
			"""
    pass

  def find_children(self, pattern:str, type:str= __core__.String.new0(), recursive:bool=True, owned:bool=True)->typedarray::Node:
    """
				Finds all descendants of this node whose names match `pattern`, returning an empty `Array` if no match is found. The matching is done against node names, _not_ their paths, through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character.
				If `type` is not empty, only ancestors inheriting from `type` are included (see `Object.is_class`).
				If `recursive` is `false`, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see `internal` parameter in `add_child`).
				If `owned` is `true`, only descendants with a valid `owner` node are checked.
				**Note:** This method can be very slow. Consider storing references to the found nodes in a variable.
				**Note:** To find a single descendant node matching a pattern, see `find_child`.
			"""
    pass

  def find_parent(self, pattern:str)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Finds the first ancestor of this node whose `name` matches `pattern`, returning `null` if no match is found. The matching is done through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character. See also `find_child` and `find_children`.
				**Note:** As this method walks upwards in the scene tree, it can be slow in large, deeply nested nodes. Consider storing a reference to the found node in a variable. Alternatively, use `get_node` with unique names (see `unique_name_in_owner`).
			"""
    pass

  def has_node_and_resource(self, path:__core__.NodePath|str)->bool:
    """
				Returns `true` if `path` points to a valid node and its subnames point to a valid `Resource`, e.g. `Area2D/CollisionShape2D:shape`. Properties that are not `Resource` types (such as nodes or other `Variant` types) are not considered. See also `get_node_and_resource`.
			"""
    pass

  def get_node_and_resource(self, path:__core__.NodePath|str)->__core__.Array:
    """
				Fetches a node and its most nested resource as specified by the `NodePath`'s subname. Returns an `Array` of size `3` where:
				- Element `0` is the `Node`, or `null` if not found;
				- Element `1` is the subname's last nested `Resource`, or `null` if not found;
				- Element `2` is the remaining `NodePath`, referring to an existing, non-`Resource` property (see `Object.get_indexed`).
				**Example:** Assume that the child's `Sprite2D.texture` has been assigned an `AtlasTexture`:
				
				```gdscript
				var a = get_node_and_resource("Area2D/Sprite2D")
				print(a`0`.name) # Prints Sprite2D
				print(a`1`)      # Prints <null>
				print(a`2`)      # Prints ^""

				var b = get_node_and_resource("Area2D/Sprite2D:texture:atlas")
				print(b`0`.name)        # Prints Sprite2D
				print(b`1`.get_class()) # Prints AtlasTexture
				print(b`2`)             # Prints ^""

				var c = get_node_and_resource("Area2D/Sprite2D:texture:atlas:region")
				print(c`0`.name)        # Prints Sprite2D
				print(c`1`.get_class()) # Prints AtlasTexture
				print(c`2`)             # Prints ^":region"
				```
				
				
			"""
    pass

  def is_inside_tree(self)->bool:
    """
				Returns `true` if this node is currently inside a `SceneTree`. See also `get_tree`.
			"""
    pass

  def is_part_of_edited_scene(self)->bool:
    """
				Returns `true` if the node is part of the scene currently opened in the editor.
			"""
    pass

  def is_ancestor_of(self, node:__node__.Node)->bool:
    """
				Returns `true` if the given `node` is a direct or indirect child of this node.
			"""
    pass

  def is_greater_than(self, node:__node__.Node)->bool:
    """
				Returns `true` if the given `node` occurs later in the scene hierarchy than this node. A node occurring later is usually processed last.
			"""
    pass

  def get_path(self)->__core__.NodePath:
    """
				Returns the node's absolute path, relative to the `SceneTree.root`. If the node is not inside the scene tree, this method fails and returns an empty `NodePath`.
			"""
    pass

  def get_path_to(self, node:__node__.Node, use_unique_path:bool=False)->__core__.NodePath:
    """
				Returns the relative `NodePath` from this node to the specified `node`. Both nodes must be in the same `SceneTree` or scene hierarchy, otherwise this method fails and returns an empty `NodePath`.
				If `use_unique_path` is `true`, returns the shortest path accounting for this node's unique name (see `unique_name_in_owner`).
				**Note:** If you get a relative path which starts from a unique node, the path may be longer than a normal relative path, due to the addition of the unique node's name.
			"""
    pass

  def add_to_group(self, group:__core__.StringName|str, persistent:bool=False)->None:
    """
				Adds the node to the `group`. Groups can be helpful to organize a subset of nodes, for example `"enemies"` or `"collectables"`. See notes in the description, and the group methods in `SceneTree`.
				If `persistent` is `true`, the group will be stored when saved inside a `PackedScene`. All groups created and displayed in the Node dock are persistent.
				**Note:** To improve performance, the order of group names is _not_ guaranteed and may vary between project runs. Therefore, do not rely on the group order.
				**Note:** `SceneTree`'s group methods will _not_ work on this node if not inside the tree (see `is_inside_tree`).
			"""
    pass

  def remove_from_group(self, group:__core__.StringName|str)->None:
    """
				Removes the node from the given `group`. Does nothing if the node is not in the `group`. See also notes in the description, and the `SceneTree`'s group methods.
			"""
    pass

  def is_in_group(self, group:__core__.StringName|str)->bool:
    """
				Returns `true` if this node has been added to the given `group`. See `add_to_group` and `remove_from_group`. See also notes in the description, and the `SceneTree`'s group methods.
			"""
    pass

  def move_child(self, child_node:__node__.Node, to_index:int)->None:
    """
				Moves `child_node` to the given index. A node's index is the order among its siblings. If `to_index` is negative, the index is counted from the end of the list. See also `get_child` and `get_index`.
				**Note:** The processing order of several engine callbacks (`_ready`, `_process`, etc.) and notifications sent through `propagate_notification` is affected by tree order. `CanvasItem` nodes are also rendered in tree order. See also `process_priority`.
			"""
    pass

  def get_groups(self)->typedarray::StringName:
    """
				Returns an `Array` of group names that the node has been added to.
				**Note:** To improve performance, the order of group names is _not_ guaranteed and may vary between project runs. Therefore, do not rely on the group order.
				**Note:** This method may also return some group names starting with an underscore (`_`). These are internally used by the engine. To avoid conflicts, do not use custom groups starting with underscores. To exclude internal groups, see the following code snippet:
				
				```gdscript
				# Stores the node's non-internal groups only (as an array of StringNames).
				var non_internal_groups = ``
				for group in get_groups():
					if not str(group).begins_with("_"):
						non_internal_groups.push_back(group)
				```
				
				
			"""
    pass

  def set_owner(self, owner:__node__.Node)->None:
    """"""
    pass

  def get_owner(self)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """"""
    pass

  def get_index(self, include_internal:bool=False)->int:
    """
				Returns this node's order among its siblings. The first node's index is `0`. See also `get_child`.
				If `include_internal` is `false`, returns the index ignoring internal children. The first, non-internal child will have an index of `0` (see `add_child`'s `internal` parameter).
			"""
    pass

  def print_tree(self)->None:
    """
				Prints the node and its children to the console, recursively. The node does not have to be inside the tree. This method outputs `NodePath`s relative to this node, and is good for copy/pasting into `get_node`. See also `print_tree_pretty`.
				May print, for example:
				`codeblock lang=text`
				.
				Menu
				Menu/Label
				Menu/Camera2D
				SplashScreen
				SplashScreen/Camera2D
				```
			"""
    pass

  def print_tree_pretty(self)->None:
    """
				Prints the node and its children to the console, recursively. The node does not have to be inside the tree. Similar to `print_tree`, but the graphical representation looks like what is displayed in the editor's Scene dock. It is useful for inspecting larger trees.
				May print, for example:
				`codeblock lang=text`
				 ┖╴TheGame
				    ┠╴Menu
				    ┃  ┠╴Label
				    ┃  ┖╴Camera2D
				    ┖╴SplashScreen
				       ┖╴Camera2D
				```
			"""
    pass

  def get_tree_string(self)->str:
    """
				Returns the tree as a `String`. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the `get_node` function. It also can be used in game UI/UX.
				May print, for example:
				`codeblock lang=text`
				TheGame
				TheGame/Menu
				TheGame/Menu/Label
				TheGame/Menu/Camera2D
				TheGame/SplashScreen
				TheGame/SplashScreen/Camera2D
				```
			"""
    pass

  def get_tree_string_pretty(self)->str:
    """
				Similar to `get_tree_string`, this returns the tree as a `String`. This version displays a more graphical representation similar to what is displayed in the Scene Dock. It is useful for inspecting larger trees.
				May print, for example:
				`codeblock lang=text`
				 ┖╴TheGame
				    ┠╴Menu
				    ┃  ┠╴Label
				    ┃  ┖╴Camera2D
				    ┖╴SplashScreen
				       ┖╴Camera2D
				```
			"""
    pass

  def set_scene_file_path(self, scene_file_path:str)->None:
    """"""
    pass

  def get_scene_file_path(self)->str:
    """"""
    pass

  def propagate_notification(self, what:int)->None:
    """
				Calls `Object.notification` with `what` on this node and all of its children, recursively.
			"""
    pass

  def propagate_call(self, method:__core__.StringName|str, args:__core__.Array= __core__.Array.new0(), parent_first:bool=False)->None:
    """
				Calls the given `method` name, passing `args` as arguments, on this node and all of its children, recursively.
				If `parent_first` is `true`, the method is called on this node first, then on all of its children. If `false`, the children's methods are called first.
			"""
    pass

  def set_physics_process(self, enable:bool)->None:
    """
				If set to `true`, enables physics (fixed framerate) processing. When a node is being processed, it will receive a `constant NOTIFICATION_PHYSICS_PROCESS` at a fixed (usually 60 FPS, see `Engine.physics_ticks_per_second` to change) interval (and the `_physics_process` callback will be called if it exists).
				**Note:** If `_physics_process` is overridden, this will be automatically enabled before `_ready` is called.
			"""
    pass

  def get_physics_process_delta_time(self)->float:
    """
				Returns the time elapsed (in seconds) since the last physics callback. This value is identical to `_physics_process`'s `delta` parameter, and is often consistent at run-time, unless `Engine.physics_ticks_per_second` is changed. See also `constant NOTIFICATION_PHYSICS_PROCESS`.
				**Note:** The returned value will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			"""
    pass

  def is_physics_processing(self)->bool:
    """
				Returns `true` if physics processing is enabled (see `set_physics_process`).
			"""
    pass

  def get_process_delta_time(self)->float:
    """
				Returns the time elapsed (in seconds) since the last process callback. This value is identical to `_process`'s `delta` parameter, and may vary from frame to frame. See also `constant NOTIFICATION_PROCESS`.
				**Note:** The returned value will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			"""
    pass

  def set_process(self, enable:bool)->None:
    """
				If set to `true`, enables processing. When a node is being processed, it will receive a `constant NOTIFICATION_PROCESS` on every drawn frame (and the `_process` callback will be called if it exists).
				**Note:** If `_process` is overridden, this will be automatically enabled before `_ready` is called.
				**Note:** This method only affects the `_process` callback, i.e. it has no effect on other callbacks like `_physics_process`. If you want to disable all processing for the node, set `process_mode` to `constant PROCESS_MODE_DISABLED`.
			"""
    pass

  def set_process_priority(self, priority:int)->None:
    """"""
    pass

  def get_process_priority(self)->int:
    """"""
    pass

  def set_physics_process_priority(self, priority:int)->None:
    """"""
    pass

  def get_physics_process_priority(self)->int:
    """"""
    pass

  def is_processing(self)->bool:
    """
				Returns `true` if processing is enabled (see `set_process`).
			"""
    pass

  def set_process_input(self, enable:bool)->None:
    """
				If set to `true`, enables input processing.
				**Note:** If `_input` is overridden, this will be automatically enabled before `_ready` is called. Input processing is also already enabled for GUI controls, such as `Button` and `TextEdit`.
			"""
    pass

  def is_processing_input(self)->bool:
    """
				Returns `true` if the node is processing input (see `set_process_input`).
			"""
    pass

  def set_process_shortcut_input(self, enable:bool)->None:
    """
				If set to `true`, enables shortcut processing for this node.
				**Note:** If `_shortcut_input` is overridden, this will be automatically enabled before `_ready` is called.
			"""
    pass

  def is_processing_shortcut_input(self)->bool:
    """
				Returns `true` if the node is processing shortcuts (see `set_process_shortcut_input`).
			"""
    pass

  def set_process_unhandled_input(self, enable:bool)->None:
    """
				If set to `true`, enables unhandled input processing. It enables the node to receive all input that was not previously handled (usually by a `Control`).
				**Note:** If `_unhandled_input` is overridden, this will be automatically enabled before `_ready` is called. Unhandled input processing is also already enabled for GUI controls, such as `Button` and `TextEdit`.
			"""
    pass

  def is_processing_unhandled_input(self)->bool:
    """
				Returns `true` if the node is processing unhandled input (see `set_process_unhandled_input`).
			"""
    pass

  def set_process_unhandled_key_input(self, enable:bool)->None:
    """
				If set to `true`, enables unhandled key input processing.
				**Note:** If `_unhandled_key_input` is overridden, this will be automatically enabled before `_ready` is called.
			"""
    pass

  def is_processing_unhandled_key_input(self)->bool:
    """
				Returns `true` if the node is processing unhandled key input (see `set_process_unhandled_key_input`).
			"""
    pass

  def set_process_mode(self, mode:int )->None:
    """"""
    pass

  def get_process_mode(self)->int:
    """"""
    pass

  def can_process(self)->bool:
    """
				Returns `true` if the node can receive processing notifications and input callbacks (`constant NOTIFICATION_PROCESS`, `_input`, etc.) from the `SceneTree` and `Viewport`. The returned value depends on `process_mode`:
				- If set to `constant PROCESS_MODE_PAUSABLE`, returns `true` when the game is processing, i.e. `SceneTree.paused` is `false`;
				- If set to `constant PROCESS_MODE_WHEN_PAUSED`, returns `true` when the game is paused, i.e. `SceneTree.paused` is `true`;
				- If set to `constant PROCESS_MODE_ALWAYS`, always returns `true`;
				- If set to `constant PROCESS_MODE_DISABLED`, always returns `false`;
				- If set to `constant PROCESS_MODE_INHERIT`, use the parent node's `process_mode` to determine the result.
				If the node is not inside the tree, returns `false` no matter the value of `process_mode`.
			"""
    pass

  def set_process_thread_group(self, mode:int )->None:
    """"""
    pass

  def get_process_thread_group(self)->int:
    """"""
    pass

  def set_process_thread_messages(self, flags:int)->None:
    """"""
    pass

  def get_process_thread_messages(self)->int:
    """"""
    pass

  def set_process_thread_group_order(self, order:int)->None:
    """"""
    pass

  def get_process_thread_group_order(self)->int:
    """"""
    pass

  def set_display_folded(self, fold:bool)->None:
    """
				If set to `true`, the node appears folded in the Scene dock. As a result, all of its children are hidden. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also `is_displayed_folded`.
			"""
    pass

  def is_displayed_folded(self)->bool:
    """
				Returns `true` if the node is folded (collapsed) in the Scene dock. This method is intended to be used in editor plugins and tools. See also `set_display_folded`.
			"""
    pass

  def set_process_internal(self, enable:bool)->None:
    """
				If set to `true`, enables internal processing for this node. Internal processing happens in isolation from the normal `_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (`set_process`).
				**Warning:** Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.
			"""
    pass

  def is_processing_internal(self)->bool:
    """
				Returns `true` if internal processing is enabled (see `set_process_internal`).
			"""
    pass

  def set_physics_process_internal(self, enable:bool)->None:
    """
				If set to `true`, enables internal physics for this node. Internal physics processing happens in isolation from the normal `_physics_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (`set_physics_process`).
				**Warning:** Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.
			"""
    pass

  def is_physics_processing_internal(self)->bool:
    """
				Returns `true` if internal physics processing is enabled (see `set_physics_process_internal`).
			"""
    pass

  def set_physics_interpolation_mode(self, mode:int )->None:
    """"""
    pass

  def get_physics_interpolation_mode(self)->int:
    """"""
    pass

  def is_physics_interpolated(self)->bool:
    """
				Returns `true` if physics interpolation is enabled for this node (see `physics_interpolation_mode`).
				**Note:** Interpolation will only be active if both the flag is set **and** physics interpolation is enabled within the `SceneTree`. This can be tested using `is_physics_interpolated_and_enabled`.
			"""
    pass

  def is_physics_interpolated_and_enabled(self)->bool:
    """
				Returns `true` if physics interpolation is enabled (see `physics_interpolation_mode`) **and** enabled in the `SceneTree`.
				This is a convenience version of `is_physics_interpolated` that also checks whether physics interpolation is enabled globally.
				See `SceneTree.physics_interpolation` and `ProjectSettings.physics/common/physics_interpolation`.
			"""
    pass

  def reset_physics_interpolation(self)->None:
    """
				When physics interpolation is active, moving a node to a radically different transform (such as placement within a level) can result in a visible glitch as the object is rendered moving from the old to new position over the physics tick.
				That glitch can be prevented by calling this method, which temporarily disables interpolation until the physics tick is complete.
				The notification `constant NOTIFICATION_RESET_PHYSICS_INTERPOLATION` will be received by the node and all children recursively.
				**Note:** This function should be called **after** moving the node, rather than before.
			"""
    pass

  def set_auto_translate_mode(self, mode:int )->None:
    """"""
    pass

  def get_auto_translate_mode(self)->int:
    """"""
    pass

  def set_translation_domain_inherited(self)->None:
    """
				Makes this node inherit the translation domain from its parent node. If this node has no parent, the main translation domain will be used.
				This is the default behavior for all nodes. Calling `Object.set_translation_domain` disables this behavior.
			"""
    pass

  def get_window(self)->__filedialog__.FileDialog|__scriptcreatedialog__.ScriptCreateDialog|__popup__.Popup|__popupmenu__.PopupMenu|__editorcommandpalette__.EditorCommandPalette|__window__.Window|__popuppanel__.PopupPanel|__acceptdialog__.AcceptDialog|__confirmationdialog__.ConfirmationDialog|__editorfiledialog__.EditorFileDialog:
    """
				Returns the `Window` that contains this node. If the node is in the main window, this is equivalent to getting the root node (`get_tree().get_root()`).
			"""
    pass

  def get_last_exclusive_window(self)->__filedialog__.FileDialog|__scriptcreatedialog__.ScriptCreateDialog|__popup__.Popup|__popupmenu__.PopupMenu|__editorcommandpalette__.EditorCommandPalette|__window__.Window|__popuppanel__.PopupPanel|__acceptdialog__.AcceptDialog|__confirmationdialog__.ConfirmationDialog|__editorfiledialog__.EditorFileDialog:
    """
				Returns the `Window` that contains this node, or the last exclusive child in a chain of windows starting with the one that contains this node.
			"""
    pass

  def get_tree(self)->__scenetree__.SceneTree:
    """
				Returns the `SceneTree` that contains this node. If this node is not inside the tree, generates an error and returns `null`. See also `is_inside_tree`.
			"""
    pass

  def create_tween(self)->__tween__.Tween:
    """
				Creates a new `Tween` and binds it to this node.
				This is the equivalent of doing:
				
				```gdscript
				get_tree().create_tween().bind_node(self)
				```
				
				
				The Tween will start automatically on the next process frame or physics frame (depending on `enum Tween.TweenProcessMode`). See `Tween.bind_node` for more info on Tweens bound to nodes.
				**Note:** The method can still be used when the node is not inside `SceneTree`. It can fail in an unlikely case of using a custom `MainLoop`.
			"""
    pass

  def duplicate(self, flags:int=15)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Duplicates the node, returning a new node with all of its properties, signals, groups, and children copied from the original. The behavior can be tweaked through the `flags` (see `enum DuplicateFlags`). Internal nodes are not duplicated.
				**Note:** For nodes with a `Script` attached, if `Object._init` has been defined with required parameters, the duplicated node will not have a `Script`.
			"""
    pass

  def replace_by(self, node:__node__.Node, keep_groups:bool=False)->None:
    """
				Replaces this node by the given `node`. All children of this node are moved to `node`.
				If `keep_groups` is `true`, the `node` is added to the same groups that the replaced node is in (see `add_to_group`).
				**Warning:** The replaced node is removed from the tree, but it is **not** deleted. To prevent memory leaks, store a reference to the node in a variable, or use `Object.free`.
			"""
    pass

  def set_scene_instance_load_placeholder(self, load_placeholder:bool)->None:
    """
				If set to `true`, the node becomes an `InstancePlaceholder` when packed and instantiated from a `PackedScene`. See also `get_scene_instance_load_placeholder`.
			"""
    pass

  def get_scene_instance_load_placeholder(self)->bool:
    """
				Returns `true` if this node is an instance load placeholder. See `InstancePlaceholder` and `set_scene_instance_load_placeholder`.
			"""
    pass

  def set_editable_instance(self, node:__node__.Node, is_editable:bool)->None:
    """
				Set to `true` to allow all nodes owned by `node` to be available, and editable, in the Scene dock, even if their `owner` is not the scene root. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also `is_editable_instance`.
			"""
    pass

  def is_editable_instance(self, node:__node__.Node)->bool:
    """
				Returns `true` if `node` has editable children enabled relative to this node. This method is intended to be used in editor plugins and tools. See also `set_editable_instance`.
			"""
    pass

  def get_viewport(self)->__filedialog__.FileDialog|__scriptcreatedialog__.ScriptCreateDialog|__popup__.Popup|__popupmenu__.PopupMenu|__subviewport__.SubViewport|__editorcommandpalette__.EditorCommandPalette|__window__.Window|__popuppanel__.PopupPanel|__acceptdialog__.AcceptDialog|__confirmationdialog__.ConfirmationDialog|__viewport__.Viewport|__editorfiledialog__.EditorFileDialog:
    """
				Returns the node's closest `Viewport` ancestor, if the node is inside the tree. Otherwise, returns `null`.
			"""
    pass

  def queue_free(self)->None:
    """
				Queues this node to be deleted at the end of the current frame. When deleted, all of its children are deleted as well, and all references to the node and its children become invalid.
				Unlike with `Object.free`, the node is not deleted instantly, and it can still be accessed before deletion. It is also safe to call `queue_free` multiple times. Use `Object.is_queued_for_deletion` to check if the node will be deleted at the end of the frame.
				**Note:** The node will only be freed after all other deferred calls are finished. Using this method is not always the same as calling `Object.free` through `Object.call_deferred`.
			"""
    pass

  def request_ready(self)->None:
    """
				Requests `_ready` to be called again the next time the node enters the tree. Does **not** immediately call `_ready`.
				**Note:** This method only affects the current node. If the node's children also need to request ready, this method needs to be called for each one of them. When the node and its children enter the tree again, the order of `_ready` callbacks will be the same as normal.
			"""
    pass

  def is_node_ready(self)->bool:
    """
				Returns `true` if the node is ready, i.e. it's inside scene tree and all its children are initialized.
				`request_ready` resets it back to `false`.
			"""
    pass

  def set_multiplayer_authority(self, id:int, recursive:bool=True)->None:
    """
				Sets the node's multiplayer authority to the peer with the given peer `id`. The multiplayer authority is the peer that has authority over the node on the network. Defaults to peer ID 1 (the server). Useful in conjunction with `rpc_config` and the `MultiplayerAPI`.
				If `recursive` is `true`, the given peer is recursively set as the authority for all children of this node.
				**Warning:** This does **not** automatically replicate the new authority to other peers. It is the developer's responsibility to do so. You may replicate the new authority's information using `MultiplayerSpawner.spawn_function`, an RPC, or a `MultiplayerSynchronizer`. Furthermore, the parent's authority does **not** propagate to newly added children.
			"""
    pass

  def get_multiplayer_authority(self)->int:
    """
				Returns the peer ID of the multiplayer authority for this node. See `set_multiplayer_authority`.
			"""
    pass

  def is_multiplayer_authority(self)->bool:
    """
				Returns `true` if the local system is the multiplayer authority of this node.
			"""
    pass

  def get_multiplayer(self)->__multiplayerapi__.MultiplayerAPI|__multiplayerapiextension__.MultiplayerAPIExtension|__scenemultiplayer__.SceneMultiplayer:
    """"""
    pass

  def rpc_config(self, method:__core__.StringName|str, config:Any)->None:
    """
				Changes the RPC configuration for the given `method`. `config` should either be `null` to disable the feature (as by default), or a `Dictionary` containing the following entries:
				- `rpc_mode`: see `enum MultiplayerAPI.RPCMode`;
				- `transfer_mode`: see `enum MultiplayerPeer.TransferMode`;
				- `call_local`: if `true`, the method will also be called locally;
				- `channel`: an `int` representing the channel to send the RPC on.
				**Note:** In GDScript, this method corresponds to the `annotation @GDScript.@rpc` annotation, with various parameters passed (`@rpc(any)`, `@rpc(authority)`...). See also the `url=$DOCS_URL/tutorials/networking/high_level_multiplayer.html`high-level multiplayer`/url` tutorial.
			"""
    pass

  def get_rpc_config(self)->Any:
    """"""
    pass

  def set_editor_description(self, editor_description:str)->None:
    """"""
    pass

  def get_editor_description(self)->str:
    """"""
    pass

  def set_unique_name_in_owner(self, enable:bool)->None:
    """"""
    pass

  def is_unique_name_in_owner(self)->bool:
    """"""
    pass

  def atr(self, message:str, context:__core__.StringName|str= __core__.StringName.new0())->str:
    """
				Translates a `message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation. Note that most `Control` nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.
				This method works the same as `Object.tr`, with the addition of respecting the `auto_translate_mode` state.
				If `Object.can_translate_messages` is `false`, or no translation is available, this method returns the `message` without changes. See `Object.set_message_translation`.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/internationalizing_games.html`Internationalizing games`/url`.
			"""
    pass

  def atr_n(self, message:str, plural_message:__core__.StringName|str, n:int, context:__core__.StringName|str= __core__.StringName.new0())->str:
    """
				Translates a `message` or `plural_message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation.
				This method works the same as `Object.tr_n`, with the addition of respecting the `auto_translate_mode` state.
				If `Object.can_translate_messages` is `false`, or no translation is available, this method returns `message` or `plural_message`, without changes. See `Object.set_message_translation`.
				The `n` is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/localization_using_gettext.html`Localization using gettext`/url`.
				**Note:** Negative and `float` numbers may not properly apply to some countable subjects. It's recommended to handle these cases with `atr`.
			"""
    pass

  def rpc(self, method:__core__.StringName|str)->int:
    """
				Sends a remote procedure call request for the given `method` to peers on the network (and locally), sending additional arguments to the method called by the RPC. The call request will only be received by nodes with the same `NodePath`, including the exact same `name`. Behavior depends on the RPC configuration for the given `method` (see `rpc_config` and `annotation @GDScript.@rpc`). By default, methods are not exposed to RPCs.
				May return `constant OK` if the call is successful, `constant ERR_INVALID_PARAMETER` if the arguments passed in the `method` do not match, `constant ERR_UNCONFIGURED` if the node's `multiplayer` cannot be fetched (such as when the node is not inside the tree), `constant ERR_CONNECTION_ERROR` if `multiplayer`'s connection is not available.
				**Note:** You can only safely use RPCs on clients after you received the `signal MultiplayerAPI.connected_to_server` signal from the `MultiplayerAPI`. You also need to keep track of the connection state, either by the `MultiplayerAPI` signals like `signal MultiplayerAPI.server_disconnected` or by checking (`get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED`).
			"""
    pass

  def rpc_id(self, peer_id:int, method:__core__.StringName|str)->int:
    """
				Sends a `rpc` to a specific peer identified by `peer_id` (see `MultiplayerPeer.set_target_peer`).
				May return `constant OK` if the call is successful, `constant ERR_INVALID_PARAMETER` if the arguments passed in the `method` do not match, `constant ERR_UNCONFIGURED` if the node's `multiplayer` cannot be fetched (such as when the node is not inside the tree), `constant ERR_CONNECTION_ERROR` if `multiplayer`'s connection is not available.
			"""
    pass

  def update_configuration_warnings(self)->None:
    """
				Refreshes the warnings displayed for this node in the Scene dock. Use `_get_configuration_warnings` to customize the warning messages to display.
			"""
    pass

  def call_deferred_thread_group(self, method:__core__.StringName|str)->Any:
    """
				This function is similar to `Object.call_deferred` except that the call will take place when the node thread group is processed. If the node thread group processes in sub-threads, then the call will be done on that thread, right before `constant NOTIFICATION_PROCESS` or `constant NOTIFICATION_PHYSICS_PROCESS`, the `_process` or `_physics_process` or their internal versions are called.
			"""
    pass

  def set_deferred_thread_group(self, property:__core__.StringName|str, value:Any)->None:
    """
				Similar to `call_deferred_thread_group`, but for setting properties.
			"""
    pass

  def notify_deferred_thread_group(self, what:int)->None:
    """
				Similar to `call_deferred_thread_group`, but for notifications.
			"""
    pass

  def call_thread_safe(self, method:__core__.StringName|str)->Any:
    """
				This function ensures that the calling of this function will succeed, no matter whether it's being done from a thread or not. If called from a thread that is not allowed to call the function, the call will become deferred. Otherwise, the call will go through directly.
			"""
    pass

  def set_thread_safe(self, property:__core__.StringName|str, value:Any)->None:
    """
				Similar to `call_thread_safe`, but for setting properties.
			"""
    pass

  def notify_thread_safe(self, what:int)->None:
    """
				Similar to `call_thread_safe`, but for notifications.
			"""
    pass


