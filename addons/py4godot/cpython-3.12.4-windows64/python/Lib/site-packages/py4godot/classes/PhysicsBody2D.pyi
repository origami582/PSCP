from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.KinematicCollision2D as __kinematiccollision2d__
import py4godot.classes.T as __t__
import py4godot.classes.D as __d__
import py4godot.classes.Node as __node__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.d as __d__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.P as __p__
import py4godot.classes.h as __h__
import py4godot.classes.y as __y__
import py4godot.classes.s as __s__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.2 as __2__
import py4godot.classes.B as __b__



class PhysicsBody2D(__collisionobject2d__.CollisionObject2D):
  """
		`PhysicsBody2D` is an abstract base class for 2D game objects affected by physics. All 2D physics bodies inherit from it.
	"""

  @staticmethod
  def constructor()->PhysicsBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsBody2D:pass


  def move_and_collide(self, motion:__core__.Vector2, test_only:bool=False, safe_margin:float=0.08, recovery_as_collision:bool=False)->__kinematiccollision2d__.KinematicCollision2D:
    """
				Moves the body along the vector `motion`. In order to be frame rate independent in `Node._physics_process` or `Node._process`, `motion` should be computed using `delta`.
				Returns a `KinematicCollision2D`, which contains information about the collision when stopped, or when touching another body along the motion.
				If `test_only` is `true`, the body does not move but the would-be collision information is given.
				`safe_margin` is the extra margin used for collision recovery (see `CharacterBody2D.safe_margin` for more details).
				If `recovery_as_collision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by `CharacterBody2D` for improving floor detection during floor snapping.
			"""
    pass

  def test_move(self, from_:__core__.Transform2D, motion:__core__.Vector2, collision:__kinematiccollision2d__.KinematicCollision2D= __kinematiccollision2d__.KinematicCollision2D.constructor(), safe_margin:float=0.08, recovery_as_collision:bool=False)->bool:
    """
				Checks for collisions without moving the body. In order to be frame rate independent in `Node._physics_process` or `Node._process`, `motion` should be computed using `delta`.
				Virtually sets the node's position, scale and rotation to that of the given `Transform2D`, then tries to move the body along the vector `motion`. Returns `true` if a collision would stop the body from moving along the whole path.
				`collision` is an optional object of type `KinematicCollision2D`, which contains additional information about the collision when stopped, or when touching another body along the motion.
				`safe_margin` is the extra margin used for collision recovery (see `CharacterBody2D.safe_margin` for more details).
				If `recovery_as_collision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would _touch_ any other bodies.
			"""
    pass

  def get_gravity(self)->__core__.Vector2:
    """
				Returns the gravity vector computed from all sources that can affect the body, including all gravity overrides from `Area2D` nodes and the global world gravity.
			"""
    pass

  def get_collision_exceptions(self)->typedarray::PhysicsBody2D:
    """
				Returns an array of nodes that were added as collision exceptions for this body.
			"""
    pass

  def add_collision_exception_with(self, body:__node__.Node)->None:
    """
				Adds a body to the list of bodies that this body can't collide with.
			"""
    pass

  def remove_collision_exception_with(self, body:__node__.Node)->None:
    """
				Removes a body from the list of bodies that this body can't collide with.
			"""
    pass


