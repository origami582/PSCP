from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRPose as __xrpose__
import py4godot.classes.RefCounted as __refcounted__


class TrackingConfidence:
  XR_TRACKING_CONFIDENCE_NONE:int = 0
  XR_TRACKING_CONFIDENCE_LOW:int = 1
  XR_TRACKING_CONFIDENCE_HIGH:int = 2


class XRPose(__refcounted__.RefCounted):
  """
		XR runtimes often identify multiple locations on devices such as controllers that are spatially tracked.
		Orientation, location, linear velocity and angular velocity are all provided for each pose by the XR runtime. This object contains this state of a pose.
	"""

  @staticmethod
  def constructor()->XRPose:pass



  @staticmethod
  def cast(other:__object__.Object)->XRPose:pass


  @property
  def has_tracking_data(self)->bool:
    """"""
    pass
  @has_tracking_data.setter
  def has_tracking_data(self,  value:bool)->None:
    """"""
    pass
  @property
  def name(self)->str:
    """"""
    pass
  @name.setter
  def name(self,  value:str)->None:
    """"""
    pass
  @property
  def transform(self)->str:
    """"""
    pass
  @transform.setter
  def transform(self,  value:str)->None:
    """"""
    pass
  @property
  def linear_velocity(self)->str:
    """"""
    pass
  @linear_velocity.setter
  def linear_velocity(self,  value:str)->None:
    """"""
    pass
  @property
  def angular_velocity(self)->str:
    """"""
    pass
  @angular_velocity.setter
  def angular_velocity(self,  value:str)->None:
    """"""
    pass
  @property
  def tracking_confidence(self)->int:
    """"""
    pass
  @tracking_confidence.setter
  def tracking_confidence(self,  value:int)->None:
    """"""
    pass
  def set_has_tracking_data(self, has_tracking_data:bool)->None:
    """"""
    pass

  def get_has_tracking_data(self)->bool:
    """"""
    pass

  def set_name(self, name:__core__.StringName|str)->None:
    """"""
    pass

  def get_name(self)->__core__.StringName:
    """"""
    pass

  def set_transform(self, transform:__core__.Transform3D)->None:
    """"""
    pass

  def get_transform(self)->__core__.Transform3D:
    """"""
    pass

  def get_adjusted_transform(self)->__core__.Transform3D:
    """
				Returns the `transform` with world scale and our reference frame applied. This is the transform used to position `XRNode3D` objects.
			"""
    pass

  def set_linear_velocity(self, velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_linear_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_angular_velocity(self, velocity:__core__.Vector3)->None:
    """"""
    pass

  def get_angular_velocity(self)->__core__.Vector3:
    """"""
    pass

  def set_tracking_confidence(self, tracking_confidence:int )->None:
    """"""
    pass

  def get_tracking_confidence(self)->int:
    """"""
    pass


