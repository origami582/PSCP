from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRHapticBase as __openxrhapticbase__
import py4godot.classes.OpenXRActionSet as __openxractionset__
import py4godot.classes.OpenXRHapticVibration as __openxrhapticvibration__
import py4godot.classes.OpenXRIPBindingModifier as __openxripbindingmodifier__



class OpenXRDpadBindingModifier(__openxripbindingmodifier__.OpenXRIPBindingModifier):
  """"""

  @staticmethod
  def constructor()->OpenXRDpadBindingModifier:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRDpadBindingModifier:pass


  @property
  def action_set(self)->__openxractionset__.OpenXRActionSet:
    """"""
    pass
  @action_set.setter
  def action_set(self,  value:__openxractionset__.OpenXRActionSet)->None:
    """"""
    pass
  @property
  def input_path(self)->str:
    """"""
    pass
  @input_path.setter
  def input_path(self,  value:str)->None:
    """"""
    pass
  @property
  def threshold(self)->float:
    """"""
    pass
  @threshold.setter
  def threshold(self,  value:float)->None:
    """"""
    pass
  @property
  def threshold_released(self)->float:
    """"""
    pass
  @threshold_released.setter
  def threshold_released(self,  value:float)->None:
    """"""
    pass
  @property
  def center_region(self)->float:
    """"""
    pass
  @center_region.setter
  def center_region(self,  value:float)->None:
    """"""
    pass
  @property
  def wedge_angle(self)->float:
    """"""
    pass
  @wedge_angle.setter
  def wedge_angle(self,  value:float)->None:
    """"""
    pass
  @property
  def is_sticky(self)->bool:
    """"""
    pass
  @is_sticky.setter
  def is_sticky(self,  value:bool)->None:
    """"""
    pass
  @property
  def on_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass
  @on_haptic.setter
  def on_haptic(self,  value:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass
  @property
  def off_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass
  @off_haptic.setter
  def off_haptic(self,  value:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass
  def set_action_set(self, action_set:__openxractionset__.OpenXRActionSet)->None:
    """"""
    pass

  def get_action_set(self)->__openxractionset__.OpenXRActionSet:
    """"""
    pass

  def set_input_path(self, input_path:str)->None:
    """"""
    pass

  def get_input_path(self)->str:
    """"""
    pass

  def set_threshold(self, threshold:float)->None:
    """"""
    pass

  def get_threshold(self)->float:
    """"""
    pass

  def set_threshold_released(self, threshold_released:float)->None:
    """"""
    pass

  def get_threshold_released(self)->float:
    """"""
    pass

  def set_center_region(self, center_region:float)->None:
    """"""
    pass

  def get_center_region(self)->float:
    """"""
    pass

  def set_wedge_angle(self, wedge_angle:float)->None:
    """"""
    pass

  def get_wedge_angle(self)->float:
    """"""
    pass

  def set_is_sticky(self, is_sticky:bool)->None:
    """"""
    pass

  def get_is_sticky(self)->bool:
    """"""
    pass

  def set_on_haptic(self, haptic:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass

  def get_on_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass

  def set_off_haptic(self, haptic:__openxrhapticbase__.OpenXRHapticBase)->None:
    """"""
    pass

  def get_off_haptic(self)->__openxrhapticvibration__.OpenXRHapticVibration|__openxrhapticbase__.OpenXRHapticBase:
    """"""
    pass


