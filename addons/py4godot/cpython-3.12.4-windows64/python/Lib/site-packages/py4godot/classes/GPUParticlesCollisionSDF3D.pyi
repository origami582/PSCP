from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.CompressedTexture3D as __compressedtexture3d__
import py4godot.classes.Texture3D as __texture3d__
import py4godot.classes.Texture3DRD as __texture3drd__
import py4godot.classes.PlaceholderTexture3D as __placeholdertexture3d__
import py4godot.classes.ImageTexture3D as __imagetexture3d__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.NoiseTexture3D as __noisetexture3d__


class Resolution:
  RESOLUTION_16:int = 0
  RESOLUTION_32:int = 1
  RESOLUTION_64:int = 2
  RESOLUTION_128:int = 3
  RESOLUTION_256:int = 4
  RESOLUTION_512:int = 5
  RESOLUTION_MAX:int = 6


class GPUParticlesCollisionSDF3D(__gpuparticlescollision3d__.GPUParticlesCollision3D):
  """
		A baked signed distance field 3D particle collision shape affecting `GPUParticles3D` nodes.
		Signed distance fields (SDF) allow for efficiently representing approximate collision shapes for convex and concave objects of any shape. This is more flexible than `GPUParticlesCollisionHeightField3D`, but it requires a baking step.
		**Baking:** The signed distance field texture can be baked by selecting the `GPUParticlesCollisionSDF3D` node in the editor, then clicking **Bake SDF** at the top of the 3D viewport. Any _visible_ `MeshInstance3D`s within the `size` will be taken into account for baking, regardless of their `GeometryInstance3D.gi_mode`.
		**Note:** Baking a `GPUParticlesCollisionSDF3D`'s `texture` is only possible within the editor, as there is no bake method exposed for use in exported projects. However, it's still possible to load pre-baked `Texture3D`s into its `texture` property in an exported project.
		**Note:** `ParticleProcessMaterial.collision_mode` must be `constant ParticleProcessMaterial.COLLISION_RIGID` or `constant ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT` on the `GPUParticles3D`'s process material for collision to work.
		**Note:** Particle collision only affects `GPUParticles3D`, not `CPUParticles3D`.
	"""

  @staticmethod
  def constructor()->GPUParticlesCollisionSDF3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesCollisionSDF3D:pass


  @property
  def size(self)->__core__.Vector3:
    """"""
    pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def resolution(self)->int:
    """"""
    pass
  @resolution.setter
  def resolution(self,  value:int)->None:
    """"""
    pass
  @property
  def thickness(self)->float:
    """"""
    pass
  @thickness.setter
  def thickness(self,  value:float)->None:
    """"""
    pass
  @property
  def bake_mask(self)->int:
    """"""
    pass
  @bake_mask.setter
  def bake_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def texture(self)->__compressedtexture3d__.CompressedTexture3D|__texture3d__.Texture3D|__placeholdertexture3d__.PlaceholderTexture3D|__texture3drd__.Texture3DRD|__imagetexture3d__.ImageTexture3D|__noisetexture3d__.NoiseTexture3D:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture3d__.Texture3D)->None:
    """"""
    pass
  def set_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_size(self)->__core__.Vector3:
    """"""
    pass

  def set_resolution(self, resolution:int )->None:
    """"""
    pass

  def get_resolution(self)->int:
    """"""
    pass

  def set_texture(self, texture:__texture3d__.Texture3D)->None:
    """"""
    pass

  def get_texture(self)->__compressedtexture3d__.CompressedTexture3D|__texture3d__.Texture3D|__placeholdertexture3d__.PlaceholderTexture3D|__texture3drd__.Texture3DRD|__imagetexture3d__.ImageTexture3D|__noisetexture3d__.NoiseTexture3D:
    """"""
    pass

  def set_thickness(self, thickness:float)->None:
    """"""
    pass

  def get_thickness(self)->float:
    """"""
    pass

  def set_bake_mask(self, mask:int)->None:
    """"""
    pass

  def get_bake_mask(self)->int:
    """"""
    pass

  def set_bake_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `bake_mask`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_bake_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `bake_mask` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass


