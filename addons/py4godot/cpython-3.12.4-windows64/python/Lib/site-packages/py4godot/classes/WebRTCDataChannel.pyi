from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.WebRTCDataChannel as __webrtcdatachannel__
import py4godot.classes.PacketPeer as __packetpeer__
import py4godot.classes.WebRTCDataChannelExtension as __webrtcdatachannelextension__


class WriteMode:
  WRITE_MODE_TEXT:int = 0
  WRITE_MODE_BINARY:int = 1
class ChannelState:
  STATE_CONNECTING:int = 0
  STATE_OPEN:int = 1
  STATE_CLOSING:int = 2
  STATE_CLOSED:int = 3


class WebRTCDataChannel(__packetpeer__.PacketPeer):
  """"""

  @staticmethod
  def constructor()->WebRTCDataChannel:pass



  @staticmethod
  def cast(other:__object__.Object)->WebRTCDataChannel:pass


  @property
  def write_mode(self)->int:
    """"""
    pass
  @write_mode.setter
  def write_mode(self,  value:int)->None:
    """"""
    pass
  def poll(self)->int:
    """"""
    pass

  def close(self)->None:
    """"""
    pass

  def was_string_packet(self)->bool:
    """"""
    pass

  def set_write_mode(self, write_mode:int )->None:
    """"""
    pass

  def get_write_mode(self)->int:
    """"""
    pass

  def get_ready_state(self)->int:
    """"""
    pass

  def get_label(self)->str:
    """"""
    pass

  def is_ordered(self)->bool:
    """"""
    pass

  def get_id(self)->int:
    """"""
    pass

  def get_max_packet_life_time(self)->int:
    """"""
    pass

  def get_max_retransmits(self)->int:
    """"""
    pass

  def get_protocol(self)->str:
    """"""
    pass

  def is_negotiated(self)->bool:
    """"""
    pass

  def get_buffered_amount(self)->int:
    """"""
    pass


