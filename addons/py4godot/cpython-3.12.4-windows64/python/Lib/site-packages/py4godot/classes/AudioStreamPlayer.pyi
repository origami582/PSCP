from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamOggVorbis as __audiostreamoggvorbis__
import py4godot.classes.AudioStreamGeneratorPlayback as __audiostreamgeneratorplayback__
import py4godot.classes.AudioServer as __audioserver__
import py4godot.classes.AudioStreamGenerator as __audiostreamgenerator__
import py4godot.classes.AudioStreamInteractive as __audiostreaminteractive__
import py4godot.classes.AudioStreamRandomizer as __audiostreamrandomizer__
import py4godot.classes.Node as __node__
import py4godot.classes.AudioStreamPlaybackPolyphonic as __audiostreamplaybackpolyphonic__
import py4godot.classes.AudioStreamMP3 as __audiostreammp3__
import py4godot.classes.AudioStreamPlaybackPlaylist as __audiostreamplaybackplaylist__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamPlayer as __audiostreamplayer__
import py4godot.classes.AudioStreamSynchronized as __audiostreamsynchronized__
import py4godot.classes.AudioStreamWAV as __audiostreamwav__
import py4godot.classes.AudioStreamMicrophone as __audiostreammicrophone__
import py4godot.classes.AudioStreamPlaybackOggVorbis as __audiostreamplaybackoggvorbis__
import py4godot.classes.AudioStreamPlaybackInteractive as __audiostreamplaybackinteractive__
import py4godot.classes.AudioStreamPlaybackResampled as __audiostreamplaybackresampled__
import py4godot.classes.AudioStreamPolyphonic as __audiostreampolyphonic__
import py4godot.classes.AudioStreamPlaybackSynchronized as __audiostreamplaybacksynchronized__
import py4godot.classes.AudioStreamPlayback as __audiostreamplayback__
import py4godot.classes.AudioStreamPlaylist as __audiostreamplaylist__


class MixTarget:
  MIX_TARGET_STEREO:int = 0
  MIX_TARGET_SURROUND:int = 1
  MIX_TARGET_CENTER:int = 2


class AudioStreamPlayer(__node__.Node):
  """
		The `AudioStreamPlayer` node plays an audio stream non-positionally. It is ideal for user interfaces, menus, or background music.
		To use this node, `stream` needs to be set to a valid `AudioStream` resource. Playing more than one sound at the same time is also supported, see `max_polyphony`.
		If you need to play audio at a specific position, use `AudioStreamPlayer2D` or `AudioStreamPlayer3D` instead.
	"""
  finished: BuiltinSignal

  @staticmethod
  def constructor()->AudioStreamPlayer:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamPlayer:pass


  @property
  def stream(self)->__audiostream__.AudioStream|__audiostreamoggvorbis__.AudioStreamOggVorbis|__audiostreamsynchronized__.AudioStreamSynchronized|__audiostreamwav__.AudioStreamWAV|__audiostreamgenerator__.AudioStreamGenerator|__audiostreammicrophone__.AudioStreamMicrophone|__audiostreaminteractive__.AudioStreamInteractive|__audiostreamrandomizer__.AudioStreamRandomizer|__audiostreammp3__.AudioStreamMP3|__audiostreampolyphonic__.AudioStreamPolyphonic|__audiostreamplaylist__.AudioStreamPlaylist:
    """"""
    pass
  @stream.setter
  def stream(self,  value:__audiostream__.AudioStream)->None:
    """"""
    pass
  @property
  def volume_db(self)->float:
    """"""
    pass
  @volume_db.setter
  def volume_db(self,  value:float)->None:
    """"""
    pass
  @property
  def volume_linear(self)->float:
    """"""
    pass
  @volume_linear.setter
  def volume_linear(self,  value:float)->None:
    """"""
    pass
  @property
  def pitch_scale(self)->float:
    """"""
    pass
  @pitch_scale.setter
  def pitch_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def playing(self)->bool:
    """"""
    pass
  @playing.setter
  def playing(self,  value:bool)->None:
    """"""
    pass
  @property
  def autoplay(self)->bool:
    """"""
    pass
  @autoplay.setter
  def autoplay(self,  value:bool)->None:
    """"""
    pass
  @property
  def stream_paused(self)->bool:
    """"""
    pass
  @stream_paused.setter
  def stream_paused(self,  value:bool)->None:
    """"""
    pass
  @property
  def mix_target(self)->int:
    """"""
    pass
  @mix_target.setter
  def mix_target(self,  value:int)->None:
    """"""
    pass
  @property
  def max_polyphony(self)->int:
    """"""
    pass
  @max_polyphony.setter
  def max_polyphony(self,  value:int)->None:
    """"""
    pass
  @property
  def bus(self)->__core__.StringName:
    """"""
    pass
  @bus.setter
  def bus(self,  value:__core__.StringName)->None:
    """"""
    pass
  @property
  def playback_type(self)->int:
    """"""
    pass
  @playback_type.setter
  def playback_type(self,  value:int)->None:
    """"""
    pass
  def set_stream(self, stream:__audiostream__.AudioStream)->None:
    """"""
    pass

  def get_stream(self)->__audiostream__.AudioStream|__audiostreamoggvorbis__.AudioStreamOggVorbis|__audiostreamsynchronized__.AudioStreamSynchronized|__audiostreamwav__.AudioStreamWAV|__audiostreamgenerator__.AudioStreamGenerator|__audiostreammicrophone__.AudioStreamMicrophone|__audiostreaminteractive__.AudioStreamInteractive|__audiostreamrandomizer__.AudioStreamRandomizer|__audiostreammp3__.AudioStreamMP3|__audiostreampolyphonic__.AudioStreamPolyphonic|__audiostreamplaylist__.AudioStreamPlaylist:
    """"""
    pass

  def set_volume_db(self, volume_db:float)->None:
    """"""
    pass

  def get_volume_db(self)->float:
    """"""
    pass

  def set_volume_linear(self, volume_linear:float)->None:
    """"""
    pass

  def get_volume_linear(self)->float:
    """"""
    pass

  def set_pitch_scale(self, pitch_scale:float)->None:
    """"""
    pass

  def get_pitch_scale(self)->float:
    """"""
    pass

  def play(self, from_position:float=0.0)->None:
    """
				Plays a sound from the beginning, or the given `from_position` in seconds.
			"""
    pass

  def seek(self, to_position:float)->None:
    """
				Restarts all sounds to be played from the given `to_position`, in seconds. Does nothing if no sounds are playing.
			"""
    pass

  def stop(self)->None:
    """
				Stops all sounds from this node.
			"""
    pass

  def is_playing(self)->bool:
    """"""
    pass

  def get_playback_position(self)->float:
    """
				Returns the position in the `AudioStream` of the latest sound, in seconds. Returns `0.0` if no sounds are playing.
				**Note:** The position is not always accurate, as the `AudioServer` does not mix audio every processed frame. To get more accurate results, add `AudioServer.get_time_since_last_mix` to the returned position.
				**Note:** This method always returns `0.0` if the `stream` is an `AudioStreamInteractive`, since it can have multiple clips playing at once.
			"""
    pass

  def set_bus(self, bus:__core__.StringName|str)->None:
    """"""
    pass

  def get_bus(self)->__core__.StringName:
    """"""
    pass

  def set_autoplay(self, enable:bool)->None:
    """"""
    pass

  def is_autoplay_enabled(self)->bool:
    """"""
    pass

  def set_mix_target(self, mix_target:int )->None:
    """"""
    pass

  def get_mix_target(self)->int:
    """"""
    pass

  def set_playing(self, enable:bool)->None:
    """"""
    pass

  def set_stream_paused(self, pause:bool)->None:
    """"""
    pass

  def get_stream_paused(self)->bool:
    """"""
    pass

  def set_max_polyphony(self, max_polyphony:int)->None:
    """"""
    pass

  def get_max_polyphony(self)->int:
    """"""
    pass

  def has_stream_playback(self)->bool:
    """
				Returns `true` if any sound is active, even if `stream_paused` is set to `true`. See also `playing` and `get_stream_playback`.
			"""
    pass

  def get_stream_playback(self)->__audiostreamplaybackplaylist__.AudioStreamPlaybackPlaylist|__audiostreamgeneratorplayback__.AudioStreamGeneratorPlayback|__audiostreamplaybackoggvorbis__.AudioStreamPlaybackOggVorbis|__audiostreamplaybackpolyphonic__.AudioStreamPlaybackPolyphonic|__audiostreamplaybackinteractive__.AudioStreamPlaybackInteractive|__audiostreamplaybackresampled__.AudioStreamPlaybackResampled|__audiostreamplaybacksynchronized__.AudioStreamPlaybackSynchronized|__audiostreamplayback__.AudioStreamPlayback:
    """
				Returns the latest `AudioStreamPlayback` of this node, usually the most recently created by `play`. If no sounds are playing, this method fails and returns an empty playback.
			"""
    pass

  def set_playback_type(self, playback_type:int )->None:
    """"""
    pass

  def get_playback_type(self)->int:
    """"""
    pass


