from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MethodTweener as __methodtweener__
import py4godot.classes.Tweener as __tweener__
import py4godot.classes.Tween as __tween__



class MethodTweener(__tweener__.Tweener):
  """
		`MethodTweener` is similar to a combination of `CallbackTweener` and `PropertyTweener`. It calls a method providing an interpolated value as a parameter. See `Tween.tween_method` for more usage information.
		The tweener will finish automatically if the callback's target object is freed.
		**Note:** `Tween.tween_method` is the only correct way to create `MethodTweener`. Any `MethodTweener` created manually will not function correctly.
	"""

  @staticmethod
  def constructor()->MethodTweener:pass



  @staticmethod
  def cast(other:__object__.Object)->MethodTweener:pass


  def set_delay(self, delay:float)->__methodtweener__.MethodTweener:
    """
				Sets the time in seconds after which the `MethodTweener` will start interpolating. By default there's no delay.
			"""
    pass

  def set_trans(self, trans:int )->__methodtweener__.MethodTweener:
    """
				Sets the type of used transition from `enum Tween.TransitionType`. If not set, the default transition is used from the `Tween` that contains this Tweener.
			"""
    pass

  def set_ease(self, ease:int )->__methodtweener__.MethodTweener:
    """
				Sets the type of used easing from `enum Tween.EaseType`. If not set, the default easing is used from the `Tween` that contains this Tweener.
			"""
    pass


