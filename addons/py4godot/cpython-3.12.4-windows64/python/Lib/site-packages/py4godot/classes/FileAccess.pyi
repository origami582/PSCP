from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.FileAccess as __fileaccess__
import py4godot.classes.RefCounted as __refcounted__


class ModeFlags:
  READ:int = 1
  WRITE:int = 2
  READ_WRITE:int = 3
  WRITE_READ:int = 7
class CompressionMode:
  COMPRESSION_FASTLZ:int = 0
  COMPRESSION_DEFLATE:int = 1
  COMPRESSION_ZSTD:int = 2
  COMPRESSION_GZIP:int = 3
  COMPRESSION_BROTLI:int = 4
class UnixPermissionFlags:
  UNIX_READ_OWNER:int = 256
  UNIX_WRITE_OWNER:int = 128
  UNIX_EXECUTE_OWNER:int = 64
  UNIX_READ_GROUP:int = 32
  UNIX_WRITE_GROUP:int = 16
  UNIX_EXECUTE_GROUP:int = 8
  UNIX_READ_OTHER:int = 4
  UNIX_WRITE_OTHER:int = 2
  UNIX_EXECUTE_OTHER:int = 1
  UNIX_SET_USER_ID:int = 2048
  UNIX_SET_GROUP_ID:int = 1024
  UNIX_RESTRICTED_DELETE:int = 512


class FileAccess(__refcounted__.RefCounted):
  """
		This class can be used to permanently store data in the user device's file system and to read from it. This is useful for storing game save data or player configuration files.
		**Example:** How to write and read from a file. The file named `"save_game.dat"` will be stored in the user data folder, as specified in the `url=$DOCS_URL/tutorials/io/data_paths.html`Data paths`/url` documentation:
		
		```gdscript
		func save_to_file(content):
			var file = FileAccess.open("user://save_game.dat", FileAccess.WRITE)
			file.store_string(content)

		func load_from_file():
			var file = FileAccess.open("user://save_game.dat", FileAccess.READ)
			var content = file.get_as_text()
			return content
		```
		
		
		A `FileAccess` instance has its own file cursor, which is the position in bytes in the file where the next read/write operation will occur. Functions such as `get_8`, `get_16`, `store_8`, and `store_16` will move the file cursor forward by the number of bytes read/written. The file cursor can be moved to a specific position using `seek` or `seek_end`, and its position can be retrieved using `get_position`.
		A `FileAccess` instance will close its file when the instance is freed. Since it inherits `RefCounted`, this happens automatically when it is no longer in use. `close` can be called to close it earlier. In C#, the reference must be disposed manually, which can be done with the `using` statement or by calling the `Dispose` method directly.
		**Note:** To access project resources once exported, it is recommended to use `ResourceLoader` instead of `FileAccess`, as some files are converted to engine-specific formats and their original source files might not be present in the exported PCK package. If using `FileAccess`, make sure the file is included in the export by changing its import mode to **Keep File (exported as is)** in the Import dock, or, for files where this option is not available, change the non-resource export filter in the Export dialog to include the file's extension (e.g. `*.txt`).
		**Note:** Files are automatically closed only if the process exits "normally" (such as by clicking the window manager's close button or pressing `kbd`Alt + F4`/kbd`). If you stop the project execution by pressing `kbd`F8`/kbd` while the project is running, the file won't be closed as the game process will be killed. You can work around this by calling `flush` at regular intervals.
	"""

  @staticmethod
  def constructor()->FileAccess:pass



  @staticmethod
  def cast(other:__object__.Object)->FileAccess:pass


  @property
  def big_endian(self)->bool:
    """"""
    pass
  @big_endian.setter
  def big_endian(self,  value:bool)->None:
    """"""
    pass
  @staticmethod
  def open(path:str, flags:int )->__fileaccess__.FileAccess:
    """
				Creates a new `FileAccess` object and opens the file for writing or reading, depending on the flags.
				Returns `null` if opening the file failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def open_encrypted(path:str, mode_flags:int , key:__core__.PackedByteArray, iv:__core__.PackedByteArray= __core__.PackedByteArray.new0())->__fileaccess__.FileAccess:
    """
				Creates a new `FileAccess` object and opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
				**Note:** The provided key must be 32 bytes long.
				Returns `null` if opening the file failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def open_encrypted_with_pass(path:str, mode_flags:int , pass_:str)->__fileaccess__.FileAccess:
    """
				Creates a new `FileAccess` object and opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
				Returns `null` if opening the file failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def open_compressed(path:str, mode_flags:int , compression_mode:int =0)->__fileaccess__.FileAccess:
    """
				Creates a new `FileAccess` object and opens a compressed file for reading or writing.
				**Note:** `open_compressed` can only read files that were saved by Godot, not third-party compression formats. See `url=https://github.com/godotengine/godot/issues/28999`GitHub issue #28999`/url` for a workaround.
				Returns `null` if opening the file failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def get_open_error()->int:
    """
				Returns the result of the last `open` call in the current thread.
			"""
    pass

  @staticmethod
  def create_temp(mode_flags:int, prefix:str= __core__.String.new0(), extension:str= __core__.String.new0(), keep:bool=False)->__fileaccess__.FileAccess:
    """
				Creates a temporary file. This file will be freed when the returned `FileAccess` is freed.
				If `prefix` is not empty, it will be prefixed to the file name, separated by a `-`.
				If `extension` is not empty, it will be appended to the temporary file name.
				If `keep` is `true`, the file is not deleted when the returned `FileAccess` is freed.
				Returns `null` if opening the file failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def get_file_as_bytes(path:str)->__core__.PackedByteArray:
    """
				Returns the whole `path` file contents as a `PackedByteArray` without any decoding.
				Returns an empty `PackedByteArray` if an error occurred while opening the file. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def get_file_as_string(path:str)->str:
    """
				Returns the whole `path` file contents as a `String`. Text is interpreted as being UTF-8 encoded.
				Returns an empty `String` if an error occurred while opening the file. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  def resize(self, length:int)->int:
    """
				Resizes the file to a specified length. The file must be open in a mode that permits writing. If the file is extended, NUL characters are appended. If the file is truncated, all data from the end file to the original length of the file is lost.
			"""
    pass

  def flush(self)->None:
    """
				Writes the file's buffer to disk. Flushing is automatically performed when the file is closed. This means you don't need to call `flush` manually before closing a file. Still, calling `flush` can be used to ensure the data is safe even if the project crashes instead of being closed gracefully.
				**Note:** Only call `flush` when you actually need it. Otherwise, it will decrease performance due to constant disk writes.
			"""
    pass

  def get_path(self)->str:
    """
				Returns the path as a `String` for the current open file.
			"""
    pass

  def get_path_absolute(self)->str:
    """
				Returns the absolute path as a `String` for the current open file.
			"""
    pass

  def is_open(self)->bool:
    """
				Returns `true` if the file is currently opened.
			"""
    pass

  def seek(self, position:int)->None:
    """
				Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file). This changes the value returned by `get_position`.
			"""
    pass

  def seek_end(self, position:int=0)->None:
    """
				Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). This changes the value returned by `get_position`.
				**Note:** This is an offset, so you should use negative numbers or the file cursor will be at the end of the file.
			"""
    pass

  def get_position(self)->int:
    """
				Returns the file cursor's position in bytes from the beginning of the file. This is the file reading/writing cursor set by `seek` or `seek_end` and advanced by read/write operations.
			"""
    pass

  def get_length(self)->int:
    """
				Returns the size of the file in bytes. For a pipe, returns the number of bytes available for reading from the pipe.
			"""
    pass

  def eof_reached(self)->bool:
    """
				Returns `true` if the file cursor has already read past the end of the file.
				**Note:** `eof_reached() == false` cannot be used to check whether there is more data available. To loop while there is more data available, use:
				
				```gdscript
				while file.get_position() < file.get_length():
					# Read data
				```
				
				
			"""
    pass

  def get_8(self)->int:
    """
				Returns the next 8 bits from the file as an integer. This advances the file cursor by 1 byte. See `store_8` for details on what values can be stored and retrieved this way.
			"""
    pass

  def get_16(self)->int:
    """
				Returns the next 16 bits from the file as an integer. This advances the file cursor by 2 bytes. See `store_16` for details on what values can be stored and retrieved this way.
			"""
    pass

  def get_32(self)->int:
    """
				Returns the next 32 bits from the file as an integer. This advances the file cursor by 4 bytes. See `store_32` for details on what values can be stored and retrieved this way.
			"""
    pass

  def get_64(self)->int:
    """
				Returns the next 64 bits from the file as an integer. This advances the file cursor by 8 bytes. See `store_64` for details on what values can be stored and retrieved this way.
			"""
    pass

  def get_half(self)->float:
    """
				Returns the next 16 bits from the file as a half-precision floating-point number. This advances the file cursor by 2 bytes.
			"""
    pass

  def get_float(self)->float:
    """
				Returns the next 32 bits from the file as a floating-point number. This advances the file cursor by 4 bytes.
			"""
    pass

  def get_double(self)->float:
    """
				Returns the next 64 bits from the file as a floating-point number. This advances the file cursor by 8 bytes.
			"""
    pass

  def get_real(self)->float:
    """
				Returns the next bits from the file as a floating-point number. This advances the file cursor by either 4 or 8 bytes, depending on the precision used by the Godot build that saved the file.
				If the file was saved by a Godot build compiled with the `precision=single` option (the default), the number of read bits for that file is 32. Otherwise, if compiled with the `precision=double` option, the number of read bits is 64.
			"""
    pass

  def get_buffer(self, length:int)->__core__.PackedByteArray:
    """
				Returns next `length` bytes of the file as a `PackedByteArray`. This advances the file cursor by `length` bytes.
			"""
    pass

  def get_line(self)->str:
    """
				Returns the next line of the file as a `String`. The returned string doesn't include newline (`\n`) or carriage return (`\r`) characters, but does include any other leading or trailing whitespace. This advances the file cursor to after the newline character at the end of the line.
				Text is interpreted as being UTF-8 encoded.
			"""
    pass

  def get_csv_line(self, delim:str= __core__.String.new0())->__core__.PackedStringArray:
    """
				Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter `delim` to use other than the default `","` (comma). This delimiter must be one-character long, and cannot be a double quotation mark.
				Text is interpreted as being UTF-8 encoded. Text values must be enclosed in double quotes if they include the delimiter character. Double quotes within a text value can be escaped by doubling their occurrence. This advances the file cursor to after the newline character at the end of the line.
				For example, the following CSV lines are valid and will be properly parsed as two strings each:
				`codeblock lang=text`
				Alice,"Hello, Bob!"
				Bob,Alice! What a surprise!
				Alice,"I thought you'd reply with ""Hello, world""."
				```
				Note how the second line can omit the enclosing quotes as it does not include the delimiter. However it _could_ very well use quotes, it was only written without for demonstration purposes. The third line must use `""` for each quotation mark that needs to be interpreted as such instead of the end of a text value.
			"""
    pass

  def get_as_text(self, skip_cr:bool=False)->str:
    """
				Returns the whole file as a `String`. Text is interpreted as being UTF-8 encoded. This ignores the file cursor and does not affect it.
				If `skip_cr` is `true`, carriage return characters (`\r`, CR) will be ignored when parsing the UTF-8, so that only line feed characters (`\n`, LF) represent a new line (Unix convention).
			"""
    pass

  @staticmethod
  def get_md5(path:str)->str:
    """
				Returns an MD5 String representing the file at the given path or an empty `String` on failure.
			"""
    pass

  @staticmethod
  def get_sha256(path:str)->str:
    """
				Returns an SHA-256 `String` representing the file at the given path or an empty `String` on failure.
			"""
    pass

  def is_big_endian(self)->bool:
    """"""
    pass

  def set_big_endian(self, big_endian:bool)->None:
    """"""
    pass

  def get_error(self)->int:
    """
				Returns the last error that happened when trying to perform operations. Compare with the `ERR_FILE_*` constants from `enum Error`.
			"""
    pass

  def get_var(self, allow_objects:bool=False)->Any:
    """
				Returns the next `Variant` value from the file. If `allow_objects` is `true`, decoding objects is allowed. This advances the file cursor by the number of bytes read.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method, as described in the `url=$DOCS_URL/tutorials/io/binary_serialization_api.html`Binary serialization API`/url` documentation.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			"""
    pass

  def store_8(self, value:int)->bool:
    """
				Stores an integer as 8 bits in the file. This advances the file cursor by 1 byte. Returns `true` if the operation is successful.
				**Note:** The `value` should lie in the interval ``0, 255``. Any other value will overflow and wrap around.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
				To store a signed integer, use `store_64`, or convert it manually (see `store_16` for an example).
			"""
    pass

  def store_16(self, value:int)->bool:
    """
				Stores an integer as 16 bits in the file. This advances the file cursor by 2 bytes. Returns `true` if the operation is successful.
				**Note:** The `value` should lie in the interval ``0, 2^16 - 1``. Any other value will overflow and wrap around.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
				To store a signed integer, use `store_64` or store a signed integer from the interval ``-2^15, 2^15 - 1`` (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:
				
				```gdscript
				const MAX_15B = 1 << 15
				const MAX_16B = 1 << 16

				func unsigned16_to_signed(unsigned):
					return (unsigned + MAX_15B) % MAX_16B - MAX_15B

				func _ready():
					var f = FileAccess.open("user://file.dat", FileAccess.WRITE_READ)
					f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).
					f.store_16(121) # In bounds, will store 121.
					f.seek(0) # Go back to start to read the stored value.
					var read1 = f.get_16() # 65494
					var read2 = f.get_16() # 121
					var converted1 = unsigned16_to_signed(read1) # -42
					var converted2 = unsigned16_to_signed(read2) # 121
				```
				
				
			"""
    pass

  def store_32(self, value:int)->bool:
    """
				Stores an integer as 32 bits in the file. This advances the file cursor by 4 bytes. Returns `true` if the operation is successful.
				**Note:** The `value` should lie in the interval ``0, 2^32 - 1``. Any other value will overflow and wrap around.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
				To store a signed integer, use `store_64`, or convert it manually (see `store_16` for an example).
			"""
    pass

  def store_64(self, value:int)->bool:
    """
				Stores an integer as 64 bits in the file. This advances the file cursor by 8 bytes. Returns `true` if the operation is successful.
				**Note:** The `value` must lie in the interval ``-2^63, 2^63 - 1`` (i.e. be a valid `int` value).
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_half(self, value:float)->bool:
    """
				Stores a half-precision floating-point number as 16 bits in the file. This advances the file cursor by 2 bytes. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_float(self, value:float)->bool:
    """
				Stores a floating-point number as 32 bits in the file. This advances the file cursor by 4 bytes. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_double(self, value:float)->bool:
    """
				Stores a floating-point number as 64 bits in the file. This advances the file cursor by 8 bytes. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_real(self, value:float)->bool:
    """
				Stores a floating-point number in the file. This advances the file cursor by either 4 or 8 bytes, depending on the precision used by the current Godot build.
				If using a Godot build compiled with the `precision=single` option (the default), this method will save a 32-bit float. Otherwise, if compiled with the `precision=double` option, this will save a 64-bit float. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_buffer(self, buffer:__core__.PackedByteArray)->bool:
    """
				Stores the given array of bytes in the file. This advances the file cursor by the number of bytes written. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_line(self, line:str)->bool:
    """
				Stores `line` in the file followed by a newline character (`\n`), encoding the text as UTF-8. This advances the file cursor by the length of the line, after the newline character. The amount of bytes written depends on the UTF-8 encoded bytes, which may be different from `String.length` which counts the number of UTF-32 codepoints. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_csv_line(self, values:__core__.PackedStringArray, delim:str= __core__.String.new0())->bool:
    """
				Store the given `PackedStringArray` in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter `delim` to use other than the default `","` (comma). This delimiter must be one-character long.
				Text will be encoded as UTF-8. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_string(self, string:str)->bool:
    """
				Stores `string` in the file without a newline character (`\n`), encoding the text as UTF-8. This advances the file cursor by the length of the string in UTF-8 encoded bytes, which may be different from `String.length` which counts the number of UTF-32 codepoints. Returns `true` if the operation is successful.
				**Note:** This method is intended to be used to write text files. The string is stored as a UTF-8 encoded buffer without string length or terminating zero, which means that it can't be loaded back easily. If you want to store a retrievable string in a binary file, consider using `store_pascal_string` instead. For retrieving strings from a text file, you can use `get_buffer(length).get_string_from_utf8()` (if you know the length) or `get_as_text`.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_var(self, value:Any, full_objects:bool=False)->bool:
    """
				Stores any Variant value in the file. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code). This advances the file cursor by the number of bytes written. Returns `true` if the operation is successful.
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method, as described in the `url=$DOCS_URL/tutorials/io/binary_serialization_api.html`Binary serialization API`/url` documentation.
				**Note:** Not all properties are included. Only properties that are configured with the `constant PROPERTY_USAGE_STORAGE` flag set will be serialized. You can add a new usage flag to a property by overriding the `Object._get_property_list` method in your class. You can also check how property usage is configured by calling `Object._get_property_list`. See `enum PropertyUsageFlags` for the possible usage flags.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def store_pascal_string(self, string:str)->bool:
    """
				Stores the given `String` as a line in the file in Pascal format (i.e. also store the length of the string). Text will be encoded as UTF-8. This advances the file cursor by the number of bytes written depending on the UTF-8 encoded bytes, which may be different from `String.length` which counts the number of UTF-32 codepoints. Returns `true` if the operation is successful.
				**Note:** If an error occurs, the resulting value of the file position indicator is indeterminate.
			"""
    pass

  def get_pascal_string(self)->str:
    """
				Returns a `String` saved in Pascal format from the file, meaning that the length of the string is explicitly stored at the start. See `store_pascal_string`. This may include newline characters. The file cursor is advanced after the bytes read.
				Text is interpreted as being UTF-8 encoded.
			"""
    pass

  def close(self)->None:
    """
				Closes the currently opened file and prevents subsequent read/write operations. Use `flush` to persist the data to disk without closing the file.
				**Note:** `FileAccess` will automatically close when it's freed, which happens when it goes out of scope or when it gets assigned with `null`. In C# the reference must be disposed after we are done using it, this can be done with the `using` statement or calling the `Dispose` method directly.
			"""
    pass

  @staticmethod
  def file_exists(path:str)->bool:
    """
				Returns `true` if the file exists in the given path.
				**Note:** Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See `ResourceLoader.exists` for an alternative approach that takes resource remapping into account.
				For a non-static, relative equivalent, use `DirAccess.file_exists`.
			"""
    pass

  @staticmethod
  def get_modified_time(file:str)->int:
    """
				Returns the last time the `file` was modified in Unix timestamp format, or `0` on error. This Unix timestamp can be converted to another format using the `Time` singleton.
			"""
    pass

  @staticmethod
  def get_unix_permissions(file:str)->int:
    """
				Returns file UNIX permissions.
				**Note:** This method is implemented on iOS, Linux/BSD, and macOS.
			"""
    pass

  @staticmethod
  def set_unix_permissions(file:str, permissions:int)->int:
    """
				Sets file UNIX permissions.
				**Note:** This method is implemented on iOS, Linux/BSD, and macOS.
			"""
    pass

  @staticmethod
  def get_hidden_attribute(file:str)->bool:
    """
				Returns `true`, if file `hidden` attribute is set.
				**Note:** This method is implemented on iOS, BSD, macOS, and Windows.
			"""
    pass

  @staticmethod
  def set_hidden_attribute(file:str, hidden:bool)->int:
    """
				Sets file **hidden** attribute.
				**Note:** This method is implemented on iOS, BSD, macOS, and Windows.
			"""
    pass

  @staticmethod
  def set_read_only_attribute(file:str, ro:bool)->int:
    """
				Sets file **read only** attribute.
				**Note:** This method is implemented on iOS, BSD, macOS, and Windows.
			"""
    pass

  @staticmethod
  def get_read_only_attribute(file:str)->bool:
    """
				Returns `true`, if file `read only` attribute is set.
				**Note:** This method is implemented on iOS, BSD, macOS, and Windows.
			"""
    pass


