from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__


class BlendMode:
  BLEND_MODE_INTERPOLATED:int = 0
  BLEND_MODE_DISCRETE:int = 1
  BLEND_MODE_DISCRETE_CARRY:int = 2


class AnimationNodeBlendSpace2D(__animationrootnode__.AnimationRootNode):
  """
		A resource used by `AnimationNodeBlendTree`.
		`AnimationNodeBlendSpace2D` represents a virtual 2D space on which `AnimationRootNode`s are placed. Outputs the linear blend of the three adjacent animations using a `Vector2` weight. Adjacent in this context means the three `AnimationRootNode`s making up the triangle that contains the current value.
		You can add vertices to the blend space with `add_blend_point` and automatically triangulate it by setting `auto_triangles` to `true`. Otherwise, use `add_triangle` and `remove_triangle` to triangulate the blend space by hand.
	"""
  triangles_updated: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNodeBlendSpace2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeBlendSpace2D:pass


  @property
  def auto_triangles(self)->bool:
    """"""
    pass
  @auto_triangles.setter
  def auto_triangles(self,  value:bool)->None:
    """"""
    pass
  @property
  def triangles(self)->__core__.PackedInt32Array:
    """"""
    pass
  @triangles.setter
  def triangles(self,  value:__core__.PackedInt32Array)->None:
    """"""
    pass
  @property
  def min_space(self)->__core__.Vector2:
    """"""
    pass
  @min_space.setter
  def min_space(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def max_space(self)->__core__.Vector2:
    """"""
    pass
  @max_space.setter
  def max_space(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def snap(self)->__core__.Vector2:
    """"""
    pass
  @snap.setter
  def snap(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def x_label(self)->str:
    """"""
    pass
  @x_label.setter
  def x_label(self,  value:str)->None:
    """"""
    pass
  @property
  def y_label(self)->str:
    """"""
    pass
  @y_label.setter
  def y_label(self,  value:str)->None:
    """"""
    pass
  @property
  def blend_mode(self)->int:
    """"""
    pass
  @blend_mode.setter
  def blend_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def sync(self)->bool:
    """"""
    pass
  @sync.setter
  def sync(self,  value:bool)->None:
    """"""
    pass
  def add_blend_point(self, node:__animationrootnode__.AnimationRootNode, pos:__core__.Vector2, at_index:int=-1)->None:
    """
				Adds a new point that represents a `node` at the position set by `pos`. You can insert it at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array.
			"""
    pass

  def set_blend_point_position(self, point:int, pos:__core__.Vector2)->None:
    """
				Updates the position of the point at index `point` in the blend space.
			"""
    pass

  def get_blend_point_position(self, point:int)->__core__.Vector2:
    """
				Returns the position of the point at index `point`.
			"""
    pass

  def set_blend_point_node(self, point:int, node:__animationrootnode__.AnimationRootNode)->None:
    """
				Changes the `AnimationNode` referenced by the point at index `point`.
			"""
    pass

  def get_blend_point_node(self, point:int)->__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeblendtree__.AnimationNodeBlendTree|__animationrootnode__.AnimationRootNode|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D:
    """
				Returns the `AnimationRootNode` referenced by the point at index `point`.
			"""
    pass

  def remove_blend_point(self, point:int)->None:
    """
				Removes the point at index `point` from the blend space.
			"""
    pass

  def get_blend_point_count(self)->int:
    """
				Returns the number of points in the blend space.
			"""
    pass

  def add_triangle(self, x:int, y:int, z:int, at_index:int=-1)->None:
    """
				Creates a new triangle using three points `x`, `y`, and `z`. Triangles can overlap. You can insert the triangle at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array.
			"""
    pass

  def get_triangle_point(self, triangle:int, point:int)->int:
    """
				Returns the position of the point at index `point` in the triangle of index `triangle`.
			"""
    pass

  def remove_triangle(self, triangle:int)->None:
    """
				Removes the triangle at index `triangle` from the blend space.
			"""
    pass

  def get_triangle_count(self)->int:
    """
				Returns the number of triangles in the blend space.
			"""
    pass

  def set_min_space(self, min_space:__core__.Vector2)->None:
    """"""
    pass

  def get_min_space(self)->__core__.Vector2:
    """"""
    pass

  def set_max_space(self, max_space:__core__.Vector2)->None:
    """"""
    pass

  def get_max_space(self)->__core__.Vector2:
    """"""
    pass

  def set_snap(self, snap:__core__.Vector2)->None:
    """"""
    pass

  def get_snap(self)->__core__.Vector2:
    """"""
    pass

  def set_x_label(self, text:str)->None:
    """"""
    pass

  def get_x_label(self)->str:
    """"""
    pass

  def set_y_label(self, text:str)->None:
    """"""
    pass

  def get_y_label(self)->str:
    """"""
    pass

  def set_auto_triangles(self, enable:bool)->None:
    """"""
    pass

  def get_auto_triangles(self)->bool:
    """"""
    pass

  def set_blend_mode(self, mode:int )->None:
    """"""
    pass

  def get_blend_mode(self)->int:
    """"""
    pass

  def set_use_sync(self, enable:bool)->None:
    """"""
    pass

  def is_using_sync(self)->bool:
    """"""
    pass


