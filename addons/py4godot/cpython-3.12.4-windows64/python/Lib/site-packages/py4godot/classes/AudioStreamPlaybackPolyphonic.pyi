from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioServer as __audioserver__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioStreamPlayback as __audiostreamplayback__



class AudioStreamPlaybackPolyphonic(__audiostreamplayback__.AudioStreamPlayback):
  """
		Playback instance for `AudioStreamPolyphonic`. After setting the `stream` property of `AudioStreamPlayer`, `AudioStreamPlayer2D`, or `AudioStreamPlayer3D`, the playback instance can be obtained by calling `AudioStreamPlayer.get_stream_playback`, `AudioStreamPlayer2D.get_stream_playback` or `AudioStreamPlayer3D.get_stream_playback` methods.
	"""

  @staticmethod
  def constructor()->AudioStreamPlaybackPolyphonic:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamPlaybackPolyphonic:pass


  def play_stream(self, stream:__audiostream__.AudioStream, from_offset:float=0, volume_db:float=0, pitch_scale:float=1.0, playback_type:int =0, bus:__core__.StringName|str= __core__.StringName.new0())->int:
    """
				Play an `AudioStream` at a given offset, volume, pitch scale, playback type, and bus. Playback starts immediately.
				The return value is a unique integer ID that is associated to this playback stream and which can be used to control it.
				This ID becomes invalid when the stream ends (if it does not loop), when the `AudioStreamPlaybackPolyphonic` is stopped, or when `stop_stream` is called.
				This function returns `constant INVALID_ID` if the amount of streams currently playing equals `AudioStreamPolyphonic.polyphony`. If you need a higher amount of maximum polyphony, raise this value.
			"""
    pass

  def set_stream_volume(self, stream:int, volume_db:float)->None:
    """
				Change the stream volume (in db). The `stream` argument is an integer ID returned by `play_stream`.
			"""
    pass

  def set_stream_pitch_scale(self, stream:int, pitch_scale:float)->None:
    """
				Change the stream pitch scale. The `stream` argument is an integer ID returned by `play_stream`.
			"""
    pass

  def is_stream_playing(self, stream:int)->bool:
    """
				Returns `true` if the stream associated with the given integer ID is still playing. Check `play_stream` for information on when this ID becomes invalid.
			"""
    pass

  def stop_stream(self, stream:int)->None:
    """
				Stop a stream. The `stream` argument is an integer ID returned by `play_stream`, which becomes invalid after calling this function.
			"""
    pass


