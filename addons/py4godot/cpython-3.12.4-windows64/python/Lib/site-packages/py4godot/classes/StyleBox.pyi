from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.Button as __button__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.Panel as __panel__
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.Control as __control__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.Tree as __tree__
import py4godot.classes.Label as __label__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Slider as __slider__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.Range as __range__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.Resource as __resource__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.Container as __container__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__



class StyleBox(__resource__.Resource):
  """
		`StyleBox` is an abstract base class for drawing stylized boxes for UI elements. It is used for panels, buttons, `LineEdit` backgrounds, `Tree` backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a `StyleBox` assigned as mask to a control, clicks and motion signals will go through it to the one below.
		**Note:** For control nodes that have _Theme Properties_, the `focus` `StyleBox` is displayed over the `normal`, `hover` or `pressed` `StyleBox`. This makes the `focus` `StyleBox` more reusable across different nodes.
	"""

  @staticmethod
  def constructor()->StyleBox:pass



  @staticmethod
  def cast(other:__object__.Object)->StyleBox:pass


  @property
  def content_margin_left(self)->float:
    """"""
    pass
  @content_margin_left.setter
  def content_margin_left(self,  value:float)->None:
    """"""
    pass
  @property
  def content_margin_top(self)->float:
    """"""
    pass
  @content_margin_top.setter
  def content_margin_top(self,  value:float)->None:
    """"""
    pass
  @property
  def content_margin_right(self)->float:
    """"""
    pass
  @content_margin_right.setter
  def content_margin_right(self,  value:float)->None:
    """"""
    pass
  @property
  def content_margin_bottom(self)->float:
    """"""
    pass
  @content_margin_bottom.setter
  def content_margin_bottom(self,  value:float)->None:
    """"""
    pass
  def _draw(self, to_canvas_item:__core__.RID, rect:__core__.Rect2)->None:
    """
"""
    pass

  def _get_draw_rect(self, rect:__core__.Rect2)->__core__.Rect2:
    """
"""
    pass

  def _get_minimum_size(self)->__core__.Vector2:
    """
				Virtual method to be implemented by the user. Returns a custom minimum size that the stylebox must respect when drawing. By default `get_minimum_size` only takes content margins into account. This method can be overridden to add another size restriction. A combination of the default behavior and the output of this method will be used, to account for both sizes.
			"""
    pass

  def _test_mask(self, point:__core__.Vector2, rect:__core__.Rect2)->bool:
    """
"""
    pass

  def get_minimum_size(self)->__core__.Vector2:
    """
				Returns the minimum size that this stylebox can be shrunk to.
			"""
    pass

  def set_content_margin(self, margin:int , offset:float)->None:
    """
				Sets the default value of the specified `enum Side` to `offset` pixels.
			"""
    pass

  def set_content_margin_all(self, offset:float)->None:
    """
				Sets the default margin to `offset` pixels for all sides.
			"""
    pass

  def get_content_margin(self, margin:int )->float:
    """
				Returns the default margin of the specified `enum Side`.
			"""
    pass

  def get_margin(self, margin:int )->float:
    """
				Returns the content margin offset for the specified `enum Side`.
				Positive values reduce size inwards, unlike `Control`'s margin values.
			"""
    pass

  def get_offset(self)->__core__.Vector2:
    """
				Returns the "offset" of a stylebox. This helper function returns a value equivalent to `Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))`.
			"""
    pass

  def draw(self, canvas_item:__core__.RID, rect:__core__.Rect2)->None:
    """
				Draws this stylebox using a canvas item identified by the given `RID`.
				The `RID` value can either be the result of `CanvasItem.get_canvas_item` called on an existing `CanvasItem`-derived node, or directly from creating a canvas item in the `RenderingServer` with `RenderingServer.canvas_item_create`.
			"""
    pass

  def get_current_item_drawn(self)->__audiostreamplayer2d__.AudioStreamPlayer2D|__canvasmodulate__.CanvasModulate|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__gpuparticles2d__.GPUParticles2D|__navigationlink2d__.NavigationLink2D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__button__.Button|__graphnode__.GraphNode|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__progressbar__.ProgressBar|__canvasgroup__.CanvasGroup|__graphframe__.GraphFrame|__textedit__.TextEdit|__boxcontainer__.BoxContainer|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__margincontainer__.MarginContainer|__path2d__.Path2D|__hboxcontainer__.HBoxContainer|__pathfollow2d__.PathFollow2D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__tabcontainer__.TabContainer|__raycast2d__.RayCast2D|__hseparator__.HSeparator|__control__.Control|__colorpickerbutton__.ColorPickerButton|__tree__.Tree|__label__.Label|__bone2d__.Bone2D|__lineedit__.LineEdit|__dampedspringjoint2d__.DampedSpringJoint2D|__backbuffercopy__.BackBufferCopy|__texturebutton__.TextureButton|__richtextlabel__.RichTextLabel|__texturerect__.TextureRect|__slider__.Slider|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__marker2d__.Marker2D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__ninepatchrect__.NinePatchRect|__physicalbone2d__.PhysicalBone2D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__graphedit__.GraphEdit|__vflowcontainer__.VFlowContainer|__editorinspector__.EditorInspector|__editorspinslider__.EditorSpinSlider|__area2d__.Area2D|__cpuparticles2d__.CPUParticles2D|__pointlight2d__.PointLight2D|__vseparator__.VSeparator|__panelcontainer__.PanelContainer|__line2d__.Line2D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__textureprogressbar__.TextureProgressBar|__joint2d__.Joint2D|__range__.Range|__vboxcontainer__.VBoxContainer|__remotetransform2d__.RemoteTransform2D|__tilemaplayer__.TileMapLayer|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__hsplitcontainer__.HSplitContainer|__scrollbar__.ScrollBar|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__spinbox__.SpinBox|__videostreamplayer__.VideoStreamPlayer|__parallax2d__.Parallax2D|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__multimeshinstance2d__.MultiMeshInstance2D|__scripteditor__.ScriptEditor|__scripteditorbase__.ScriptEditorBase|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__container__.Container|__flowcontainer__.FlowContainer|__scrollcontainer__.ScrollContainer|__itemlist__.ItemList|__animatedsprite2d__.AnimatedSprite2D|__collisionobject2d__.CollisionObject2D|__pinjoint2d__.PinJoint2D|__polygon2d__.Polygon2D|__editortoaster__.EditorToaster|__subviewportcontainer__.SubViewportContainer|__filesystemdock__.FileSystemDock|__hslider__.HSlider|__hscrollbar__.HScrollBar|__basebutton__.BaseButton|__vslider__.VSlider|__lightoccluder2d__.LightOccluder2D|__parallaxlayer__.ParallaxLayer|__shapecast2d__.ShapeCast2D|__optionbutton__.OptionButton|__linkbutton__.LinkButton|__staticbody2d__.StaticBody2D|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D:
    """
				Returns the `CanvasItem` that handles its `constant CanvasItem.NOTIFICATION_DRAW` or `CanvasItem._draw` callback at this moment.
			"""
    pass

  def test_mask(self, point:__core__.Vector2, rect:__core__.Rect2)->bool:
    """
				Test a position in a rectangle, return whether it passes the mask test.
			"""
    pass


