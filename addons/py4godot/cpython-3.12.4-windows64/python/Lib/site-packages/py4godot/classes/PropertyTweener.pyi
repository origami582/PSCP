from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PropertyTweener as __propertytweener__
import py4godot.classes.Tweener as __tweener__
import py4godot.classes.Tween as __tween__



class PropertyTweener(__tweener__.Tweener):
  """
		`PropertyTweener` is used to interpolate a property in an object. See `Tween.tween_property` for more usage information.
		The tweener will finish automatically if the target object is freed.
		**Note:** `Tween.tween_property` is the only correct way to create `PropertyTweener`. Any `PropertyTweener` created manually will not function correctly.
	"""

  @staticmethod
  def constructor()->PropertyTweener:pass



  @staticmethod
  def cast(other:__object__.Object)->PropertyTweener:pass


  def from_(self, value:Any)->__propertytweener__.PropertyTweener:
    """
				Sets a custom initial value to the `PropertyTweener`.
				**Example:** Move the node from position `(100, 100)` to `(200, 100)`.
				
				```gdscript
				var tween = get_tree().create_tween()
				tween.tween_property(self, "position", Vector2(200, 100), 1).from(Vector2(100, 100))
				```
				
				
			"""
    pass

  def from_current(self)->__propertytweener__.PropertyTweener:
    """
				Makes the `PropertyTweener` use the current property value (i.e. at the time of creating this `PropertyTweener`) as a starting point. This is equivalent of using `from` with the current value. These two calls will do the same:
				
				```gdscript
				tween.tween_property(self, "position", Vector2(200, 100), 1).from(position)
				tween.tween_property(self, "position", Vector2(200, 100), 1).from_current()
				```
				
				
			"""
    pass

  def as_relative(self)->__propertytweener__.PropertyTweener:
    """
				When called, the final value will be used as a relative value instead.
				**Example:** Move the node by `100` pixels to the right.
				
				```gdscript
				var tween = get_tree().create_tween()
				tween.tween_property(self, "position", Vector2.RIGHT * 100, 1).as_relative()
				```
				
				
			"""
    pass

  def set_trans(self, trans:int )->__propertytweener__.PropertyTweener:
    """
				Sets the type of used transition from `enum Tween.TransitionType`. If not set, the default transition is used from the `Tween` that contains this Tweener.
			"""
    pass

  def set_ease(self, ease:int )->__propertytweener__.PropertyTweener:
    """
				Sets the type of used easing from `enum Tween.EaseType`. If not set, the default easing is used from the `Tween` that contains this Tweener.
			"""
    pass

  def set_custom_interpolator(self, interpolator_method:__core__.Callable)->__propertytweener__.PropertyTweener:
    """
				Allows interpolating the value with a custom easing function. The provided `interpolator_method` will be called with a value ranging from `0.0` to `1.0` and is expected to return a value within the same range (values outside the range can be used for overshoot). The return value of the method is then used for interpolation between initial and final value. Note that the parameter passed to the method is still subject to the tweener's own easing.
				
				```gdscript
				@export var curve: Curve

				func _ready():
					var tween = create_tween()
					# Interpolate the value using a custom curve.
					tween.tween_property(self, "position:x", 300, 1).as_relative().set_custom_interpolator(tween_curve)

				func tween_curve(v):
					return curve.sample_baked(v)
				```
				
				
			"""
    pass

  def set_delay(self, delay:float)->__propertytweener__.PropertyTweener:
    """
				Sets the time in seconds after which the `PropertyTweener` will start interpolating. By default there's no delay.
			"""
    pass


