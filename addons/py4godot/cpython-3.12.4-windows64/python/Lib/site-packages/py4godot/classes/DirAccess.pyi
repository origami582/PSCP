from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.DirAccess as __diraccess__
import py4godot.classes.RefCounted as __refcounted__



class DirAccess(__refcounted__.RefCounted):
  """
		This class is used to manage directories and their content, even outside of the project folder.
		`DirAccess` can't be instantiated directly. Instead it is created with a static method that takes a path for which it will be opened.
		Most of the methods have a static alternative that can be used without creating a `DirAccess`. Static methods only support absolute paths (including `res://` and `user://`).
		```gdscript
		# Standard
		var dir = DirAccess.open("user://levels")
		dir.make_dir("world1")
		# Static
		DirAccess.make_dir_absolute("user://levels/world1")
		```
		**Note:** Accessing project ("res://") directories once exported may behave unexpectedly as some files are converted to engine-specific formats and their original source files may not be present in the expected PCK package. Because of this, to access resources in an exported project, it is recommended to use `ResourceLoader` instead of `FileAccess`.
		Here is an example on how to iterate through the files of a directory:
		
		```gdscript
		func dir_contents(path):
			var dir = DirAccess.open(path)
			if dir:
				dir.list_dir_begin()
				var file_name = dir.get_next()
				while file_name != "":
					if dir.current_is_dir():
						print("Found directory: " + file_name)
					else:
						print("Found file: " + file_name)
					file_name = dir.get_next()
			else:
				print("An error occurred when trying to access the path.")
		```
		
		
		Keep in mind that file names may change or be remapped after export. If you want to see the actual resource file list as it appears in the editor, use `ResourceLoader.list_directory` instead.
	"""

  @staticmethod
  def constructor()->DirAccess:pass



  @staticmethod
  def cast(other:__object__.Object)->DirAccess:pass


  @property
  def include_navigational(self)->bool:
    """"""
    pass
  @include_navigational.setter
  def include_navigational(self,  value:bool)->None:
    """"""
    pass
  @property
  def include_hidden(self)->bool:
    """"""
    pass
  @include_hidden.setter
  def include_hidden(self,  value:bool)->None:
    """"""
    pass
  @staticmethod
  def open(path:str)->__diraccess__.DirAccess:
    """
				Creates a new `DirAccess` object and opens an existing directory of the filesystem. The `path` argument can be within the project tree (`res://folder`), the user directory (`user://folder`) or an absolute path of the user filesystem (e.g. `/tmp/folder` or `C:\tmp\folder`).
				Returns `null` if opening the directory failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  @staticmethod
  def get_open_error()->int:
    """
				Returns the result of the last `open` call in the current thread.
			"""
    pass

  @staticmethod
  def create_temp(prefix:str= __core__.String.new0(), keep:bool=False)->__diraccess__.DirAccess:
    """
				Creates a temporary directory. This directory will be freed when the returned `DirAccess` is freed.
				If `prefix` is not empty, it will be prefixed to the directory name, separated by a `-`.
				If `keep` is `true`, the directory is not deleted when the returned `DirAccess` is freed.
				Returns `null` if opening the directory failed. You can use `get_open_error` to check the error that occurred.
			"""
    pass

  def list_dir_begin(self)->int:
    """
				Initializes the stream used to list all files and directories using the `get_next` function, closing the currently opened stream if needed. Once the stream has been processed, it should typically be closed with `list_dir_end`.
				Affected by `include_hidden` and `include_navigational`.
				**Note:** The order of files and directories returned by this method is not deterministic, and can vary between operating systems. If you want a list of all files or folders sorted alphabetically, use `get_files` or `get_directories`.
			"""
    pass

  def get_next(self)->str:
    """
				Returns the next element (file or directory) in the current directory.
				The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty `String` and closes the stream automatically (i.e. `list_dir_end` would not be mandatory in such a case).
			"""
    pass

  def current_is_dir(self)->bool:
    """
				Returns whether the current item processed with the last `get_next` call is a directory (`.` and `..` are considered directories).
			"""
    pass

  def list_dir_end(self)->None:
    """
				Closes the current stream opened with `list_dir_begin` (whether it has been fully processed with `get_next` does not matter).
			"""
    pass

  def get_files(self)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` containing filenames of the directory contents, excluding directories. The array is sorted alphabetically.
				Affected by `include_hidden`.
				**Note:** When used on a `res://` path in an exported project, only the files actually included in the PCK at the given folder level are returned. In practice, this means that since imported resources are stored in a top-level `.godot/` folder, only paths to `*.gd` and `*.import` files are returned (plus a few files such as `project.godot` or `project.binary` and the project icon). In an exported project, the list of returned files will also vary depending on whether `ProjectSettings.editor/export/convert_text_resources_to_binary` is `true`.
			"""
    pass

  @staticmethod
  def get_files_at(path:str)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` containing filenames of the directory contents, excluding directories, at the given `path`. The array is sorted alphabetically.
				Use `get_files` if you want more control of what gets included.
				**Note:** When used on a `res://` path in an exported project, only the files included in the PCK at the given folder level are returned. In practice, this means that since imported resources are stored in a top-level `.godot/` folder, only paths to `.gd` and `.import` files are returned (plus a few other files, such as `project.godot` or `project.binary` and the project icon). In an exported project, the list of returned files will also vary depending on `ProjectSettings.editor/export/convert_text_resources_to_binary`.
			"""
    pass

  def get_directories(self)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` containing filenames of the directory contents, excluding files. The array is sorted alphabetically.
				Affected by `include_hidden` and `include_navigational`.
				**Note:** The returned directories in the editor and after exporting in the `res://` directory may differ as some files are converted to engine-specific formats when exported.
			"""
    pass

  @staticmethod
  def get_directories_at(path:str)->__core__.PackedStringArray:
    """
				Returns a `PackedStringArray` containing filenames of the directory contents, excluding files, at the given `path`. The array is sorted alphabetically.
				Use `get_directories` if you want more control of what gets included.
				**Note:** The returned directories in the editor and after exporting in the `res://` directory may differ as some files are converted to engine-specific formats when exported.
			"""
    pass

  @staticmethod
  def get_drive_count()->int:
    """
				On Windows, returns the number of drives (partitions) mounted on the current filesystem.
				On macOS, returns the number of mounted volumes.
				On Linux, returns the number of mounted volumes and GTK 3 bookmarks.
				On other platforms, the method returns 0.
			"""
    pass

  @staticmethod
  def get_drive_name(idx:int)->str:
    """
				On Windows, returns the name of the drive (partition) passed as an argument (e.g. `C:`).
				On macOS, returns the path to the mounted volume passed as an argument.
				On Linux, returns the path to the mounted volume or GTK 3 bookmark passed as an argument.
				On other platforms, or if the requested drive does not exist, the method returns an empty String.
			"""
    pass

  def get_current_drive(self)->int:
    """
				Returns the currently opened directory's drive index. See `get_drive_name` to convert returned index to the name of the drive.
			"""
    pass

  def change_dir(self, to_dir:str)->int:
    """
				Changes the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. `newdir` or `../newdir`), or an absolute path (e.g. `/tmp/newdir` or `res://somedir/newdir`).
				Returns one of the `enum Error` code constants (`constant OK` on success).
				**Note:** The new directory must be within the same scope, e.g. when you had opened a directory inside `res://`, you can't change it to `user://` directory. If you need to open a directory in another access scope, use `open` to create a new instance instead.
			"""
    pass

  def get_current_dir(self, include_drive:bool=True)->str:
    """
				Returns the absolute path to the currently opened directory (e.g. `res://folder` or `C:\tmp\folder`).
			"""
    pass

  def make_dir(self, path:str)->int:
    """
				Creates a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see `make_dir_recursive`).
				Returns one of the `enum Error` code constants (`constant OK` on success).
			"""
    pass

  @staticmethod
  def make_dir_absolute(path:str)->int:
    """
				Static version of `make_dir`. Supports only absolute paths.
			"""
    pass

  def make_dir_recursive(self, path:str)->int:
    """
				Creates a target directory and all necessary intermediate directories in its path, by calling `make_dir` recursively. The argument can be relative to the current directory, or an absolute path.
				Returns one of the `enum Error` code constants (`constant OK` on success).
			"""
    pass

  @staticmethod
  def make_dir_recursive_absolute(path:str)->int:
    """
				Static version of `make_dir_recursive`. Supports only absolute paths.
			"""
    pass

  def file_exists(self, path:str)->bool:
    """
				Returns whether the target file exists. The argument can be relative to the current directory, or an absolute path.
				For a static equivalent, use `FileAccess.file_exists`.
				**Note:** Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See `ResourceLoader.exists` for an alternative approach that takes resource remapping into account.
			"""
    pass

  def dir_exists(self, path:str)->bool:
    """
				Returns whether the target directory exists. The argument can be relative to the current directory, or an absolute path.
				**Note:** The returned `bool` in the editor and after exporting when used on a path in the `res://` directory may be different. Some files are converted to engine-specific formats when exported, potentially changing the directory structure.
			"""
    pass

  @staticmethod
  def dir_exists_absolute(path:str)->bool:
    """
				Static version of `dir_exists`. Supports only absolute paths.
				**Note:** The returned `bool` in the editor and after exporting when used on a path in the `res://` directory may be different. Some files are converted to engine-specific formats when exported, potentially changing the directory structure.
			"""
    pass

  def get_space_left(self)->int:
    """
				Returns the available space on the current directory's disk, in bytes. Returns `0` if the platform-specific method to query the available space fails.
			"""
    pass

  def copy(self, from_:str, to:str, chmod_flags:int=-1)->int:
    """
				Copies the `from` file to the `to` destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
				If `chmod_flags` is different than `-1`, the Unix permissions for the destination path will be set to the provided value, if available on the current operating system.
				Returns one of the `enum Error` code constants (`constant OK` on success).
			"""
    pass

  @staticmethod
  def copy_absolute(from_:str, to:str, chmod_flags:int=-1)->int:
    """
				Static version of `copy`. Supports only absolute paths.
			"""
    pass

  def rename(self, from_:str, to:str)->int:
    """
				Renames (move) the `from` file or directory to the `to` destination. Both arguments should be paths to files or directories, either relative or absolute. If the destination file or directory exists and is not access-protected, it will be overwritten.
				Returns one of the `enum Error` code constants (`constant OK` on success).
			"""
    pass

  @staticmethod
  def rename_absolute(from_:str, to:str)->int:
    """
				Static version of `rename`. Supports only absolute paths.
			"""
    pass

  def remove(self, path:str)->int:
    """
				Permanently deletes the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.
				If you don't want to delete the file/directory permanently, use `OS.move_to_trash` instead.
				Returns one of the `enum Error` code constants (`constant OK` on success).
			"""
    pass

  @staticmethod
  def remove_absolute(path:str)->int:
    """
				Static version of `remove`. Supports only absolute paths.
			"""
    pass

  def is_link(self, path:str)->bool:
    """
				Returns `true` if the file or directory is a symbolic link, directory junction, or other reparse point.
				**Note:** This method is implemented on macOS, Linux, and Windows.
			"""
    pass

  def read_link(self, path:str)->str:
    """
				Returns target of the symbolic link.
				**Note:** This method is implemented on macOS, Linux, and Windows.
			"""
    pass

  def create_link(self, source:str, target:str)->int:
    """
				Creates symbolic link between files or folders.
				**Note:** On Windows, this method works only if the application is running with elevated privileges or Developer Mode is enabled.
				**Note:** This method is implemented on macOS, Linux, and Windows.
			"""
    pass

  def is_bundle(self, path:str)->bool:
    """
				Returns `true` if the directory is a macOS bundle.
				**Note:** This method is implemented on macOS.
			"""
    pass

  def set_include_navigational(self, enable:bool)->None:
    """"""
    pass

  def get_include_navigational(self)->bool:
    """"""
    pass

  def set_include_hidden(self, enable:bool)->None:
    """"""
    pass

  def get_include_hidden(self)->bool:
    """"""
    pass

  def is_case_sensitive(self, path:str)->bool:
    """
				Returns `true` if the file system or directory use case sensitive file names.
				**Note:** This method is implemented on macOS, Linux (for EXT4 and F2FS filesystems only) and Windows. On other platforms, it always returns `true`.
			"""
    pass


