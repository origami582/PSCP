from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonProfileHumanoid as __skeletonprofilehumanoid__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.SkeletonProfile as __skeletonprofile__


class TransformFlag:
  TRANSFORM_FLAG_POSITION:int = 1
  TRANSFORM_FLAG_ROTATION:int = 2
  TRANSFORM_FLAG_SCALE:int = 4
  TRANSFORM_FLAG_ALL:int = 7


class RetargetModifier3D(__skeletonmodifier3d__.SkeletonModifier3D):
  """
		Retrieves the pose (or global pose) relative to the parent Skeleton's rest in model space and transfers it to the child Skeleton.
		This modifier rewrites the pose of the child skeleton directly in the parent skeleton's update process. This means that it overwrites the mapped bone pose set in the normal process on the target skeleton. If you want to set the target skeleton bone pose after retargeting, you will need to add a `SkeletonModifier3D` child to the target skeleton and thereby modify the pose.
		**Note:** When the `use_global_pose` is enabled, even if it is an unmapped bone, it can cause visual problems because the global pose is applied ignoring the parent bone's pose **if it has mapped bone children**. See also `use_global_pose`.
	"""

  @staticmethod
  def constructor()->RetargetModifier3D:pass



  @staticmethod
  def cast(other:__object__.Object)->RetargetModifier3D:pass


  @property
  def profile(self)->__skeletonprofilehumanoid__.SkeletonProfileHumanoid|__skeletonprofile__.SkeletonProfile:
    """"""
    pass
  @profile.setter
  def profile(self,  value:__skeletonprofile__.SkeletonProfile)->None:
    """"""
    pass
  @property
  def use_global_pose(self)->bool:
    """"""
    pass
  @use_global_pose.setter
  def use_global_pose(self,  value:bool)->None:
    """"""
    pass
  @property
  def enable(self)->int:
    """"""
    pass
  @enable.setter
  def enable(self,  value:int)->None:
    """"""
    pass
  def set_profile(self, profile:__skeletonprofile__.SkeletonProfile)->None:
    """"""
    pass

  def get_profile(self)->__skeletonprofilehumanoid__.SkeletonProfileHumanoid|__skeletonprofile__.SkeletonProfile:
    """"""
    pass

  def set_use_global_pose(self, use_global_pose:bool)->None:
    """"""
    pass

  def is_using_global_pose(self)->bool:
    """"""
    pass

  def set_enable_flags(self, enable_flags:int)->None:
    """"""
    pass

  def get_enable_flags(self)->int:
    """"""
    pass

  def set_position_enabled(self, enabled:bool)->None:
    """
				Sets `constant TRANSFORM_FLAG_POSITION` into `enable`.
			"""
    pass

  def is_position_enabled(self)->bool:
    """
				Returns `true` if `enable` has `constant TRANSFORM_FLAG_POSITION`.
			"""
    pass

  def set_rotation_enabled(self, enabled:bool)->None:
    """
				Sets `constant TRANSFORM_FLAG_ROTATION` into `enable`.
			"""
    pass

  def is_rotation_enabled(self)->bool:
    """
				Returns `true` if `enable` has `constant TRANSFORM_FLAG_ROTATION`.
			"""
    pass

  def set_scale_enabled(self, enabled:bool)->None:
    """
				Sets `constant TRANSFORM_FLAG_SCALE` into `enable`.
			"""
    pass

  def is_scale_enabled(self)->bool:
    """
				Returns `true` if `enable` has `constant TRANSFORM_FLAG_SCALE`.
			"""
    pass


