from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.I as __i__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.p as __p__
import py4godot.classes.D as __d__
import py4godot.classes.R as __r__
import py4godot.classes.r as __r__
import py4godot.classes.PhysicsRayQueryParameters2D as __physicsrayqueryparameters2d__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__



class PhysicsRayQueryParameters2D(__refcounted__.RefCounted):
  """
		By changing various properties of this object, such as the ray position, you can configure the parameters for `PhysicsDirectSpaceState2D.intersect_ray`.
	"""

  @staticmethod
  def constructor()->PhysicsRayQueryParameters2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsRayQueryParameters2D:pass


  @property
  def from_(self)->__core__.Vector2:
    """"""
    pass
  @from_.setter
  def from_(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def to(self)->__core__.Vector2:
    """"""
    pass
  @to.setter
  def to(self,  value:__core__.Vector2)->None:
    """"""
    pass
  @property
  def collision_mask(self)->int:
    """"""
    pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def exclude(self)->typedarray::RID:
    """"""
    pass
  @exclude.setter
  def exclude(self,  value:__core__.Array)->None:
    """"""
    pass
  @property
  def collide_with_bodies(self)->bool:
    """"""
    pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None:
    """"""
    pass
  @property
  def collide_with_areas(self)->bool:
    """"""
    pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None:
    """"""
    pass
  @property
  def hit_from_inside(self)->bool:
    """"""
    pass
  @hit_from_inside.setter
  def hit_from_inside(self,  value:bool)->None:
    """"""
    pass
  @staticmethod
  def create(from_:__core__.Vector2, to:__core__.Vector2, collision_mask:int=4294967295, exclude:__core__.Array=Array[RID]([]))->__physicsrayqueryparameters2d__.PhysicsRayQueryParameters2D:
    """
				Returns a new, pre-configured `PhysicsRayQueryParameters2D` object. Use it to quickly create query parameters using the most common options.
				```gdscript
				var query = PhysicsRayQueryParameters2D.create(global_position, global_position + Vector2(0, 100))
				var collision = get_world_2d().direct_space_state.intersect_ray(query)
				```
			"""
    pass

  def set_from(self, from_:__core__.Vector2)->None:
    """"""
    pass

  def get_from(self)->__core__.Vector2:
    """"""
    pass

  def set_to(self, to:__core__.Vector2)->None:
    """"""
    pass

  def get_to(self)->__core__.Vector2:
    """"""
    pass

  def set_collision_mask(self, collision_mask:int)->None:
    """"""
    pass

  def get_collision_mask(self)->int:
    """"""
    pass

  def set_exclude(self, exclude:__core__.Array)->None:
    """"""
    pass

  def get_exclude(self)->typedarray::RID:
    """"""
    pass

  def set_collide_with_bodies(self, enable:bool)->None:
    """"""
    pass

  def is_collide_with_bodies_enabled(self)->bool:
    """"""
    pass

  def set_collide_with_areas(self, enable:bool)->None:
    """"""
    pass

  def is_collide_with_areas_enabled(self)->bool:
    """"""
    pass

  def set_hit_from_inside(self, enable:bool)->None:
    """"""
    pass

  def is_hit_from_inside_enabled(self)->bool:
    """"""
    pass


