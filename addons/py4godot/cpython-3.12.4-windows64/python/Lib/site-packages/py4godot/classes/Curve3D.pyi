from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__



class Curve3D(__resource__.Resource):
  """
		This class describes a BÃ©zier curve in 3D space. It is mainly used to give a shape to a `Path3D`, but can be manually sampled for other purposes.
		It keeps a cache of precalculated points along the curve, to speed up further calculations.
	"""

  @staticmethod
  def constructor()->Curve3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Curve3D:pass


  @property
  def closed(self)->bool:
    """"""
    pass
  @closed.setter
  def closed(self,  value:bool)->None:
    """"""
    pass
  @property
  def bake_interval(self)->float:
    """"""
    pass
  @bake_interval.setter
  def bake_interval(self,  value:float)->None:
    """"""
    pass
  @property
  def point_count(self)->int:
    """"""
    pass
  @point_count.setter
  def point_count(self,  value:int)->None:
    """"""
    pass
  @property
  def up_vector_enabled(self)->bool:
    """"""
    pass
  @up_vector_enabled.setter
  def up_vector_enabled(self,  value:bool)->None:
    """"""
    pass
  def get_point_count(self)->int:
    """"""
    pass

  def set_point_count(self, count:int)->None:
    """"""
    pass

  def add_point(self, position:__core__.Vector3, in_:__core__.Vector3= __core__.Vector3.new0(), out:__core__.Vector3= __core__.Vector3.new0(), index:int=-1)->None:
    """
				Adds a point with the specified `position` relative to the curve's own position, with control points `in` and `out`. Appends the new point at the end of the point list.
				If `index` is given, the new point is inserted before the existing point identified by index `index`. Every existing point starting from `index` is shifted further down the list of points. The index must be greater than or equal to `0` and must not exceed the number of existing points in the line. See `point_count`.
			"""
    pass

  def set_point_position(self, idx:int, position:__core__.Vector3)->None:
    """
				Sets the position for the vertex `idx`. If the index is out of bounds, the function sends an error to the console.
			"""
    pass

  def get_point_position(self, idx:int)->__core__.Vector3:
    """
				Returns the position of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			"""
    pass

  def set_point_tilt(self, idx:int, tilt:float)->None:
    """
				Sets the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console.
				The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a `PathFollow3D`, this tilt is an offset over the natural tilt the `PathFollow3D` calculates.
			"""
    pass

  def get_point_tilt(self, idx:int)->float:
    """
				Returns the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console, and returns `0`.
			"""
    pass

  def set_point_in(self, idx:int, position:__core__.Vector3)->None:
    """
				Sets the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.
			"""
    pass

  def get_point_in(self, idx:int)->__core__.Vector3:
    """
				Returns the position of the control point leading to the vertex `idx`. The returned position is relative to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			"""
    pass

  def set_point_out(self, idx:int, position:__core__.Vector3)->None:
    """
				Sets the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.
			"""
    pass

  def get_point_out(self, idx:int)->__core__.Vector3:
    """
				Returns the position of the control point leading out of the vertex `idx`. The returned position is relative to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			"""
    pass

  def remove_point(self, idx:int)->None:
    """
				Deletes the point `idx` from the curve. Sends an error to the console if `idx` is out of bounds.
			"""
    pass

  def clear_points(self)->None:
    """
				Removes all points from the curve.
			"""
    pass

  def sample(self, idx:int, t:float)->__core__.Vector3:
    """
				Returns the position between the vertex `idx` and the vertex `idx + 1`, where `t` controls if the point is the first vertex (`t = 0.0`), the last vertex (`t = 1.0`), or in between. Values of `t` outside the range (`0.0 >= t <=1`) give strange, but predictable results.
				If `idx` is out of bounds it is truncated to the first or last vertex, and `t` is ignored. If the curve has no points, the function sends an error to the console, and returns `(0, 0, 0)`.
			"""
    pass

  def samplef(self, fofs:float)->__core__.Vector3:
    """
				Returns the position at the vertex `fofs`. It calls `sample` using the integer part of `fofs` as `idx`, and its fractional part as `t`.
			"""
    pass

  def set_closed(self, closed:bool)->None:
    """"""
    pass

  def is_closed(self)->bool:
    """"""
    pass

  def set_bake_interval(self, distance:float)->None:
    """"""
    pass

  def get_bake_interval(self)->float:
    """"""
    pass

  def set_up_vector_enabled(self, enable:bool)->None:
    """"""
    pass

  def is_up_vector_enabled(self)->bool:
    """"""
    pass

  def get_baked_length(self)->float:
    """
				Returns the total length of the curve, based on the cached points. Given enough density (see `bake_interval`), it should be approximate enough.
			"""
    pass

  def sample_baked(self, offset:float=0.0, cubic:bool=False)->__core__.Vector3:
    """
				Returns a point within the curve at position `offset`, where `offset` is measured as a distance in 3D units along the curve. To do that, it finds the two cached points where the `offset` lies between, then interpolates the values. This interpolation is cubic if `cubic` is set to `true`, or linear if set to `false`.
				Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
			"""
    pass

  def sample_baked_with_rotation(self, offset:float=0.0, cubic:bool=False, apply_tilt:bool=False)->__core__.Transform3D:
    """
				Returns a `Transform3D` with `origin` as point position, `basis.x` as sideway vector, `basis.y` as up vector, `basis.z` as forward vector. When the curve length is 0, there is no reasonable way to calculate the rotation, all vectors aligned with global space axes. See also `sample_baked`.
			"""
    pass

  def sample_baked_up_vector(self, offset:float, apply_tilt:bool=False)->__core__.Vector3:
    """
				Returns an up vector within the curve at position `offset`, where `offset` is measured as a distance in 3D units along the curve. To do that, it finds the two cached up vectors where the `offset` lies between, then interpolates the values. If `apply_tilt` is `true`, an interpolated tilt is applied to the interpolated up vector.
				If the curve has no up vectors, the function sends an error to the console, and returns `(0, 1, 0)`.
			"""
    pass

  def get_baked_points(self)->__core__.PackedVector3Array:
    """
				Returns the cache of points as a `PackedVector3Array`.
			"""
    pass

  def get_baked_tilts(self)->__core__.PackedFloat32Array:
    """
				Returns the cache of tilts as a `PackedFloat32Array`.
			"""
    pass

  def get_baked_up_vectors(self)->__core__.PackedVector3Array:
    """
				Returns the cache of up vectors as a `PackedVector3Array`.
				If `up_vector_enabled` is `false`, the cache will be empty.
			"""
    pass

  def get_closest_point(self, to_point:__core__.Vector3)->__core__.Vector3:
    """
				Returns the closest point on baked segments (in curve's local space) to `to_point`.
				`to_point` must be in this curve's local space.
			"""
    pass

  def get_closest_offset(self, to_point:__core__.Vector3)->float:
    """
				Returns the closest offset to `to_point`. This offset is meant to be used in `sample_baked` or `sample_baked_up_vector`.
				`to_point` must be in this curve's local space.
			"""
    pass

  def tessellate(self, max_stages:int=5, tolerance_degrees:float=4)->__core__.PackedVector3Array:
    """
				Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.
				This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.
				`max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
				`tolerance_degrees` controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.
			"""
    pass

  def tessellate_even_length(self, max_stages:int=5, tolerance_length:float=0.2)->__core__.PackedVector3Array:
    """
				Returns a list of points along the curve, with almost uniform density. `max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
				`tolerance_length` controls the maximal distance between two neighboring points, before the segment has to be subdivided.
			"""
    pass


