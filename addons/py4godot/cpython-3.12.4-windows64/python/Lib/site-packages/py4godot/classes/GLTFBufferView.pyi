from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GLTFState as __gltfstate__
import py4godot.classes.Resource as __resource__



class GLTFBufferView(__resource__.Resource):
  """"""

  @staticmethod
  def constructor()->GLTFBufferView:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFBufferView:pass


  @property
  def buffer(self)->int:
    """"""
    pass
  @buffer.setter
  def buffer(self,  value:int)->None:
    """"""
    pass
  @property
  def byte_offset(self)->int:
    """"""
    pass
  @byte_offset.setter
  def byte_offset(self,  value:int)->None:
    """"""
    pass
  @property
  def byte_length(self)->int:
    """"""
    pass
  @byte_length.setter
  def byte_length(self,  value:int)->None:
    """"""
    pass
  @property
  def byte_stride(self)->int:
    """"""
    pass
  @byte_stride.setter
  def byte_stride(self,  value:int)->None:
    """"""
    pass
  @property
  def indices(self)->bool:
    """"""
    pass
  @indices.setter
  def indices(self,  value:bool)->None:
    """"""
    pass
  @property
  def vertex_attributes(self)->bool:
    """"""
    pass
  @vertex_attributes.setter
  def vertex_attributes(self,  value:bool)->None:
    """"""
    pass
  def load_buffer_view_data(self, state:__gltfstate__.GLTFState)->__core__.PackedByteArray:
    """"""
    pass

  def get_buffer(self)->int:
    """"""
    pass

  def set_buffer(self, buffer:int)->None:
    """"""
    pass

  def get_byte_offset(self)->int:
    """"""
    pass

  def set_byte_offset(self, byte_offset:int)->None:
    """"""
    pass

  def get_byte_length(self)->int:
    """"""
    pass

  def set_byte_length(self, byte_length:int)->None:
    """"""
    pass

  def get_byte_stride(self)->int:
    """"""
    pass

  def set_byte_stride(self, byte_stride:int)->None:
    """"""
    pass

  def get_indices(self)->bool:
    """"""
    pass

  def set_indices(self, indices:bool)->None:
    """"""
    pass

  def get_vertex_attributes(self)->bool:
    """"""
    pass

  def set_vertex_attributes(self, is_attributes:bool)->None:
    """"""
    pass


