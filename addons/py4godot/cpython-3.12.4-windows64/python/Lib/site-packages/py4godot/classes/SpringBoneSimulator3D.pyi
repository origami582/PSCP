from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.Curve as __curve__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__


class BoneDirection:
  BONE_DIRECTION_PLUS_X:int = 0
  BONE_DIRECTION_MINUS_X:int = 1
  BONE_DIRECTION_PLUS_Y:int = 2
  BONE_DIRECTION_MINUS_Y:int = 3
  BONE_DIRECTION_PLUS_Z:int = 4
  BONE_DIRECTION_MINUS_Z:int = 5
  BONE_DIRECTION_FROM_PARENT:int = 6
class CenterFrom:
  CENTER_FROM_WORLD_ORIGIN:int = 0
  CENTER_FROM_NODE:int = 1
  CENTER_FROM_BONE:int = 2
class RotationAxis:
  ROTATION_AXIS_X:int = 0
  ROTATION_AXIS_Y:int = 1
  ROTATION_AXIS_Z:int = 2
  ROTATION_AXIS_ALL:int = 3


class SpringBoneSimulator3D(__skeletonmodifier3d__.SkeletonModifier3D):
  """
		This `SkeletonModifier3D` can be used to wiggle hair, cloth, and tails. This modifier behaves differently from `PhysicalBoneSimulator3D` as it attempts to return the original pose after modification.
		If you setup `set_root_bone` and `set_end_bone`, it is treated as one bone chain. Note that it does not support a branched chain like Y-shaped chains.
		When a bone chain is created, an array is generated from the bones that exist in between and listed in the joint list.
		Several properties can be applied to each joint, such as `set_joint_stiffness`, `set_joint_drag`, and `set_joint_gravity`.
		For simplicity, you can set values to all joints at the same time by using a `Curve`. If you want to specify detailed values individually, set `set_individual_config` to `true`.
		For physical simulation, `SpringBoneSimulator3D` can have children as self-standing collisions that are not related to `PhysicsServer3D`, see also `SpringBoneCollision3D`.
		**Warning:** A scaled `SpringBoneSimulator3D` will likely not behave as expected. Make sure that the parent `Skeleton3D` and its bones are not scaled.
	"""

  @staticmethod
  def constructor()->SpringBoneSimulator3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpringBoneSimulator3D:pass


  @property
  def setting_count(self)->int:
    """"""
    pass
  @setting_count.setter
  def setting_count(self,  value:int)->None:
    """"""
    pass
  def set_root_bone_name(self, index:int, bone_name:str)->None:
    """
				Sets the root bone name of the bone chain.
			"""
    pass

  def get_root_bone_name(self, index:int)->str:
    """
				Returns the root bone name of the bone chain.
			"""
    pass

  def set_root_bone(self, index:int, bone:int)->None:
    """
				Sets the root bone index of the bone chain.
			"""
    pass

  def get_root_bone(self, index:int)->int:
    """
				Returns the root bone index of the bone chain.
			"""
    pass

  def set_end_bone_name(self, index:int, bone_name:str)->None:
    """
				Sets the end bone name of the bone chain.
				**Note:** End bone must be the root bone or a child of the root bone. If they are the same, the tail must be extended by `set_extend_end_bone` to jiggle the bone.
			"""
    pass

  def get_end_bone_name(self, index:int)->str:
    """
				Returns the end bone name of the bone chain.
			"""
    pass

  def set_end_bone(self, index:int, bone:int)->None:
    """
				Sets the end bone index of the bone chain.
			"""
    pass

  def get_end_bone(self, index:int)->int:
    """
				Returns the end bone index of the bone chain.
			"""
    pass

  def set_extend_end_bone(self, index:int, enabled:bool)->None:
    """
				If `enabled` is `true`, the end bone is extended to have the tail.
				The extended tail config is allocated to the last element in the joint list.
				In other words, if you set `enabled` is `false`, the config of last element in the joint list has no effect in the simulated result.
			"""
    pass

  def is_end_bone_extended(self, index:int)->bool:
    """
				Returns `true` if the end bone is extended to have the tail.
			"""
    pass

  def set_end_bone_direction(self, index:int, bone_direction:int )->None:
    """
				Sets the end bone tail direction of the bone chain when `is_end_bone_extended` is `true`.
			"""
    pass

  def get_end_bone_direction(self, index:int)->int:
    """
				Returns the end bone's tail direction of the bone chain when `is_end_bone_extended` is `true`.
			"""
    pass

  def set_end_bone_length(self, index:int, length:float)->None:
    """
				Sets the end bone tail length of the bone chain when `is_end_bone_extended` is `true`.
			"""
    pass

  def get_end_bone_length(self, index:int)->float:
    """
				Returns the end bone's tail length of the bone chain when `is_end_bone_extended` is `true`.
			"""
    pass

  def set_center_from(self, index:int, center_from:int )->None:
    """
				Sets what the center originates from in the bone chain.
				Bone movement is calculated based on the difference in relative distance between center and bone in the previous and next frames.
				For example, if the parent `Skeleton3D` is used as the center, the bones are considered to have not moved if the `Skeleton3D` moves in the world.
				In this case, only a change in the bone pose is considered to be a bone movement.
			"""
    pass

  def get_center_from(self, index:int)->int:
    """
				Returns what the center originates from in the bone chain.
			"""
    pass

  def set_center_node(self, index:int, node_path:__core__.NodePath|str)->None:
    """
				Sets the center node path of the bone chain.
			"""
    pass

  def get_center_node(self, index:int)->__core__.NodePath:
    """
				Returns the center node path of the bone chain.
			"""
    pass

  def set_center_bone_name(self, index:int, bone_name:str)->None:
    """
				Sets the center bone name of the bone chain.
			"""
    pass

  def get_center_bone_name(self, index:int)->str:
    """
				Returns the center bone name of the bone chain.
			"""
    pass

  def set_center_bone(self, index:int, bone:int)->None:
    """
				Sets the center bone index of the bone chain.
			"""
    pass

  def get_center_bone(self, index:int)->int:
    """
				Returns the center bone index of the bone chain.
			"""
    pass

  def set_radius(self, index:int, radius:float)->None:
    """
				Sets the joint radius of the bone chain. It is used to move and slide with the `SpringBoneCollision3D` in the collision list.
				The value is scaled by `set_radius_damping_curve` and cached in each joint setting in the joint list.
			"""
    pass

  def get_radius(self, index:int)->float:
    """
				Returns the joint radius of the bone chain.
			"""
    pass

  def set_rotation_axis(self, index:int, axis:int )->None:
    """
				Sets the rotation axis of the bone chain. If set to a specific axis, it acts like a hinge joint. The value is cached in each joint setting in the joint list.
				The axes are based on the `Skeleton3D.get_bone_rest`'s space, if `axis` is `constant ROTATION_AXIS_CUSTOM`, you can specify any axis.
				**Note:** The rotation axis vector and the forward vector shouldn't be colinear to avoid unintended rotation since `SpringBoneSimulator3D` does not factor in twisting forces.
			"""
    pass

  def get_rotation_axis(self, index:int)->int:
    """
				Returns the rotation axis of the bone chain.
			"""
    pass

  def set_radius_damping_curve(self, index:int, curve:__curve__.Curve)->None:
    """
				Sets the joint radius damping curve of the bone chain.
			"""
    pass

  def get_radius_damping_curve(self, index:int)->__curve__.Curve:
    """
				Returns the joint radius damping curve of the bone chain.
			"""
    pass

  def set_stiffness(self, index:int, stiffness:float)->None:
    """
				Sets the stiffness force of the bone chain. The greater the value, the faster it recovers to its initial pose.
				If `stiffness` is `0`, the modified pose will not return to the original pose.
				The value is scaled by `set_stiffness_damping_curve` and cached in each joint setting in the joint list.
			"""
    pass

  def get_stiffness(self, index:int)->float:
    """
				Returns the stiffness force of the bone chain.
			"""
    pass

  def set_stiffness_damping_curve(self, index:int, curve:__curve__.Curve)->None:
    """
				Sets the stiffness force damping curve of the bone chain.
			"""
    pass

  def get_stiffness_damping_curve(self, index:int)->__curve__.Curve:
    """
				Returns the stiffness force damping curve of the bone chain.
			"""
    pass

  def set_drag(self, index:int, drag:float)->None:
    """
				Sets the drag force of the bone chain. The greater the value, the more suppressed the wiggling.
				The value is scaled by `set_drag_damping_curve` and cached in each joint setting in the joint list.
			"""
    pass

  def get_drag(self, index:int)->float:
    """
				Returns the drag force damping curve of the bone chain.
			"""
    pass

  def set_drag_damping_curve(self, index:int, curve:__curve__.Curve)->None:
    """
				Sets the drag force damping curve of the bone chain.
			"""
    pass

  def get_drag_damping_curve(self, index:int)->__curve__.Curve:
    """
				Returns the drag force damping curve of the bone chain.
			"""
    pass

  def set_gravity(self, index:int, gravity:float)->None:
    """
				Sets the gravity amount of the bone chain. This value is not an acceleration, but a constant velocity of movement in `set_gravity_direction`.
				If `gravity` is not `0`, the modified pose will not return to the original pose since it is always affected by gravity.
				The value is scaled by `set_gravity_damping_curve` and cached in each joint setting in the joint list.
			"""
    pass

  def get_gravity(self, index:int)->float:
    """
				Returns the gravity amount of the bone chain.
			"""
    pass

  def set_gravity_damping_curve(self, index:int, curve:__curve__.Curve)->None:
    """
				Sets the gravity amount damping curve of the bone chain.
			"""
    pass

  def get_gravity_damping_curve(self, index:int)->__curve__.Curve:
    """
				Returns the gravity amount damping curve of the bone chain.
			"""
    pass

  def set_gravity_direction(self, index:int, gravity_direction:__core__.Vector3)->None:
    """
				Sets the gravity direction of the bone chain. This value is internally normalized and then multiplied by `set_gravity`.
				The value is cached in each joint setting in the joint list.
			"""
    pass

  def get_gravity_direction(self, index:int)->__core__.Vector3:
    """
				Returns the gravity direction of the bone chain.
			"""
    pass

  def set_setting_count(self, count:int)->None:
    """"""
    pass

  def get_setting_count(self)->int:
    """"""
    pass

  def clear_settings(self)->None:
    """
				Clears all settings.
			"""
    pass

  def set_individual_config(self, index:int, enabled:bool)->None:
    """
				If `enabled` is `true`, the config can be edited individually for each joint.
			"""
    pass

  def is_config_individual(self, index:int)->bool:
    """
				Returns `true` if the config can be edited individually for each joint.
			"""
    pass

  def get_joint_bone_name(self, index:int, joint:int)->str:
    """
				Returns the bone name at `joint` in the bone chain's joint list.
			"""
    pass

  def get_joint_bone(self, index:int, joint:int)->int:
    """
				Returns the bone index at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_rotation_axis(self, index:int, joint:int, axis:int )->None:
    """
				Sets the rotation axis at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
				The axes are based on the `Skeleton3D.get_bone_rest`'s space, if `axis` is `constant ROTATION_AXIS_CUSTOM`, you can specify any axis.
				**Note:** The rotation axis and the forward vector shouldn't be colinear to avoid unintended rotation since `SpringBoneSimulator3D` does not factor in twisting forces.
			"""
    pass

  def get_joint_rotation_axis(self, index:int, joint:int)->int:
    """
				Returns the rotation axis at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_radius(self, index:int, joint:int, radius:float)->None:
    """
				Sets the joint radius at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
			"""
    pass

  def get_joint_radius(self, index:int, joint:int)->float:
    """
				Returns the radius at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_stiffness(self, index:int, joint:int, stiffness:float)->None:
    """
				Sets the stiffness force at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
			"""
    pass

  def get_joint_stiffness(self, index:int, joint:int)->float:
    """
				Returns the stiffness force at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_drag(self, index:int, joint:int, drag:float)->None:
    """
				Sets the drag force at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
			"""
    pass

  def get_joint_drag(self, index:int, joint:int)->float:
    """
				Returns the drag force at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_gravity(self, index:int, joint:int, gravity:float)->None:
    """
				Sets the gravity amount at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
			"""
    pass

  def get_joint_gravity(self, index:int, joint:int)->float:
    """
				Returns the gravity amount at `joint` in the bone chain's joint list.
			"""
    pass

  def set_joint_gravity_direction(self, index:int, joint:int, gravity_direction:__core__.Vector3)->None:
    """
				Sets the gravity direction at `joint` in the bone chain's joint list when `is_config_individual` is `true`.
			"""
    pass

  def get_joint_gravity_direction(self, index:int, joint:int)->__core__.Vector3:
    """
				Returns the gravity direction at `joint` in the bone chain's joint list.
			"""
    pass

  def get_joint_count(self, index:int)->int:
    """
				Returns the joint count of the bone chain's joint list.
			"""
    pass

  def set_enable_all_child_collisions(self, index:int, enabled:bool)->None:
    """
				If `enabled` is `true`, all child `SpringBoneCollision3D`s are colliding and `set_exclude_collision_path` is enabled as an exclusion list at `index` in the settings.
				If `enabled` is `false`, you need to manually register all valid collisions with `set_collision_path`.
			"""
    pass

  def are_all_child_collisions_enabled(self, index:int)->bool:
    """
				Returns `true` if all child `SpringBoneCollision3D`s are contained in the collision list at `index` in the settings.
			"""
    pass

  def set_exclude_collision_path(self, index:int, collision:int, node_path:__core__.NodePath|str)->None:
    """
				Sets the node path of the `SpringBoneCollision3D` at `collision` in the bone chain's exclude collision list when `are_all_child_collisions_enabled` is `true`.
			"""
    pass

  def get_exclude_collision_path(self, index:int, collision:int)->__core__.NodePath:
    """
				Returns the node path of the `SpringBoneCollision3D` at `collision` in the bone chain's exclude collision list when `are_all_child_collisions_enabled` is `true`.
			"""
    pass

  def set_exclude_collision_count(self, index:int, count:int)->None:
    """
				Sets the number of exclude collisions in the exclude collision list at `index` in the settings when `are_all_child_collisions_enabled` is `true`.
			"""
    pass

  def get_exclude_collision_count(self, index:int)->int:
    """
				Returns the exclude collision count of the bone chain's exclude collision list when `are_all_child_collisions_enabled` is `true`.
			"""
    pass

  def clear_exclude_collisions(self, index:int)->None:
    """
				Clears all exclude collisions from the collision list at `index` in the settings when `are_all_child_collisions_enabled` is `true`.
			"""
    pass

  def set_collision_path(self, index:int, collision:int, node_path:__core__.NodePath|str)->None:
    """
				Sets the node path of the `SpringBoneCollision3D` at `collision` in the bone chain's collision list when `are_all_child_collisions_enabled` is `false`.
			"""
    pass

  def get_collision_path(self, index:int, collision:int)->__core__.NodePath:
    """
				Returns the node path of the `SpringBoneCollision3D` at `collision` in the bone chain's collision list when `are_all_child_collisions_enabled` is `false`.
			"""
    pass

  def set_collision_count(self, index:int, count:int)->None:
    """
				Sets the number of collisions in the collision list at `index` in the settings when `are_all_child_collisions_enabled` is `false`.
			"""
    pass

  def get_collision_count(self, index:int)->int:
    """
				Returns the collision count of the bone chain's collision list when `are_all_child_collisions_enabled` is `false`.
			"""
    pass

  def clear_collisions(self, index:int)->None:
    """
				Clears all collisions from the collision list at `index` in the settings when `are_all_child_collisions_enabled` is `false`.
			"""
    pass

  def reset(self)->None:
    """
				Resets a simulating state with respect to the current bone pose.
				It is useful to prevent the simulation result getting violent. For example, calling this immediately after a call to `AnimationPlayer.play` without a fading, or within the previous `signal SkeletonModifier3D.modification_processed` signal if it's condition changes significantly.
			"""
    pass


