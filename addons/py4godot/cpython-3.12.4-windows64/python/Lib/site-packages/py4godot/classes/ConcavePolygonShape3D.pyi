from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape3D as __shape3d__



class ConcavePolygonShape3D(__shape3d__.Shape3D):
  """
		A 3D trimesh shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`.
		Being just a collection of interconnected triangles, `ConcavePolygonShape3D` is the most freely configurable single 3D shape. It can be used to form polyhedra of any nature, or even shapes that don't enclose a volume. However, `ConcavePolygonShape3D` is _hollow_ even if the interconnected triangles do enclose a volume, which often makes it unsuitable for physics or detection.
		**Note:** When used for collision, `ConcavePolygonShape3D` is intended to work with static `CollisionShape3D` nodes like `StaticBody3D` and will likely not behave well for `CharacterBody3D`s or `RigidBody3D`s in a mode other than Static.
		**Warning:** Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. `ConcavePolygonShape3D` is hollow, so it won't detect a collision.
		**Performance:** Due to its complexity, `ConcavePolygonShape3D` is the slowest 3D collision shape to check collisions against. Its use should generally be limited to level geometry. For convex geometry, `ConvexPolygonShape3D` should be used. For dynamic physics bodies that need concave collision, several `ConvexPolygonShape3D`s can be used to represent its collision by using convex decomposition; see `ConvexPolygonShape3D`'s documentation for instructions.
	"""

  @staticmethod
  def constructor()->ConcavePolygonShape3D:pass



  @staticmethod
  def cast(other:__object__.Object)->ConcavePolygonShape3D:pass


  @property
  def data(self)->__core__.PackedVector3Array:
    """"""
    pass
  @data.setter
  def data(self,  value:__core__.PackedVector3Array)->None:
    """"""
    pass
  @property
  def backface_collision(self)->bool:
    """"""
    pass
  @backface_collision.setter
  def backface_collision(self,  value:bool)->None:
    """"""
    pass
  def set_faces(self, faces:__core__.PackedVector3Array)->None:
    """
				Sets the faces of the trimesh shape from an array of vertices. The `faces` array should be composed of triples such that each triple of vertices defines a triangle.
			"""
    pass

  def get_faces(self)->__core__.PackedVector3Array:
    """
				Returns the faces of the trimesh shape as an array of vertices. The array (of length divisible by three) is naturally divided into triples; each triple of vertices defines a triangle.
			"""
    pass

  def set_backface_collision_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_backface_collision_enabled(self)->bool:
    """"""
    pass


