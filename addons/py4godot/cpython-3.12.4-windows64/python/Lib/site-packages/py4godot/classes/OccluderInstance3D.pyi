from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.SphereOccluder3D as __sphereoccluder3d__
import py4godot.classes.ArrayOccluder3D as __arrayoccluder3d__
import py4godot.classes.Occluder3D as __occluder3d__
import py4godot.classes.PolygonOccluder3D as __polygonoccluder3d__
import py4godot.classes.QuadOccluder3D as __quadoccluder3d__
import py4godot.classes.BoxOccluder3D as __boxoccluder3d__



class OccluderInstance3D(__visualinstance3d__.VisualInstance3D):
  """
		Occlusion culling can improve rendering performance in closed/semi-open areas by hiding geometry that is occluded by other objects.
		The occlusion culling system is mostly static. `OccluderInstance3D`s can be moved or hidden at run-time, but doing so will trigger a background recomputation that can take several frames. It is recommended to only move `OccluderInstance3D`s sporadically (e.g. for procedural generation purposes), rather than doing so every frame.
		The occlusion culling system works by rendering the occluders on the CPU in parallel using `url=https://www.embree.org/`Embree`/url`, drawing the result to a low-resolution buffer then using this to cull 3D nodes individually. In the 3D editor, you can preview the occlusion culling buffer by choosing **Perspective > Display Advanced... > Occlusion Culling Buffer** in the top-left corner of the 3D viewport. The occlusion culling buffer quality can be adjusted in the Project Settings.
		**Baking:** Select an `OccluderInstance3D` node, then use the **Bake Occluders** button at the top of the 3D editor. Only opaque materials will be taken into account; transparent materials (alpha-blended or alpha-tested) will be ignored by the occluder generation.
		**Note:** Occlusion culling is only effective if `ProjectSettings.rendering/occlusion_culling/use_occlusion_culling` is `true`. Enabling occlusion culling has a cost on the CPU. Only enable occlusion culling if you actually plan to use it. Large open scenes with few or no objects blocking the view will generally not benefit much from occlusion culling. Large open scenes generally benefit more from mesh LOD and visibility ranges (`GeometryInstance3D.visibility_range_begin` and `GeometryInstance3D.visibility_range_end`) compared to occlusion culling.
		**Note:** Due to memory constraints, occlusion culling is not supported by default in Web export templates. It can be enabled by compiling custom Web export templates with `module_raycast_enabled=yes`.
	"""

  @staticmethod
  def constructor()->OccluderInstance3D:pass



  @staticmethod
  def cast(other:__object__.Object)->OccluderInstance3D:pass


  @property
  def occluder(self)->__sphereoccluder3d__.SphereOccluder3D|__occluder3d__.Occluder3D|__polygonoccluder3d__.PolygonOccluder3D|__quadoccluder3d__.QuadOccluder3D|__arrayoccluder3d__.ArrayOccluder3D|__boxoccluder3d__.BoxOccluder3D:
    """"""
    pass
  @occluder.setter
  def occluder(self,  value:__occluder3d__.Occluder3D)->None:
    """"""
    pass
  @property
  def bake_mask(self)->int:
    """"""
    pass
  @bake_mask.setter
  def bake_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def bake_simplification_distance(self)->float:
    """"""
    pass
  @bake_simplification_distance.setter
  def bake_simplification_distance(self,  value:float)->None:
    """"""
    pass
  def set_bake_mask(self, mask:int)->None:
    """"""
    pass

  def get_bake_mask(self)->int:
    """"""
    pass

  def set_bake_mask_value(self, layer_number:int, value:bool)->None:
    """
				Based on `value`, enables or disables the specified layer in the `bake_mask`, given a `layer_number` between 1 and 32.
			"""
    pass

  def get_bake_mask_value(self, layer_number:int)->bool:
    """
				Returns whether or not the specified layer of the `bake_mask` is enabled, given a `layer_number` between 1 and 32.
			"""
    pass

  def set_bake_simplification_distance(self, simplification_distance:float)->None:
    """"""
    pass

  def get_bake_simplification_distance(self)->float:
    """"""
    pass

  def set_occluder(self, occluder:__occluder3d__.Occluder3D)->None:
    """"""
    pass

  def get_occluder(self)->__sphereoccluder3d__.SphereOccluder3D|__occluder3d__.Occluder3D|__polygonoccluder3d__.PolygonOccluder3D|__quadoccluder3d__.QuadOccluder3D|__arrayoccluder3d__.ArrayOccluder3D|__boxoccluder3d__.BoxOccluder3D:
    """"""
    pass


