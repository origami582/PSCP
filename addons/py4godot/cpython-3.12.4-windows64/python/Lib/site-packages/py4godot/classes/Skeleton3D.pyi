from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.T as __t__
import py4godot.classes.g as __g__
import py4godot.classes.Skin as __skin__
import py4godot.classes.i as __i__
import py4godot.classes.e as __e__
import py4godot.classes.SkinReference as __skinreference__
import py4godot.classes.m as __m__
import py4godot.classes.p as __p__
import py4godot.classes.N as __n__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.d as __d__
import py4godot.classes.r as __r__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.S as __s__
import py4godot.classes.Skeleton3D as __skeleton3d__


class ModifierCallbackModeProcess:
  MODIFIER_CALLBACK_MODE_PROCESS_PHYSICS:int = 0
  MODIFIER_CALLBACK_MODE_PROCESS_IDLE:int = 1


class Skeleton3D(__node3d__.Node3D):
  """
		`Skeleton3D` provides an interface for managing a hierarchy of bones, including pose, rest and animation (see `Animation`). It can also use ragdoll physics.
		The overall transform of a bone with respect to the skeleton is determined by bone pose. Bone rest defines the initial transform of the bone pose.
		Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it is not the actual global/world transform of the bone.
	"""
  rest_updated: BuiltinSignal
  pose_updated: BuiltinSignal
  skeleton_updated: BuiltinSignal
  bone_enabled_changed: BuiltinSignal
  bone_list_changed: BuiltinSignal
  show_rest_only_changed: BuiltinSignal

  @staticmethod
  def constructor()->Skeleton3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Skeleton3D:pass


  @property
  def motion_scale(self)->float:
    """"""
    pass
  @motion_scale.setter
  def motion_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def show_rest_only(self)->bool:
    """"""
    pass
  @show_rest_only.setter
  def show_rest_only(self,  value:bool)->None:
    """"""
    pass
  @property
  def modifier_callback_mode_process(self)->int:
    """"""
    pass
  @modifier_callback_mode_process.setter
  def modifier_callback_mode_process(self,  value:int)->None:
    """"""
    pass
  @property
  def animate_physical_bones(self)->bool:
    """"""
    pass
  @animate_physical_bones.setter
  def animate_physical_bones(self,  value:bool)->None:
    """"""
    pass
  def add_bone(self, name:str)->int:
    """
				Adds a new bone with the given name. Returns the new bone's index, or `-1` if this method fails.
				**Note:** Bone names should be unique, non empty, and cannot include the `:` and `/` characters.
			"""
    pass

  def find_bone(self, name:str)->int:
    """
				Returns the bone index that matches `name` as its name. Returns `-1` if no bone with this name exists.
			"""
    pass

  def get_bone_name(self, bone_idx:int)->str:
    """
				Returns the name of the bone at index `bone_idx`.
			"""
    pass

  def set_bone_name(self, bone_idx:int, name:str)->None:
    """
				Sets the bone name, `name`, for the bone at `bone_idx`.
			"""
    pass

  def get_bone_meta(self, bone_idx:int, key:__core__.StringName|str)->Any:
    """
				Returns the metadata for the bone at index `bone_idx` with `key`.
			"""
    pass

  def get_bone_meta_list(self, bone_idx:int)->typedarray::StringName:
    """
				Returns the list of all metadata keys for the bone at index `bone_idx`.
			"""
    pass

  def has_bone_meta(self, bone_idx:int, key:__core__.StringName|str)->bool:
    """
				Returns `true` if the bone at index `bone_idx` has metadata with the key `key`.
			"""
    pass

  def set_bone_meta(self, bone_idx:int, key:__core__.StringName|str, value:Any)->None:
    """
				Sets the metadata for the bone at index `bone_idx`, setting the `key` meta to `value`.
			"""
    pass

  def get_concatenated_bone_names(self)->__core__.StringName:
    """
				Returns all bone names concatenated with commas (`,`) as a single `StringName`.
				It is useful to set it as a hint for the enum property.
			"""
    pass

  def get_bone_parent(self, bone_idx:int)->int:
    """
				Returns the bone index which is the parent of the bone at `bone_idx`. If -1, then bone has no parent.
				**Note:** The parent bone returned will always be less than `bone_idx`.
			"""
    pass

  def set_bone_parent(self, bone_idx:int, parent_idx:int)->None:
    """
				Sets the bone index `parent_idx` as the parent of the bone at `bone_idx`. If -1, then bone has no parent.
				**Note:** `parent_idx` must be less than `bone_idx`.
			"""
    pass

  def get_bone_count(self)->int:
    """
				Returns the number of bones in the skeleton.
			"""
    pass

  def get_version(self)->int:
    """
				Returns the number of times the bone hierarchy has changed within this skeleton, including renames.
				The Skeleton version is not serialized: only use within a single instance of Skeleton3D.
				Use for invalidating caches in IK solvers and other nodes which process bones.
			"""
    pass

  def unparent_bone_and_rest(self, bone_idx:int)->None:
    """
				Unparents the bone at `bone_idx` and sets its rest position to that of its parent prior to being reset.
			"""
    pass

  def get_bone_children(self, bone_idx:int)->__core__.PackedInt32Array:
    """
				Returns an array containing the bone indexes of all the child node of the passed in bone, `bone_idx`.
			"""
    pass

  def get_parentless_bones(self)->__core__.PackedInt32Array:
    """
				Returns an array with all of the bones that are parentless. Another way to look at this is that it returns the indexes of all the bones that are not dependent or modified by other bones in the Skeleton.
			"""
    pass

  def get_bone_rest(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the rest transform for a bone `bone_idx`.
			"""
    pass

  def set_bone_rest(self, bone_idx:int, rest:__core__.Transform3D)->None:
    """
				Sets the rest transform for bone `bone_idx`.
			"""
    pass

  def get_bone_global_rest(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the global rest transform for `bone_idx`.
			"""
    pass

  def create_skin_from_rest_transforms(self)->__skin__.Skin:
    """
"""
    pass

  def register_skin(self, skin:__skin__.Skin)->__skinreference__.SkinReference:
    """
				Binds the given Skin to the Skeleton.
			"""
    pass

  def localize_rests(self)->None:
    """
				Returns all bones in the skeleton to their rest poses.
			"""
    pass

  def clear_bones(self)->None:
    """
				Clear all the bones in this skeleton.
			"""
    pass

  def get_bone_pose(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the pose transform of the specified bone.
				**Note:** This is the pose you set to the skeleton in the process, the final pose can get overridden by modifiers in the deferred process, if you want to access the final pose, use `signal SkeletonModifier3D.modification_processed`.
			"""
    pass

  def set_bone_pose(self, bone_idx:int, pose:__core__.Transform3D)->None:
    """
				Sets the pose transform, `pose`, for the bone at `bone_idx`.
			"""
    pass

  def set_bone_pose_position(self, bone_idx:int, position:__core__.Vector3)->None:
    """
				Sets the pose position of the bone at `bone_idx` to `position`. `position` is a `Vector3` describing a position local to the `Skeleton3D` node.
			"""
    pass

  def set_bone_pose_rotation(self, bone_idx:int, rotation:__core__.Quaternion)->None:
    """
				Sets the pose rotation of the bone at `bone_idx` to `rotation`. `rotation` is a `Quaternion` describing a rotation in the bone's local coordinate space with respect to the rotation of any parent bones.
			"""
    pass

  def set_bone_pose_scale(self, bone_idx:int, scale:__core__.Vector3)->None:
    """
				Sets the pose scale of the bone at `bone_idx` to `scale`.
			"""
    pass

  def get_bone_pose_position(self, bone_idx:int)->__core__.Vector3:
    """
				Returns the pose position of the bone at `bone_idx`. The returned `Vector3` is in the local coordinate space of the `Skeleton3D` node.
			"""
    pass

  def get_bone_pose_rotation(self, bone_idx:int)->__core__.Quaternion:
    """
				Returns the pose rotation of the bone at `bone_idx`. The returned `Quaternion` is local to the bone with respect to the rotation of any parent bones.
			"""
    pass

  def get_bone_pose_scale(self, bone_idx:int)->__core__.Vector3:
    """
				Returns the pose scale of the bone at `bone_idx`.
			"""
    pass

  def reset_bone_pose(self, bone_idx:int)->None:
    """
				Sets the bone pose to rest for `bone_idx`.
			"""
    pass

  def reset_bone_poses(self)->None:
    """
				Sets all bone poses to rests.
			"""
    pass

  def is_bone_enabled(self, bone_idx:int)->bool:
    """
				Returns whether the bone pose for the bone at `bone_idx` is enabled.
			"""
    pass

  def set_bone_enabled(self, bone_idx:int, enabled:bool=True)->None:
    """
				Disables the pose for the bone at `bone_idx` if `false`, enables the bone pose if `true`.
			"""
    pass

  def get_bone_global_pose(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.
				**Note:** This is the global pose you set to the skeleton in the process, the final global pose can get overridden by modifiers in the deferred process, if you want to access the final global pose, use `signal SkeletonModifier3D.modification_processed`.
			"""
    pass

  def set_bone_global_pose(self, bone_idx:int, pose:__core__.Transform3D)->None:
    """
				Sets the global pose transform, `pose`, for the bone at `bone_idx`.
				**Note:** If other bone poses have been changed, this method executes a dirty poses recalculation and will cause performance to deteriorate. If you know that multiple global poses will be applied, consider using `set_bone_pose` with precalculation.
			"""
    pass

  def force_update_all_bone_transforms(self)->None:
    """
				Force updates the bone transforms/poses for all bones in the skeleton.
			"""
    pass

  def force_update_bone_child_transform(self, bone_idx:int)->None:
    """
				Force updates the bone transform for the bone at `bone_idx` and all of its children.
			"""
    pass

  def set_motion_scale(self, motion_scale:float)->None:
    """"""
    pass

  def get_motion_scale(self)->float:
    """"""
    pass

  def set_show_rest_only(self, enabled:bool)->None:
    """"""
    pass

  def is_show_rest_only(self)->bool:
    """"""
    pass

  def set_modifier_callback_mode_process(self, mode:int )->None:
    """"""
    pass

  def get_modifier_callback_mode_process(self)->int:
    """"""
    pass

  def clear_bones_global_pose_override(self)->None:
    """
				Removes the global pose override on all bones in the skeleton.
			"""
    pass

  def set_bone_global_pose_override(self, bone_idx:int, pose:__core__.Transform3D, amount:float, persistent:bool=False)->None:
    """
				Sets the global pose transform, `pose`, for the bone at `bone_idx`.
				`amount` is the interpolation strength that will be used when applying the pose, and `persistent` determines if the applied pose will remain.
				**Note:** The pose transform needs to be a global pose! To convert a world transform from a `Node3D` to a global bone pose, multiply the `Transform3D.affine_inverse` of the node's `Node3D.global_transform` by the desired world transform.
			"""
    pass

  def get_bone_global_pose_override(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the global pose override transform for `bone_idx`.
			"""
    pass

  def get_bone_global_pose_no_override(self, bone_idx:int)->__core__.Transform3D:
    """
				Returns the overall transform of the specified bone, with respect to the skeleton, but without any global pose overrides. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.
			"""
    pass

  def set_animate_physical_bones(self, enabled:bool)->None:
    """"""
    pass

  def get_animate_physical_bones(self)->bool:
    """"""
    pass

  def physical_bones_stop_simulation(self)->None:
    """
				Tells the `PhysicalBone3D` nodes in the Skeleton to stop simulating.
			"""
    pass

  def physical_bones_start_simulation(self, bones:__core__.Array=[])->None:
    """
				Tells the `PhysicalBone3D` nodes in the Skeleton to start simulating and reacting to the physics world.
				Optionally, a list of bone names can be passed-in, allowing only the passed-in bones to be simulated.
			"""
    pass

  def physical_bones_add_collision_exception(self, exception:__core__.RID)->None:
    """
				Adds a collision exception to the physical bone.
				Works just like the `RigidBody3D` node.
			"""
    pass

  def physical_bones_remove_collision_exception(self, exception:__core__.RID)->None:
    """
				Removes a collision exception to the physical bone.
				Works just like the `RigidBody3D` node.
			"""
    pass


