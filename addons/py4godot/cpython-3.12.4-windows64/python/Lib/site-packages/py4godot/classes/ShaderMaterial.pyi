from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShader as __visualshader__
import py4godot.classes.Material as __material__
import py4godot.classes.Shader as __shader__



class ShaderMaterial(__material__.Material):
  """
		A material that uses a custom `Shader` program to render visual items (canvas items, meshes, skies, fog), or to process particles. Compared to other materials, `ShaderMaterial` gives deeper control over the generated shader code. For more information, see the shaders documentation index below.
		Multiple `ShaderMaterial`s can use the same shader and configure different values for the shader uniforms.
		**Note:** For performance reasons, the `signal Resource.changed` signal is only emitted when the `Resource.resource_name` changes. Only in editor, it is also emitted for `shader` changes.
	"""

  @staticmethod
  def constructor()->ShaderMaterial:pass



  @staticmethod
  def cast(other:__object__.Object)->ShaderMaterial:pass


  @property
  def shader(self)->__visualshader__.VisualShader|__shader__.Shader:
    """"""
    pass
  @shader.setter
  def shader(self,  value:__shader__.Shader)->None:
    """"""
    pass
  def set_shader(self, shader:__shader__.Shader)->None:
    """"""
    pass

  def get_shader(self)->__visualshader__.VisualShader|__shader__.Shader:
    """"""
    pass

  def set_shader_parameter(self, param:__core__.StringName|str, value:Any)->None:
    """
				Changes the value set for this material of a uniform in the shader.
				**Note:** `param` is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector).
				**Note:** Changes to the shader uniform will be effective on all instances using this `ShaderMaterial`. To prevent this, use per-instance uniforms with `GeometryInstance3D.set_instance_shader_parameter` or duplicate the `ShaderMaterial` resource using `Resource.duplicate`. Per-instance uniforms allow for better shader reuse and are therefore faster, so they should be preferred over duplicating the `ShaderMaterial` when possible.
			"""
    pass

  def get_shader_parameter(self, param:__core__.StringName|str)->Any:
    """
				Returns the current value set for this material of a uniform in the shader.
			"""
    pass


