from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.i as __i__
import py4godot.classes.Resource as __resource__
import py4godot.classes.e as __e__
import py4godot.classes.o as __o__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.V as __v__
import py4godot.classes.c as __c__
import py4godot.classes.t as __t__
import py4godot.classes.PhysicsMaterial as __physicsmaterial__
import py4godot.classes.r as __r__
import py4godot.classes.p as __p__
import py4godot.classes.a as __a__
import py4godot.classes.A as __a__
import py4godot.classes.MeshLibrary as __meshlibrary__
import py4godot.classes.y as __y__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.3 as __3__



class GridMap(__node3d__.Node3D):
  """"""
  cell_size_changed: BuiltinSignal
  changed: BuiltinSignal

  @staticmethod
  def constructor()->GridMap:pass



  @staticmethod
  def cast(other:__object__.Object)->GridMap:pass


  @property
  def mesh_library(self)->__meshlibrary__.MeshLibrary:
    """"""
    pass
  @mesh_library.setter
  def mesh_library(self,  value:__meshlibrary__.MeshLibrary)->None:
    """"""
    pass
  @property
  def physics_material(self)->__physicsmaterial__.PhysicsMaterial:
    """"""
    pass
  @physics_material.setter
  def physics_material(self,  value:__physicsmaterial__.PhysicsMaterial)->None:
    """"""
    pass
  @property
  def cell_size(self)->__core__.Vector3:
    """"""
    pass
  @cell_size.setter
  def cell_size(self,  value:__core__.Vector3)->None:
    """"""
    pass
  @property
  def cell_octant_size(self)->int:
    """"""
    pass
  @cell_octant_size.setter
  def cell_octant_size(self,  value:int)->None:
    """"""
    pass
  @property
  def cell_center_x(self)->bool:
    """"""
    pass
  @cell_center_x.setter
  def cell_center_x(self,  value:bool)->None:
    """"""
    pass
  @property
  def cell_center_y(self)->bool:
    """"""
    pass
  @cell_center_y.setter
  def cell_center_y(self,  value:bool)->None:
    """"""
    pass
  @property
  def cell_center_z(self)->bool:
    """"""
    pass
  @cell_center_z.setter
  def cell_center_z(self,  value:bool)->None:
    """"""
    pass
  @property
  def cell_scale(self)->float:
    """"""
    pass
  @cell_scale.setter
  def cell_scale(self,  value:float)->None:
    """"""
    pass
  @property
  def collision_layer(self)->int:
    """"""
    pass
  @collision_layer.setter
  def collision_layer(self,  value:int)->None:
    """"""
    pass
  @property
  def collision_mask(self)->int:
    """"""
    pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None:
    """"""
    pass
  @property
  def collision_priority(self)->float:
    """"""
    pass
  @collision_priority.setter
  def collision_priority(self,  value:float)->None:
    """"""
    pass
  @property
  def bake_navigation(self)->bool:
    """"""
    pass
  @bake_navigation.setter
  def bake_navigation(self,  value:bool)->None:
    """"""
    pass
  def set_collision_layer(self, layer:int)->None:
    """"""
    pass

  def get_collision_layer(self)->int:
    """"""
    pass

  def set_collision_mask(self, mask:int)->None:
    """"""
    pass

  def get_collision_mask(self)->int:
    """"""
    pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None:
    """"""
    pass

  def get_collision_mask_value(self, layer_number:int)->bool:
    """"""
    pass

  def set_collision_layer_value(self, layer_number:int, value:bool)->None:
    """"""
    pass

  def get_collision_layer_value(self, layer_number:int)->bool:
    """"""
    pass

  def set_collision_priority(self, priority:float)->None:
    """"""
    pass

  def get_collision_priority(self)->float:
    """"""
    pass

  def set_physics_material(self, material:__physicsmaterial__.PhysicsMaterial)->None:
    """"""
    pass

  def get_physics_material(self)->__physicsmaterial__.PhysicsMaterial:
    """"""
    pass

  def set_bake_navigation(self, bake_navigation:bool)->None:
    """"""
    pass

  def is_baking_navigation(self)->bool:
    """"""
    pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None:
    """"""
    pass

  def get_navigation_map(self)->__core__.RID:
    """"""
    pass

  def set_mesh_library(self, mesh_library:__meshlibrary__.MeshLibrary)->None:
    """"""
    pass

  def get_mesh_library(self)->__meshlibrary__.MeshLibrary:
    """"""
    pass

  def set_cell_size(self, size:__core__.Vector3)->None:
    """"""
    pass

  def get_cell_size(self)->__core__.Vector3:
    """"""
    pass

  def set_cell_scale(self, scale:float)->None:
    """"""
    pass

  def get_cell_scale(self)->float:
    """"""
    pass

  def set_octant_size(self, size:int)->None:
    """"""
    pass

  def get_octant_size(self)->int:
    """"""
    pass

  def set_cell_item(self, position:__core__.Vector3i, item:int, orientation:int=0)->None:
    """"""
    pass

  def get_cell_item(self, position:__core__.Vector3i)->int:
    """"""
    pass

  def get_cell_item_orientation(self, position:__core__.Vector3i)->int:
    """"""
    pass

  def get_cell_item_basis(self, position:__core__.Vector3i)->__core__.Basis:
    """"""
    pass

  def get_basis_with_orthogonal_index(self, index:int)->__core__.Basis:
    """"""
    pass

  def get_orthogonal_index_from_basis(self, basis:__core__.Basis)->int:
    """"""
    pass

  def local_to_map(self, local_position:__core__.Vector3)->__core__.Vector3i:
    """"""
    pass

  def map_to_local(self, map_position:__core__.Vector3i)->__core__.Vector3:
    """"""
    pass

  def resource_changed(self, resource:__resource__.Resource)->None:
    """"""
    pass

  def set_center_x(self, enable:bool)->None:
    """"""
    pass

  def get_center_x(self)->bool:
    """"""
    pass

  def set_center_y(self, enable:bool)->None:
    """"""
    pass

  def get_center_y(self)->bool:
    """"""
    pass

  def set_center_z(self, enable:bool)->None:
    """"""
    pass

  def get_center_z(self)->bool:
    """"""
    pass

  def clear(self)->None:
    """"""
    pass

  def get_used_cells(self)->typedarray::Vector3i:
    """"""
    pass

  def get_used_cells_by_item(self, item:int)->typedarray::Vector3i:
    """"""
    pass

  def get_meshes(self)->__core__.Array:
    """"""
    pass

  def get_bake_meshes(self)->__core__.Array:
    """"""
    pass

  def get_bake_mesh_instance(self, idx:int)->__core__.RID:
    """"""
    pass

  def clear_baked_meshes(self)->None:
    """"""
    pass

  def make_baked_meshes(self, gen_lightmap_uv:bool=False, lightmap_uv_texel_size:float=0.1)->None:
    """"""
    pass


