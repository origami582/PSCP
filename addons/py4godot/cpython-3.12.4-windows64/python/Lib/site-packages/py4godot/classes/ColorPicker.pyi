from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.ColorPicker as __colorpicker__


class ColorModeType:
  MODE_RGB:int = 0
  MODE_HSV:int = 1
  MODE_RAW:int = 2
  MODE_OKHSL:int = 3
class PickerShapeType:
  SHAPE_HSV_RECTANGLE:int = 0
  SHAPE_HSV_WHEEL:int = 1
  SHAPE_VHS_CIRCLE:int = 2
  SHAPE_OKHSL_CIRCLE:int = 3
  SHAPE_NONE:int = 4


class ColorPicker(__vboxcontainer__.VBoxContainer):
  """
		A widget that provides an interface for selecting or modifying a color. It can optionally provide functionalities like a color sampler (eyedropper), color modes, and presets.
		**Note:** This control is the color picker widget itself. You can use a `ColorPickerButton` instead if you need a button that brings up a `ColorPicker` in a popup.
	"""
  color_changed: BuiltinSignal
  preset_added: BuiltinSignal
  preset_removed: BuiltinSignal

  @staticmethod
  def constructor()->ColorPicker:pass



  @staticmethod
  def cast(other:__object__.Object)->ColorPicker:pass


  @property
  def color(self)->__core__.Color:
    """"""
    pass
  @color.setter
  def color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def edit_alpha(self)->bool:
    """"""
    pass
  @edit_alpha.setter
  def edit_alpha(self,  value:bool)->None:
    """"""
    pass
  @property
  def color_mode(self)->int:
    """"""
    pass
  @color_mode.setter
  def color_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def deferred_mode(self)->bool:
    """"""
    pass
  @deferred_mode.setter
  def deferred_mode(self,  value:bool)->None:
    """"""
    pass
  @property
  def picker_shape(self)->int:
    """"""
    pass
  @picker_shape.setter
  def picker_shape(self,  value:int)->None:
    """"""
    pass
  @property
  def can_add_swatches(self)->bool:
    """"""
    pass
  @can_add_swatches.setter
  def can_add_swatches(self,  value:bool)->None:
    """"""
    pass
  @property
  def sampler_visible(self)->bool:
    """"""
    pass
  @sampler_visible.setter
  def sampler_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def color_modes_visible(self)->bool:
    """"""
    pass
  @color_modes_visible.setter
  def color_modes_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def sliders_visible(self)->bool:
    """"""
    pass
  @sliders_visible.setter
  def sliders_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def hex_visible(self)->bool:
    """"""
    pass
  @hex_visible.setter
  def hex_visible(self,  value:bool)->None:
    """"""
    pass
  @property
  def presets_visible(self)->bool:
    """"""
    pass
  @presets_visible.setter
  def presets_visible(self,  value:bool)->None:
    """"""
    pass
  def set_pick_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_pick_color(self)->__core__.Color:
    """"""
    pass

  def set_deferred_mode(self, mode:bool)->None:
    """"""
    pass

  def is_deferred_mode(self)->bool:
    """"""
    pass

  def set_color_mode(self, color_mode:int )->None:
    """"""
    pass

  def get_color_mode(self)->int:
    """"""
    pass

  def set_edit_alpha(self, show:bool)->None:
    """"""
    pass

  def is_editing_alpha(self)->bool:
    """"""
    pass

  def set_can_add_swatches(self, enabled:bool)->None:
    """"""
    pass

  def are_swatches_enabled(self)->bool:
    """"""
    pass

  def set_presets_visible(self, visible:bool)->None:
    """"""
    pass

  def are_presets_visible(self)->bool:
    """"""
    pass

  def set_modes_visible(self, visible:bool)->None:
    """"""
    pass

  def are_modes_visible(self)->bool:
    """"""
    pass

  def set_sampler_visible(self, visible:bool)->None:
    """"""
    pass

  def is_sampler_visible(self)->bool:
    """"""
    pass

  def set_sliders_visible(self, visible:bool)->None:
    """"""
    pass

  def are_sliders_visible(self)->bool:
    """"""
    pass

  def set_hex_visible(self, visible:bool)->None:
    """"""
    pass

  def is_hex_visible(self)->bool:
    """"""
    pass

  def add_preset(self, color:__core__.Color)->None:
    """
				Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.
				**Note:** The presets list is only for _this_ color picker.
			"""
    pass

  def erase_preset(self, color:__core__.Color)->None:
    """
				Removes the given color from the list of color presets of this color picker.
			"""
    pass

  def get_presets(self)->__core__.PackedColorArray:
    """
				Returns the list of colors in the presets of the color picker.
			"""
    pass

  def add_recent_preset(self, color:__core__.Color)->None:
    """
				Adds the given color to a list of color recent presets so that it can be picked later. Recent presets are the colors that were picked recently, a new preset is automatically created and added to recent presets when you pick a new color.
				**Note:** The recent presets list is only for _this_ color picker.
			"""
    pass

  def erase_recent_preset(self, color:__core__.Color)->None:
    """
				Removes the given color from the list of color recent presets of this color picker.
			"""
    pass

  def get_recent_presets(self)->__core__.PackedColorArray:
    """
				Returns the list of colors in the recent presets of the color picker.
			"""
    pass

  def set_picker_shape(self, shape:int )->None:
    """"""
    pass

  def get_picker_shape(self)->int:
    """"""
    pass


