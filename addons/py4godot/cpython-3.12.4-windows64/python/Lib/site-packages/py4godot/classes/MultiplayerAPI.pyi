from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.WebSocketMultiplayerPeer as __websocketmultiplayerpeer__
import py4godot.classes.WebRTCMultiplayerPeer as __webrtcmultiplayerpeer__
import py4godot.classes.OfflineMultiplayerPeer as __offlinemultiplayerpeer__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.MultiplayerPeerExtension as __multiplayerpeerextension__
import py4godot.classes.SceneMultiplayer as __scenemultiplayer__
import py4godot.classes.MultiplayerAPIExtension as __multiplayerapiextension__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.ENetMultiplayerPeer as __enetmultiplayerpeer__
import py4godot.classes.Object as __object__


class RPCMode:
  RPC_MODE_DISABLED:int = 0
  RPC_MODE_ANY_PEER:int = 1
  RPC_MODE_AUTHORITY:int = 2


class MultiplayerAPI(__refcounted__.RefCounted):
  """
		Base class for high-level multiplayer API implementations. See also `MultiplayerPeer`.
		By default, `SceneTree` has a reference to an implementation of this class and uses it to provide multiplayer capabilities (i.e. RPCs) across the whole scene.
		It is possible to override the MultiplayerAPI instance used by specific tree branches by calling the `SceneTree.set_multiplayer` method, effectively allowing to run both client and server in the same scene.
		It is also possible to extend or replace the default implementation via scripting or native extensions. See `MultiplayerAPIExtension` for details about extensions, `SceneMultiplayer` for the details about the default implementation.
	"""
  peer_connected: BuiltinSignal
  peer_disconnected: BuiltinSignal
  connected_to_server: BuiltinSignal
  connection_failed: BuiltinSignal
  server_disconnected: BuiltinSignal

  @staticmethod
  def constructor()->MultiplayerAPI:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerAPI:pass


  @property
  def multiplayer_peer(self)->__enetmultiplayerpeer__.ENetMultiplayerPeer|__websocketmultiplayerpeer__.WebSocketMultiplayerPeer|__multiplayerpeerextension__.MultiplayerPeerExtension|__webrtcmultiplayerpeer__.WebRTCMultiplayerPeer|__multiplayerpeer__.MultiplayerPeer|__offlinemultiplayerpeer__.OfflineMultiplayerPeer:
    """"""
    pass
  @multiplayer_peer.setter
  def multiplayer_peer(self,  value:__multiplayerpeer__.MultiplayerPeer)->None:
    """"""
    pass
  def has_multiplayer_peer(self)->bool:
    """
				Returns `true` if there is a `multiplayer_peer` set.
			"""
    pass

  def get_multiplayer_peer(self)->__enetmultiplayerpeer__.ENetMultiplayerPeer|__websocketmultiplayerpeer__.WebSocketMultiplayerPeer|__multiplayerpeerextension__.MultiplayerPeerExtension|__webrtcmultiplayerpeer__.WebRTCMultiplayerPeer|__multiplayerpeer__.MultiplayerPeer|__offlinemultiplayerpeer__.OfflineMultiplayerPeer:
    """"""
    pass

  def set_multiplayer_peer(self, peer:__multiplayerpeer__.MultiplayerPeer)->None:
    """"""
    pass

  def get_unique_id(self)->int:
    """
				Returns the unique peer ID of this MultiplayerAPI's `multiplayer_peer`.
			"""
    pass

  def is_server(self)->bool:
    """
				Returns `true` if this MultiplayerAPI's `multiplayer_peer` is valid and in server mode (listening for connections).
			"""
    pass

  def get_remote_sender_id(self)->int:
    """
				Returns the sender's peer ID for the RPC currently being executed.
				**Note:** This method returns `0` when called outside of an RPC. As such, the original peer ID may be lost when code execution is delayed (such as with GDScript's `await` keyword).
			"""
    pass

  def poll(self)->int:
    """
				Method used for polling the MultiplayerAPI. You only need to worry about this if you set `SceneTree.multiplayer_poll` to `false`. By default, `SceneTree` will poll its MultiplayerAPI(s) for you.
				**Note:** This method results in RPCs being called, so they will be executed in the same context of this function (e.g. `_process`, `physics`, `Thread`).
			"""
    pass

  def rpc(self, peer:int, object:__object__.Object, method:__core__.StringName|str, arguments:__core__.Array= __core__.Array.new0())->int:
    """
				Sends an RPC to the target `peer`. The given `method` will be called on the remote `object` with the provided `arguments`. The RPC may also be called locally depending on the implementation and RPC configuration. See `Node.rpc` and `Node.rpc_config`.
				**Note:** Prefer using `Node.rpc`, `Node.rpc_id`, or `my_method.rpc(peer, arg1, arg2, ...)` (in GDScript), since they are faster. This method is mostly useful in conjunction with `MultiplayerAPIExtension` when extending or replacing the multiplayer capabilities.
			"""
    pass

  def object_configuration_add(self, object:__object__.Object, configuration:Any)->int:
    """
				Notifies the MultiplayerAPI of a new `configuration` for the given `object`. This method is used internally by `SceneTree` to configure the root path for this MultiplayerAPI (passing `null` and a valid `NodePath` as `configuration`). This method can be further used by MultiplayerAPI implementations to provide additional features, refer to specific implementation (e.g. `SceneMultiplayer`) for details on how they use it.
				**Note:** This method is mostly relevant when extending or overriding the MultiplayerAPI behavior via `MultiplayerAPIExtension`.
			"""
    pass

  def object_configuration_remove(self, object:__object__.Object, configuration:Any)->int:
    """
				Notifies the MultiplayerAPI to remove a `configuration` for the given `object`. This method is used internally by `SceneTree` to configure the root path for this MultiplayerAPI (passing `null` and an empty `NodePath` as `configuration`). This method can be further used by MultiplayerAPI implementations to provide additional features, refer to specific implementation (e.g. `SceneMultiplayer`) for details on how they use it.
				**Note:** This method is mostly relevant when extending or overriding the MultiplayerAPI behavior via `MultiplayerAPIExtension`.
			"""
    pass

  def get_peers(self)->__core__.PackedInt32Array:
    """
				Returns the peer IDs of all connected peers of this MultiplayerAPI's `multiplayer_peer`.
			"""
    pass

  @staticmethod
  def set_default_interface(interface_name:__core__.StringName|str)->None:
    """
				Sets the default MultiplayerAPI implementation class. This method can be used by modules and extensions to configure which implementation will be used by `SceneTree` when the engine starts.
			"""
    pass

  @staticmethod
  def get_default_interface()->__core__.StringName:
    """
				Returns the default MultiplayerAPI implementation class name. This is usually `"SceneMultiplayer"` when `SceneMultiplayer` is available. See `set_default_interface`.
			"""
    pass

  @staticmethod
  def create_default_interface()->__multiplayerapi__.MultiplayerAPI|__multiplayerapiextension__.MultiplayerAPIExtension|__scenemultiplayer__.SceneMultiplayer:
    """
				Returns a new instance of the default MultiplayerAPI.
			"""
    pass


