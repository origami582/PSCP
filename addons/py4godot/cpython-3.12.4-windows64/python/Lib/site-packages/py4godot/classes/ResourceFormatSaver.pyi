from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.RefCounted as __refcounted__



class ResourceFormatSaver(__refcounted__.RefCounted):
  """
		The engine can save resources when you do it from the editor, or when you use the `ResourceSaver` singleton. This is accomplished thanks to multiple `ResourceFormatSaver`s, each handling its own format and called automatically by the engine.
		By default, Godot saves resources as `.tres` (text-based), `.res` (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a `ResourceFormatLoader`.
	"""

  @staticmethod
  def constructor()->ResourceFormatSaver:pass



  @staticmethod
  def cast(other:__object__.Object)->ResourceFormatSaver:pass


  def _save(self, resource:__resource__.Resource, path:str, flags:int)->int:
    """
				Saves the given resource object to a file at the target `path`. `flags` is a bitmask composed with `enum ResourceSaver.SaverFlags` constants.
				Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			"""
    pass

  def _set_uid(self, path:str, uid:int)->int:
    """
				Sets a new UID for the resource at the given `path`. Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			"""
    pass

  def _recognize(self, resource:__resource__.Resource)->bool:
    """
				Returns whether the given resource object can be saved by this saver.
			"""
    pass

  def _get_recognized_extensions(self, resource:__resource__.Resource)->__core__.PackedStringArray:
    """
				Returns the list of extensions available for saving the resource object, provided it is recognized (see `_recognize`).
			"""
    pass

  def _recognize_path(self, resource:__resource__.Resource, path:str)->bool:
    """
				Returns `true` if this saver handles a given save path and `false` otherwise.
				If this method is not implemented, the default behavior returns whether the path's extension is within the ones provided by `_get_recognized_extensions`.
			"""
    pass


