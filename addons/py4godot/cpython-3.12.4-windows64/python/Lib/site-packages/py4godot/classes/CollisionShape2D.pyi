from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ConvexPolygonShape2D as __convexpolygonshape2d__
import py4godot.classes.ConcavePolygonShape2D as __concavepolygonshape2d__
import py4godot.classes.SeparationRayShape2D as __separationrayshape2d__
import py4godot.classes.RectangleShape2D as __rectangleshape2d__
import py4godot.classes.WorldBoundaryShape2D as __worldboundaryshape2d__
import py4godot.classes.CircleShape2D as __circleshape2d__
import py4godot.classes.CapsuleShape2D as __capsuleshape2d__
import py4godot.classes.SegmentShape2D as __segmentshape2d__
import py4godot.classes.Shape2D as __shape2d__
import py4godot.classes.Node2D as __node2d__



class CollisionShape2D(__node2d__.Node2D):
  """
		A node that provides a `Shape2D` to a `CollisionObject2D` parent and allows to edit it. This can give a detection shape to an `Area2D` or turn a `PhysicsBody2D` into a solid object.
	"""

  @staticmethod
  def constructor()->CollisionShape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->CollisionShape2D:pass


  @property
  def shape(self)->__capsuleshape2d__.CapsuleShape2D|__concavepolygonshape2d__.ConcavePolygonShape2D|__separationrayshape2d__.SeparationRayShape2D|__rectangleshape2d__.RectangleShape2D|__worldboundaryshape2d__.WorldBoundaryShape2D|__circleshape2d__.CircleShape2D|__convexpolygonshape2d__.ConvexPolygonShape2D|__segmentshape2d__.SegmentShape2D|__shape2d__.Shape2D:
    """"""
    pass
  @shape.setter
  def shape(self,  value:__shape2d__.Shape2D)->None:
    """"""
    pass
  @property
  def disabled(self)->bool:
    """"""
    pass
  @disabled.setter
  def disabled(self,  value:bool)->None:
    """"""
    pass
  @property
  def one_way_collision(self)->bool:
    """"""
    pass
  @one_way_collision.setter
  def one_way_collision(self,  value:bool)->None:
    """"""
    pass
  @property
  def one_way_collision_margin(self)->float:
    """"""
    pass
  @one_way_collision_margin.setter
  def one_way_collision_margin(self,  value:float)->None:
    """"""
    pass
  @property
  def debug_color(self)->__core__.Color:
    """"""
    pass
  @debug_color.setter
  def debug_color(self,  value:__core__.Color)->None:
    """"""
    pass
  def set_shape(self, shape:__shape2d__.Shape2D)->None:
    """"""
    pass

  def get_shape(self)->__capsuleshape2d__.CapsuleShape2D|__concavepolygonshape2d__.ConcavePolygonShape2D|__separationrayshape2d__.SeparationRayShape2D|__rectangleshape2d__.RectangleShape2D|__worldboundaryshape2d__.WorldBoundaryShape2D|__circleshape2d__.CircleShape2D|__convexpolygonshape2d__.ConvexPolygonShape2D|__segmentshape2d__.SegmentShape2D|__shape2d__.Shape2D:
    """"""
    pass

  def set_disabled(self, disabled:bool)->None:
    """"""
    pass

  def is_disabled(self)->bool:
    """"""
    pass

  def set_one_way_collision(self, enabled:bool)->None:
    """"""
    pass

  def is_one_way_collision_enabled(self)->bool:
    """"""
    pass

  def set_one_way_collision_margin(self, margin:float)->None:
    """"""
    pass

  def get_one_way_collision_margin(self)->float:
    """"""
    pass

  def set_debug_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_debug_color(self)->__core__.Color:
    """"""
    pass


