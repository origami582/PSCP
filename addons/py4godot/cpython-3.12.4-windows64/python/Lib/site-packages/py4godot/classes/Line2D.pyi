from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Gradient as __gradient__
import py4godot.classes.Curve as __curve__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__


class LineJointMode:
  LINE_JOINT_SHARP:int = 0
  LINE_JOINT_BEVEL:int = 1
  LINE_JOINT_ROUND:int = 2
class LineCapMode:
  LINE_CAP_NONE:int = 0
  LINE_CAP_BOX:int = 1
  LINE_CAP_ROUND:int = 2
class LineTextureMode:
  LINE_TEXTURE_NONE:int = 0
  LINE_TEXTURE_TILE:int = 1
  LINE_TEXTURE_STRETCH:int = 2


class Line2D(__node2d__.Node2D):
  """
		This node draws a 2D polyline, i.e. a shape consisting of several points connected by segments. `Line2D` is not a mathematical polyline, i.e. the segments are not infinitely thin. It is intended for rendering and it can be colored and optionally textured.
		**Warning:** Certain configurations may be impossible to draw nicely, such as very sharp angles. In these situations, the node uses fallback drawing logic to look decent.
		**Note:** `Line2D` is drawn using a 2D mesh.
	"""

  @staticmethod
  def constructor()->Line2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Line2D:pass


  @property
  def points(self)->__core__.PackedVector2Array:
    """"""
    pass
  @points.setter
  def points(self,  value:__core__.PackedVector2Array)->None:
    """"""
    pass
  @property
  def closed(self)->bool:
    """"""
    pass
  @closed.setter
  def closed(self,  value:bool)->None:
    """"""
    pass
  @property
  def width(self)->float:
    """"""
    pass
  @width.setter
  def width(self,  value:float)->None:
    """"""
    pass
  @property
  def width_curve(self)->__curve__.Curve:
    """"""
    pass
  @width_curve.setter
  def width_curve(self,  value:__curve__.Curve)->None:
    """"""
    pass
  @property
  def default_color(self)->__core__.Color:
    """"""
    pass
  @default_color.setter
  def default_color(self,  value:__core__.Color)->None:
    """"""
    pass
  @property
  def gradient(self)->__gradient__.Gradient:
    """"""
    pass
  @gradient.setter
  def gradient(self,  value:__gradient__.Gradient)->None:
    """"""
    pass
  @property
  def texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None:
    """"""
    pass
  @property
  def texture_mode(self)->int:
    """"""
    pass
  @texture_mode.setter
  def texture_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def joint_mode(self)->int:
    """"""
    pass
  @joint_mode.setter
  def joint_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def begin_cap_mode(self)->int:
    """"""
    pass
  @begin_cap_mode.setter
  def begin_cap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def end_cap_mode(self)->int:
    """"""
    pass
  @end_cap_mode.setter
  def end_cap_mode(self,  value:int)->None:
    """"""
    pass
  @property
  def sharp_limit(self)->float:
    """"""
    pass
  @sharp_limit.setter
  def sharp_limit(self,  value:float)->None:
    """"""
    pass
  @property
  def round_precision(self)->int:
    """"""
    pass
  @round_precision.setter
  def round_precision(self,  value:int)->None:
    """"""
    pass
  @property
  def antialiased(self)->bool:
    """"""
    pass
  @antialiased.setter
  def antialiased(self,  value:bool)->None:
    """"""
    pass
  def set_points(self, points:__core__.PackedVector2Array)->None:
    """"""
    pass

  def get_points(self)->__core__.PackedVector2Array:
    """"""
    pass

  def set_point_position(self, index:int, position:__core__.Vector2)->None:
    """
				Overwrites the position of the point at the given `index` with the supplied `position`.
			"""
    pass

  def get_point_position(self, index:int)->__core__.Vector2:
    """
				Returns the position of the point at index `index`.
			"""
    pass

  def get_point_count(self)->int:
    """
				Returns the number of points in the polyline.
			"""
    pass

  def add_point(self, position:__core__.Vector2, index:int=-1)->None:
    """
				Adds a point with the specified `position` relative to the polyline's own position. If no `index` is provided, the new point will be added to the end of the points array.
				If `index` is given, the new point is inserted before the existing point identified by index `index`. The indices of the points after the new point get increased by 1. The provided `index` must not exceed the number of existing points in the polyline. See `get_point_count`.
			"""
    pass

  def remove_point(self, index:int)->None:
    """
				Removes the point at index `index` from the polyline.
			"""
    pass

  def clear_points(self)->None:
    """
				Removes all points from the polyline, making it empty.
			"""
    pass

  def set_closed(self, closed:bool)->None:
    """"""
    pass

  def is_closed(self)->bool:
    """"""
    pass

  def set_width(self, width:float)->None:
    """"""
    pass

  def get_width(self)->float:
    """"""
    pass

  def set_curve(self, curve:__curve__.Curve)->None:
    """"""
    pass

  def get_curve(self)->__curve__.Curve:
    """"""
    pass

  def set_default_color(self, color:__core__.Color)->None:
    """"""
    pass

  def get_default_color(self)->__core__.Color:
    """"""
    pass

  def set_gradient(self, color:__gradient__.Gradient)->None:
    """"""
    pass

  def get_gradient(self)->__gradient__.Gradient:
    """"""
    pass

  def set_texture(self, texture:__texture2d__.Texture2D)->None:
    """"""
    pass

  def get_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """"""
    pass

  def set_texture_mode(self, mode:int )->None:
    """"""
    pass

  def get_texture_mode(self)->int:
    """"""
    pass

  def set_joint_mode(self, mode:int )->None:
    """"""
    pass

  def get_joint_mode(self)->int:
    """"""
    pass

  def set_begin_cap_mode(self, mode:int )->None:
    """"""
    pass

  def get_begin_cap_mode(self)->int:
    """"""
    pass

  def set_end_cap_mode(self, mode:int )->None:
    """"""
    pass

  def get_end_cap_mode(self)->int:
    """"""
    pass

  def set_sharp_limit(self, limit:float)->None:
    """"""
    pass

  def get_sharp_limit(self)->float:
    """"""
    pass

  def set_round_precision(self, precision:int)->None:
    """"""
    pass

  def get_round_precision(self)->int:
    """"""
    pass

  def set_antialiased(self, antialiased:bool)->None:
    """"""
    pass

  def get_antialiased(self)->bool:
    """"""
    pass


