from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.XRBodyModifier3D as __xrbodymodifier3d__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.NavigationObstacle3D as __navigationobstacle3d__
import py4godot.classes.VisibleOnScreenNotifier3D as __visibleonscreennotifier3d__
import py4godot.classes.Generic6DOFJoint3D as __generic6dofjoint3d__
import py4godot.classes.GPUParticlesCollisionSphere3D as __gpuparticlescollisionsphere3d__
import py4godot.classes.ConeTwistJoint3D as __conetwistjoint3d__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.CSGTorus3D as __csgtorus3d__
import py4godot.classes.AnimatableBody3D as __animatablebody3d__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.MultiplayerSynchronizer as __multiplayersynchronizer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.ResourcePreloader as __resourcepreloader__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.SoftBody3D as __softbody3d__
import py4godot.classes.Script as __script__
import py4godot.classes.Control as __control__
import py4godot.classes.r as __r__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.XRHandModifier3D as __xrhandmodifier3d__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.h as __h__
import py4godot.classes.OpenXRVisibilityMask as __openxrvisibilitymask__
import py4godot.classes.Slider as __slider__
import py4godot.classes.SpotLight3D as __spotlight3d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.Light3D as __light3d__
import py4godot.classes.ParallaxBackground as __parallaxbackground__
import py4godot.classes.PhysicalBoneSimulator3D as __physicalbonesimulator3d__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.Skeleton3D as __skeleton3d__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.n as __n__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.AnimationMixer as __animationmixer__
import py4godot.classes.PathFollow3D as __pathfollow3d__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.u as __u__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Separator as __separator__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.p as __p__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.CollisionObject3D as __collisionobject3d__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.Path3D as __path3d__
import py4godot.classes.OpenXRHand as __openxrhand__
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.HingeJoint3D as __hingejoint3d__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.XRAnchor3D as __xranchor3d__
import py4godot.classes.OpenXRCompositionLayer as __openxrcompositionlayer__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.EditorResourcePreview as __editorresourcepreview__
import py4godot.classes.Button as __button__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.Panel as __panel__
import py4godot.classes.i as __i__
import py4godot.classes.CanvasItem as __canvasitem__
import py4godot.classes.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.GPUParticlesAttractorBox3D as __gpuparticlesattractorbox3d__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.AudioListener3D as __audiolistener3d__
import py4godot.classes.EditorPlugin as __editorplugin__
import py4godot.classes.NavigationRegion3D as __navigationregion3d__
import py4godot.classes.d as __d__
import py4godot.classes.AnimationPlayer as __animationplayer__
import py4godot.classes.PinJoint3D as __pinjoint3d__
import py4godot.classes.CollisionShape3D as __collisionshape3d__
import py4godot.classes.Label as __label__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.MultiMeshInstance3D as __multimeshinstance3d__
import py4godot.classes.XRCamera3D as __xrcamera3d__
import py4godot.classes.CanvasLayer as __canvaslayer__
import py4godot.classes.NavigationLink3D as __navigationlink3d__
import py4godot.classes.ReflectionProbe as __reflectionprobe__
import py4godot.classes.VehicleWheel3D as __vehiclewheel3d__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.CSGShape3D as __csgshape3d__
import py4godot.classes.LightmapProbe as __lightmapprobe__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.Node as __node__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.GridMapEditorPlugin as __gridmapeditorplugin__
import py4godot.classes.OpenXRCompositionLayerEquirect as __openxrcompositionlayerequirect__
import py4godot.classes.CharacterBody3D as __characterbody3d__
import py4godot.classes.m as __m__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.Window as __window__
import py4godot.classes.Decal as __decal__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.Resource as __resource__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.RayCast3D as __raycast3d__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.A as __a__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.2 as __2__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.MeshInstance3D as __meshinstance3d__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.EditorPaths as __editorpaths__
import py4godot.classes.RemoteTransform3D as __remotetransform3d__
import py4godot.classes.NavigationAgent2D as __navigationagent2d__
import py4godot.classes.XROrigin3D as __xrorigin3d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.CSGCylinder3D as __csgcylinder3d__
import py4godot.classes.AnimationTree as __animationtree__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.SpriteBase3D as __spritebase3d__
import py4godot.classes.BoneAttachment3D as __boneattachment3d__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.M as __m__
import py4godot.classes.N as __n__
import py4godot.classes.ImporterMeshInstance3D as __importermeshinstance3d__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.SpringBoneCollisionCapsule3D as __springbonecollisioncapsule3d__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.Marker3D as __marker3d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.PhysicalBone3D as __physicalbone3d__
import py4godot.classes.CSGSphere3D as __csgsphere3d__
import py4godot.classes.Tree as __tree__
import py4godot.classes.ShapeCast3D as __shapecast3d__
import py4godot.classes.OpenXRCompositionLayerCylinder as __openxrcompositionlayercylinder__
import py4godot.classes.InstancePlaceholder as __instanceplaceholder__
import py4godot.classes.s as __s__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.GridMap as __gridmap__
import py4godot.classes.MissingNode as __missingnode__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.GPUParticlesAttractorSphere3D as __gpuparticlesattractorsphere3d__
import py4godot.classes.t as __t__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.SubViewport as __subviewport__
import py4godot.classes.T as __t__
import py4godot.classes.Theme as __theme__
import py4godot.classes.EditorUndoRedoManager as __editorundoredomanager__
import py4godot.classes.NavigationAgent3D as __navigationagent3d__
import py4godot.classes.AudioStreamPlayer3D as __audiostreamplayer3d__
import py4godot.classes.D as __d__
import py4godot.classes.Camera3D as __camera3d__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.Range as __range__
import py4godot.classes.AudioStreamPlayer as __audiostreamplayer__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.e as __e__
import py4godot.classes.RetargetModifier3D as __retargetmodifier3d__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.OccluderInstance3D as __occluderinstance3d__
import py4godot.classes.RootMotionView as __rootmotionview__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.LightmapGI as __lightmapgi__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Popup as __popup__
import py4godot.classes.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.Sprite3D as __sprite3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.XRController3D as __xrcontroller3d__
import py4godot.classes.AnimatedSprite3D as __animatedsprite3d__
import py4godot.classes.Container as __container__
import py4godot.classes.StaticBody3D as __staticbody3d__
import py4godot.classes.y as __y__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.StatusIndicator as __statusindicator__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.SpringBoneCollisionPlane3D as __springbonecollisionplane3d__
import py4godot.classes.GPUParticlesCollisionBox3D as __gpuparticlescollisionbox3d__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.S as __s__
import py4godot.classes.EditorSettings as __editorsettings__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.GPUParticlesAttractorVectorField3D as __gpuparticlesattractorvectorfield3d__
import py4godot.classes.VisibleOnScreenEnabler3D as __visibleonscreenenabler3d__
import py4godot.classes.OpenXRCompositionLayerQuad as __openxrcompositionlayerquad__
import py4godot.classes.CSGBox3D as __csgbox3d__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.CollisionPolygon3D as __collisionpolygon3d__
import py4godot.classes.Area3D as __area3d__
import py4godot.classes.Label3D as __label3d__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.DirectionalLight3D as __directionallight3d__
import py4godot.classes.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.a as __a__
import py4godot.classes.RigidBody3D as __rigidbody3d__
import py4godot.classes.XRFaceModifier3D as __xrfacemodifier3d__
import py4godot.classes.VehicleBody3D as __vehiclebody3d__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Object as __object__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.x as __x__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.CPUParticles3D as __cpuparticles3d__
import py4godot.classes.SpringBoneCollisionSphere3D as __springbonecollisionsphere3d__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.CSGMesh3D as __csgmesh3d__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.XRNode3D as __xrnode3d__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.HTTPRequest as __httprequest__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.CSGCombiner3D as __csgcombiner3d__
import py4godot.classes.FogVolume as __fogvolume__
import py4godot.classes.SliderJoint3D as __sliderjoint3d__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.SkeletonIK3D as __skeletonik3d__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.g as __g__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.Joint3D as __joint3d__
import py4godot.classes.WorldEnvironment as __worldenvironment__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.EditorFileSystem as __editorfilesystem__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.OmniLight3D as __omnilight3d__
import py4godot.classes.Node3D as __node3d__
import py4godot.classes.Timer as __timer__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.SpringBoneCollision3D as __springbonecollision3d__
import py4godot.classes.MultiplayerSpawner as __multiplayerspawner__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.LookAtModifier3D as __lookatmodifier3d__
import py4godot.classes.ShaderGlobalsOverride as __shaderglobalsoverride__
import py4godot.classes.SpringArm3D as __springarm3d__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.EditorSelection as __editorselection__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.OptionButton as __optionbutton__



class EditorInterface(__object__.Object):
  """
		`EditorInterface` gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to `EditorSettings`, `EditorFileSystem`, `EditorResourcePreview`, `ScriptEditor`, the editor viewport, and information about scenes.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton directly by its name.
		
		```gdscript
		var editor_settings = EditorInterface.get_editor_settings()
		```
		
		
	"""



  @staticmethod
  def cast(other:__object__.Object)->EditorInterface:pass

  @staticmethod
  def instance()->EditorInterface:pass

  @property
  def distraction_free_mode(self)->bool:
    """"""
    pass
  @distraction_free_mode.setter
  def distraction_free_mode(self,  value:bool)->None:
    """"""
    pass
  @property
  def movie_maker_enabled(self)->bool:
    """"""
    pass
  @movie_maker_enabled.setter
  def movie_maker_enabled(self,  value:bool)->None:
    """"""
    pass
  def restart_editor(self, save:bool=True)->None:
    """
				Restarts the editor. This closes the editor and then opens the same project. If `save` is `true`, the project will be saved before restarting.
			"""
    pass

  def get_command_palette(self)->__editorcommandpalette__.EditorCommandPalette:
    """
				Returns the editor's `EditorCommandPalette` instance.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def get_resource_filesystem(self)->__editorfilesystem__.EditorFileSystem:
    """
				Returns the editor's `EditorFileSystem` instance.
			"""
    pass

  def get_editor_paths(self)->__editorpaths__.EditorPaths:
    """
				Returns the `EditorPaths` singleton.
			"""
    pass

  def get_resource_previewer(self)->__editorresourcepreview__.EditorResourcePreview:
    """
				Returns the editor's `EditorResourcePreview` instance.
			"""
    pass

  def get_selection(self)->__editorselection__.EditorSelection:
    """
				Returns the editor's `EditorSelection` instance.
			"""
    pass

  def get_editor_settings(self)->__editorsettings__.EditorSettings:
    """
				Returns the editor's `EditorSettings` instance.
			"""
    pass

  def get_editor_toaster(self)->__editortoaster__.EditorToaster:
    """
				Returns the editor's `EditorToaster`.
			"""
    pass

  def get_editor_undo_redo(self)->__editorundoredomanager__.EditorUndoRedoManager:
    """
				Returns the editor's `EditorUndoRedoManager`.
			"""
    pass

  def make_mesh_previews(self, meshes:__core__.Array, preview_size:int)->typedarray::Texture2D:
    """
				Returns mesh previews rendered at the given size as an `Array` of `Texture2D`s.
			"""
    pass

  def set_plugin_enabled(self, plugin:str, enabled:bool)->None:
    """
				Sets the enabled status of a plugin. The plugin name is the same as its directory name.
			"""
    pass

  def is_plugin_enabled(self, plugin:str)->bool:
    """
				Returns `true` if the specified `plugin` is enabled. The plugin name is the same as its directory name.
			"""
    pass

  def get_editor_theme(self)->__theme__.Theme:
    """
				Returns the editor's `Theme`.
				**Note:** When creating custom editor UI, prefer accessing theme items directly from your GUI nodes using the `get_theme_*` methods.
			"""
    pass

  def get_base_control(self)->__menubar__.MenuBar|__vscrollbar__.VScrollBar|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__button__.Button|__graphnode__.GraphNode|__hflowcontainer__.HFlowContainer|__panel__.Panel|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__progressbar__.ProgressBar|__graphframe__.GraphFrame|__textedit__.TextEdit|__boxcontainer__.BoxContainer|__margincontainer__.MarginContainer|__hboxcontainer__.HBoxContainer|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__tabcontainer__.TabContainer|__hseparator__.HSeparator|__control__.Control|__colorpickerbutton__.ColorPickerButton|__tree__.Tree|__label__.Label|__lineedit__.LineEdit|__texturebutton__.TextureButton|__richtextlabel__.RichTextLabel|__texturerect__.TextureRect|__slider__.Slider|__codeedit__.CodeEdit|__colorpicker__.ColorPicker|__ninepatchrect__.NinePatchRect|__colorrect__.ColorRect|__graphedit__.GraphEdit|__vflowcontainer__.VFlowContainer|__editorinspector__.EditorInspector|__editorspinslider__.EditorSpinSlider|__vseparator__.VSeparator|__panelcontainer__.PanelContainer|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__textureprogressbar__.TextureProgressBar|__range__.Range|__vboxcontainer__.VBoxContainer|__tabbar__.TabBar|__hsplitcontainer__.HSplitContainer|__scrollbar__.ScrollBar|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__spinbox__.SpinBox|__videostreamplayer__.VideoStreamPlayer|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__scripteditorbase__.ScriptEditorBase|__menubutton__.MenuButton|__container__.Container|__flowcontainer__.FlowContainer|__scrollcontainer__.ScrollContainer|__itemlist__.ItemList|__editortoaster__.EditorToaster|__subviewportcontainer__.SubViewportContainer|__filesystemdock__.FileSystemDock|__hslider__.HSlider|__hscrollbar__.HScrollBar|__basebutton__.BaseButton|__vslider__.VSlider|__optionbutton__.OptionButton|__linkbutton__.LinkButton:
    """
				Returns the main container of Godot editor's window. For example, you can use it to retrieve the size of the container and place your controls accordingly.
				**Warning:** Removing and freeing this node will render the editor useless and may cause a crash.
			"""
    pass

  def get_editor_main_screen(self)->__filesystemdock__.FileSystemDock|__scripteditorbase__.ScriptEditorBase|__vboxcontainer__.VBoxContainer|__colorpicker__.ColorPicker:
    """
				Returns the editor control responsible for main screen plugins and tools. Use it with plugins that implement `EditorPlugin._has_main_screen`.
				**Note:** This node is a `VBoxContainer`, which means that if you add a `Control` child to it, you need to set the child's `Control.size_flags_vertical` to `constant Control.SIZE_EXPAND_FILL` to make it use the full available space.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def get_script_editor(self)->__scripteditor__.ScriptEditor:
    """
				Returns the editor's `ScriptEditor` instance.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def get_editor_viewport_2d(self)->__subviewport__.SubViewport:
    """
				Returns the 2D editor `SubViewport`. It does not have a camera. Instead, the view transforms are done directly and can be accessed with `Viewport.global_canvas_transform`.
			"""
    pass

  def get_editor_viewport_3d(self, idx:int=0)->__subviewport__.SubViewport:
    """
				Returns the specified 3D editor `SubViewport`, from `0` to `3`. The viewport can be used to access the active editor cameras with `Viewport.get_camera_3d`.
			"""
    pass

  def set_main_screen_editor(self, name:str)->None:
    """
				Sets the editor's current main screen to the one specified in `name`. `name` must match the title of the tab in question exactly (e.g. `2D`, `3D`, `code skip-lint`Script`, `Game`, or `AssetLib` for default tabs).
			"""
    pass

  def set_distraction_free_mode(self, enter:bool)->None:
    """"""
    pass

  def is_distraction_free_mode_enabled(self)->bool:
    """"""
    pass

  def is_multi_window_enabled(self)->bool:
    """
				Returns `true` if multiple window support is enabled in the editor. Multiple window support is enabled if _all_ of these statements are true:
				- `EditorSettings.interface/multi_window/enable` is `true`.
				- `EditorSettings.interface/editor/single_window_mode` is `false`.
				- `Viewport.gui_embed_subwindows` is `false`. This is forced to `true` on platforms that don't support multiple windows such as Web, or when the `--single-window` `url=$DOCS_URL/tutorials/editor/command_line_tutorial.html`command line argument`/url` is used.
			"""
    pass

  def get_editor_scale(self)->float:
    """
				Returns the actual scale of the editor UI (`1.0` being 100% scale). This can be used to adjust position and dimensions of the UI added by plugins.
				**Note:** This value is set via the `EditorSettings.interface/editor/display_scale` and `EditorSettings.interface/editor/custom_display_scale` settings. The editor must be restarted for changes to be properly applied.
			"""
    pass

  def popup_dialog(self, dialog:__window__.Window, rect:__core__.Rect2i= __core__.Rect2i.new0())->None:
    """
				Pops up the `dialog` in the editor UI with `Window.popup_exclusive`. The dialog must have no current parent, otherwise the method fails.
				See also `Window.set_unparent_when_invisible`.
			"""
    pass

  def popup_dialog_centered(self, dialog:__window__.Window, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None:
    """
				Pops up the `dialog` in the editor UI with `Window.popup_exclusive_centered`. The dialog must have no current parent, otherwise the method fails.
				See also `Window.set_unparent_when_invisible`.
			"""
    pass

  def popup_dialog_centered_ratio(self, dialog:__window__.Window, ratio:float=0.8)->None:
    """
				Pops up the `dialog` in the editor UI with `Window.popup_exclusive_centered_ratio`. The dialog must have no current parent, otherwise the method fails.
				See also `Window.set_unparent_when_invisible`.
			"""
    pass

  def popup_dialog_centered_clamped(self, dialog:__window__.Window, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None:
    """
				Pops up the `dialog` in the editor UI with `Window.popup_exclusive_centered_clamped`. The dialog must have no current parent, otherwise the method fails.
				See also `Window.set_unparent_when_invisible`.
			"""
    pass

  def get_current_feature_profile(self)->str:
    """
				Returns the name of the currently activated feature profile. If the default profile is currently active, an empty string is returned instead.
				In order to get a reference to the `EditorFeatureProfile`, you must load the feature profile using `EditorFeatureProfile.load_from_file`.
				**Note:** Feature profiles created via the user interface are loaded from the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			"""
    pass

  def set_current_feature_profile(self, profile_name:str)->None:
    """
				Selects and activates the specified feature profile with the given `profile_name`. Set `profile_name` to an empty string to reset to the default feature profile.
				A feature profile can be created programmatically using the `EditorFeatureProfile` class.
				**Note:** The feature profile that gets activated must be located in the `feature_profiles` directory, as a file with the `.profile` extension. If a profile could not be found, an error occurs. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			"""
    pass

  def popup_node_selector(self, callback:__core__.Callable, valid_types:__core__.Array=Array[StringName]([]), current_value:__node__.Node= __node__.Node.constructor())->None:
    """
				Pops up an editor dialog for selecting a `Node` from the edited scene. The `callback` must take a single argument of type `NodePath`. It is called on the selected `NodePath` or the empty path `^""` if the dialog is canceled. If `valid_types` is provided, the dialog will only show Nodes that match one of the listed Node types. If `current_value` is provided, the Node will be automatically selected in the tree, if it exists.
				**Example:** Display the node selection dialog as soon as this node is added to the tree for the first time:
				```gdscript
				func _ready():
					if Engine.is_editor_hint():
						EditorInterface.popup_node_selector(_on_node_selected, `"Button"`)

				func _on_node_selected(node_path):
					if node_path.is_empty():
						print("node selection canceled")
					else:
						print("selected ", node_path)
				```
			"""
    pass

  def popup_property_selector(self, object:__object__.Object, callback:__core__.Callable, type_filter:__core__.PackedInt32Array= __core__.PackedInt32Array.new0(), current_value:str= __core__.String.new0())->None:
    """
				Pops up an editor dialog for selecting properties from `object`. The `callback` must take a single argument of type `NodePath`. It is called on the selected property path (see `NodePath.get_as_property_path`) or the empty path `^""` if the dialog is canceled. If `type_filter` is provided, the dialog will only show properties that match one of the listed `enum Variant.Type` values. If `current_value` is provided, the property will be selected automatically in the property list, if it exists.
				```gdscript
				func _ready():
					if Engine.is_editor_hint():
						EditorInterface.popup_property_selector(this, _on_property_selected, `TYPE_INT`)

				func _on_property_selected(property_path):
					if property_path.is_empty():
						print("property selection canceled")
					else:
						print("selected ", property_path)
				```
			"""
    pass

  def popup_method_selector(self, object:__object__.Object, callback:__core__.Callable, current_value:str= __core__.String.new0())->None:
    """
				Pops up an editor dialog for selecting a method from `object`. The `callback` must take a single argument of type `String` which will contain the name of the selected method or be empty if the dialog is canceled. If `current_value` is provided, the method will be selected automatically in the method list, if it exists.
			"""
    pass

  def popup_quick_open(self, callback:__core__.Callable, base_types:__core__.Array=Array[StringName]([]))->None:
    """
				Pops up an editor dialog for quick selecting a resource file. The `callback` must take a single argument of type `String` which will contain the path of the selected resource or be empty if the dialog is canceled. If `base_types` is provided, the dialog will only show resources that match these types. Only types deriving from `Resource` are supported.
			"""
    pass

  def popup_create_dialog(self, callback:__core__.Callable, base_type:__core__.StringName|str= __core__.StringName.new0(), current_type:str= __core__.String.new0(), dialog_title:str= __core__.String.new0(), type_blocklist:__core__.Array=Array[StringName]([]))->None:
    """
				Pops up an editor dialog for creating an object.
				The `callback` must take a single argument of type `StringName` which will contain the type name of the selected object or be empty if no item is selected.
				The `base_type` specifies the base type of objects to display. For example, if you set this to "Resource", all types derived from `Resource` will display in the create dialog.
				The `current_type` will be passed in the search box of the create dialog, and the specified type can be immediately selected when the dialog pops up. If the `current_type` is not derived from `base_type`, there will be no result of the type in the dialog.
				The `dialog_title` allows you to define a custom title for the dialog. This is useful if you want to accurately hint the usage of the dialog. If the `dialog_title` is an empty string, the dialog will use "Create New 'Base Type'" as the default title.
				The `type_blocklist` contains a list of type names, and the types in the blocklist will be hidden from the create dialog.
				**Note:** Trying to list the base type in the `type_blocklist` will hide all types derived from the base type from the create dialog.
			"""
    pass

  def get_file_system_dock(self)->__filesystemdock__.FileSystemDock:
    """
				Returns the editor's `FileSystemDock` instance.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def select_file(self, file:str)->None:
    """
				Selects the file, with the path provided by `file`, in the FileSystem dock.
			"""
    pass

  def get_selected_paths(self)->__core__.PackedStringArray:
    """
				Returns an array containing the paths of the currently selected files (and directories) in the `FileSystemDock`.
			"""
    pass

  def get_current_path(self)->str:
    """
				Returns the current path being viewed in the `FileSystemDock`.
			"""
    pass

  def get_current_directory(self)->str:
    """
				Returns the current directory being viewed in the `FileSystemDock`. If a file is selected, its base directory will be returned using `String.get_base_dir` instead.
			"""
    pass

  def get_inspector(self)->__editorinspector__.EditorInspector:
    """
				Returns the editor's `EditorInspector` instance.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			"""
    pass

  def inspect_object(self, object:__object__.Object, for_property:str= __core__.String.new0(), inspector_only:bool=False)->None:
    """
				Shows the given property on the given `object` in the editor's Inspector dock. If `inspector_only` is `true`, plugins will not attempt to edit `object`.
			"""
    pass

  def edit_resource(self, resource:__resource__.Resource)->None:
    """
				Edits the given `Resource`. If the resource is a `Script` you can also edit it with `edit_script` to specify the line and column position.
			"""
    pass

  def edit_node(self, node:__node__.Node)->None:
    """
				Edits the given `Node`. The node will be also selected if it's inside the scene tree.
			"""
    pass

  def edit_script(self, script:__script__.Script, line:int=-1, column:int=0, grab_focus:bool=True)->None:
    """
				Edits the given `Script`. The line and column on which to open the script can also be specified. The script will be open with the user-configured editor for the script's language which may be an external editor.
			"""
    pass

  def open_scene_from_path(self, scene_filepath:str, set_inherited:bool=False)->None:
    """
				Opens the scene at the given path. If `set_inherited` is `true`, creates a new inherited scene.
			"""
    pass

  def reload_scene_from_path(self, scene_filepath:str)->None:
    """
				Reloads the scene at the given path.
			"""
    pass

  def get_open_scenes(self)->__core__.PackedStringArray:
    """
				Returns an array with the file paths of the currently opened scenes.
			"""
    pass

  def get_edited_scene_root(self)->__audiostreamplayer2d__.AudioStreamPlayer2D|__xrbodymodifier3d__.XRBodyModifier3D|__vsplitcontainer__.VSplitContainer|__graphelement__.GraphElement|__navigationobstacle3d__.NavigationObstacle3D|__visibleonscreennotifier3d__.VisibleOnScreenNotifier3D|__generic6dofjoint3d__.Generic6DOFJoint3D|__gpuparticlescollisionsphere3d__.GPUParticlesCollisionSphere3D|__conetwistjoint3d__.ConeTwistJoint3D|__graphframe__.GraphFrame|__csgtorus3d__.CSGTorus3D|__animatablebody3d__.AnimatableBody3D|__audiolistener2d__.AudioListener2D|__camera2d__.Camera2D|__multiplayersynchronizer__.MultiplayerSynchronizer|__margincontainer__.MarginContainer|__resourcepreloader__.ResourcePreloader|__hboxcontainer__.HBoxContainer|__gpuparticlescollision3d__.GPUParticlesCollision3D|__scriptcreatedialog__.ScriptCreateDialog|__softbody3d__.SoftBody3D|__control__.Control|__lineedit__.LineEdit|__backbuffercopy__.BackBufferCopy|__xrhandmodifier3d__.XRHandModifier3D|__richtextlabel__.RichTextLabel|__gpuparticles3d__.GPUParticles3D|__openxrvisibilitymask__.OpenXRVisibilityMask|__slider__.Slider|__spotlight3d__.SpotLight3D|__popupmenu__.PopupMenu|__light3d__.Light3D|__parallaxbackground__.ParallaxBackground|__physicalbonesimulator3d__.PhysicalBoneSimulator3D|__collisionshape2d__.CollisionShape2D|__sprite2d__.Sprite2D|__confirmationdialog__.ConfirmationDialog|__skeleton3d__.Skeleton3D|__graphedit__.GraphEdit|__animationmixer__.AnimationMixer|__editorspinslider__.EditorSpinSlider|__pathfollow3d__.PathFollow3D|__pointlight2d__.PointLight2D|__panelcontainer__.PanelContainer|__aspectratiocontainer__.AspectRatioContainer|__checkbox__.CheckBox|__separator__.Separator|__joint2d__.Joint2D|__remotetransform2d__.RemoteTransform2D|__vboxcontainer__.VBoxContainer|__checkbutton__.CheckButton|__gridcontainer__.GridContainer|__parallax2d__.Parallax2D|__collisionobject3d__.CollisionObject3D|__flowcontainer__.FlowContainer|__animatedsprite2d__.AnimatedSprite2D|__pinjoint2d__.PinJoint2D|__path3d__.Path3D|__openxrhand__.OpenXRHand|__skeletonmodifier3d__.SkeletonModifier3D|__lightoccluder2d__.LightOccluder2D|__filesystemdock__.FileSystemDock|__hingejoint3d__.HingeJoint3D|__basebutton__.BaseButton|__xranchor3d__.XRAnchor3D|__openxrcompositionlayer__.OpenXRCompositionLayer|__linkbutton__.LinkButton|__csgpolygon3d__.CSGPolygon3D|__gpuparticles2d__.GPUParticles2D|__editorresourcepreview__.EditorResourcePreview|__button__.Button|__light2d__.Light2D|__panel__.Panel|__canvasitem__.CanvasItem|__gpuparticlescollisionheightfield3d__.GPUParticlesCollisionHeightField3D|__boxcontainer__.BoxContainer|__gpuparticlesattractorbox3d__.GPUParticlesAttractorBox3D|__tabcontainer__.TabContainer|__audiolistener3d__.AudioListener3D|__editorplugin__.EditorPlugin|__navigationregion3d__.NavigationRegion3D|__animationplayer__.AnimationPlayer|__pinjoint3d__.PinJoint3D|__collisionshape3d__.CollisionShape3D|__label__.Label|__bone2d__.Bone2D|__dampedspringjoint2d__.DampedSpringJoint2D|__texturebutton__.TextureButton|__gpuparticlescollisionsdf3d__.GPUParticlesCollisionSDF3D|__multimeshinstance3d__.MultiMeshInstance3D|__xrcamera3d__.XRCamera3D|__canvaslayer__.CanvasLayer|__navigationlink3d__.NavigationLink3D|__reflectionprobe__.ReflectionProbe|__vehiclewheel3d__.VehicleWheel3D|__physicalbone2d__.PhysicalBone2D|__csgshape3d__.CSGShape3D|__lightmapprobe__.LightmapProbe|__vflowcontainer__.VFlowContainer|__node__.Node|__filedialog__.FileDialog|__gridmapeditorplugin__.GridMapEditorPlugin|__openxrcompositionlayerequirect__.OpenXRCompositionLayerEquirect|__characterbody3d__.CharacterBody3D|__hsplitcontainer__.HSplitContainer|__window__.Window|__decal__.Decal|__spinbox__.SpinBox|__directionallight2d__.DirectionalLight2D|__referencerect__.ReferenceRect|__scripteditor__.ScriptEditor|__raycast3d__.RayCast3D|__scripteditorbase__.ScriptEditorBase|__collisionobject2d__.CollisionObject2D|__voxelgi__.VoxelGI|__editortoaster__.EditorToaster|__meshinstance3d__.MeshInstance3D|__shapecast2d__.ShapeCast2D|__springbonesimulator3d__.SpringBoneSimulator3D|__canvasgroup__.CanvasGroup|__visibleonscreennotifier2d__.VisibleOnScreenNotifier2D|__canvasmodulate__.CanvasModulate|__remotetransform3d__.RemoteTransform3D|__navigationagent2d__.NavigationAgent2D|__xrorigin3d__.XROrigin3D|__navigationlink2d__.NavigationLink2D|__visibleonscreenenabler2d__.VisibleOnScreenEnabler2D|__graphnode__.GraphNode|__csgcylinder3d__.CSGCylinder3D|__animationtree__.AnimationTree|__skeleton2d__.Skeleton2D|__node2d__.Node2D|__hflowcontainer__.HFlowContainer|__spritebase3d__.SpriteBase3D|__boneattachment3d__.BoneAttachment3D|__openxrbindingmodifiereditor__.OpenXRBindingModifierEditor|__importermeshinstance3d__.ImporterMeshInstance3D|__path2d__.Path2D|__pathfollow2d__.PathFollow2D|__springbonecollisioncapsule3d__.SpringBoneCollisionCapsule3D|__openxrinteractionprofileeditor__.OpenXRInteractionProfileEditor|__raycast2d__.RayCast2D|__marker3d__.Marker3D|__hseparator__.HSeparator|__physicalbone3d__.PhysicalBone3D|__csgsphere3d__.CSGSphere3D|__tree__.Tree|__shapecast3d__.ShapeCast3D|__openxrcompositionlayercylinder__.OpenXRCompositionLayerCylinder|__instanceplaceholder__.InstancePlaceholder|__visualinstance3d__.VisualInstance3D|__gridmap__.GridMap|__missingnode__.MissingNode|__groovejoint2d__.GrooveJoint2D|__animatablebody2d__.AnimatableBody2D|__gpuparticlesattractorsphere3d__.GPUParticlesAttractorSphere3D|__acceptdialog__.AcceptDialog|__ninepatchrect__.NinePatchRect|__cpuparticles2d__.CPUParticles2D|__navigationagent3d__.NavigationAgent3D|__subviewport__.SubViewport|__audiostreamplayer3d__.AudioStreamPlayer3D|__camera3d__.Camera3D|__editorfiledialog__.EditorFileDialog|__textureprogressbar__.TextureProgressBar|__range__.Range|__audiostreamplayer__.AudioStreamPlayer|__tilemaplayer__.TileMapLayer|__retargetmodifier3d__.RetargetModifier3D|__scrollbar__.ScrollBar|__occluderinstance3d__.OccluderInstance3D|__rootmotionview__.RootMotionView|__rigidbody2d__.RigidBody2D|__splitcontainer__.SplitContainer|__editorresourcepicker__.EditorResourcePicker|__lightmapgi__.LightmapGI|__videostreamplayer__.VideoStreamPlayer|__popup__.Popup|__physicsbody3d__.PhysicsBody3D|__multimeshinstance2d__.MultiMeshInstance2D|__sprite3d__.Sprite3D|__gpuparticlesattractor3d__.GPUParticlesAttractor3D|__xrcontroller3d__.XRController3D|__animatedsprite3d__.AnimatedSprite3D|__container__.Container|__staticbody3d__.StaticBody3D|__itemlist__.ItemList|__statusindicator__.StatusIndicator|__editorcommandpalette__.EditorCommandPalette|__subviewportcontainer__.SubViewportContainer|__springbonecollisionplane3d__.SpringBoneCollisionPlane3D|__gpuparticlescollisionbox3d__.GPUParticlesCollisionBox3D|__popuppanel__.PopupPanel|__staticbody2d__.StaticBody2D|__gpuparticlesattractorvectorfield3d__.GPUParticlesAttractorVectorField3D|__visibleonscreenenabler3d__.VisibleOnScreenEnabler3D|__openxrcompositionlayerquad__.OpenXRCompositionLayerQuad|__csgbox3d__.CSGBox3D|__menubar__.MenuBar|__vscrollbar__.VScrollBar|__collisionpolygon2d__.CollisionPolygon2D|__collisionpolygon3d__.CollisionPolygon3D|__area3d__.Area3D|__label3d__.Label3D|__progressbar__.ProgressBar|__textedit__.TextEdit|__directionallight3d__.DirectionalLight3D|__csgprimitive3d__.CSGPrimitive3D|__colorpickerbutton__.ColorPickerButton|__rigidbody3d__.RigidBody3D|__xrfacemodifier3d__.XRFaceModifier3D|__vehiclebody3d__.VehicleBody3D|__texturerect__.TextureRect|__codeedit__.CodeEdit|__physicsbody2d__.PhysicsBody2D|__characterbody2d__.CharacterBody2D|__colorpicker__.ColorPicker|__cpuparticles3d__.CPUParticles3D|__springbonecollisionsphere3d__.SpringBoneCollisionSphere3D|__marker2d__.Marker2D|__csgmesh3d__.CSGMesh3D|__tilemap__.TileMap|__colorrect__.ColorRect|__navigationobstacle2d__.NavigationObstacle2D|__xrnode3d__.XRNode3D|__editorinspector__.EditorInspector|__httprequest__.HTTPRequest|__area2d__.Area2D|__csgcombiner3d__.CSGCombiner3D|__fogvolume__.FogVolume|__sliderjoint3d__.SliderJoint3D|__vseparator__.VSeparator|__line2d__.Line2D|__skeletonik3d__.SkeletonIK3D|__centercontainer__.CenterContainer|__editorproperty__.EditorProperty|__geometryinstance3d__.GeometryInstance3D|__tabbar__.TabBar|__meshinstance2d__.MeshInstance2D|__joint3d__.Joint3D|__worldenvironment__.WorldEnvironment|__viewport__.Viewport|__openxrinteractionprofileeditorbase__.OpenXRInteractionProfileEditorBase|__editorscriptpicker__.EditorScriptPicker|__touchscreenbutton__.TouchScreenButton|__editorfilesystem__.EditorFileSystem|__omnilight3d__.OmniLight3D|__node3d__.Node3D|__timer__.Timer|__menubutton__.MenuButton|__navigationregion2d__.NavigationRegion2D|__scrollcontainer__.ScrollContainer|__springbonecollision3d__.SpringBoneCollision3D|__multiplayerspawner__.MultiplayerSpawner|__polygon2d__.Polygon2D|__lookatmodifier3d__.LookAtModifier3D|__shaderglobalsoverride__.ShaderGlobalsOverride|__springarm3d__.SpringArm3D|__hslider__.HSlider|__hscrollbar__.HScrollBar|__vslider__.VSlider|__parallaxlayer__.ParallaxLayer|__optionbutton__.OptionButton:
    """
				Returns the edited (current) scene's root `Node`.
			"""
    pass

  def save_scene(self)->int:
    """
				Saves the currently active scene. Returns either `constant OK` or `constant ERR_CANT_CREATE`.
			"""
    pass

  def save_scene_as(self, path:str, with_preview:bool=True)->None:
    """
				Saves the currently active scene as a file at `path`.
			"""
    pass

  def save_all_scenes(self)->None:
    """
				Saves all opened scenes in the editor.
			"""
    pass

  def mark_scene_as_unsaved(self)->None:
    """
				Marks the current scene tab as unsaved.
			"""
    pass

  def play_main_scene(self)->None:
    """
				Plays the main scene.
			"""
    pass

  def play_current_scene(self)->None:
    """
				Plays the currently active scene.
			"""
    pass

  def play_custom_scene(self, scene_filepath:str)->None:
    """
				Plays the scene specified by its filepath.
			"""
    pass

  def stop_playing_scene(self)->None:
    """
				Stops the scene that is currently playing.
			"""
    pass

  def is_playing_scene(self)->bool:
    """
				Returns `true` if a scene is currently being played, `false` otherwise. Paused scenes are considered as being played.
			"""
    pass

  def get_playing_scene(self)->str:
    """
				Returns the name of the scene that is being played. If no scene is currently being played, returns an empty string.
			"""
    pass

  def set_movie_maker_enabled(self, enabled:bool)->None:
    """"""
    pass

  def is_movie_maker_enabled(self)->bool:
    """"""
    pass


