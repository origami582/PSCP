from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__
import py4godot.classes.i as __i__
import py4godot.classes.Resource as __resource__
import py4godot.classes.e as __e__
import py4godot.classes.m as __m__
import py4godot.classes.d as __d__
import py4godot.classes.T as __t__
import py4godot.classes.RDShaderSPIRV as __rdshaderspirv__
import py4godot.classes.r as __r__
import py4godot.classes.t as __t__
import py4godot.classes.p as __p__
import py4godot.classes.g as __g__
import py4godot.classes.N as __n__
import py4godot.classes.a as __a__
import py4godot.classes.S as __s__
import py4godot.classes.y as __y__



class RDShaderFile(__resource__.Resource):
  """
		Compiled shader file in SPIR-V form.
		See also `RDShaderSource`. `RDShaderFile` is only meant to be used with the `RenderingDevice` API. It should not be confused with Godot's own `Shader` resource, which is what Godot's various nodes use for high-level shader programming.
	"""

  @staticmethod
  def constructor()->RDShaderFile:pass



  @staticmethod
  def cast(other:__object__.Object)->RDShaderFile:pass


  @property
  def base_error(self)->str:
    """"""
    pass
  @base_error.setter
  def base_error(self,  value:str)->None:
    """"""
    pass
  def set_bytecode(self, bytecode:__rdshaderspirv__.RDShaderSPIRV, version:__core__.StringName|str= __core__.StringName.new0())->None:
    """
				Sets the SPIR-V `bytecode` that will be compiled for the specified `version`.
			"""
    pass

  def get_spirv(self, version:__core__.StringName|str= __core__.StringName.new0())->__rdshaderspirv__.RDShaderSPIRV:
    """
				Returns the SPIR-V intermediate representation for the specified shader `version`.
			"""
    pass

  def get_version_list(self)->typedarray::StringName:
    """
				Returns the list of compiled versions for this shader.
			"""
    pass

  def set_base_error(self, error:str)->None:
    """"""
    pass

  def get_base_error(self)->str:
    """"""
    pass


