from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CameraTexture as __cameratexture__



class VideoStreamPlayback(__resource__.Resource):
  """
		This class is intended to be overridden by video decoder extensions with custom implementations of `VideoStream`.
	"""

  @staticmethod
  def constructor()->VideoStreamPlayback:pass



  @staticmethod
  def cast(other:__object__.Object)->VideoStreamPlayback:pass


  def _stop(self)->None:
    """
				Stops playback. May be called multiple times before `_play`, or in response to `VideoStreamPlayer.stop`. `_is_playing` should return `false` once stopped.
			"""
    pass

  def _play(self)->None:
    """
				Called in response to `VideoStreamPlayer.autoplay` or `VideoStreamPlayer.play`. Note that manual playback may also invoke `_stop` multiple times before this method is called. `_is_playing` should return `true` once playing.
			"""
    pass

  def _is_playing(self)->bool:
    """
				Returns the playback state, as determined by calls to `_play` and `_stop`.
			"""
    pass

  def _set_paused(self, paused:bool)->None:
    """
				Set the paused status of video playback. `_is_paused` must return `paused`. Called in response to the `VideoStreamPlayer.paused` setter.
			"""
    pass

  def _is_paused(self)->bool:
    """
				Returns the paused status, as set by `_set_paused`.
			"""
    pass

  def _get_length(self)->float:
    """
				Returns the video duration in seconds, if known, or 0 if unknown.
			"""
    pass

  def _get_playback_position(self)->float:
    """
				Return the current playback timestamp. Called in response to the `VideoStreamPlayer.stream_position` getter.
			"""
    pass

  def _seek(self, time:float)->None:
    """
				Seeks to `time` seconds. Called in response to the `VideoStreamPlayer.stream_position` setter.
			"""
    pass

  def _set_audio_track(self, idx:int)->None:
    """
				Select the audio track `idx`. Called when playback starts, and in response to the `VideoStreamPlayer.audio_track` setter.
			"""
    pass

  def _get_texture(self)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__viewporttexture__.ViewportTexture|__placeholdertexture2d__.PlaceholderTexture2D|__atlastexture__.AtlasTexture|__gradienttexture1d__.GradientTexture1D|__animatedtexture__.AnimatedTexture|__imagetexture__.ImageTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__compressedtexture2d__.CompressedTexture2D|__canvastexture__.CanvasTexture|__texture2drd__.Texture2DRD|__curvetexture__.CurveTexture|__externaltexture__.ExternalTexture|__meshtexture__.MeshTexture|__gradienttexture2d__.GradientTexture2D|__curvexyztexture__.CurveXYZTexture|__cameratexture__.CameraTexture:
    """
				Allocates a `Texture2D` in which decoded video frames will be drawn.
			"""
    pass

  def _update(self, delta:float)->None:
    """
				Ticks video playback for `delta` seconds. Called every frame as long as both `_is_paused` and `_is_playing` return `true`.
			"""
    pass

  def _get_channels(self)->int:
    """
				Returns the number of audio channels.
			"""
    pass

  def _get_mix_rate(self)->int:
    """
				Returns the audio sample rate used for mixing.
			"""
    pass

  def mix_audio(self, num_frames:int, buffer:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0(), offset:int=0)->int:
    """
				Render `num_frames` audio frames (of `_get_channels` floats each) from `buffer`, starting from index `offset` in the array. Returns the number of audio frames rendered, or -1 on error.
			"""
    pass


