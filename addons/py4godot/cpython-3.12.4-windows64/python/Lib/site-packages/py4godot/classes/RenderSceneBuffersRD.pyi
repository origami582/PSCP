from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RDTextureView as __rdtextureview__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.RenderSceneBuffers as __renderscenebuffers__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.RDTextureFormat as __rdtextureformat__



class RenderSceneBuffersRD(__renderscenebuffers__.RenderSceneBuffers):
  """
		This object manages all 3D rendering buffers for the rendering device based renderers. An instance of this object is created for every viewport that has 3D rendering enabled.
		All buffers are organized in **contexts**. The default context is called **render_buffers** and can contain amongst others the color buffer, depth buffer, velocity buffers, VRS density map and MSAA variants of these buffers.
		Buffers are only guaranteed to exist during rendering of the viewport.
		**Note:** This is an internal rendering server object, do not instantiate this from script.
	"""

  @staticmethod
  def constructor()->RenderSceneBuffersRD:pass



  @staticmethod
  def cast(other:__object__.Object)->RenderSceneBuffersRD:pass


  def has_texture(self, context:__core__.StringName|str, name:__core__.StringName|str)->bool:
    """
				Returns `true` if a cached texture exists for this name.
			"""
    pass

  def create_texture(self, context:__core__.StringName|str, name:__core__.StringName|str, data_format:int , usage_bits:int, texture_samples:int , size:__core__.Vector2i, layers:int, mipmaps:int, unique:bool, discardable:bool)->__core__.RID:
    """
				Create a new texture with the given definition and cache this under the given name. Will return the existing texture if it already exists.
			"""
    pass

  def create_texture_from_format(self, context:__core__.StringName|str, name:__core__.StringName|str, format:__rdtextureformat__.RDTextureFormat, view:__rdtextureview__.RDTextureView, unique:bool)->__core__.RID:
    """
				Create a new texture using the given format and view and cache this under the given name. Will return the existing texture if it already exists.
			"""
    pass

  def create_texture_view(self, context:__core__.StringName|str, name:__core__.StringName|str, view_name:__core__.StringName|str, view:__rdtextureview__.RDTextureView)->__core__.RID:
    """
				Create a new texture view for an existing texture and cache this under the given `view_name`. Will return the existing texture view if it already exists. Will error if the source texture doesn't exist.
			"""
    pass

  def get_texture(self, context:__core__.StringName|str, name:__core__.StringName|str)->__core__.RID:
    """
				Returns a cached texture with this name.
			"""
    pass

  def get_texture_format(self, context:__core__.StringName|str, name:__core__.StringName|str)->__rdtextureformat__.RDTextureFormat:
    """
				Returns the texture format information with which a cached texture was created.
			"""
    pass

  def get_texture_slice(self, context:__core__.StringName|str, name:__core__.StringName|str, layer:int, mipmap:int, layers:int, mipmaps:int)->__core__.RID:
    """
				Returns a specific slice (layer or mipmap) for a cached texture.
			"""
    pass

  def get_texture_slice_view(self, context:__core__.StringName|str, name:__core__.StringName|str, layer:int, mipmap:int, layers:int, mipmaps:int, view:__rdtextureview__.RDTextureView)->__core__.RID:
    """
				Returns a specific view of a slice (layer or mipmap) for a cached texture.
			"""
    pass

  def get_texture_slice_size(self, context:__core__.StringName|str, name:__core__.StringName|str, mipmap:int)->__core__.Vector2i:
    """
				Returns the texture size of a given slice of a cached texture.
			"""
    pass

  def clear_context(self, context:__core__.StringName|str)->None:
    """
				Frees all buffers related to this context.
			"""
    pass

  def get_color_texture(self, msaa:bool=False)->__core__.RID:
    """
				Returns the color texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
				If `msaa` is `true` and MSAA is enabled, this returns the MSAA variant of the buffer.
			"""
    pass

  def get_color_layer(self, layer:int, msaa:bool=False)->__core__.RID:
    """
				Returns the specified layer from the color texture we are rendering 3D content to.
				If `msaa` is `true` and MSAA is enabled, this returns the MSAA variant of the buffer.
			"""
    pass

  def get_depth_texture(self, msaa:bool=False)->__core__.RID:
    """
				Returns the depth texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
				If `msaa` is `true` and MSAA is enabled, this returns the MSAA variant of the buffer.
			"""
    pass

  def get_depth_layer(self, layer:int, msaa:bool=False)->__core__.RID:
    """
				Returns the specified layer from the depth texture we are rendering 3D content to.
				If `msaa` is `true` and MSAA is enabled, this returns the MSAA variant of the buffer.
			"""
    pass

  def get_velocity_texture(self, msaa:bool=False)->__core__.RID:
    """
				Returns the velocity texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
				If `msaa` is **true** and MSAA is enabled, this returns the MSAA variant of the buffer.
			"""
    pass

  def get_velocity_layer(self, layer:int, msaa:bool=False)->__core__.RID:
    """
				Returns the specified layer from the velocity texture we are rendering 3D content to.
			"""
    pass

  def get_render_target(self)->__core__.RID:
    """
				Returns the render target associated with this buffers object.
			"""
    pass

  def get_view_count(self)->int:
    """
				Returns the view count for the associated viewport.
			"""
    pass

  def get_internal_size(self)->__core__.Vector2i:
    """
				Returns the internal size of the render buffer (size before upscaling) with which textures are created by default.
			"""
    pass

  def get_target_size(self)->__core__.Vector2i:
    """
				Returns the target size of the render buffer (size after upscaling).
			"""
    pass

  def get_scaling_3d_mode(self)->int:
    """
				Returns the scaling mode used for upscaling.
			"""
    pass

  def get_fsr_sharpness(self)->float:
    """
				Returns the FSR sharpness value used while rendering the 3D content (if `get_scaling_3d_mode` is an FSR mode).
			"""
    pass

  def get_msaa_3d(self)->int:
    """
				Returns the applied 3D MSAA mode for this viewport.
			"""
    pass

  def get_texture_samples(self)->int:
    """
				Returns the number of MSAA samples used.
			"""
    pass

  def get_screen_space_aa(self)->int:
    """
				Returns the screen-space antialiasing method applied.
			"""
    pass

  def get_use_taa(self)->bool:
    """
				Returns `true` if TAA is enabled.
			"""
    pass

  def get_use_debanding(self)->bool:
    """
				Returns `true` if debanding is enabled.
			"""
    pass


