from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__
from typing import Any

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRHandTracker as __xrhandtracker__
import py4godot.classes.XRPositionalTracker as __xrpositionaltracker__


class HandTrackingSource:
  HAND_TRACKING_SOURCE_UNKNOWN:int = 0
  HAND_TRACKING_SOURCE_UNOBSTRUCTED:int = 1
  HAND_TRACKING_SOURCE_CONTROLLER:int = 2
  HAND_TRACKING_SOURCE_NOT_TRACKED:int = 3
  HAND_TRACKING_SOURCE_MAX:int = 4
class HandJoint:
  HAND_JOINT_PALM:int = 0
  HAND_JOINT_WRIST:int = 1
  HAND_JOINT_THUMB_METACARPAL:int = 2
  HAND_JOINT_THUMB_PHALANX_PROXIMAL:int = 3
  HAND_JOINT_THUMB_PHALANX_DISTAL:int = 4
  HAND_JOINT_THUMB_TIP:int = 5
  HAND_JOINT_INDEX_FINGER_METACARPAL:int = 6
  HAND_JOINT_INDEX_FINGER_PHALANX_PROXIMAL:int = 7
  HAND_JOINT_INDEX_FINGER_PHALANX_INTERMEDIATE:int = 8
  HAND_JOINT_INDEX_FINGER_PHALANX_DISTAL:int = 9
  HAND_JOINT_INDEX_FINGER_TIP:int = 10
  HAND_JOINT_MIDDLE_FINGER_METACARPAL:int = 11
  HAND_JOINT_MIDDLE_FINGER_PHALANX_PROXIMAL:int = 12
  HAND_JOINT_MIDDLE_FINGER_PHALANX_INTERMEDIATE:int = 13
  HAND_JOINT_MIDDLE_FINGER_PHALANX_DISTAL:int = 14
  HAND_JOINT_MIDDLE_FINGER_TIP:int = 15
  HAND_JOINT_RING_FINGER_METACARPAL:int = 16
  HAND_JOINT_RING_FINGER_PHALANX_PROXIMAL:int = 17
  HAND_JOINT_RING_FINGER_PHALANX_INTERMEDIATE:int = 18
  HAND_JOINT_RING_FINGER_PHALANX_DISTAL:int = 19
  HAND_JOINT_RING_FINGER_TIP:int = 20
  HAND_JOINT_PINKY_FINGER_METACARPAL:int = 21
  HAND_JOINT_PINKY_FINGER_PHALANX_PROXIMAL:int = 22
  HAND_JOINT_PINKY_FINGER_PHALANX_INTERMEDIATE:int = 23
  HAND_JOINT_PINKY_FINGER_PHALANX_DISTAL:int = 24
  HAND_JOINT_PINKY_FINGER_TIP:int = 25
  HAND_JOINT_MAX:int = 26
class HandJointFlags:
  HAND_JOINT_FLAG_ORIENTATION_VALID:int = 1
  HAND_JOINT_FLAG_ORIENTATION_TRACKED:int = 2
  HAND_JOINT_FLAG_POSITION_VALID:int = 4
  HAND_JOINT_FLAG_POSITION_TRACKED:int = 8
  HAND_JOINT_FLAG_LINEAR_VELOCITY_VALID:int = 16
  HAND_JOINT_FLAG_ANGULAR_VELOCITY_VALID:int = 32


class XRHandTracker(__xrpositionaltracker__.XRPositionalTracker):
  """
		A hand tracking system will create an instance of this object and add it to the `XRServer`. This tracking system will then obtain skeleton data, convert it to the Godot Humanoid hand skeleton and store this data on the `XRHandTracker` object.
		Use `XRHandModifier3D` to animate a hand mesh using hand tracking data.
	"""

  @staticmethod
  def constructor()->XRHandTracker:pass



  @staticmethod
  def cast(other:__object__.Object)->XRHandTracker:pass


  @property
  def has_tracking_data(self)->bool:
    """"""
    pass
  @has_tracking_data.setter
  def has_tracking_data(self,  value:bool)->None:
    """"""
    pass
  @property
  def hand_tracking_source(self)->int:
    """"""
    pass
  @hand_tracking_source.setter
  def hand_tracking_source(self,  value:int)->None:
    """"""
    pass
  def set_has_tracking_data(self, has_data:bool)->None:
    """"""
    pass

  def get_has_tracking_data(self)->bool:
    """"""
    pass

  def set_hand_tracking_source(self, source:int )->None:
    """"""
    pass

  def get_hand_tracking_source(self)->int:
    """"""
    pass

  def set_hand_joint_flags(self, joint:int , flags:int)->None:
    """
				Sets flags about the validity of the tracking data for the given hand joint.
			"""
    pass

  def get_hand_joint_flags(self, joint:int )->int:
    """
				Returns flags about the validity of the tracking data for the given hand joint.
			"""
    pass

  def set_hand_joint_transform(self, joint:int , transform:__core__.Transform3D)->None:
    """
				Sets the transform for the given hand joint.
			"""
    pass

  def get_hand_joint_transform(self, joint:int )->__core__.Transform3D:
    """
				Returns the transform for the given hand joint.
			"""
    pass

  def set_hand_joint_radius(self, joint:int , radius:float)->None:
    """
				Sets the radius of the given hand joint.
			"""
    pass

  def get_hand_joint_radius(self, joint:int )->float:
    """
				Returns the radius of the given hand joint.
			"""
    pass

  def set_hand_joint_linear_velocity(self, joint:int , linear_velocity:__core__.Vector3)->None:
    """
				Sets the linear velocity for the given hand joint.
			"""
    pass

  def get_hand_joint_linear_velocity(self, joint:int )->__core__.Vector3:
    """
				Returns the linear velocity for the given hand joint.
			"""
    pass

  def set_hand_joint_angular_velocity(self, joint:int , angular_velocity:__core__.Vector3)->None:
    """
				Sets the angular velocity for the given hand joint.
			"""
    pass

  def get_hand_joint_angular_velocity(self, joint:int )->__core__.Vector3:
    """
				Returns the angular velocity for the given hand joint.
			"""
    pass


